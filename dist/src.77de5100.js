// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/parcel-bundler/src/builtins/_empty.js":[function(require,module,exports) {

},{}],"../node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"../node_modules/ieee754/index.js":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"../node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"../node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"../node_modules/base64-js/index.js","ieee754":"../node_modules/ieee754/index.js","isarray":"../node_modules/isarray/index.js","buffer":"../node_modules/buffer/index.js"}],"../node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}
(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }
  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();
function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  }
  // if setTimeout wasn't available but was latter defined
  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}
function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  }
  // if clearTimeout wasn't available but was latter defined
  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }
  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }
  draining = false;
  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }
  if (queue.length) {
    drainQueue();
  }
}
function drainQueue() {
  if (draining) {
    return;
  }
  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;
  while (len) {
    currentQueue = queue;
    queue = [];
    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }
    queueIndex = -1;
    len = queue.length;
  }
  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}
process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);
  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }
  queue.push(new Item(fun, args));
  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
};

// v8 likes predictible objects
function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}
Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};
process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function (name) {
  return [];
};
process.binding = function (name) {
  throw new Error('process.binding is not supported');
};
process.cwd = function () {
  return '/';
};
process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
process.umask = function () {
  return 0;
};
},{}],"../node_modules/fabric/dist/fabric.js":[function(require,module,exports) {
var define;
var Buffer = require("buffer").Buffer;
var global = arguments[3];
var process = require("process");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/* build: `node build.js modules=ALL exclude=gestures,accessors,erasing requirejs minifier=uglifyjs` */
/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */

var fabric = fabric || {
  version: '5.3.0'
};
if (typeof exports !== 'undefined') {
  exports.fabric = fabric;
}
/* _AMD_START_ */else if (typeof define === 'function' && define.amd) {
  define([], function () {
    return fabric;
  });
}
/* _AMD_END_ */
if (typeof document !== 'undefined' && typeof window !== 'undefined') {
  if (document instanceof (typeof HTMLDocument !== 'undefined' ? HTMLDocument : Document)) {
    fabric.document = document;
  } else {
    fabric.document = document.implementation.createHTMLDocument('');
  }
  fabric.window = window;
} else {
  // assume we're running under node.js when document/window are not present
  var jsdom = require('jsdom');
  var virtualWindow = new jsdom.JSDOM(decodeURIComponent('%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E'), {
    features: {
      FetchExternalResources: ['img']
    },
    resources: 'usable'
  }).window;
  fabric.document = virtualWindow.document;
  fabric.jsdomImplForWrapper = require('jsdom/lib/jsdom/living/generated/utils').implForWrapper;
  fabric.nodeCanvas = require('jsdom/lib/jsdom/utils').Canvas;
  fabric.window = virtualWindow;
  DOMParser = fabric.window.DOMParser;
}

/**
 * True when in environment that supports touch events
 * @type boolean
 */
fabric.isTouchSupported = 'ontouchstart' in fabric.window || 'ontouchstart' in fabric.document || fabric.window && fabric.window.navigator && fabric.window.navigator.maxTouchPoints > 0;

/**
 * True when in environment that's probably Node.js
 * @type boolean
 */
fabric.isLikelyNode = typeof Buffer !== 'undefined' && typeof window === 'undefined';

/* _FROM_SVG_START_ */
/**
 * Attributes parsed from all SVG elements
 * @type array
 */
fabric.SHARED_ATTRIBUTES = ['display', 'transform', 'fill', 'fill-opacity', 'fill-rule', 'opacity', 'stroke', 'stroke-dasharray', 'stroke-linecap', 'stroke-dashoffset', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'id', 'paint-order', 'vector-effect', 'instantiated_by_use', 'clip-path'];
/* _FROM_SVG_END_ */

/**
 * Pixel per Inch as a default value set to 96. Can be changed for more realistic conversion.
 */
fabric.DPI = 96;
fabric.reNum = '(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)';
fabric.commaWsp = '(?:\\s+,?\\s*|,\\s*)';
fabric.rePathCommand = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/ig;
fabric.reNonWord = /[ \n\.,;!\?\-]/;
fabric.fontPaths = {};
fabric.iMatrix = [1, 0, 0, 1, 0, 0];
fabric.svgNS = 'http://www.w3.org/2000/svg';

/**
 * Pixel limit for cache canvases. 1Mpx , 4Mpx should be fine.
 * @since 1.7.14
 * @type Number
 * @default
 */
fabric.perfLimitSizeTotal = 2097152;

/**
 * Pixel limit for cache canvases width or height. IE fixes the maximum at 5000
 * @since 1.7.14
 * @type Number
 * @default
 */
fabric.maxCacheSideLimit = 4096;

/**
 * Lowest pixel limit for cache canvases, set at 256PX
 * @since 1.7.14
 * @type Number
 * @default
 */
fabric.minCacheSideLimit = 256;

/**
 * Cache Object for widths of chars in text rendering.
 */
fabric.charWidthsCache = {};

/**
 * if webgl is enabled and available, textureSize will determine the size
 * of the canvas backend
 * @since 2.0.0
 * @type Number
 * @default
 */
fabric.textureSize = 2048;

/**
 * When 'true', style information is not retained when copy/pasting text, making
 * pasted text use destination style.
 * Defaults to 'false'.
 * @type Boolean
 * @default
 */
fabric.disableStyleCopyPaste = false;

/**
 * Enable webgl for filtering picture is available
 * A filtering backend will be initialized, this will both take memory and
 * time since a default 2048x2048 canvas will be created for the gl context
 * @since 2.0.0
 * @type Boolean
 * @default
 */
fabric.enableGLFiltering = true;

/**
 * Device Pixel Ratio
 * @see https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/HTML-canvas-guide/SettingUptheCanvas/SettingUptheCanvas.html
 */
fabric.devicePixelRatio = fabric.window.devicePixelRatio || fabric.window.webkitDevicePixelRatio || fabric.window.mozDevicePixelRatio || 1;
/**
 * Browser-specific constant to adjust CanvasRenderingContext2D.shadowBlur value,
 * which is unitless and not rendered equally across browsers.
 *
 * Values that work quite well (as of October 2017) are:
 * - Chrome: 1.5
 * - Edge: 1.75
 * - Firefox: 0.9
 * - Safari: 0.95
 *
 * @since 2.0.0
 * @type Number
 * @default 1
 */
fabric.browserShadowBlurConstant = 1;

/**
 * This object contains the result of arc to bezier conversion for faster retrieving if the same arc needs to be converted again.
 * It was an internal variable, is accessible since version 2.3.4
 */
fabric.arcToSegmentsCache = {};

/**
 * This object keeps the results of the boundsOfCurve calculation mapped by the joined arguments necessary to calculate it.
 * It does speed up calculation, if you parse and add always the same paths, but in case of heavy usage of freedrawing
 * you do not get any speed benefit and you get a big object in memory.
 * The object was a private variable before, while now is appended to the lib so that you have access to it and you
 * can eventually clear it.
 * It was an internal variable, is accessible since version 2.3.4
 */
fabric.boundsOfCurveCache = {};

/**
 * If disabled boundsOfCurveCache is not used. For apps that make heavy usage of pencil drawing probably disabling it is better
 * @default true
 */
fabric.cachesBoundsOfCurve = true;

/**
 * Skip performance testing of setupGLContext and force the use of putImageData that seems to be the one that works best on
 * Chrome + old hardware. if your users are experiencing empty images after filtering you may try to force this to true
 * this has to be set before instantiating the filtering backend ( before filtering the first image )
 * @type Boolean
 * @default false
 */
fabric.forceGLPutImageData = false;
fabric.initFilterBackend = function () {
  if (fabric.enableGLFiltering && fabric.isWebglSupported && fabric.isWebglSupported(fabric.textureSize)) {
    console.log('max texture size: ' + fabric.maxTextureSize);
    return new fabric.WebglFilterBackend({
      tileSize: fabric.textureSize
    });
  } else if (fabric.Canvas2dFilterBackend) {
    return new fabric.Canvas2dFilterBackend();
  }
};
if (typeof document !== 'undefined' && typeof window !== 'undefined') {
  // ensure globality even if entire library were function wrapped (as in Meteor.js packaging system)
  window.fabric = fabric;
}
(function () {
  /**
   * @private
   * @param {String} eventName
   * @param {Function} handler
   */
  function _removeEventListener(eventName, handler) {
    if (!this.__eventListeners[eventName]) {
      return;
    }
    var eventListener = this.__eventListeners[eventName];
    if (handler) {
      eventListener[eventListener.indexOf(handler)] = false;
    } else {
      fabric.util.array.fill(eventListener, false);
    }
  }

  /**
   * Observes specified event
   * @memberOf fabric.Observable
   * @alias on
   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
   * @param {Function} handler Function that receives a notification when an event of the specified type occurs
   * @return {Self} thisArg
   * @chainable
   */
  function on(eventName, handler) {
    if (!this.__eventListeners) {
      this.__eventListeners = {};
    }
    // one object with key/value pairs was passed
    if (arguments.length === 1) {
      for (var prop in eventName) {
        this.on(prop, eventName[prop]);
      }
    } else {
      if (!this.__eventListeners[eventName]) {
        this.__eventListeners[eventName] = [];
      }
      this.__eventListeners[eventName].push(handler);
    }
    return this;
  }
  function _once(eventName, handler) {
    var _handler = function () {
      handler.apply(this, arguments);
      this.off(eventName, _handler);
    }.bind(this);
    this.on(eventName, _handler);
  }
  function once(eventName, handler) {
    // one object with key/value pairs was passed
    if (arguments.length === 1) {
      for (var prop in eventName) {
        _once.call(this, prop, eventName[prop]);
      }
    } else {
      _once.call(this, eventName, handler);
    }
    return this;
  }

  /**
   * Stops event observing for a particular event handler. Calling this method
   * without arguments removes all handlers for all events
   * @memberOf fabric.Observable
   * @alias off
   * @param {String|Object} eventName Event name (eg. 'after:render') or object with key/value pairs (eg. {'after:render': handler, 'selection:cleared': handler})
   * @param {Function} handler Function to be deleted from EventListeners
   * @return {Self} thisArg
   * @chainable
   */
  function off(eventName, handler) {
    if (!this.__eventListeners) {
      return this;
    }

    // remove all key/value pairs (event name -> event handler)
    if (arguments.length === 0) {
      for (eventName in this.__eventListeners) {
        _removeEventListener.call(this, eventName);
      }
    }
    // one object with key/value pairs was passed
    else if (arguments.length === 1 && _typeof(arguments[0]) === 'object') {
      for (var prop in eventName) {
        _removeEventListener.call(this, prop, eventName[prop]);
      }
    } else {
      _removeEventListener.call(this, eventName, handler);
    }
    return this;
  }

  /**
   * Fires event with an optional options object
   * @memberOf fabric.Observable
   * @param {String} eventName Event name to fire
   * @param {Object} [options] Options object
   * @return {Self} thisArg
   * @chainable
   */
  function fire(eventName, options) {
    if (!this.__eventListeners) {
      return this;
    }
    var listenersForEvent = this.__eventListeners[eventName];
    if (!listenersForEvent) {
      return this;
    }
    for (var i = 0, len = listenersForEvent.length; i < len; i++) {
      listenersForEvent[i] && listenersForEvent[i].call(this, options || {});
    }
    this.__eventListeners[eventName] = listenersForEvent.filter(function (value) {
      return value !== false;
    });
    return this;
  }

  /**
   * @namespace fabric.Observable
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#events}
   * @see {@link http://fabricjs.com/events|Events demo}
   */
  fabric.Observable = {
    fire: fire,
    on: on,
    once: once,
    off: off
  };
})();

/**
 * @namespace fabric.Collection
 */
fabric.Collection = {
  _objects: [],
  /**
   * Adds objects to collection, Canvas or Group, then renders canvas
   * (if `renderOnAddRemove` is not `false`).
   * in case of Group no changes to bounding box are made.
   * Objects should be instances of (or inherit from) fabric.Object
   * Use of this function is highly discouraged for groups.
   * you can add a bunch of objects with the add method but then you NEED
   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
   * @param {...fabric.Object} object Zero or more fabric instances
   * @return {Self} thisArg
   * @chainable
   */
  add: function add() {
    this._objects.push.apply(this._objects, arguments);
    if (this._onObjectAdded) {
      for (var i = 0, length = arguments.length; i < length; i++) {
        this._onObjectAdded(arguments[i]);
      }
    }
    this.renderOnAddRemove && this.requestRenderAll();
    return this;
  },
  /**
   * Inserts an object into collection at specified index, then renders canvas (if `renderOnAddRemove` is not `false`)
   * An object should be an instance of (or inherit from) fabric.Object
   * Use of this function is highly discouraged for groups.
   * you can add a bunch of objects with the insertAt method but then you NEED
   * to run a addWithUpdate call for the Group class or position/bbox will be wrong.
   * @param {Object} object Object to insert
   * @param {Number} index Index to insert object at
   * @param {Boolean} nonSplicing When `true`, no splicing (shifting) of objects occurs
   * @return {Self} thisArg
   * @chainable
   */
  insertAt: function insertAt(object, index, nonSplicing) {
    var objects = this._objects;
    if (nonSplicing) {
      objects[index] = object;
    } else {
      objects.splice(index, 0, object);
    }
    this._onObjectAdded && this._onObjectAdded(object);
    this.renderOnAddRemove && this.requestRenderAll();
    return this;
  },
  /**
   * Removes objects from a collection, then renders canvas (if `renderOnAddRemove` is not `false`)
   * @param {...fabric.Object} object Zero or more fabric instances
   * @return {Self} thisArg
   * @chainable
   */
  remove: function remove() {
    var objects = this._objects,
      index,
      somethingRemoved = false;
    for (var i = 0, length = arguments.length; i < length; i++) {
      index = objects.indexOf(arguments[i]);

      // only call onObjectRemoved if an object was actually removed
      if (index !== -1) {
        somethingRemoved = true;
        objects.splice(index, 1);
        this._onObjectRemoved && this._onObjectRemoved(arguments[i]);
      }
    }
    this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();
    return this;
  },
  /**
   * Executes given function for each object in this group
   * @param {Function} callback
   *                   Callback invoked with current object as first argument,
   *                   index - as second and an array of all objects - as third.
   *                   Callback is invoked in a context of Global Object (e.g. `window`)
   *                   when no `context` argument is given
   *
   * @param {Object} context Context (aka thisObject)
   * @return {Self} thisArg
   * @chainable
   */
  forEachObject: function forEachObject(callback, context) {
    var objects = this.getObjects();
    for (var i = 0, len = objects.length; i < len; i++) {
      callback.call(context, objects[i], i, objects);
    }
    return this;
  },
  /**
   * Returns an array of children objects of this instance
   * Type parameter introduced in 1.3.10
   * since 2.3.5 this method return always a COPY of the array;
   * @param {String} [type] When specified, only objects of this type are returned
   * @return {Array}
   */
  getObjects: function getObjects(type) {
    if (typeof type === 'undefined') {
      return this._objects.concat();
    }
    return this._objects.filter(function (o) {
      return o.type === type;
    });
  },
  /**
   * Returns object at specified index
   * @param {Number} index
   * @return {Self} thisArg
   */
  item: function item(index) {
    return this._objects[index];
  },
  /**
   * Returns true if collection contains no objects
   * @return {Boolean} true if collection is empty
   */
  isEmpty: function isEmpty() {
    return this._objects.length === 0;
  },
  /**
   * Returns a size of a collection (i.e: length of an array containing its objects)
   * @return {Number} Collection size
   */
  size: function size() {
    return this._objects.length;
  },
  /**
   * Returns true if collection contains an object
   * @param {Object} object Object to check against
   * @param {Boolean} [deep=false] `true` to check all descendants, `false` to check only `_objects`
   * @return {Boolean} `true` if collection contains an object
   */
  contains: function contains(object, deep) {
    if (this._objects.indexOf(object) > -1) {
      return true;
    } else if (deep) {
      return this._objects.some(function (obj) {
        return typeof obj.contains === 'function' && obj.contains(object, true);
      });
    }
    return false;
  },
  /**
   * Returns number representation of a collection complexity
   * @return {Number} complexity
   */
  complexity: function complexity() {
    return this._objects.reduce(function (memo, current) {
      memo += current.complexity ? current.complexity() : 0;
      return memo;
    }, 0);
  }
};

/**
 * @namespace fabric.CommonMethods
 */
fabric.CommonMethods = {
  /**
   * Sets object's properties from options
   * @param {Object} [options] Options object
   */
  _setOptions: function _setOptions(options) {
    for (var prop in options) {
      this.set(prop, options[prop]);
    }
  },
  /**
   * @private
   * @param {Object} [filler] Options object
   * @param {String} [property] property to set the Gradient to
   */
  _initGradient: function _initGradient(filler, property) {
    if (filler && filler.colorStops && !(filler instanceof fabric.Gradient)) {
      this.set(property, new fabric.Gradient(filler));
    }
  },
  /**
   * @private
   * @param {Object} [filler] Options object
   * @param {String} [property] property to set the Pattern to
   * @param {Function} [callback] callback to invoke after pattern load
   */
  _initPattern: function _initPattern(filler, property, callback) {
    if (filler && filler.source && !(filler instanceof fabric.Pattern)) {
      this.set(property, new fabric.Pattern(filler, callback));
    } else {
      callback && callback();
    }
  },
  /**
   * @private
   */
  _setObject: function _setObject(obj) {
    for (var prop in obj) {
      this._set(prop, obj[prop]);
    }
  },
  /**
   * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
   * @param {String|Object} key Property name or object (if object, iterate over the object properties)
   * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
   * @return {fabric.Object} thisArg
   * @chainable
   */
  set: function set(key, value) {
    if (_typeof(key) === 'object') {
      this._setObject(key);
    } else {
      this._set(key, value);
    }
    return this;
  },
  _set: function _set(key, value) {
    this[key] = value;
  },
  /**
   * Toggles specified property from `true` to `false` or from `false` to `true`
   * @param {String} property Property to toggle
   * @return {fabric.Object} thisArg
   * @chainable
   */
  toggle: function toggle(property) {
    var value = this.get(property);
    if (typeof value === 'boolean') {
      this.set(property, !value);
    }
    return this;
  },
  /**
   * Basic getter
   * @param {String} property Property name
   * @return {*} value of a property
   */
  get: function get(property) {
    return this[property];
  }
};
(function (global) {
  var sqrt = Math.sqrt,
    atan2 = Math.atan2,
    pow = Math.pow,
    PiBy180 = Math.PI / 180,
    PiBy2 = Math.PI / 2;

  /**
   * @namespace fabric.util
   */
  fabric.util = {
    /**
     * Calculate the cos of an angle, avoiding returning floats for known results
     * @static
     * @memberOf fabric.util
     * @param {Number} angle the angle in radians or in degree
     * @return {Number}
     */
    cos: function cos(angle) {
      if (angle === 0) {
        return 1;
      }
      if (angle < 0) {
        // cos(a) = cos(-a)
        angle = -angle;
      }
      var angleSlice = angle / PiBy2;
      switch (angleSlice) {
        case 1:
        case 3:
          return 0;
        case 2:
          return -1;
      }
      return Math.cos(angle);
    },
    /**
     * Calculate the sin of an angle, avoiding returning floats for known results
     * @static
     * @memberOf fabric.util
     * @param {Number} angle the angle in radians or in degree
     * @return {Number}
     */
    sin: function sin(angle) {
      if (angle === 0) {
        return 0;
      }
      var angleSlice = angle / PiBy2,
        sign = 1;
      if (angle < 0) {
        // sin(-a) = -sin(a)
        sign = -1;
      }
      switch (angleSlice) {
        case 1:
          return sign;
        case 2:
          return 0;
        case 3:
          return -sign;
      }
      return Math.sin(angle);
    },
    /**
     * Removes value from an array.
     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`
     * @static
     * @memberOf fabric.util
     * @param {Array} array
     * @param {*} value
     * @return {Array} original array
     */
    removeFromArray: function removeFromArray(array, value) {
      var idx = array.indexOf(value);
      if (idx !== -1) {
        array.splice(idx, 1);
      }
      return array;
    },
    /**
     * Returns random number between 2 specified ones.
     * @static
     * @memberOf fabric.util
     * @param {Number} min lower limit
     * @param {Number} max upper limit
     * @return {Number} random value (between min and max)
     */
    getRandomInt: function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    },
    /**
     * Transforms degrees to radians.
     * @static
     * @memberOf fabric.util
     * @param {Number} degrees value in degrees
     * @return {Number} value in radians
     */
    degreesToRadians: function degreesToRadians(degrees) {
      return degrees * PiBy180;
    },
    /**
     * Transforms radians to degrees.
     * @static
     * @memberOf fabric.util
     * @param {Number} radians value in radians
     * @return {Number} value in degrees
     */
    radiansToDegrees: function radiansToDegrees(radians) {
      return radians / PiBy180;
    },
    /**
     * Rotates `point` around `origin` with `radians`
     * @static
     * @memberOf fabric.util
     * @param {fabric.Point} point The point to rotate
     * @param {fabric.Point} origin The origin of the rotation
     * @param {Number} radians The radians of the angle for the rotation
     * @return {fabric.Point} The new rotated point
     */
    rotatePoint: function rotatePoint(point, origin, radians) {
      var newPoint = new fabric.Point(point.x - origin.x, point.y - origin.y),
        v = fabric.util.rotateVector(newPoint, radians);
      return new fabric.Point(v.x, v.y).addEquals(origin);
    },
    /**
     * Rotates `vector` with `radians`
     * @static
     * @memberOf fabric.util
     * @param {Object} vector The vector to rotate (x and y)
     * @param {Number} radians The radians of the angle for the rotation
     * @return {Object} The new rotated point
     */
    rotateVector: function rotateVector(vector, radians) {
      var sin = fabric.util.sin(radians),
        cos = fabric.util.cos(radians),
        rx = vector.x * cos - vector.y * sin,
        ry = vector.x * sin + vector.y * cos;
      return {
        x: rx,
        y: ry
      };
    },
    /**
     * Creates a vetor from points represented as a point
     * @static
     * @memberOf fabric.util
     *
     * @typedef {Object} Point
     * @property {number} x
     * @property {number} y
     *
     * @param {Point} from
     * @param {Point} to
     * @returns {Point} vector
     */
    createVector: function createVector(from, to) {
      return new fabric.Point(to.x - from.x, to.y - from.y);
    },
    /**
     * Calculates angle between 2 vectors using dot product
     * @static
     * @memberOf fabric.util
     * @param {Point} a
     * @param {Point} b
     * @returns the angle in radian between the vectors
     */
    calcAngleBetweenVectors: function calcAngleBetweenVectors(a, b) {
      return Math.acos((a.x * b.x + a.y * b.y) / (Math.hypot(a.x, a.y) * Math.hypot(b.x, b.y)));
    },
    /**
     * @static
     * @memberOf fabric.util
     * @param {Point} v
     * @returns {Point} vector representing the unit vector of pointing to the direction of `v`
     */
    getHatVector: function getHatVector(v) {
      return new fabric.Point(v.x, v.y).multiply(1 / Math.hypot(v.x, v.y));
    },
    /**
     * @static
     * @memberOf fabric.util
     * @param {Point} A
     * @param {Point} B
     * @param {Point} C
     * @returns {{ vector: Point, angle: number }} vector representing the bisector of A and A's angle
     */
    getBisector: function getBisector(A, B, C) {
      var AB = fabric.util.createVector(A, B),
        AC = fabric.util.createVector(A, C);
      var alpha = fabric.util.calcAngleBetweenVectors(AB, AC);
      //  check if alpha is relative to AB->BC
      var ro = fabric.util.calcAngleBetweenVectors(fabric.util.rotateVector(AB, alpha), AC);
      var phi = alpha * (ro === 0 ? 1 : -1) / 2;
      return {
        vector: fabric.util.getHatVector(fabric.util.rotateVector(AB, phi)),
        angle: alpha
      };
    },
    /**
     * Project stroke width on points returning 2 projections for each point as follows:
     * - `miter`: 2 points corresponding to the outer boundary and the inner boundary of stroke.
     * - `bevel`: 2 points corresponding to the bevel boundaries, tangent to the bisector.
     * - `round`: same as `bevel`
     * Used to calculate object's bounding box
     * @static
     * @memberOf fabric.util
     * @param {Point[]} points
     * @param {Object} options
     * @param {number} options.strokeWidth
     * @param {'miter'|'bevel'|'round'} options.strokeLineJoin
     * @param {number} options.strokeMiterLimit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-miterlimit
     * @param {boolean} options.strokeUniform
     * @param {number} options.scaleX
     * @param {number} options.scaleY
     * @param {boolean} [openPath] whether the shape is open or not, affects the calculations of the first and last points
     * @returns {fabric.Point[]} array of size 2n/4n of all suspected points
     */
    projectStrokeOnPoints: function projectStrokeOnPoints(points, options, openPath) {
      var coords = [],
        s = options.strokeWidth / 2,
        strokeUniformScalar = options.strokeUniform ? new fabric.Point(1 / options.scaleX, 1 / options.scaleY) : new fabric.Point(1, 1),
        getStrokeHatVector = function getStrokeHatVector(v) {
          var scalar = s / Math.hypot(v.x, v.y);
          return new fabric.Point(v.x * scalar * strokeUniformScalar.x, v.y * scalar * strokeUniformScalar.y);
        };
      if (points.length <= 1) {
        return coords;
      }
      points.forEach(function (p, index) {
        var A = new fabric.Point(p.x, p.y),
          B,
          C;
        if (index === 0) {
          C = points[index + 1];
          B = openPath ? getStrokeHatVector(fabric.util.createVector(C, A)).addEquals(A) : points[points.length - 1];
        } else if (index === points.length - 1) {
          B = points[index - 1];
          C = openPath ? getStrokeHatVector(fabric.util.createVector(B, A)).addEquals(A) : points[0];
        } else {
          B = points[index - 1];
          C = points[index + 1];
        }
        var bisector = fabric.util.getBisector(A, B, C),
          bisectorVector = bisector.vector,
          alpha = bisector.angle,
          scalar,
          miterVector;
        if (options.strokeLineJoin === 'miter') {
          scalar = -s / Math.sin(alpha / 2);
          miterVector = new fabric.Point(bisectorVector.x * scalar * strokeUniformScalar.x, bisectorVector.y * scalar * strokeUniformScalar.y);
          if (Math.hypot(miterVector.x, miterVector.y) / s <= options.strokeMiterLimit) {
            coords.push(A.add(miterVector));
            coords.push(A.subtract(miterVector));
            return;
          }
        }
        scalar = -s * Math.SQRT2;
        miterVector = new fabric.Point(bisectorVector.x * scalar * strokeUniformScalar.x, bisectorVector.y * scalar * strokeUniformScalar.y);
        coords.push(A.add(miterVector));
        coords.push(A.subtract(miterVector));
      });
      return coords;
    },
    /**
     * Apply transform t to point p
     * @static
     * @memberOf fabric.util
     * @param  {fabric.Point} p The point to transform
     * @param  {Array} t The transform
     * @param  {Boolean} [ignoreOffset] Indicates that the offset should not be applied
     * @return {fabric.Point} The transformed point
     */
    transformPoint: function transformPoint(p, t, ignoreOffset) {
      if (ignoreOffset) {
        return new fabric.Point(t[0] * p.x + t[2] * p.y, t[1] * p.x + t[3] * p.y);
      }
      return new fabric.Point(t[0] * p.x + t[2] * p.y + t[4], t[1] * p.x + t[3] * p.y + t[5]);
    },
    /**
     * Returns coordinates of points's bounding rectangle (left, top, width, height)
     * @param {Array} points 4 points array
     * @param {Array} [transform] an array of 6 numbers representing a 2x3 transform matrix
     * @return {Object} Object with left, top, width, height properties
     */
    makeBoundingBoxFromPoints: function makeBoundingBoxFromPoints(points, transform) {
      if (transform) {
        for (var i = 0; i < points.length; i++) {
          points[i] = fabric.util.transformPoint(points[i], transform);
        }
      }
      var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x],
        minX = fabric.util.array.min(xPoints),
        maxX = fabric.util.array.max(xPoints),
        width = maxX - minX,
        yPoints = [points[0].y, points[1].y, points[2].y, points[3].y],
        minY = fabric.util.array.min(yPoints),
        maxY = fabric.util.array.max(yPoints),
        height = maxY - minY;
      return {
        left: minX,
        top: minY,
        width: width,
        height: height
      };
    },
    /**
     * Invert transformation t
     * @static
     * @memberOf fabric.util
     * @param {Array} t The transform
     * @return {Array} The inverted transform
     */
    invertTransform: function invertTransform(t) {
      var a = 1 / (t[0] * t[3] - t[1] * t[2]),
        r = [a * t[3], -a * t[1], -a * t[2], a * t[0]],
        o = fabric.util.transformPoint({
          x: t[4],
          y: t[5]
        }, r, true);
      r[4] = -o.x;
      r[5] = -o.y;
      return r;
    },
    /**
     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.
     * @static
     * @memberOf fabric.util
     * @param {Number|String} number number to operate on
     * @param {Number} fractionDigits number of fraction digits to "leave"
     * @return {Number}
     */
    toFixed: function toFixed(number, fractionDigits) {
      return parseFloat(Number(number).toFixed(fractionDigits));
    },
    /**
     * Converts from attribute value to pixel value if applicable.
     * Returns converted pixels or original value not converted.
     * @param {Number|String} value number to operate on
     * @param {Number} fontSize
     * @return {Number|String}
     */
    parseUnit: function parseUnit(value, fontSize) {
      var unit = /\D{0,2}$/.exec(value),
        number = parseFloat(value);
      if (!fontSize) {
        fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;
      }
      switch (unit[0]) {
        case 'mm':
          return number * fabric.DPI / 25.4;
        case 'cm':
          return number * fabric.DPI / 2.54;
        case 'in':
          return number * fabric.DPI;
        case 'pt':
          return number * fabric.DPI / 72;
        // or * 4 / 3

        case 'pc':
          return number * fabric.DPI / 72 * 12;
        // or * 16

        case 'em':
          return number * fontSize;
        default:
          return number;
      }
    },
    /**
     * Function which always returns `false`.
     * @static
     * @memberOf fabric.util
     * @return {Boolean}
     */
    falseFunction: function falseFunction() {
      return false;
    },
    /**
     * Returns klass "Class" object of given namespace
     * @memberOf fabric.util
     * @param {String} type Type of object (eg. 'circle')
     * @param {String} namespace Namespace to get klass "Class" object from
     * @return {Object} klass "Class"
     */
    getKlass: function getKlass(type, namespace) {
      // capitalize first letter only
      type = fabric.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));
      return fabric.util.resolveNamespace(namespace)[type];
    },
    /**
     * Returns array of attributes for given svg that fabric parses
     * @memberOf fabric.util
     * @param {String} type Type of svg element (eg. 'circle')
     * @return {Array} string names of supported attributes
     */
    getSvgAttributes: function getSvgAttributes(type) {
      var attributes = ['instantiated_by_use', 'style', 'id', 'class'];
      switch (type) {
        case 'linearGradient':
          attributes = attributes.concat(['x1', 'y1', 'x2', 'y2', 'gradientUnits', 'gradientTransform']);
          break;
        case 'radialGradient':
          attributes = attributes.concat(['gradientUnits', 'gradientTransform', 'cx', 'cy', 'r', 'fx', 'fy', 'fr']);
          break;
        case 'stop':
          attributes = attributes.concat(['offset', 'stop-color', 'stop-opacity']);
          break;
      }
      return attributes;
    },
    /**
     * Returns object of given namespace
     * @memberOf fabric.util
     * @param {String} namespace Namespace string e.g. 'fabric.Image.filter' or 'fabric'
     * @return {Object} Object for given namespace (default fabric)
     */
    resolveNamespace: function resolveNamespace(namespace) {
      if (!namespace) {
        return fabric;
      }
      var parts = namespace.split('.'),
        len = parts.length,
        i,
        obj = global || fabric.window;
      for (i = 0; i < len; ++i) {
        obj = obj[parts[i]];
      }
      return obj;
    },
    /**
     * Loads image element from given url and passes it to a callback
     * @memberOf fabric.util
     * @param {String} url URL representing an image
     * @param {Function} callback Callback; invoked with loaded image
     * @param {*} [context] Context to invoke callback in
     * @param {Object} [crossOrigin] crossOrigin value to set image element to
     */
    loadImage: function loadImage(url, callback, context, crossOrigin) {
      if (!url) {
        callback && callback.call(context, url);
        return;
      }
      var img = fabric.util.createImage();

      /** @ignore */
      var onLoadCallback = function onLoadCallback() {
        callback && callback.call(context, img, false);
        img = img.onload = img.onerror = null;
      };
      img.onload = onLoadCallback;
      /** @ignore */
      img.onerror = function () {
        fabric.log('Error loading ' + img.src);
        callback && callback.call(context, null, true);
        img = img.onload = img.onerror = null;
      };

      // data-urls appear to be buggy with crossOrigin
      // https://github.com/kangax/fabric.js/commit/d0abb90f1cd5c5ef9d2a94d3fb21a22330da3e0a#commitcomment-4513767
      // see https://code.google.com/p/chromium/issues/detail?id=315152
      //     https://bugzilla.mozilla.org/show_bug.cgi?id=935069
      // crossOrigin null is the same as not set.
      if (url.indexOf('data') !== 0 && crossOrigin !== undefined && crossOrigin !== null) {
        img.crossOrigin = crossOrigin;
      }

      // IE10 / IE11-Fix: SVG contents from data: URI
      // will only be available if the IMG is present
      // in the DOM (and visible)
      if (url.substring(0, 14) === 'data:image/svg') {
        img.onload = null;
        fabric.util.loadImageInDom(img, onLoadCallback);
      }
      img.src = url;
    },
    /**
     * Attaches SVG image with data: URL to the dom
     * @memberOf fabric.util
     * @param {Object} img Image object with data:image/svg src
     * @param {Function} callback Callback; invoked with loaded image
     * @return {Object} DOM element (div containing the SVG image)
     */
    loadImageInDom: function loadImageInDom(img, onLoadCallback) {
      var div = fabric.document.createElement('div');
      div.style.width = div.style.height = '1px';
      div.style.left = div.style.top = '-100%';
      div.style.position = 'absolute';
      div.appendChild(img);
      fabric.document.querySelector('body').appendChild(div);
      /**
       * Wrap in function to:
       *   1. Call existing callback
       *   2. Cleanup DOM
       */
      img.onload = function () {
        onLoadCallback();
        div.parentNode.removeChild(div);
        div = null;
      };
    },
    /**
     * Creates corresponding fabric instances from their object representations
     * @static
     * @memberOf fabric.util
     * @param {Array} objects Objects to enliven
     * @param {Function} callback Callback to invoke when all objects are created
     * @param {String} namespace Namespace to get klass "Class" object from
     * @param {Function} reviver Method for further parsing of object elements,
     * called after each fabric object created.
     */
    enlivenObjects: function enlivenObjects(objects, callback, namespace, reviver) {
      objects = objects || [];
      var enlivenedObjects = [],
        numLoadedObjects = 0,
        numTotalObjects = objects.length;
      function onLoaded() {
        if (++numLoadedObjects === numTotalObjects) {
          callback && callback(enlivenedObjects.filter(function (obj) {
            // filter out undefined objects (objects that gave error)
            return obj;
          }));
        }
      }
      if (!numTotalObjects) {
        callback && callback(enlivenedObjects);
        return;
      }
      objects.forEach(function (o, index) {
        // if sparse array
        if (!o || !o.type) {
          onLoaded();
          return;
        }
        var klass = fabric.util.getKlass(o.type, namespace);
        klass.fromObject(o, function (obj, error) {
          error || (enlivenedObjects[index] = obj);
          reviver && reviver(o, obj, error);
          onLoaded();
        });
      });
    },
    /**
     * Creates corresponding fabric instances residing in an object, e.g. `clipPath`
     * @see {@link fabric.Object.ENLIVEN_PROPS}
     * @param {Object} object
     * @param {Object} [context] assign enlived props to this object (pass null to skip this)
     * @param {(objects:fabric.Object[]) => void} callback
     */
    enlivenObjectEnlivables: function enlivenObjectEnlivables(object, context, callback) {
      var enlivenProps = fabric.Object.ENLIVEN_PROPS.filter(function (key) {
        return !!object[key];
      });
      fabric.util.enlivenObjects(enlivenProps.map(function (key) {
        return object[key];
      }), function (enlivedProps) {
        var objects = {};
        enlivenProps.forEach(function (key, index) {
          objects[key] = enlivedProps[index];
          context && (context[key] = enlivedProps[index]);
        });
        callback && callback(objects);
      });
    },
    /**
     * Create and wait for loading of patterns
     * @static
     * @memberOf fabric.util
     * @param {Array} patterns Objects to enliven
     * @param {Function} callback Callback to invoke when all objects are created
     * called after each fabric object created.
     */
    enlivenPatterns: function enlivenPatterns(patterns, callback) {
      patterns = patterns || [];
      function onLoaded() {
        if (++numLoadedPatterns === numPatterns) {
          callback && callback(enlivenedPatterns);
        }
      }
      var enlivenedPatterns = [],
        numLoadedPatterns = 0,
        numPatterns = patterns.length;
      if (!numPatterns) {
        callback && callback(enlivenedPatterns);
        return;
      }
      patterns.forEach(function (p, index) {
        if (p && p.source) {
          new fabric.Pattern(p, function (pattern) {
            enlivenedPatterns[index] = pattern;
            onLoaded();
          });
        } else {
          enlivenedPatterns[index] = p;
          onLoaded();
        }
      });
    },
    /**
     * Groups SVG elements (usually those retrieved from SVG document)
     * @static
     * @memberOf fabric.util
     * @param {Array} elements SVG elements to group
     * @param {Object} [options] Options object
     * @param {String} path Value to set sourcePath to
     * @return {fabric.Object|fabric.Group}
     */
    groupSVGElements: function groupSVGElements(elements, options, path) {
      var object;
      if (elements && elements.length === 1) {
        if (typeof path !== 'undefined') {
          elements[0].sourcePath = path;
        }
        return elements[0];
      }
      if (options) {
        if (options.width && options.height) {
          options.centerPoint = {
            x: options.width / 2,
            y: options.height / 2
          };
        } else {
          delete options.width;
          delete options.height;
        }
      }
      object = new fabric.Group(elements, options);
      if (typeof path !== 'undefined') {
        object.sourcePath = path;
      }
      return object;
    },
    /**
     * Populates an object with properties of another object
     * @static
     * @memberOf fabric.util
     * @param {Object} source Source object
     * @param {Object} destination Destination object
     * @return {Array} properties Properties names to include
     */
    populateWithProperties: function populateWithProperties(source, destination, properties) {
      if (properties && Array.isArray(properties)) {
        for (var i = 0, len = properties.length; i < len; i++) {
          if (properties[i] in source) {
            destination[properties[i]] = source[properties[i]];
          }
        }
      }
    },
    /**
     * Creates canvas element
     * @static
     * @memberOf fabric.util
     * @return {CanvasElement} initialized canvas element
     */
    createCanvasElement: function createCanvasElement() {
      return fabric.document.createElement('canvas');
    },
    /**
     * Creates a canvas element that is a copy of another and is also painted
     * @param {CanvasElement} canvas to copy size and content of
     * @static
     * @memberOf fabric.util
     * @return {CanvasElement} initialized canvas element
     */
    copyCanvasElement: function copyCanvasElement(canvas) {
      var newCanvas = fabric.util.createCanvasElement();
      newCanvas.width = canvas.width;
      newCanvas.height = canvas.height;
      newCanvas.getContext('2d').drawImage(canvas, 0, 0);
      return newCanvas;
    },
    /**
     * since 2.6.0 moved from canvas instance to utility.
     * @param {CanvasElement} canvasEl to copy size and content of
     * @param {String} format 'jpeg' or 'png', in some browsers 'webp' is ok too
     * @param {Number} quality <= 1 and > 0
     * @static
     * @memberOf fabric.util
     * @return {String} data url
     */
    toDataURL: function toDataURL(canvasEl, format, quality) {
      return canvasEl.toDataURL('image/' + format, quality);
    },
    /**
     * Creates image element (works on client and node)
     * @static
     * @memberOf fabric.util
     * @return {HTMLImageElement} HTML image element
     */
    createImage: function createImage() {
      return fabric.document.createElement('img');
    },
    /**
     * Multiply matrix A by matrix B to nest transformations
     * @static
     * @memberOf fabric.util
     * @param  {Array} a First transformMatrix
     * @param  {Array} b Second transformMatrix
     * @param  {Boolean} is2x2 flag to multiply matrices as 2x2 matrices
     * @return {Array} The product of the two transform matrices
     */
    multiplyTransformMatrices: function multiplyTransformMatrices(a, b, is2x2) {
      // Matrix multiply a * b
      return [a[0] * b[0] + a[2] * b[1], a[1] * b[0] + a[3] * b[1], a[0] * b[2] + a[2] * b[3], a[1] * b[2] + a[3] * b[3], is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4], is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]];
    },
    /**
     * Decomposes standard 2x3 matrix into transform components
     * @static
     * @memberOf fabric.util
     * @param  {Array} a transformMatrix
     * @return {Object} Components of transform
     */
    qrDecompose: function qrDecompose(a) {
      var angle = atan2(a[1], a[0]),
        denom = pow(a[0], 2) + pow(a[1], 2),
        scaleX = sqrt(denom),
        scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX,
        skewX = atan2(a[0] * a[2] + a[1] * a[3], denom);
      return {
        angle: angle / PiBy180,
        scaleX: scaleX,
        scaleY: scaleY,
        skewX: skewX / PiBy180,
        skewY: 0,
        translateX: a[4],
        translateY: a[5]
      };
    },
    /**
     * Returns a transform matrix starting from an object of the same kind of
     * the one returned from qrDecompose, useful also if you want to calculate some
     * transformations from an object that is not enlived yet
     * @static
     * @memberOf fabric.util
     * @param  {Object} options
     * @param  {Number} [options.angle] angle in degrees
     * @return {Number[]} transform matrix
     */
    calcRotateMatrix: function calcRotateMatrix(options) {
      if (!options.angle) {
        return fabric.iMatrix.concat();
      }
      var theta = fabric.util.degreesToRadians(options.angle),
        cos = fabric.util.cos(theta),
        sin = fabric.util.sin(theta);
      return [cos, sin, -sin, cos, 0, 0];
    },
    /**
     * Returns a transform matrix starting from an object of the same kind of
     * the one returned from qrDecompose, useful also if you want to calculate some
     * transformations from an object that is not enlived yet.
     * is called DimensionsTransformMatrix because those properties are the one that influence
     * the size of the resulting box of the object.
     * @static
     * @memberOf fabric.util
     * @param  {Object} options
     * @param  {Number} [options.scaleX]
     * @param  {Number} [options.scaleY]
     * @param  {Boolean} [options.flipX]
     * @param  {Boolean} [options.flipY]
     * @param  {Number} [options.skewX]
     * @param  {Number} [options.skewY]
     * @return {Number[]} transform matrix
     */
    calcDimensionsMatrix: function calcDimensionsMatrix(options) {
      var scaleX = typeof options.scaleX === 'undefined' ? 1 : options.scaleX,
        scaleY = typeof options.scaleY === 'undefined' ? 1 : options.scaleY,
        scaleMatrix = [options.flipX ? -scaleX : scaleX, 0, 0, options.flipY ? -scaleY : scaleY, 0, 0],
        multiply = fabric.util.multiplyTransformMatrices,
        degreesToRadians = fabric.util.degreesToRadians;
      if (options.skewX) {
        scaleMatrix = multiply(scaleMatrix, [1, 0, Math.tan(degreesToRadians(options.skewX)), 1], true);
      }
      if (options.skewY) {
        scaleMatrix = multiply(scaleMatrix, [1, Math.tan(degreesToRadians(options.skewY)), 0, 1], true);
      }
      return scaleMatrix;
    },
    /**
     * Returns a transform matrix starting from an object of the same kind of
     * the one returned from qrDecompose, useful also if you want to calculate some
     * transformations from an object that is not enlived yet
     * @static
     * @memberOf fabric.util
     * @param  {Object} options
     * @param  {Number} [options.angle]
     * @param  {Number} [options.scaleX]
     * @param  {Number} [options.scaleY]
     * @param  {Boolean} [options.flipX]
     * @param  {Boolean} [options.flipY]
     * @param  {Number} [options.skewX]
     * @param  {Number} [options.skewX]
     * @param  {Number} [options.translateX]
     * @param  {Number} [options.translateY]
     * @return {Number[]} transform matrix
     */
    composeMatrix: function composeMatrix(options) {
      var matrix = [1, 0, 0, 1, options.translateX || 0, options.translateY || 0],
        multiply = fabric.util.multiplyTransformMatrices;
      if (options.angle) {
        matrix = multiply(matrix, fabric.util.calcRotateMatrix(options));
      }
      if (options.scaleX !== 1 || options.scaleY !== 1 || options.skewX || options.skewY || options.flipX || options.flipY) {
        matrix = multiply(matrix, fabric.util.calcDimensionsMatrix(options));
      }
      return matrix;
    },
    /**
     * reset an object transform state to neutral. Top and left are not accounted for
     * @static
     * @memberOf fabric.util
     * @param  {fabric.Object} target object to transform
     */
    resetObjectTransform: function resetObjectTransform(target) {
      target.scaleX = 1;
      target.scaleY = 1;
      target.skewX = 0;
      target.skewY = 0;
      target.flipX = false;
      target.flipY = false;
      target.rotate(0);
    },
    /**
     * Extract Object transform values
     * @static
     * @memberOf fabric.util
     * @param  {fabric.Object} target object to read from
     * @return {Object} Components of transform
     */
    saveObjectTransform: function saveObjectTransform(target) {
      return {
        scaleX: target.scaleX,
        scaleY: target.scaleY,
        skewX: target.skewX,
        skewY: target.skewY,
        angle: target.angle,
        left: target.left,
        flipX: target.flipX,
        flipY: target.flipY,
        top: target.top
      };
    },
    /**
     * Returns true if context has transparent pixel
     * at specified location (taking tolerance into account)
     * @param {CanvasRenderingContext2D} ctx context
     * @param {Number} x x coordinate
     * @param {Number} y y coordinate
     * @param {Number} tolerance Tolerance
     */
    isTransparent: function isTransparent(ctx, x, y, tolerance) {
      // If tolerance is > 0 adjust start coords to take into account.
      // If moves off Canvas fix to 0
      if (tolerance > 0) {
        if (x > tolerance) {
          x -= tolerance;
        } else {
          x = 0;
        }
        if (y > tolerance) {
          y -= tolerance;
        } else {
          y = 0;
        }
      }
      var _isTransparent = true,
        i,
        temp,
        imageData = ctx.getImageData(x, y, tolerance * 2 || 1, tolerance * 2 || 1),
        l = imageData.data.length;

      // Split image data - for tolerance > 1, pixelDataSize = 4;
      for (i = 3; i < l; i += 4) {
        temp = imageData.data[i];
        _isTransparent = temp <= 0;
        if (_isTransparent === false) {
          break; // Stop if colour found
        }
      }

      imageData = null;
      return _isTransparent;
    },
    /**
     * Parse preserveAspectRatio attribute from element
     * @param {string} attribute to be parsed
     * @return {Object} an object containing align and meetOrSlice attribute
     */
    parsePreserveAspectRatioAttribute: function parsePreserveAspectRatioAttribute(attribute) {
      var meetOrSlice = 'meet',
        alignX = 'Mid',
        alignY = 'Mid',
        aspectRatioAttrs = attribute.split(' '),
        align;
      if (aspectRatioAttrs && aspectRatioAttrs.length) {
        meetOrSlice = aspectRatioAttrs.pop();
        if (meetOrSlice !== 'meet' && meetOrSlice !== 'slice') {
          align = meetOrSlice;
          meetOrSlice = 'meet';
        } else if (aspectRatioAttrs.length) {
          align = aspectRatioAttrs.pop();
        }
      }
      //divide align in alignX and alignY
      alignX = align !== 'none' ? align.slice(1, 4) : 'none';
      alignY = align !== 'none' ? align.slice(5, 8) : 'none';
      return {
        meetOrSlice: meetOrSlice,
        alignX: alignX,
        alignY: alignY
      };
    },
    /**
     * Clear char widths cache for the given font family or all the cache if no
     * fontFamily is specified.
     * Use it if you know you are loading fonts in a lazy way and you are not waiting
     * for custom fonts to load properly when adding text objects to the canvas.
     * If a text object is added when its own font is not loaded yet, you will get wrong
     * measurement and so wrong bounding boxes.
     * After the font cache is cleared, either change the textObject text content or call
     * initDimensions() to trigger a recalculation
     * @memberOf fabric.util
     * @param {String} [fontFamily] font family to clear
     */
    clearFabricFontCache: function clearFabricFontCache(fontFamily) {
      fontFamily = (fontFamily || '').toLowerCase();
      if (!fontFamily) {
        fabric.charWidthsCache = {};
      } else if (fabric.charWidthsCache[fontFamily]) {
        delete fabric.charWidthsCache[fontFamily];
      }
    },
    /**
     * Given current aspect ratio, determines the max width and height that can
     * respect the total allowed area for the cache.
     * @memberOf fabric.util
     * @param {Number} ar aspect ratio
     * @param {Number} maximumArea Maximum area you want to achieve
     * @return {Object.x} Limited dimensions by X
     * @return {Object.y} Limited dimensions by Y
     */
    limitDimsByArea: function limitDimsByArea(ar, maximumArea) {
      var roughWidth = Math.sqrt(maximumArea * ar),
        perfLimitSizeY = Math.floor(maximumArea / roughWidth);
      return {
        x: Math.floor(roughWidth),
        y: perfLimitSizeY
      };
    },
    capValue: function capValue(min, value, max) {
      return Math.max(min, Math.min(value, max));
    },
    /**
     * Finds the scale for the object source to fit inside the object destination,
     * keeping aspect ratio intact.
     * respect the total allowed area for the cache.
     * @memberOf fabric.util
     * @param {Object | fabric.Object} source
     * @param {Number} source.height natural unscaled height of the object
     * @param {Number} source.width natural unscaled width of the object
     * @param {Object | fabric.Object} destination
     * @param {Number} destination.height natural unscaled height of the object
     * @param {Number} destination.width natural unscaled width of the object
     * @return {Number} scale factor to apply to source to fit into destination
     */
    findScaleToFit: function findScaleToFit(source, destination) {
      return Math.min(destination.width / source.width, destination.height / source.height);
    },
    /**
     * Finds the scale for the object source to cover entirely the object destination,
     * keeping aspect ratio intact.
     * respect the total allowed area for the cache.
     * @memberOf fabric.util
     * @param {Object | fabric.Object} source
     * @param {Number} source.height natural unscaled height of the object
     * @param {Number} source.width natural unscaled width of the object
     * @param {Object | fabric.Object} destination
     * @param {Number} destination.height natural unscaled height of the object
     * @param {Number} destination.width natural unscaled width of the object
     * @return {Number} scale factor to apply to source to cover destination
     */
    findScaleToCover: function findScaleToCover(source, destination) {
      return Math.max(destination.width / source.width, destination.height / source.height);
    },
    /**
     * given an array of 6 number returns something like `"matrix(...numbers)"`
     * @memberOf fabric.util
     * @param {Array} transform an array with 6 numbers
     * @return {String} transform matrix for svg
     * @return {Object.y} Limited dimensions by Y
     */
    matrixToSVG: function matrixToSVG(transform) {
      return 'matrix(' + transform.map(function (value) {
        return fabric.util.toFixed(value, fabric.Object.NUM_FRACTION_DIGITS);
      }).join(' ') + ')';
    },
    /**
     * given an object and a transform, apply the inverse transform to the object,
     * this is equivalent to remove from that object that transformation, so that
     * added in a space with the removed transform, the object will be the same as before.
     * Removing from an object a transform that scale by 2 is like scaling it by 1/2.
     * Removing from an object a transfrom that rotate by 30deg is like rotating by 30deg
     * in the opposite direction.
     * This util is used to add objects inside transformed groups or nested groups.
     * @memberOf fabric.util
     * @param {fabric.Object} object the object you want to transform
     * @param {Array} transform the destination transform
     */
    removeTransformFromObject: function removeTransformFromObject(object, transform) {
      var inverted = fabric.util.invertTransform(transform),
        finalTransform = fabric.util.multiplyTransformMatrices(inverted, object.calcOwnMatrix());
      fabric.util.applyTransformToObject(object, finalTransform);
    },
    /**
     * given an object and a transform, apply the transform to the object.
     * this is equivalent to change the space where the object is drawn.
     * Adding to an object a transform that scale by 2 is like scaling it by 2.
     * This is used when removing an object from an active selection for example.
     * @memberOf fabric.util
     * @param {fabric.Object} object the object you want to transform
     * @param {Array} transform the destination transform
     */
    addTransformToObject: function addTransformToObject(object, transform) {
      fabric.util.applyTransformToObject(object, fabric.util.multiplyTransformMatrices(transform, object.calcOwnMatrix()));
    },
    /**
     * discard an object transform state and apply the one from the matrix.
     * @memberOf fabric.util
     * @param {fabric.Object} object the object you want to transform
     * @param {Array} transform the destination transform
     */
    applyTransformToObject: function applyTransformToObject(object, transform) {
      var options = fabric.util.qrDecompose(transform),
        center = new fabric.Point(options.translateX, options.translateY);
      object.flipX = false;
      object.flipY = false;
      object.set('scaleX', options.scaleX);
      object.set('scaleY', options.scaleY);
      object.skewX = options.skewX;
      object.skewY = options.skewY;
      object.angle = options.angle;
      object.setPositionByOrigin(center, 'center', 'center');
    },
    /**
     * given a width and height, return the size of the bounding box
     * that can contains the box with width/height with applied transform
     * described in options.
     * Use to calculate the boxes around objects for controls.
     * @memberOf fabric.util
     * @param {Number} width
     * @param {Number} height
     * @param {Object} options
     * @param {Number} options.scaleX
     * @param {Number} options.scaleY
     * @param {Number} options.skewX
     * @param {Number} options.skewY
     * @return {Object.x} width of containing
     * @return {Object.y} height of containing
     */
    sizeAfterTransform: function sizeAfterTransform(width, height, options) {
      var dimX = width / 2,
        dimY = height / 2,
        points = [{
          x: -dimX,
          y: -dimY
        }, {
          x: dimX,
          y: -dimY
        }, {
          x: -dimX,
          y: dimY
        }, {
          x: dimX,
          y: dimY
        }],
        transformMatrix = fabric.util.calcDimensionsMatrix(options),
        bbox = fabric.util.makeBoundingBoxFromPoints(points, transformMatrix);
      return {
        x: bbox.width,
        y: bbox.height
      };
    },
    /**
     * Merges 2 clip paths into one visually equal clip path
     *
     * **IMPORTANT**:\
     * Does **NOT** clone the arguments, clone them proir if necessary.
     *
     * Creates a wrapper (group) that contains one clip path and is clipped by the other so content is kept where both overlap.
     * Use this method if both the clip paths may have nested clip paths of their own, so assigning one to the other's clip path property is not possible.
     *
     * In order to handle the `inverted` property we follow logic described in the following cases:\
     * **(1)** both clip paths are inverted - the clip paths pass the inverted prop to the wrapper and loose it themselves.\
     * **(2)** one is inverted and the other isn't - the wrapper shouldn't become inverted and the inverted clip path must clip the non inverted one to produce an identical visual effect.\
     * **(3)** both clip paths are not inverted - wrapper and clip paths remain unchanged.
     *
     * @memberOf fabric.util
     * @param {fabric.Object} c1
     * @param {fabric.Object} c2
     * @returns {fabric.Object} merged clip path
     */
    mergeClipPaths: function mergeClipPaths(c1, c2) {
      var a = c1,
        b = c2;
      if (a.inverted && !b.inverted) {
        //  case (2)
        a = c2;
        b = c1;
      }
      //  `b` becomes `a`'s clip path so we transform `b` to `a` coordinate plane
      fabric.util.applyTransformToObject(b, fabric.util.multiplyTransformMatrices(fabric.util.invertTransform(a.calcTransformMatrix()), b.calcTransformMatrix()));
      //  assign the `inverted` prop to the wrapping group
      var inverted = a.inverted && b.inverted;
      if (inverted) {
        //  case (1)
        a.inverted = b.inverted = false;
      }
      return new fabric.Group([a], {
        clipPath: b,
        inverted: inverted
      });
    },
    /**
     * @memberOf fabric.util
     * @param {Object} prevStyle first style to compare
     * @param {Object} thisStyle second style to compare
     * @param {boolean} forTextSpans whether to check overline, underline, and line-through properties
     * @return {boolean} true if the style changed
     */
    hasStyleChanged: function hasStyleChanged(prevStyle, thisStyle, forTextSpans) {
      forTextSpans = forTextSpans || false;
      return prevStyle.fill !== thisStyle.fill || prevStyle.stroke !== thisStyle.stroke || prevStyle.strokeWidth !== thisStyle.strokeWidth || prevStyle.fontSize !== thisStyle.fontSize || prevStyle.fontFamily !== thisStyle.fontFamily || prevStyle.fontWeight !== thisStyle.fontWeight || prevStyle.fontStyle !== thisStyle.fontStyle || prevStyle.textBackgroundColor !== thisStyle.textBackgroundColor || prevStyle.deltaY !== thisStyle.deltaY || forTextSpans && (prevStyle.overline !== thisStyle.overline || prevStyle.underline !== thisStyle.underline || prevStyle.linethrough !== thisStyle.linethrough);
    },
    /**
     * Returns the array form of a text object's inline styles property with styles grouped in ranges
     * rather than per character. This format is less verbose, and is better suited for storage
     * so it is used in serialization (not during runtime).
     * @memberOf fabric.util
     * @param {object} styles per character styles for a text object
     * @param {String} text the text string that the styles are applied to
     * @return {{start: number, end: number, style: object}[]}
     */
    stylesToArray: function stylesToArray(styles, text) {
      // clone style structure to prevent mutation
      var styles = fabric.util.object.clone(styles, true),
        textLines = text.split('\n'),
        charIndex = -1,
        prevStyle = {},
        stylesArray = [];
      //loop through each textLine
      for (var i = 0; i < textLines.length; i++) {
        if (!styles[i]) {
          //no styles exist for this line, so add the line's length to the charIndex total
          charIndex += textLines[i].length;
          continue;
        }
        //loop through each character of the current line
        for (var c = 0; c < textLines[i].length; c++) {
          charIndex++;
          var thisStyle = styles[i][c];
          //check if style exists for this character
          if (thisStyle && Object.keys(thisStyle).length > 0) {
            var styleChanged = fabric.util.hasStyleChanged(prevStyle, thisStyle, true);
            if (styleChanged) {
              stylesArray.push({
                start: charIndex,
                end: charIndex + 1,
                style: thisStyle
              });
            } else {
              //if style is the same as previous character, increase end index
              stylesArray[stylesArray.length - 1].end++;
            }
          }
          prevStyle = thisStyle || {};
        }
      }
      return stylesArray;
    },
    /**
     * Returns the object form of the styles property with styles that are assigned per
     * character rather than grouped by range. This format is more verbose, and is
     * only used during runtime (not for serialization/storage)
     * @memberOf fabric.util
     * @param {Array} styles the serialized form of a text object's styles
     * @param {String} text the text string that the styles are applied to
     * @return {Object}
     */
    stylesFromArray: function stylesFromArray(styles, text) {
      if (!Array.isArray(styles)) {
        return styles;
      }
      var textLines = text.split('\n'),
        charIndex = -1,
        styleIndex = 0,
        stylesObject = {};
      //loop through each textLine
      for (var i = 0; i < textLines.length; i++) {
        //loop through each character of the current line
        for (var c = 0; c < textLines[i].length; c++) {
          charIndex++;
          //check if there's a style collection that includes the current character
          if (styles[styleIndex] && styles[styleIndex].start <= charIndex && charIndex < styles[styleIndex].end) {
            //create object for line index if it doesn't exist
            stylesObject[i] = stylesObject[i] || {};
            //assign a style at this character's index
            stylesObject[i][c] = Object.assign({}, styles[styleIndex].style);
            //if character is at the end of the current style collection, move to the next
            if (charIndex === styles[styleIndex].end - 1) {
              styleIndex++;
            }
          }
        }
      }
      return stylesObject;
    }
  };
})(typeof exports !== 'undefined' ? exports : this);
(function () {
  var _join = Array.prototype.join,
    commandLengths = {
      m: 2,
      l: 2,
      h: 1,
      v: 1,
      c: 6,
      s: 4,
      q: 4,
      t: 2,
      a: 7
    },
    repeatedCommands = {
      m: 'l',
      M: 'L'
    };
  function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {
    var costh2 = fabric.util.cos(th2),
      sinth2 = fabric.util.sin(th2),
      costh3 = fabric.util.cos(th3),
      sinth3 = fabric.util.sin(th3),
      toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1,
      toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1,
      cp1X = fromX + mT * (-cosTh * rx * sinth2 - sinTh * ry * costh2),
      cp1Y = fromY + mT * (-sinTh * rx * sinth2 + cosTh * ry * costh2),
      cp2X = toX + mT * (cosTh * rx * sinth3 + sinTh * ry * costh3),
      cp2Y = toY + mT * (sinTh * rx * sinth3 - cosTh * ry * costh3);
    return ['C', cp1X, cp1Y, cp2X, cp2Y, toX, toY];
  }

  /* Adapted from http://dxr.mozilla.org/mozilla-central/source/content/svg/content/src/nsSVGPathDataParser.cpp
   * by Andrea Bogazzi code is under MPL. if you don't have a copy of the license you can take it here
   * http://mozilla.org/MPL/2.0/
   */
  function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {
    var PI = Math.PI,
      th = rotateX * PI / 180,
      sinTh = fabric.util.sin(th),
      cosTh = fabric.util.cos(th),
      fromX = 0,
      fromY = 0;
    rx = Math.abs(rx);
    ry = Math.abs(ry);
    var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5,
      py = -cosTh * toY * 0.5 + sinTh * toX * 0.5,
      rx2 = rx * rx,
      ry2 = ry * ry,
      py2 = py * py,
      px2 = px * px,
      pl = rx2 * ry2 - rx2 * py2 - ry2 * px2,
      root = 0;
    if (pl < 0) {
      var s = Math.sqrt(1 - pl / (rx2 * ry2));
      rx *= s;
      ry *= s;
    } else {
      root = (large === sweep ? -1.0 : 1.0) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));
    }
    var cx = root * rx * py / ry,
      cy = -root * ry * px / rx,
      cx1 = cosTh * cx - sinTh * cy + toX * 0.5,
      cy1 = sinTh * cx + cosTh * cy + toY * 0.5,
      mTheta = calcVectorAngle(1, 0, (px - cx) / rx, (py - cy) / ry),
      dtheta = calcVectorAngle((px - cx) / rx, (py - cy) / ry, (-px - cx) / rx, (-py - cy) / ry);
    if (sweep === 0 && dtheta > 0) {
      dtheta -= 2 * PI;
    } else if (sweep === 1 && dtheta < 0) {
      dtheta += 2 * PI;
    }

    // Convert into cubic bezier segments <= 90deg
    var segments = Math.ceil(Math.abs(dtheta / PI * 2)),
      result = [],
      mDelta = dtheta / segments,
      mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2),
      th3 = mTheta + mDelta;
    for (var i = 0; i < segments; i++) {
      result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);
      fromX = result[i][5];
      fromY = result[i][6];
      mTheta = th3;
      th3 += mDelta;
    }
    return result;
  }

  /*
   * Private
   */
  function calcVectorAngle(ux, uy, vx, vy) {
    var ta = Math.atan2(uy, ux),
      tb = Math.atan2(vy, vx);
    if (tb >= ta) {
      return tb - ta;
    } else {
      return 2 * Math.PI - (ta - tb);
    }
  }

  /**
   * Calculate bounding box of a beziercurve
   * @param {Number} x0 starting point
   * @param {Number} y0
   * @param {Number} x1 first control point
   * @param {Number} y1
   * @param {Number} x2 secondo control point
   * @param {Number} y2
   * @param {Number} x3 end of bezier
   * @param {Number} y3
   */
  // taken from http://jsbin.com/ivomiq/56/edit  no credits available for that.
  // TODO: can we normalize this with the starting points set at 0 and then translated the bbox?
  function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {
    var argsString;
    if (fabric.cachesBoundsOfCurve) {
      argsString = _join.call(arguments);
      if (fabric.boundsOfCurveCache[argsString]) {
        return fabric.boundsOfCurveCache[argsString];
      }
    }
    var sqrt = Math.sqrt,
      min = Math.min,
      max = Math.max,
      abs = Math.abs,
      tvalues = [],
      bounds = [[], []],
      a,
      b,
      c,
      t,
      t1,
      t2,
      b2ac,
      sqrtb2ac;
    b = 6 * x0 - 12 * x1 + 6 * x2;
    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
    c = 3 * x1 - 3 * x0;
    for (var i = 0; i < 2; ++i) {
      if (i > 0) {
        b = 6 * y0 - 12 * y1 + 6 * y2;
        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
        c = 3 * y1 - 3 * y0;
      }
      if (abs(a) < 1e-12) {
        if (abs(b) < 1e-12) {
          continue;
        }
        t = -c / b;
        if (0 < t && t < 1) {
          tvalues.push(t);
        }
        continue;
      }
      b2ac = b * b - 4 * c * a;
      if (b2ac < 0) {
        continue;
      }
      sqrtb2ac = sqrt(b2ac);
      t1 = (-b + sqrtb2ac) / (2 * a);
      if (0 < t1 && t1 < 1) {
        tvalues.push(t1);
      }
      t2 = (-b - sqrtb2ac) / (2 * a);
      if (0 < t2 && t2 < 1) {
        tvalues.push(t2);
      }
    }
    var x,
      y,
      j = tvalues.length,
      jlen = j,
      mt;
    while (j--) {
      t = tvalues[j];
      mt = 1 - t;
      x = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
      bounds[0][j] = x;
      y = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
      bounds[1][j] = y;
    }
    bounds[0][jlen] = x0;
    bounds[1][jlen] = y0;
    bounds[0][jlen + 1] = x3;
    bounds[1][jlen + 1] = y3;
    var result = [{
      x: min.apply(null, bounds[0]),
      y: min.apply(null, bounds[1])
    }, {
      x: max.apply(null, bounds[0]),
      y: max.apply(null, bounds[1])
    }];
    if (fabric.cachesBoundsOfCurve) {
      fabric.boundsOfCurveCache[argsString] = result;
    }
    return result;
  }

  /**
   * Converts arc to a bunch of bezier curves
   * @param {Number} fx starting point x
   * @param {Number} fy starting point y
   * @param {Array} coords Arc command
   */
  function fromArcToBeziers(fx, fy, coords) {
    var rx = coords[1],
      ry = coords[2],
      rot = coords[3],
      large = coords[4],
      sweep = coords[5],
      tx = coords[6],
      ty = coords[7],
      segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);
    for (var i = 0, len = segsNorm.length; i < len; i++) {
      segsNorm[i][1] += fx;
      segsNorm[i][2] += fy;
      segsNorm[i][3] += fx;
      segsNorm[i][4] += fy;
      segsNorm[i][5] += fx;
      segsNorm[i][6] += fy;
    }
    return segsNorm;
  }
  ;

  /**
   * This function take a parsed SVG path and make it simpler for fabricJS logic.
   * simplification consist of: only UPPERCASE absolute commands ( relative converted to absolute )
   * S converted in C, T converted in Q, A converted in C.
   * @param {Array} path the array of commands of a parsed svg path for fabric.Path
   * @return {Array} the simplified array of commands of a parsed svg path for fabric.Path
   */
  function makePathSimpler(path) {
    // x and y represent the last point of the path. the previous command point.
    // we add them to each relative command to make it an absolute comment.
    // we also swap the v V h H with L, because are easier to transform.
    var x = 0,
      y = 0,
      len = path.length,
      // x1 and y1 represent the last point of the subpath. the subpath is started with
      // m or M command. When a z or Z command is drawn, x and y need to be resetted to
      // the last x1 and y1.
      x1 = 0,
      y1 = 0,
      current,
      i,
      converted,
      // previous will host the letter of the previous command, to handle S and T.
      // controlX and controlY will host the previous reflected control point
      destinationPath = [],
      previous,
      controlX,
      controlY;
    for (i = 0; i < len; ++i) {
      converted = false;
      current = path[i].slice(0);
      switch (current[0]) {
        // first letter
        case 'l':
          // lineto, relative
          current[0] = 'L';
          current[1] += x;
          current[2] += y;
        // falls through
        case 'L':
          x = current[1];
          y = current[2];
          break;
        case 'h':
          // horizontal lineto, relative
          current[1] += x;
        // falls through
        case 'H':
          current[0] = 'L';
          current[2] = y;
          x = current[1];
          break;
        case 'v':
          // vertical lineto, relative
          current[1] += y;
        // falls through
        case 'V':
          current[0] = 'L';
          y = current[1];
          current[1] = x;
          current[2] = y;
          break;
        case 'm':
          // moveTo, relative
          current[0] = 'M';
          current[1] += x;
          current[2] += y;
        // falls through
        case 'M':
          x = current[1];
          y = current[2];
          x1 = current[1];
          y1 = current[2];
          break;
        case 'c':
          // bezierCurveTo, relative
          current[0] = 'C';
          current[1] += x;
          current[2] += y;
          current[3] += x;
          current[4] += y;
          current[5] += x;
          current[6] += y;
        // falls through
        case 'C':
          controlX = current[3];
          controlY = current[4];
          x = current[5];
          y = current[6];
          break;
        case 's':
          // shorthand cubic bezierCurveTo, relative
          current[0] = 'S';
          current[1] += x;
          current[2] += y;
          current[3] += x;
          current[4] += y;
        // falls through
        case 'S':
          // would be sScC but since we are swapping sSc for C, we check just that.
          if (previous === 'C') {
            // calculate reflection of previous control points
            controlX = 2 * x - controlX;
            controlY = 2 * y - controlY;
          } else {
            // If there is no previous command or if the previous command was not a C, c, S, or s,
            // the control point is coincident with the current point
            controlX = x;
            controlY = y;
          }
          x = current[3];
          y = current[4];
          current[0] = 'C';
          current[5] = current[3];
          current[6] = current[4];
          current[3] = current[1];
          current[4] = current[2];
          current[1] = controlX;
          current[2] = controlY;
          // current[3] and current[4] are NOW the second control point.
          // we keep it for the next reflection.
          controlX = current[3];
          controlY = current[4];
          break;
        case 'q':
          // quadraticCurveTo, relative
          current[0] = 'Q';
          current[1] += x;
          current[2] += y;
          current[3] += x;
          current[4] += y;
        // falls through
        case 'Q':
          controlX = current[1];
          controlY = current[2];
          x = current[3];
          y = current[4];
          break;
        case 't':
          // shorthand quadraticCurveTo, relative
          current[0] = 'T';
          current[1] += x;
          current[2] += y;
        // falls through
        case 'T':
          if (previous === 'Q') {
            // calculate reflection of previous control point
            controlX = 2 * x - controlX;
            controlY = 2 * y - controlY;
          } else {
            // If there is no previous command or if the previous command was not a Q, q, T or t,
            // assume the control point is coincident with the current point
            controlX = x;
            controlY = y;
          }
          current[0] = 'Q';
          x = current[1];
          y = current[2];
          current[1] = controlX;
          current[2] = controlY;
          current[3] = x;
          current[4] = y;
          break;
        case 'a':
          current[0] = 'A';
          current[6] += x;
          current[7] += y;
        // falls through
        case 'A':
          converted = true;
          destinationPath = destinationPath.concat(fromArcToBeziers(x, y, current));
          x = current[6];
          y = current[7];
          break;
        case 'z':
        case 'Z':
          x = x1;
          y = y1;
          break;
        default:
      }
      if (!converted) {
        destinationPath.push(current);
      }
      previous = current[0];
    }
    return destinationPath;
  }
  ;

  /**
   * Calc length from point x1,y1 to x2,y2
   * @param {Number} x1 starting point x
   * @param {Number} y1 starting point y
   * @param {Number} x2 starting point x
   * @param {Number} y2 starting point y
   * @return {Number} length of segment
   */
  function calcLineLength(x1, y1, x2, y2) {
    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
  }

  // functions for the Cubic beizer
  // taken from: https://github.com/konvajs/konva/blob/7.0.5/src/shapes/Path.ts#L350
  function CB1(t) {
    return t * t * t;
  }
  function CB2(t) {
    return 3 * t * t * (1 - t);
  }
  function CB3(t) {
    return 3 * t * (1 - t) * (1 - t);
  }
  function CB4(t) {
    return (1 - t) * (1 - t) * (1 - t);
  }
  function getPointOnCubicBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {
    return function (pct) {
      var c1 = CB1(pct),
        c2 = CB2(pct),
        c3 = CB3(pct),
        c4 = CB4(pct);
      return {
        x: p4x * c1 + p3x * c2 + p2x * c3 + p1x * c4,
        y: p4y * c1 + p3y * c2 + p2y * c3 + p1y * c4
      };
    };
  }
  function getTangentCubicIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {
    return function (pct) {
      var invT = 1 - pct,
        tangentX = 3 * invT * invT * (p2x - p1x) + 6 * invT * pct * (p3x - p2x) + 3 * pct * pct * (p4x - p3x),
        tangentY = 3 * invT * invT * (p2y - p1y) + 6 * invT * pct * (p3y - p2y) + 3 * pct * pct * (p4y - p3y);
      return Math.atan2(tangentY, tangentX);
    };
  }
  function QB1(t) {
    return t * t;
  }
  function QB2(t) {
    return 2 * t * (1 - t);
  }
  function QB3(t) {
    return (1 - t) * (1 - t);
  }
  function getPointOnQuadraticBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y) {
    return function (pct) {
      var c1 = QB1(pct),
        c2 = QB2(pct),
        c3 = QB3(pct);
      return {
        x: p3x * c1 + p2x * c2 + p1x * c3,
        y: p3y * c1 + p2y * c2 + p1y * c3
      };
    };
  }
  function getTangentQuadraticIterator(p1x, p1y, p2x, p2y, p3x, p3y) {
    return function (pct) {
      var invT = 1 - pct,
        tangentX = 2 * invT * (p2x - p1x) + 2 * pct * (p3x - p2x),
        tangentY = 2 * invT * (p2y - p1y) + 2 * pct * (p3y - p2y);
      return Math.atan2(tangentY, tangentX);
    };
  }

  // this will run over a path segment ( a cubic or quadratic segment) and approximate it
  // with 100 segemnts. This will good enough to calculate the length of the curve
  function pathIterator(iterator, x1, y1) {
    var tempP = {
        x: x1,
        y: y1
      },
      p,
      tmpLen = 0,
      perc;
    for (perc = 1; perc <= 100; perc += 1) {
      p = iterator(perc / 100);
      tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);
      tempP = p;
    }
    return tmpLen;
  }

  /**
   * Given a pathInfo, and a distance in pixels, find the percentage from 0 to 1
   * that correspond to that pixels run over the path.
   * The percentage will be then used to find the correct point on the canvas for the path.
   * @param {Array} segInfo fabricJS collection of information on a parsed path
   * @param {Number} distance from starting point, in pixels.
   * @return {Object} info object with x and y ( the point on canvas ) and angle, the tangent on that point;
   */
  function findPercentageForDistance(segInfo, distance) {
    var perc = 0,
      tmpLen = 0,
      iterator = segInfo.iterator,
      tempP = {
        x: segInfo.x,
        y: segInfo.y
      },
      p,
      nextLen,
      nextStep = 0.01,
      angleFinder = segInfo.angleFinder,
      lastPerc;
    // nextStep > 0.0001 covers 0.00015625 that 1/64th of 1/100
    // the path
    while (tmpLen < distance && nextStep > 0.0001) {
      p = iterator(perc);
      lastPerc = perc;
      nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);
      // compare tmpLen each cycle with distance, decide next perc to test.
      if (nextLen + tmpLen > distance) {
        // we discard this step and we make smaller steps.
        perc -= nextStep;
        nextStep /= 2;
      } else {
        tempP = p;
        perc += nextStep;
        tmpLen += nextLen;
      }
    }
    p.angle = angleFinder(lastPerc);
    return p;
  }

  /**
   * Run over a parsed and simplifed path and extrac some informations.
   * informations are length of each command and starting point
   * @param {Array} path fabricJS parsed path commands
   * @return {Array} path commands informations
   */
  function getPathSegmentsInfo(path) {
    var totalLength = 0,
      len = path.length,
      current,
      //x2 and y2 are the coords of segment start
      //x1 and y1 are the coords of the current point
      x1 = 0,
      y1 = 0,
      x2 = 0,
      y2 = 0,
      info = [],
      iterator,
      tempInfo,
      angleFinder;
    for (var i = 0; i < len; i++) {
      current = path[i];
      tempInfo = {
        x: x1,
        y: y1,
        command: current[0]
      };
      switch (current[0]) {
        //first letter
        case 'M':
          tempInfo.length = 0;
          x2 = x1 = current[1];
          y2 = y1 = current[2];
          break;
        case 'L':
          tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);
          x1 = current[1];
          y1 = current[2];
          break;
        case 'C':
          iterator = getPointOnCubicBezierIterator(x1, y1, current[1], current[2], current[3], current[4], current[5], current[6]);
          angleFinder = getTangentCubicIterator(x1, y1, current[1], current[2], current[3], current[4], current[5], current[6]);
          tempInfo.iterator = iterator;
          tempInfo.angleFinder = angleFinder;
          tempInfo.length = pathIterator(iterator, x1, y1);
          x1 = current[5];
          y1 = current[6];
          break;
        case 'Q':
          iterator = getPointOnQuadraticBezierIterator(x1, y1, current[1], current[2], current[3], current[4]);
          angleFinder = getTangentQuadraticIterator(x1, y1, current[1], current[2], current[3], current[4]);
          tempInfo.iterator = iterator;
          tempInfo.angleFinder = angleFinder;
          tempInfo.length = pathIterator(iterator, x1, y1);
          x1 = current[3];
          y1 = current[4];
          break;
        case 'Z':
        case 'z':
          // we add those in order to ease calculations later
          tempInfo.destX = x2;
          tempInfo.destY = y2;
          tempInfo.length = calcLineLength(x1, y1, x2, y2);
          x1 = x2;
          y1 = y2;
          break;
      }
      totalLength += tempInfo.length;
      info.push(tempInfo);
    }
    info.push({
      length: totalLength,
      x: x1,
      y: y1
    });
    return info;
  }
  function getPointOnPath(path, distance, infos) {
    if (!infos) {
      infos = getPathSegmentsInfo(path);
    }
    var i = 0;
    while (distance - infos[i].length > 0 && i < infos.length - 2) {
      distance -= infos[i].length;
      i++;
    }
    // var distance = infos[infos.length - 1] * perc;
    var segInfo = infos[i],
      segPercent = distance / segInfo.length,
      command = segInfo.command,
      segment = path[i],
      info;
    switch (command) {
      case 'M':
        return {
          x: segInfo.x,
          y: segInfo.y,
          angle: 0
        };
      case 'Z':
      case 'z':
        info = new fabric.Point(segInfo.x, segInfo.y).lerp(new fabric.Point(segInfo.destX, segInfo.destY), segPercent);
        info.angle = Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x);
        return info;
      case 'L':
        info = new fabric.Point(segInfo.x, segInfo.y).lerp(new fabric.Point(segment[1], segment[2]), segPercent);
        info.angle = Math.atan2(segment[2] - segInfo.y, segment[1] - segInfo.x);
        return info;
      case 'C':
        return findPercentageForDistance(segInfo, distance);
      case 'Q':
        return findPercentageForDistance(segInfo, distance);
    }
  }

  /**
   *
   * @param {string} pathString
   * @return {(string|number)[][]} An array of SVG path commands
   * @example <caption>Usage</caption>
   * parsePath('M 3 4 Q 3 5 2 1 4 0 Q 9 12 2 1 4 0') === [
   *   ['M', 3, 4],
   *   ['Q', 3, 5, 2, 1, 4, 0],
   *   ['Q', 9, 12, 2, 1, 4, 0],
   * ];
   *
   */
  function parsePath(pathString) {
    var result = [],
      coords = [],
      currentPath,
      parsed,
      re = fabric.rePathCommand,
      rNumber = '[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?\\s*',
      rNumberCommaWsp = '(' + rNumber + ')' + fabric.commaWsp,
      rFlagCommaWsp = '([01])' + fabric.commaWsp + '?',
      rArcSeq = rNumberCommaWsp + '?' + rNumberCommaWsp + '?' + rNumberCommaWsp + rFlagCommaWsp + rFlagCommaWsp + rNumberCommaWsp + '?(' + rNumber + ')',
      regArcArgumentSequence = new RegExp(rArcSeq, 'g'),
      match,
      coordsStr,
      // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)
      path;
    if (!pathString || !pathString.match) {
      return result;
    }
    path = pathString.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);
    for (var i = 0, coordsParsed, len = path.length; i < len; i++) {
      currentPath = path[i];
      coordsStr = currentPath.slice(1).trim();
      coords.length = 0;
      var command = currentPath.charAt(0);
      coordsParsed = [command];
      if (command.toLowerCase() === 'a') {
        // arcs have special flags that apparently don't require spaces so handle special
        for (var args; args = regArcArgumentSequence.exec(coordsStr);) {
          for (var j = 1; j < args.length; j++) {
            coords.push(args[j]);
          }
        }
      } else {
        while (match = re.exec(coordsStr)) {
          coords.push(match[0]);
        }
      }
      for (var j = 0, jlen = coords.length; j < jlen; j++) {
        parsed = parseFloat(coords[j]);
        if (!isNaN(parsed)) {
          coordsParsed.push(parsed);
        }
      }
      var commandLength = commandLengths[command.toLowerCase()],
        repeatedCommand = repeatedCommands[command] || command;
      if (coordsParsed.length - 1 > commandLength) {
        for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {
          result.push([command].concat(coordsParsed.slice(k, k + commandLength)));
          command = repeatedCommand;
        }
      } else {
        result.push(coordsParsed);
      }
    }
    return result;
  }
  ;

  /**
   *
   * Converts points to a smooth SVG path
   * @param {{ x: number,y: number }[]} points Array of points
   * @param {number} [correction] Apply a correction to the path (usually we use `width / 1000`). If value is undefined 0 is used as the correction value.
   * @return {(string|number)[][]} An array of SVG path commands
   */
  function getSmoothPathFromPoints(points, correction) {
    var path = [],
      i,
      p1 = new fabric.Point(points[0].x, points[0].y),
      p2 = new fabric.Point(points[1].x, points[1].y),
      len = points.length,
      multSignX = 1,
      multSignY = 0,
      manyPoints = len > 2;
    correction = correction || 0;
    if (manyPoints) {
      multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;
      multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;
    }
    path.push(['M', p1.x - multSignX * correction, p1.y - multSignY * correction]);
    for (i = 1; i < len; i++) {
      if (!p1.eq(p2)) {
        var midPoint = p1.midPointFrom(p2);
        // p1 is our bezier control point
        // midpoint is our endpoint
        // start point is p(i-1) value.
        path.push(['Q', p1.x, p1.y, midPoint.x, midPoint.y]);
      }
      p1 = points[i];
      if (i + 1 < points.length) {
        p2 = points[i + 1];
      }
    }
    if (manyPoints) {
      multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;
      multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;
    }
    path.push(['L', p1.x + multSignX * correction, p1.y + multSignY * correction]);
    return path;
  }
  /**
   * Transform a path by transforming each segment.
   * it has to be a simplified path or it won't work.
   * WARNING: this depends from pathOffset for correct operation
   * @param {Array} path fabricJS parsed and simplified path commands
   * @param {Array} transform matrix that represent the transformation
   * @param {Object} [pathOffset] the fabric.Path pathOffset
   * @param {Number} pathOffset.x
   * @param {Number} pathOffset.y
   * @returns {Array} the transformed path
   */
  function transformPath(path, transform, pathOffset) {
    if (pathOffset) {
      transform = fabric.util.multiplyTransformMatrices(transform, [1, 0, 0, 1, -pathOffset.x, -pathOffset.y]);
    }
    return path.map(function (pathSegment) {
      var newSegment = pathSegment.slice(0),
        point = {};
      for (var i = 1; i < pathSegment.length - 1; i += 2) {
        point.x = pathSegment[i];
        point.y = pathSegment[i + 1];
        point = fabric.util.transformPoint(point, transform);
        newSegment[i] = point.x;
        newSegment[i + 1] = point.y;
      }
      return newSegment;
    });
  }

  /**
   * Join path commands to go back to svg format
   * @param {Array} pathData fabricJS parsed path commands
   * @return {String} joined path 'M 0 0 L 20 30'
   */
  fabric.util.joinPath = function (pathData) {
    return pathData.map(function (segment) {
      return segment.join(' ');
    }).join(' ');
  };
  fabric.util.parsePath = parsePath;
  fabric.util.makePathSimpler = makePathSimpler;
  fabric.util.getSmoothPathFromPoints = getSmoothPathFromPoints;
  fabric.util.getPathSegmentsInfo = getPathSegmentsInfo;
  fabric.util.getBoundsOfCurve = getBoundsOfCurve;
  fabric.util.getPointOnPath = getPointOnPath;
  fabric.util.transformPath = transformPath;
})();
(function () {
  var slice = Array.prototype.slice;

  /**
   * Invokes method on all items in a given array
   * @memberOf fabric.util.array
   * @param {Array} array Array to iterate over
   * @param {String} method Name of a method to invoke
   * @return {Array}
   */
  function invoke(array, method) {
    var args = slice.call(arguments, 2),
      result = [];
    for (var i = 0, len = array.length; i < len; i++) {
      result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);
    }
    return result;
  }

  /**
   * Finds maximum value in array (not necessarily "first" one)
   * @memberOf fabric.util.array
   * @param {Array} array Array to iterate over
   * @param {String} byProperty
   * @return {*}
   */
  function max(array, byProperty) {
    return find(array, byProperty, function (value1, value2) {
      return value1 >= value2;
    });
  }

  /**
   * Finds minimum value in array (not necessarily "first" one)
   * @memberOf fabric.util.array
   * @param {Array} array Array to iterate over
   * @param {String} byProperty
   * @return {*}
   */
  function min(array, byProperty) {
    return find(array, byProperty, function (value1, value2) {
      return value1 < value2;
    });
  }

  /**
   * @private
   */
  function fill(array, value) {
    var k = array.length;
    while (k--) {
      array[k] = value;
    }
    return array;
  }

  /**
   * @private
   */
  function find(array, byProperty, condition) {
    if (!array || array.length === 0) {
      return;
    }
    var i = array.length - 1,
      result = byProperty ? array[i][byProperty] : array[i];
    if (byProperty) {
      while (i--) {
        if (condition(array[i][byProperty], result)) {
          result = array[i][byProperty];
        }
      }
    } else {
      while (i--) {
        if (condition(array[i], result)) {
          result = array[i];
        }
      }
    }
    return result;
  }

  /**
   * @namespace fabric.util.array
   */
  fabric.util.array = {
    fill: fill,
    invoke: invoke,
    min: min,
    max: max
  };
})();
(function () {
  /**
   * Copies all enumerable properties of one js object to another
   * this does not and cannot compete with generic utils.
   * Does not clone or extend fabric.Object subclasses.
   * This is mostly for internal use and has extra handling for fabricJS objects
   * it skips the canvas and group properties in deep cloning.
   * @memberOf fabric.util.object
   * @param {Object} destination Where to copy to
   * @param {Object} source Where to copy from
   * @param {Boolean} [deep] Whether to extend nested objects
   * @return {Object}
   */

  function extend(destination, source, deep) {
    // JScript DontEnum bug is not taken care of
    // the deep clone is for internal use, is not meant to avoid
    // javascript traps or cloning html element or self referenced objects.
    if (deep) {
      if (!fabric.isLikelyNode && source instanceof Element) {
        // avoid cloning deep images, canvases,
        destination = source;
      } else if (source instanceof Array) {
        destination = [];
        for (var i = 0, len = source.length; i < len; i++) {
          destination[i] = extend({}, source[i], deep);
        }
      } else if (source && _typeof(source) === 'object') {
        for (var property in source) {
          if (property === 'canvas' || property === 'group') {
            // we do not want to clone this props at all.
            // we want to keep the keys in the copy
            destination[property] = null;
          } else if (source.hasOwnProperty(property)) {
            destination[property] = extend({}, source[property], deep);
          }
        }
      } else {
        // this sounds odd for an extend but is ok for recursive use
        destination = source;
      }
    } else {
      for (var property in source) {
        destination[property] = source[property];
      }
    }
    return destination;
  }

  /**
   * Creates an empty object and copies all enumerable properties of another object to it
   * This method is mostly for internal use, and not intended for duplicating shapes in canvas. 
   * @memberOf fabric.util.object
   * @param {Object} object Object to clone
   * @param {Boolean} [deep] Whether to clone nested objects
   * @return {Object}
   */

  //TODO: this function return an empty object if you try to clone null
  function clone(object, deep) {
    return extend({}, object, deep);
  }

  /** @namespace fabric.util.object */
  fabric.util.object = {
    extend: extend,
    clone: clone
  };
  fabric.util.object.extend(fabric.util, fabric.Observable);
})();
(function () {
  /**
   * Camelizes a string
   * @memberOf fabric.util.string
   * @param {String} string String to camelize
   * @return {String} Camelized version of a string
   */
  function camelize(string) {
    return string.replace(/-+(.)?/g, function (match, character) {
      return character ? character.toUpperCase() : '';
    });
  }

  /**
   * Capitalizes a string
   * @memberOf fabric.util.string
   * @param {String} string String to capitalize
   * @param {Boolean} [firstLetterOnly] If true only first letter is capitalized
   * and other letters stay untouched, if false first letter is capitalized
   * and other letters are converted to lowercase.
   * @return {String} Capitalized version of a string
   */
  function capitalize(string, firstLetterOnly) {
    return string.charAt(0).toUpperCase() + (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());
  }

  /**
   * Escapes XML in a string
   * @memberOf fabric.util.string
   * @param {String} string String to escape
   * @return {String} Escaped version of a string
   */
  function escapeXml(string) {
    return string.replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&apos;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  }

  /**
   * Divide a string in the user perceived single units
   * @memberOf fabric.util.string
   * @param {String} textstring String to escape
   * @return {Array} array containing the graphemes
   */
  function graphemeSplit(textstring) {
    var i = 0,
      chr,
      graphemes = [];
    for (i = 0, chr; i < textstring.length; i++) {
      if ((chr = getWholeChar(textstring, i)) === false) {
        continue;
      }
      graphemes.push(chr);
    }
    return graphemes;
  }

  // taken from mdn in the charAt doc page.
  function getWholeChar(str, i) {
    var code = str.charCodeAt(i);
    if (isNaN(code)) {
      return ''; // Position not found
    }

    if (code < 0xD800 || code > 0xDFFF) {
      return str.charAt(i);
    }

    // High surrogate (could change last hex to 0xDB7F to treat high private
    // surrogates as single characters)
    if (0xD800 <= code && code <= 0xDBFF) {
      if (str.length <= i + 1) {
        throw 'High surrogate without following low surrogate';
      }
      var next = str.charCodeAt(i + 1);
      if (0xDC00 > next || next > 0xDFFF) {
        throw 'High surrogate without following low surrogate';
      }
      return str.charAt(i) + str.charAt(i + 1);
    }
    // Low surrogate (0xDC00 <= code && code <= 0xDFFF)
    if (i === 0) {
      throw 'Low surrogate without preceding high surrogate';
    }
    var prev = str.charCodeAt(i - 1);

    // (could change last hex to 0xDB7F to treat high private
    // surrogates as single characters)
    if (0xD800 > prev || prev > 0xDBFF) {
      throw 'Low surrogate without preceding high surrogate';
    }
    // We can pass over low surrogates now as the second component
    // in a pair which we have already processed
    return false;
  }

  /**
   * String utilities
   * @namespace fabric.util.string
   */
  fabric.util.string = {
    camelize: camelize,
    capitalize: capitalize,
    escapeXml: escapeXml,
    graphemeSplit: graphemeSplit
  };
})();
(function () {
  var slice = Array.prototype.slice,
    emptyFunction = function emptyFunction() {},
    IS_DONTENUM_BUGGY = function () {
      for (var p in {
        toString: 1
      }) {
        if (p === 'toString') {
          return false;
        }
      }
      return true;
    }(),
    /** @ignore */
    addMethods = function addMethods(klass, source, parent) {
      for (var property in source) {
        if (property in klass.prototype && typeof klass.prototype[property] === 'function' && (source[property] + '').indexOf('callSuper') > -1) {
          klass.prototype[property] = function (property) {
            return function () {
              var superclass = this.constructor.superclass;
              this.constructor.superclass = parent;
              var returnValue = source[property].apply(this, arguments);
              this.constructor.superclass = superclass;
              if (property !== 'initialize') {
                return returnValue;
              }
            };
          }(property);
        } else {
          klass.prototype[property] = source[property];
        }
        if (IS_DONTENUM_BUGGY) {
          if (source.toString !== Object.prototype.toString) {
            klass.prototype.toString = source.toString;
          }
          if (source.valueOf !== Object.prototype.valueOf) {
            klass.prototype.valueOf = source.valueOf;
          }
        }
      }
    };
  function Subclass() {}
  function callSuper(methodName) {
    var parentMethod = null,
      _this = this;

    // climb prototype chain to find method not equal to callee's method
    while (_this.constructor.superclass) {
      var superClassMethod = _this.constructor.superclass.prototype[methodName];
      if (_this[methodName] !== superClassMethod) {
        parentMethod = superClassMethod;
        break;
      }
      // eslint-disable-next-line
      _this = _this.constructor.superclass.prototype;
    }
    if (!parentMethod) {
      return console.log('tried to callSuper ' + methodName + ', method not found in prototype chain', this);
    }
    return arguments.length > 1 ? parentMethod.apply(this, slice.call(arguments, 1)) : parentMethod.call(this);
  }

  /**
   * Helper for creation of "classes".
   * @memberOf fabric.util
   * @param {Function} [parent] optional "Class" to inherit from
   * @param {Object} [properties] Properties shared by all instances of this class
   *                  (be careful modifying objects defined here as this would affect all instances)
   */
  function createClass() {
    var parent = null,
      properties = slice.call(arguments, 0);
    if (typeof properties[0] === 'function') {
      parent = properties.shift();
    }
    function klass() {
      this.initialize.apply(this, arguments);
    }
    klass.superclass = parent;
    klass.subclasses = [];
    if (parent) {
      Subclass.prototype = parent.prototype;
      klass.prototype = new Subclass();
      parent.subclasses.push(klass);
    }
    for (var i = 0, length = properties.length; i < length; i++) {
      addMethods(klass, properties[i], parent);
    }
    if (!klass.prototype.initialize) {
      klass.prototype.initialize = emptyFunction;
    }
    klass.prototype.constructor = klass;
    klass.prototype.callSuper = callSuper;
    return klass;
  }
  fabric.util.createClass = createClass;
})();
(function () {
  // since ie11 can use addEventListener but they do not support options, i need to check
  var couldUseAttachEvent = !!fabric.document.createElement('div').attachEvent,
    touchEvents = ['touchstart', 'touchmove', 'touchend'];
  /**
   * Adds an event listener to an element
   * @function
   * @memberOf fabric.util
   * @param {HTMLElement} element
   * @param {String} eventName
   * @param {Function} handler
   */
  fabric.util.addListener = function (element, eventName, handler, options) {
    element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);
  };

  /**
   * Removes an event listener from an element
   * @function
   * @memberOf fabric.util
   * @param {HTMLElement} element
   * @param {String} eventName
   * @param {Function} handler
   */
  fabric.util.removeListener = function (element, eventName, handler, options) {
    element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);
  };
  function getTouchInfo(event) {
    var touchProp = event.changedTouches;
    if (touchProp && touchProp[0]) {
      return touchProp[0];
    }
    return event;
  }
  fabric.util.getPointer = function (event) {
    var element = event.target,
      scroll = fabric.util.getScrollLeftTop(element),
      _evt = getTouchInfo(event);
    return {
      x: _evt.clientX + scroll.left,
      y: _evt.clientY + scroll.top
    };
  };
  fabric.util.isTouchEvent = function (event) {
    return touchEvents.indexOf(event.type) > -1 || event.pointerType === 'touch';
  };
})();
(function () {
  /**
   * Cross-browser wrapper for setting element's style
   * @memberOf fabric.util
   * @param {HTMLElement} element
   * @param {Object} styles
   * @return {HTMLElement} Element that was passed as a first argument
   */
  function setStyle(element, styles) {
    var elementStyle = element.style;
    if (!elementStyle) {
      return element;
    }
    if (typeof styles === 'string') {
      element.style.cssText += ';' + styles;
      return styles.indexOf('opacity') > -1 ? setOpacity(element, styles.match(/opacity:\s*(\d?\.?\d*)/)[1]) : element;
    }
    for (var property in styles) {
      if (property === 'opacity') {
        setOpacity(element, styles[property]);
      } else {
        var normalizedProperty = property === 'float' || property === 'cssFloat' ? typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat' : property;
        elementStyle.setProperty(normalizedProperty, styles[property]);
      }
    }
    return element;
  }
  var parseEl = fabric.document.createElement('div'),
    supportsOpacity = typeof parseEl.style.opacity === 'string',
    supportsFilters = typeof parseEl.style.filter === 'string',
    reOpacity = /alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,
    /** @ignore */
    setOpacity = function setOpacity(element) {
      return element;
    };
  if (supportsOpacity) {
    /** @ignore */
    setOpacity = function setOpacity(element, value) {
      element.style.opacity = value;
      return element;
    };
  } else if (supportsFilters) {
    /** @ignore */
    setOpacity = function setOpacity(element, value) {
      var es = element.style;
      if (element.currentStyle && !element.currentStyle.hasLayout) {
        es.zoom = 1;
      }
      if (reOpacity.test(es.filter)) {
        value = value >= 0.9999 ? '' : 'alpha(opacity=' + value * 100 + ')';
        es.filter = es.filter.replace(reOpacity, value);
      } else {
        es.filter += ' alpha(opacity=' + value * 100 + ')';
      }
      return element;
    };
  }
  fabric.util.setStyle = setStyle;
})();
(function () {
  var _slice = Array.prototype.slice;

  /**
   * Takes id and returns an element with that id (if one exists in a document)
   * @memberOf fabric.util
   * @param {String|HTMLElement} id
   * @return {HTMLElement|null}
   */
  function getById(id) {
    return typeof id === 'string' ? fabric.document.getElementById(id) : id;
  }
  var sliceCanConvertNodelists,
    /**
     * Converts an array-like object (e.g. arguments or NodeList) to an array
     * @memberOf fabric.util
     * @param {Object} arrayLike
     * @return {Array}
     */
    toArray = function toArray(arrayLike) {
      return _slice.call(arrayLike, 0);
    };
  try {
    sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;
  } catch (err) {}
  if (!sliceCanConvertNodelists) {
    toArray = function toArray(arrayLike) {
      var arr = new Array(arrayLike.length),
        i = arrayLike.length;
      while (i--) {
        arr[i] = arrayLike[i];
      }
      return arr;
    };
  }

  /**
   * Creates specified element with specified attributes
   * @memberOf fabric.util
   * @param {String} tagName Type of an element to create
   * @param {Object} [attributes] Attributes to set on an element
   * @return {HTMLElement} Newly created element
   */
  function makeElement(tagName, attributes) {
    var el = fabric.document.createElement(tagName);
    for (var prop in attributes) {
      if (prop === 'class') {
        el.className = attributes[prop];
      } else if (prop === 'for') {
        el.htmlFor = attributes[prop];
      } else {
        el.setAttribute(prop, attributes[prop]);
      }
    }
    return el;
  }

  /**
   * Adds class to an element
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to add class to
   * @param {String} className Class to add to an element
   */
  function addClass(element, className) {
    if (element && (' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {
      element.className += (element.className ? ' ' : '') + className;
    }
  }

  /**
   * Wraps element with another element
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to wrap
   * @param {HTMLElement|String} wrapper Element to wrap with
   * @param {Object} [attributes] Attributes to set on a wrapper
   * @return {HTMLElement} wrapper
   */
  function wrapElement(element, wrapper, attributes) {
    if (typeof wrapper === 'string') {
      wrapper = makeElement(wrapper, attributes);
    }
    if (element.parentNode) {
      element.parentNode.replaceChild(wrapper, element);
    }
    wrapper.appendChild(element);
    return wrapper;
  }

  /**
   * Returns element scroll offsets
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to operate on
   * @return {Object} Object with left/top values
   */
  function getScrollLeftTop(element) {
    var left = 0,
      top = 0,
      docElement = fabric.document.documentElement,
      body = fabric.document.body || {
        scrollLeft: 0,
        scrollTop: 0
      };

    // While loop checks (and then sets element to) .parentNode OR .host
    //  to account for ShadowDOM. We still want to traverse up out of ShadowDOM,
    //  but the .parentNode of a root ShadowDOM node will always be null, instead
    //  it should be accessed through .host. See http://stackoverflow.com/a/24765528/4383938
    while (element && (element.parentNode || element.host)) {
      // Set element to element parent, or 'host' in case of ShadowDOM
      element = element.parentNode || element.host;
      if (element === fabric.document) {
        left = body.scrollLeft || docElement.scrollLeft || 0;
        top = body.scrollTop || docElement.scrollTop || 0;
      } else {
        left += element.scrollLeft || 0;
        top += element.scrollTop || 0;
      }
      if (element.nodeType === 1 && element.style.position === 'fixed') {
        break;
      }
    }
    return {
      left: left,
      top: top
    };
  }

  /**
   * Returns offset for a given element
   * @function
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to get offset for
   * @return {Object} Object with "left" and "top" properties
   */
  function getElementOffset(element) {
    var docElem,
      doc = element && element.ownerDocument,
      box = {
        left: 0,
        top: 0
      },
      offset = {
        left: 0,
        top: 0
      },
      scrollLeftTop,
      offsetAttributes = {
        borderLeftWidth: 'left',
        borderTopWidth: 'top',
        paddingLeft: 'left',
        paddingTop: 'top'
      };
    if (!doc) {
      return offset;
    }
    for (var attr in offsetAttributes) {
      offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;
    }
    docElem = doc.documentElement;
    if (typeof element.getBoundingClientRect !== 'undefined') {
      box = element.getBoundingClientRect();
    }
    scrollLeftTop = getScrollLeftTop(element);
    return {
      left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,
      top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top
    };
  }

  /**
   * Returns style attribute value of a given element
   * @memberOf fabric.util
   * @param {HTMLElement} element Element to get style attribute for
   * @param {String} attr Style attribute to get for element
   * @return {String} Style attribute value of the given element.
   */
  var getElementStyle;
  if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {
    getElementStyle = function getElementStyle(element, attr) {
      var style = fabric.document.defaultView.getComputedStyle(element, null);
      return style ? style[attr] : undefined;
    };
  } else {
    getElementStyle = function getElementStyle(element, attr) {
      var value = element.style[attr];
      if (!value && element.currentStyle) {
        value = element.currentStyle[attr];
      }
      return value;
    };
  }
  (function () {
    var style = fabric.document.documentElement.style,
      selectProp = 'userSelect' in style ? 'userSelect' : 'MozUserSelect' in style ? 'MozUserSelect' : 'WebkitUserSelect' in style ? 'WebkitUserSelect' : 'KhtmlUserSelect' in style ? 'KhtmlUserSelect' : '';

    /**
     * Makes element unselectable
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to make unselectable
     * @return {HTMLElement} Element that was passed in
     */
    function makeElementUnselectable(element) {
      if (typeof element.onselectstart !== 'undefined') {
        element.onselectstart = fabric.util.falseFunction;
      }
      if (selectProp) {
        element.style[selectProp] = 'none';
      } else if (typeof element.unselectable === 'string') {
        element.unselectable = 'on';
      }
      return element;
    }

    /**
     * Makes element selectable
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to make selectable
     * @return {HTMLElement} Element that was passed in
     */
    function makeElementSelectable(element) {
      if (typeof element.onselectstart !== 'undefined') {
        element.onselectstart = null;
      }
      if (selectProp) {
        element.style[selectProp] = '';
      } else if (typeof element.unselectable === 'string') {
        element.unselectable = '';
      }
      return element;
    }
    fabric.util.makeElementUnselectable = makeElementUnselectable;
    fabric.util.makeElementSelectable = makeElementSelectable;
  })();
  function getNodeCanvas(element) {
    var impl = fabric.jsdomImplForWrapper(element);
    return impl._canvas || impl._image;
  }
  ;
  function cleanUpJsdomNode(element) {
    if (!fabric.isLikelyNode) {
      return;
    }
    var impl = fabric.jsdomImplForWrapper(element);
    if (impl) {
      impl._image = null;
      impl._canvas = null;
      // unsure if necessary
      impl._currentSrc = null;
      impl._attributes = null;
      impl._classList = null;
    }
  }
  function setImageSmoothing(ctx, value) {
    ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;
    ctx.imageSmoothingEnabled = value;
  }

  /**
   * setImageSmoothing sets the context imageSmoothingEnabled property.
   * Used by canvas and by ImageObject.
   * @memberOf fabric.util
   * @since 4.0.0
   * @param {HTMLRenderingContext2D} ctx to set on
   * @param {Boolean} value true or false
   */
  fabric.util.setImageSmoothing = setImageSmoothing;
  fabric.util.getById = getById;
  fabric.util.toArray = toArray;
  fabric.util.addClass = addClass;
  fabric.util.makeElement = makeElement;
  fabric.util.wrapElement = wrapElement;
  fabric.util.getScrollLeftTop = getScrollLeftTop;
  fabric.util.getElementOffset = getElementOffset;
  fabric.util.getNodeCanvas = getNodeCanvas;
  fabric.util.cleanUpJsdomNode = cleanUpJsdomNode;
})();
(function () {
  function addParamToUrl(url, param) {
    return url + (/\?/.test(url) ? '&' : '?') + param;
  }
  function emptyFn() {}

  /**
   * Cross-browser abstraction for sending XMLHttpRequest
   * @memberOf fabric.util
   * @param {String} url URL to send XMLHttpRequest to
   * @param {Object} [options] Options object
   * @param {String} [options.method="GET"]
   * @param {String} [options.parameters] parameters to append to url in GET or in body
   * @param {String} [options.body] body to send with POST or PUT request
   * @param {Function} options.onComplete Callback to invoke when request is completed
   * @return {XMLHttpRequest} request
   */
  function request(url, options) {
    options || (options = {});
    var method = options.method ? options.method.toUpperCase() : 'GET',
      onComplete = options.onComplete || function () {},
      xhr = new fabric.window.XMLHttpRequest(),
      body = options.body || options.parameters;

    /** @ignore */
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4) {
        onComplete(xhr);
        xhr.onreadystatechange = emptyFn;
      }
    };
    if (method === 'GET') {
      body = null;
      if (typeof options.parameters === 'string') {
        url = addParamToUrl(url, options.parameters);
      }
    }
    xhr.open(method, url, true);
    if (method === 'POST' || method === 'PUT') {
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    }
    xhr.send(body);
    return xhr;
  }
  fabric.util.request = request;
})();

/**
 * Wrapper around `console.log` (when available)
 * @param {*} [values] Values to log
 */
fabric.log = console.log;

/**
 * Wrapper around `console.warn` (when available)
 * @param {*} [values] Values to log as a warning
 */
fabric.warn = console.warn;
(function () {
  var extend = fabric.util.object.extend,
    clone = fabric.util.object.clone;

  /**
   * @typedef {Object} AnimationOptions
   * Animation of a value or list of values.
   * When using lists, think of something like this:
   * fabric.util.animate({
   *   startValue: [1, 2, 3],
   *   endValue: [2, 4, 6],
   *   onChange: function([a, b, c]) {
   *     canvas.zoomToPoint({x: b, y: c}, a)
   *     canvas.renderAll()
   *   }
   * });
   * @example
   * @property {Function} [onChange] Callback; invoked on every value change
   * @property {Function} [onComplete] Callback; invoked when value change is completed
   * @example
   * // Note: startValue, endValue, and byValue must match the type
   * var animationOptions = { startValue: 0, endValue: 1, byValue: 0.25 }
   * var animationOptions = { startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] }
   * @property {number | number[]} [startValue=0] Starting value
   * @property {number | number[]} [endValue=100] Ending value
   * @property {number | number[]} [byValue=100] Value to modify the property by
   * @property {Function} [easing] Easing function
   * @property {Number} [duration=500] Duration of change (in ms)
   * @property {Function} [abort] Additional function with logic. If returns true, animation aborts.
   *
   * @typedef {() => void} CancelFunction
   *
   * @typedef {Object} AnimationCurrentState
   * @property {number | number[]} currentValue value in range [`startValue`, `endValue`]
   * @property {number} completionRate value in range [0, 1]
   * @property {number} durationRate value in range [0, 1]
   *
   * @typedef {(AnimationOptions & AnimationCurrentState & { cancel: CancelFunction }} AnimationContext
   */

  /**
   * Array holding all running animations
   * @memberof fabric
   * @type {AnimationContext[]}
   */
  var RUNNING_ANIMATIONS = [];
  fabric.util.object.extend(RUNNING_ANIMATIONS, {
    /**
     * cancel all running animations at the next requestAnimFrame
     * @returns {AnimationContext[]}
     */
    cancelAll: function cancelAll() {
      var animations = this.splice(0);
      animations.forEach(function (animation) {
        animation.cancel();
      });
      return animations;
    },
    /**
     * cancel all running animations attached to canvas at the next requestAnimFrame
     * @param {fabric.Canvas} canvas
     * @returns {AnimationContext[]}
     */
    cancelByCanvas: function cancelByCanvas(canvas) {
      if (!canvas) {
        return [];
      }
      var cancelled = this.filter(function (animation) {
        return _typeof(animation.target) === 'object' && animation.target.canvas === canvas;
      });
      cancelled.forEach(function (animation) {
        animation.cancel();
      });
      return cancelled;
    },
    /**
     * cancel all running animations for target at the next requestAnimFrame
     * @param {*} target
     * @returns {AnimationContext[]}
     */
    cancelByTarget: function cancelByTarget(target) {
      var cancelled = this.findAnimationsByTarget(target);
      cancelled.forEach(function (animation) {
        animation.cancel();
      });
      return cancelled;
    },
    /**
     *
     * @param {CancelFunction} cancelFunc the function returned by animate
     * @returns {number}
     */
    findAnimationIndex: function findAnimationIndex(cancelFunc) {
      return this.indexOf(this.findAnimation(cancelFunc));
    },
    /**
     *
     * @param {CancelFunction} cancelFunc the function returned by animate
     * @returns {AnimationContext | undefined} animation's options object
     */
    findAnimation: function findAnimation(cancelFunc) {
      return this.find(function (animation) {
        return animation.cancel === cancelFunc;
      });
    },
    /**
     *
     * @param {*} target the object that is assigned to the target property of the animation context
     * @returns {AnimationContext[]} array of animation options object associated with target
     */
    findAnimationsByTarget: function findAnimationsByTarget(target) {
      if (!target) {
        return [];
      }
      return this.filter(function (animation) {
        return animation.target === target;
      });
    }
  });
  function noop() {
    return false;
  }
  function defaultEasing(t, b, c, d) {
    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
  }

  /**
   * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.
   * @memberOf fabric.util
   * @param {AnimationOptions} [options] Animation options
   * @example
   * // Note: startValue, endValue, and byValue must match the type
   * fabric.util.animate({ startValue: 0, endValue: 1, byValue: 0.25 })
   * fabric.util.animate({ startValue: [0, 1], endValue: [1, 2], byValue: [0.25, 0.25] })
   * @returns {CancelFunction} cancel function
   */
  function animate(options) {
    options || (options = {});
    var _cancel = false,
      context,
      removeFromRegistry = function removeFromRegistry() {
        var index = fabric.runningAnimations.indexOf(context);
        return index > -1 && fabric.runningAnimations.splice(index, 1)[0];
      };
    context = extend(clone(options), {
      cancel: function cancel() {
        _cancel = true;
        return removeFromRegistry();
      },
      currentValue: 'startValue' in options ? options.startValue : 0,
      completionRate: 0,
      durationRate: 0
    });
    fabric.runningAnimations.push(context);
    requestAnimFrame(function (timestamp) {
      var start = timestamp || +new Date(),
        duration = options.duration || 500,
        finish = start + duration,
        time,
        onChange = options.onChange || noop,
        abort = options.abort || noop,
        onComplete = options.onComplete || noop,
        easing = options.easing || defaultEasing,
        isMany = 'startValue' in options ? options.startValue.length > 0 : false,
        startValue = 'startValue' in options ? options.startValue : 0,
        endValue = 'endValue' in options ? options.endValue : 100,
        byValue = options.byValue || (isMany ? startValue.map(function (value, i) {
          return endValue[i] - startValue[i];
        }) : endValue - startValue);
      options.onStart && options.onStart();
      (function tick(ticktime) {
        time = ticktime || +new Date();
        var currentTime = time > finish ? duration : time - start,
          timePerc = currentTime / duration,
          current = isMany ? startValue.map(function (_value, i) {
            return easing(currentTime, startValue[i], byValue[i], duration);
          }) : easing(currentTime, startValue, byValue, duration),
          valuePerc = isMany ? Math.abs((current[0] - startValue[0]) / byValue[0]) : Math.abs((current - startValue) / byValue);
        //  update context
        context.currentValue = isMany ? current.slice() : current;
        context.completionRate = valuePerc;
        context.durationRate = timePerc;
        if (_cancel) {
          return;
        }
        if (abort(current, valuePerc, timePerc)) {
          removeFromRegistry();
          return;
        }
        if (time > finish) {
          //  update context
          context.currentValue = isMany ? endValue.slice() : endValue;
          context.completionRate = 1;
          context.durationRate = 1;
          //  execute callbacks
          onChange(isMany ? endValue.slice() : endValue, 1, 1);
          onComplete(endValue, 1, 1);
          removeFromRegistry();
          return;
        } else {
          onChange(current, valuePerc, timePerc);
          requestAnimFrame(tick);
        }
      })(start);
    });
    return context.cancel;
  }
  var _requestAnimFrame = fabric.window.requestAnimationFrame || fabric.window.webkitRequestAnimationFrame || fabric.window.mozRequestAnimationFrame || fabric.window.oRequestAnimationFrame || fabric.window.msRequestAnimationFrame || function (callback) {
    return fabric.window.setTimeout(callback, 1000 / 60);
  };
  var _cancelAnimFrame = fabric.window.cancelAnimationFrame || fabric.window.clearTimeout;

  /**
   * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/
   * In order to get a precise start time, `requestAnimFrame` should be called as an entry into the method
   * @memberOf fabric.util
   * @param {Function} callback Callback to invoke
   * @param {DOMElement} element optional Element to associate with animation
   */
  function requestAnimFrame() {
    return _requestAnimFrame.apply(fabric.window, arguments);
  }
  function cancelAnimFrame() {
    return _cancelAnimFrame.apply(fabric.window, arguments);
  }
  fabric.util.animate = animate;
  fabric.util.requestAnimFrame = requestAnimFrame;
  fabric.util.cancelAnimFrame = cancelAnimFrame;
  fabric.runningAnimations = RUNNING_ANIMATIONS;
})();
(function () {
  // Calculate an in-between color. Returns a "rgba()" string.
  // Credit: Edwin Martin <edwin@bitstorm.org>
  //         http://www.bitstorm.org/jquery/color-animation/jquery.animate-colors.js
  function calculateColor(begin, end, pos) {
    var color = 'rgba(' + parseInt(begin[0] + pos * (end[0] - begin[0]), 10) + ',' + parseInt(begin[1] + pos * (end[1] - begin[1]), 10) + ',' + parseInt(begin[2] + pos * (end[2] - begin[2]), 10);
    color += ',' + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);
    color += ')';
    return color;
  }

  /**
   * Changes the color from one to another within certain period of time, invoking callbacks as value is being changed.
   * @memberOf fabric.util
   * @param {String} fromColor The starting color in hex or rgb(a) format.
   * @param {String} toColor The starting color in hex or rgb(a) format.
   * @param {Number} [duration] Duration of change (in ms).
   * @param {Object} [options] Animation options
   * @param {Function} [options.onChange] Callback; invoked on every value change
   * @param {Function} [options.onComplete] Callback; invoked when value change is completed
   * @param {Function} [options.colorEasing] Easing function. Note that this function only take two arguments (currentTime, duration). Thus the regular animation easing functions cannot be used.
   * @param {Function} [options.abort] Additional function with logic. If returns true, onComplete is called.
   * @returns {Function} abort function
   */
  function animateColor(fromColor, toColor, duration, options) {
    var startColor = new fabric.Color(fromColor).getSource(),
      endColor = new fabric.Color(toColor).getSource(),
      originalOnComplete = options.onComplete,
      originalOnChange = options.onChange;
    options = options || {};
    return fabric.util.animate(fabric.util.object.extend(options, {
      duration: duration || 500,
      startValue: startColor,
      endValue: endColor,
      byValue: endColor,
      easing: function easing(currentTime, startValue, byValue, duration) {
        var posValue = options.colorEasing ? options.colorEasing(currentTime, duration) : 1 - Math.cos(currentTime / duration * (Math.PI / 2));
        return calculateColor(startValue, byValue, posValue);
      },
      // has to take in account for color restoring;
      onComplete: function onComplete(current, valuePerc, timePerc) {
        if (originalOnComplete) {
          return originalOnComplete(calculateColor(endColor, endColor, 0), valuePerc, timePerc);
        }
      },
      onChange: function onChange(current, valuePerc, timePerc) {
        if (originalOnChange) {
          if (Array.isArray(current)) {
            return originalOnChange(calculateColor(current, current, 0), valuePerc, timePerc);
          }
          originalOnChange(current, valuePerc, timePerc);
        }
      }
    }));
  }
  fabric.util.animateColor = animateColor;
})();
(function () {
  function normalize(a, c, p, s) {
    if (a < Math.abs(c)) {
      a = c;
      s = p / 4;
    } else {
      //handle the 0/0 case:
      if (c === 0 && a === 0) {
        s = p / (2 * Math.PI) * Math.asin(1);
      } else {
        s = p / (2 * Math.PI) * Math.asin(c / a);
      }
    }
    return {
      a: a,
      c: c,
      p: p,
      s: s
    };
  }
  function elastic(opts, t, d) {
    return opts.a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p);
  }

  /**
   * Cubic easing out
   * @memberOf fabric.util.ease
   */
  function easeOutCubic(t, b, c, d) {
    return c * ((t = t / d - 1) * t * t + 1) + b;
  }

  /**
   * Cubic easing in and out
   * @memberOf fabric.util.ease
   */
  function easeInOutCubic(t, b, c, d) {
    t /= d / 2;
    if (t < 1) {
      return c / 2 * t * t * t + b;
    }
    return c / 2 * ((t -= 2) * t * t + 2) + b;
  }

  /**
   * Quartic easing in
   * @memberOf fabric.util.ease
   */
  function easeInQuart(t, b, c, d) {
    return c * (t /= d) * t * t * t + b;
  }

  /**
   * Quartic easing out
   * @memberOf fabric.util.ease
   */
  function easeOutQuart(t, b, c, d) {
    return -c * ((t = t / d - 1) * t * t * t - 1) + b;
  }

  /**
   * Quartic easing in and out
   * @memberOf fabric.util.ease
   */
  function easeInOutQuart(t, b, c, d) {
    t /= d / 2;
    if (t < 1) {
      return c / 2 * t * t * t * t + b;
    }
    return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
  }

  /**
   * Quintic easing in
   * @memberOf fabric.util.ease
   */
  function easeInQuint(t, b, c, d) {
    return c * (t /= d) * t * t * t * t + b;
  }

  /**
   * Quintic easing out
   * @memberOf fabric.util.ease
   */
  function easeOutQuint(t, b, c, d) {
    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
  }

  /**
   * Quintic easing in and out
   * @memberOf fabric.util.ease
   */
  function easeInOutQuint(t, b, c, d) {
    t /= d / 2;
    if (t < 1) {
      return c / 2 * t * t * t * t * t + b;
    }
    return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
  }

  /**
   * Sinusoidal easing in
   * @memberOf fabric.util.ease
   */
  function easeInSine(t, b, c, d) {
    return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
  }

  /**
   * Sinusoidal easing out
   * @memberOf fabric.util.ease
   */
  function easeOutSine(t, b, c, d) {
    return c * Math.sin(t / d * (Math.PI / 2)) + b;
  }

  /**
   * Sinusoidal easing in and out
   * @memberOf fabric.util.ease
   */
  function easeInOutSine(t, b, c, d) {
    return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
  }

  /**
   * Exponential easing in
   * @memberOf fabric.util.ease
   */
  function easeInExpo(t, b, c, d) {
    return t === 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
  }

  /**
   * Exponential easing out
   * @memberOf fabric.util.ease
   */
  function easeOutExpo(t, b, c, d) {
    return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
  }

  /**
   * Exponential easing in and out
   * @memberOf fabric.util.ease
   */
  function easeInOutExpo(t, b, c, d) {
    if (t === 0) {
      return b;
    }
    if (t === d) {
      return b + c;
    }
    t /= d / 2;
    if (t < 1) {
      return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
    }
    return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
  }

  /**
   * Circular easing in
   * @memberOf fabric.util.ease
   */
  function easeInCirc(t, b, c, d) {
    return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
  }

  /**
   * Circular easing out
   * @memberOf fabric.util.ease
   */
  function easeOutCirc(t, b, c, d) {
    return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
  }

  /**
   * Circular easing in and out
   * @memberOf fabric.util.ease
   */
  function easeInOutCirc(t, b, c, d) {
    t /= d / 2;
    if (t < 1) {
      return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
    }
    return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
  }

  /**
   * Elastic easing in
   * @memberOf fabric.util.ease
   */
  function easeInElastic(t, b, c, d) {
    var s = 1.70158,
      p = 0,
      a = c;
    if (t === 0) {
      return b;
    }
    t /= d;
    if (t === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    var opts = normalize(a, c, p, s);
    return -elastic(opts, t, d) + b;
  }

  /**
   * Elastic easing out
   * @memberOf fabric.util.ease
   */
  function easeOutElastic(t, b, c, d) {
    var s = 1.70158,
      p = 0,
      a = c;
    if (t === 0) {
      return b;
    }
    t /= d;
    if (t === 1) {
      return b + c;
    }
    if (!p) {
      p = d * 0.3;
    }
    var opts = normalize(a, c, p, s);
    return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p) + opts.c + b;
  }

  /**
   * Elastic easing in and out
   * @memberOf fabric.util.ease
   */
  function easeInOutElastic(t, b, c, d) {
    var s = 1.70158,
      p = 0,
      a = c;
    if (t === 0) {
      return b;
    }
    t /= d / 2;
    if (t === 2) {
      return b + c;
    }
    if (!p) {
      p = d * (0.3 * 1.5);
    }
    var opts = normalize(a, c, p, s);
    if (t < 1) {
      return -0.5 * elastic(opts, t, d) + b;
    }
    return opts.a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p) * 0.5 + opts.c + b;
  }

  /**
   * Backwards easing in
   * @memberOf fabric.util.ease
   */
  function easeInBack(t, b, c, d, s) {
    if (s === undefined) {
      s = 1.70158;
    }
    return c * (t /= d) * t * ((s + 1) * t - s) + b;
  }

  /**
   * Backwards easing out
   * @memberOf fabric.util.ease
   */
  function easeOutBack(t, b, c, d, s) {
    if (s === undefined) {
      s = 1.70158;
    }
    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
  }

  /**
   * Backwards easing in and out
   * @memberOf fabric.util.ease
   */
  function easeInOutBack(t, b, c, d, s) {
    if (s === undefined) {
      s = 1.70158;
    }
    t /= d / 2;
    if (t < 1) {
      return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
    }
    return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
  }

  /**
   * Bouncing easing in
   * @memberOf fabric.util.ease
   */
  function easeInBounce(t, b, c, d) {
    return c - easeOutBounce(d - t, 0, c, d) + b;
  }

  /**
   * Bouncing easing out
   * @memberOf fabric.util.ease
   */
  function easeOutBounce(t, b, c, d) {
    if ((t /= d) < 1 / 2.75) {
      return c * (7.5625 * t * t) + b;
    } else if (t < 2 / 2.75) {
      return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
    } else if (t < 2.5 / 2.75) {
      return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
    } else {
      return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
    }
  }

  /**
   * Bouncing easing in and out
   * @memberOf fabric.util.ease
   */
  function easeInOutBounce(t, b, c, d) {
    if (t < d / 2) {
      return easeInBounce(t * 2, 0, c, d) * 0.5 + b;
    }
    return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
  }

  /**
   * Easing functions
   * See <a href="http://gizma.com/easing/">Easing Equations by Robert Penner</a>
   * @namespace fabric.util.ease
   */
  fabric.util.ease = {
    /**
     * Quadratic easing in
     * @memberOf fabric.util.ease
     */
    easeInQuad: function easeInQuad(t, b, c, d) {
      return c * (t /= d) * t + b;
    },
    /**
     * Quadratic easing out
     * @memberOf fabric.util.ease
     */
    easeOutQuad: function easeOutQuad(t, b, c, d) {
      return -c * (t /= d) * (t - 2) + b;
    },
    /**
     * Quadratic easing in and out
     * @memberOf fabric.util.ease
     */
    easeInOutQuad: function easeInOutQuad(t, b, c, d) {
      t /= d / 2;
      if (t < 1) {
        return c / 2 * t * t + b;
      }
      return -c / 2 * (--t * (t - 2) - 1) + b;
    },
    /**
     * Cubic easing in
     * @memberOf fabric.util.ease
     */
    easeInCubic: function easeInCubic(t, b, c, d) {
      return c * (t /= d) * t * t + b;
    },
    easeOutCubic: easeOutCubic,
    easeInOutCubic: easeInOutCubic,
    easeInQuart: easeInQuart,
    easeOutQuart: easeOutQuart,
    easeInOutQuart: easeInOutQuart,
    easeInQuint: easeInQuint,
    easeOutQuint: easeOutQuint,
    easeInOutQuint: easeInOutQuint,
    easeInSine: easeInSine,
    easeOutSine: easeOutSine,
    easeInOutSine: easeInOutSine,
    easeInExpo: easeInExpo,
    easeOutExpo: easeOutExpo,
    easeInOutExpo: easeInOutExpo,
    easeInCirc: easeInCirc,
    easeOutCirc: easeOutCirc,
    easeInOutCirc: easeInOutCirc,
    easeInElastic: easeInElastic,
    easeOutElastic: easeOutElastic,
    easeInOutElastic: easeInOutElastic,
    easeInBack: easeInBack,
    easeOutBack: easeOutBack,
    easeInOutBack: easeInOutBack,
    easeInBounce: easeInBounce,
    easeOutBounce: easeOutBounce,
    easeInOutBounce: easeInOutBounce
  };
})();
(function (global) {
  'use strict';

  /**
   * @name fabric
   * @namespace
   */
  var fabric = global.fabric || (global.fabric = {}),
    extend = fabric.util.object.extend,
    clone = fabric.util.object.clone,
    toFixed = fabric.util.toFixed,
    parseUnit = fabric.util.parseUnit,
    multiplyTransformMatrices = fabric.util.multiplyTransformMatrices,
    svgValidTagNames = ['path', 'circle', 'polygon', 'polyline', 'ellipse', 'rect', 'line', 'image', 'text'],
    svgViewBoxElements = ['symbol', 'image', 'marker', 'pattern', 'view', 'svg'],
    svgInvalidAncestors = ['pattern', 'defs', 'symbol', 'metadata', 'clipPath', 'mask', 'desc'],
    svgValidParents = ['symbol', 'g', 'a', 'svg', 'clipPath', 'defs'],
    attributesMap = {
      cx: 'left',
      x: 'left',
      r: 'radius',
      cy: 'top',
      y: 'top',
      display: 'visible',
      visibility: 'visible',
      transform: 'transformMatrix',
      'fill-opacity': 'fillOpacity',
      'fill-rule': 'fillRule',
      'font-family': 'fontFamily',
      'font-size': 'fontSize',
      'font-style': 'fontStyle',
      'font-weight': 'fontWeight',
      'letter-spacing': 'charSpacing',
      'paint-order': 'paintFirst',
      'stroke-dasharray': 'strokeDashArray',
      'stroke-dashoffset': 'strokeDashOffset',
      'stroke-linecap': 'strokeLineCap',
      'stroke-linejoin': 'strokeLineJoin',
      'stroke-miterlimit': 'strokeMiterLimit',
      'stroke-opacity': 'strokeOpacity',
      'stroke-width': 'strokeWidth',
      'text-decoration': 'textDecoration',
      'text-anchor': 'textAnchor',
      opacity: 'opacity',
      'clip-path': 'clipPath',
      'clip-rule': 'clipRule',
      'vector-effect': 'strokeUniform',
      'image-rendering': 'imageSmoothing'
    },
    colorAttributes = {
      stroke: 'strokeOpacity',
      fill: 'fillOpacity'
    },
    fSize = 'font-size',
    cPath = 'clip-path';
  fabric.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);
  fabric.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);
  fabric.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);
  fabric.svgValidParentsRegEx = getSvgRegex(svgValidParents);
  fabric.cssRules = {};
  fabric.gradientDefs = {};
  fabric.clipPaths = {};
  function normalizeAttr(attr) {
    // transform attribute names
    if (attr in attributesMap) {
      return attributesMap[attr];
    }
    return attr;
  }
  function normalizeValue(attr, value, parentAttributes, fontSize) {
    var isArray = Array.isArray(value),
      parsed;
    if ((attr === 'fill' || attr === 'stroke') && value === 'none') {
      value = '';
    } else if (attr === 'strokeUniform') {
      return value === 'non-scaling-stroke';
    } else if (attr === 'strokeDashArray') {
      if (value === 'none') {
        value = null;
      } else {
        value = value.replace(/,/g, ' ').split(/\s+/).map(parseFloat);
      }
    } else if (attr === 'transformMatrix') {
      if (parentAttributes && parentAttributes.transformMatrix) {
        value = multiplyTransformMatrices(parentAttributes.transformMatrix, fabric.parseTransformAttribute(value));
      } else {
        value = fabric.parseTransformAttribute(value);
      }
    } else if (attr === 'visible') {
      value = value !== 'none' && value !== 'hidden';
      // display=none on parent element always takes precedence over child element
      if (parentAttributes && parentAttributes.visible === false) {
        value = false;
      }
    } else if (attr === 'opacity') {
      value = parseFloat(value);
      if (parentAttributes && typeof parentAttributes.opacity !== 'undefined') {
        value *= parentAttributes.opacity;
      }
    } else if (attr === 'textAnchor' /* text-anchor */) {
      value = value === 'start' ? 'left' : value === 'end' ? 'right' : 'center';
    } else if (attr === 'charSpacing') {
      // parseUnit returns px and we convert it to em
      parsed = parseUnit(value, fontSize) / fontSize * 1000;
    } else if (attr === 'paintFirst') {
      var fillIndex = value.indexOf('fill');
      var strokeIndex = value.indexOf('stroke');
      var value = 'fill';
      if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {
        value = 'stroke';
      } else if (fillIndex === -1 && strokeIndex > -1) {
        value = 'stroke';
      }
    } else if (attr === 'href' || attr === 'xlink:href' || attr === 'font') {
      return value;
    } else if (attr === 'imageSmoothing') {
      return value === 'optimizeQuality';
    } else {
      parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize);
    }
    return !isArray && isNaN(parsed) ? value : parsed;
  }

  /**
    * @private
    */
  function getSvgRegex(arr) {
    return new RegExp('^(' + arr.join('|') + ')\\b', 'i');
  }

  /**
   * @private
   * @param {Object} attributes Array of attributes to parse
   */
  function _setStrokeFillOpacity(attributes) {
    for (var attr in colorAttributes) {
      if (typeof attributes[colorAttributes[attr]] === 'undefined' || attributes[attr] === '') {
        continue;
      }
      if (typeof attributes[attr] === 'undefined') {
        if (!fabric.Object.prototype[attr]) {
          continue;
        }
        attributes[attr] = fabric.Object.prototype[attr];
      }
      if (attributes[attr].indexOf('url(') === 0) {
        continue;
      }
      var color = new fabric.Color(attributes[attr]);
      attributes[attr] = color.setAlpha(toFixed(color.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();
    }
    return attributes;
  }

  /**
   * @private
   */
  function _getMultipleNodes(doc, nodeNames) {
    var nodeName,
      nodeArray = [],
      nodeList,
      i,
      len;
    for (i = 0, len = nodeNames.length; i < len; i++) {
      nodeName = nodeNames[i];
      nodeList = doc.getElementsByTagName(nodeName);
      nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));
    }
    return nodeArray;
  }

  /**
   * Parses "transform" attribute, returning an array of values
   * @static
   * @function
   * @memberOf fabric
   * @param {String} attributeValue String containing attribute value
   * @return {Array} Array of 6 elements representing transformation matrix
   */
  fabric.parseTransformAttribute = function () {
    function rotateMatrix(matrix, args) {
      var cos = fabric.util.cos(args[0]),
        sin = fabric.util.sin(args[0]),
        x = 0,
        y = 0;
      if (args.length === 3) {
        x = args[1];
        y = args[2];
      }
      matrix[0] = cos;
      matrix[1] = sin;
      matrix[2] = -sin;
      matrix[3] = cos;
      matrix[4] = x - (cos * x - sin * y);
      matrix[5] = y - (sin * x + cos * y);
    }
    function scaleMatrix(matrix, args) {
      var multiplierX = args[0],
        multiplierY = args.length === 2 ? args[1] : args[0];
      matrix[0] = multiplierX;
      matrix[3] = multiplierY;
    }
    function skewMatrix(matrix, args, pos) {
      matrix[pos] = Math.tan(fabric.util.degreesToRadians(args[0]));
    }
    function translateMatrix(matrix, args) {
      matrix[4] = args[0];
      if (args.length === 2) {
        matrix[5] = args[1];
      }
    }

    // identity matrix
    var iMatrix = fabric.iMatrix,
      // == begin transform regexp
      number = fabric.reNum,
      commaWsp = fabric.commaWsp,
      skewX = '(?:(skewX)\\s*\\(\\s*(' + number + ')\\s*\\))',
      skewY = '(?:(skewY)\\s*\\(\\s*(' + number + ')\\s*\\))',
      rotate = '(?:(rotate)\\s*\\(\\s*(' + number + ')(?:' + commaWsp + '(' + number + ')' + commaWsp + '(' + number + '))?\\s*\\))',
      scale = '(?:(scale)\\s*\\(\\s*(' + number + ')(?:' + commaWsp + '(' + number + '))?\\s*\\))',
      translate = '(?:(translate)\\s*\\(\\s*(' + number + ')(?:' + commaWsp + '(' + number + '))?\\s*\\))',
      matrix = '(?:(matrix)\\s*\\(\\s*' + '(' + number + ')' + commaWsp + '(' + number + ')' + commaWsp + '(' + number + ')' + commaWsp + '(' + number + ')' + commaWsp + '(' + number + ')' + commaWsp + '(' + number + ')' + '\\s*\\))',
      transform = '(?:' + matrix + '|' + translate + '|' + scale + '|' + rotate + '|' + skewX + '|' + skewY + ')',
      transforms = '(?:' + transform + '(?:' + commaWsp + '*' + transform + ')*' + ')',
      transformList = '^\\s*(?:' + transforms + '?)\\s*$',
      // http://www.w3.org/TR/SVG/coords.html#TransformAttribute
      reTransformList = new RegExp(transformList),
      // == end transform regexp

      reTransform = new RegExp(transform, 'g');
    return function (attributeValue) {
      // start with identity matrix
      var matrix = iMatrix.concat(),
        matrices = [];

      // return if no argument was given or
      // an argument does not match transform attribute regexp
      if (!attributeValue || attributeValue && !reTransformList.test(attributeValue)) {
        return matrix;
      }
      attributeValue.replace(reTransform, function (match) {
        var m = new RegExp(transform).exec(match).filter(function (match) {
            // match !== '' && match != null
            return !!match;
          }),
          operation = m[1],
          args = m.slice(2).map(parseFloat);
        switch (operation) {
          case 'translate':
            translateMatrix(matrix, args);
            break;
          case 'rotate':
            args[0] = fabric.util.degreesToRadians(args[0]);
            rotateMatrix(matrix, args);
            break;
          case 'scale':
            scaleMatrix(matrix, args);
            break;
          case 'skewX':
            skewMatrix(matrix, args, 2);
            break;
          case 'skewY':
            skewMatrix(matrix, args, 1);
            break;
          case 'matrix':
            matrix = args;
            break;
        }

        // snapshot current matrix into matrices array
        matrices.push(matrix.concat());
        // reset
        matrix = iMatrix.concat();
      });
      var combinedMatrix = matrices[0];
      while (matrices.length > 1) {
        matrices.shift();
        combinedMatrix = fabric.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);
      }
      return combinedMatrix;
    };
  }();

  /**
   * @private
   */
  function parseStyleString(style, oStyle) {
    var attr, value;
    style.replace(/;\s*$/, '').split(';').forEach(function (chunk) {
      var pair = chunk.split(':');
      attr = pair[0].trim().toLowerCase();
      value = pair[1].trim();
      oStyle[attr] = value;
    });
  }

  /**
   * @private
   */
  function parseStyleObject(style, oStyle) {
    var attr, value;
    for (var prop in style) {
      if (typeof style[prop] === 'undefined') {
        continue;
      }
      attr = prop.toLowerCase();
      value = style[prop];
      oStyle[attr] = value;
    }
  }

  /**
   * @private
   */
  function getGlobalStylesForElement(element, svgUid) {
    var styles = {};
    for (var rule in fabric.cssRules[svgUid]) {
      if (elementMatchesRule(element, rule.split(' '))) {
        for (var property in fabric.cssRules[svgUid][rule]) {
          styles[property] = fabric.cssRules[svgUid][rule][property];
        }
      }
    }
    return styles;
  }

  /**
   * @private
   */
  function elementMatchesRule(element, selectors) {
    var firstMatching,
      parentMatching = true;
    //start from rightmost selector.
    firstMatching = selectorMatches(element, selectors.pop());
    if (firstMatching && selectors.length) {
      parentMatching = doesSomeParentMatch(element, selectors);
    }
    return firstMatching && parentMatching && selectors.length === 0;
  }
  function doesSomeParentMatch(element, selectors) {
    var selector,
      parentMatching = true;
    while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {
      if (parentMatching) {
        selector = selectors.pop();
      }
      element = element.parentNode;
      parentMatching = selectorMatches(element, selector);
    }
    return selectors.length === 0;
  }

  /**
   * @private
   */
  function selectorMatches(element, selector) {
    var nodeName = element.nodeName,
      classNames = element.getAttribute('class'),
      id = element.getAttribute('id'),
      matcher,
      i;
    // i check if a selector matches slicing away part from it.
    // if i get empty string i should match
    matcher = new RegExp('^' + nodeName, 'i');
    selector = selector.replace(matcher, '');
    if (id && selector.length) {
      matcher = new RegExp('#' + id + '(?![a-zA-Z\\-]+)', 'i');
      selector = selector.replace(matcher, '');
    }
    if (classNames && selector.length) {
      classNames = classNames.split(' ');
      for (i = classNames.length; i--;) {
        matcher = new RegExp('\\.' + classNames[i] + '(?![a-zA-Z\\-]+)', 'i');
        selector = selector.replace(matcher, '');
      }
    }
    return selector.length === 0;
  }

  /**
   * @private
   * to support IE8 missing getElementById on SVGdocument and on node xmlDOM
   */
  function elementById(doc, id) {
    var el;
    doc.getElementById && (el = doc.getElementById(id));
    if (el) {
      return el;
    }
    var node,
      i,
      len,
      nodelist = doc.getElementsByTagName('*');
    for (i = 0, len = nodelist.length; i < len; i++) {
      node = nodelist[i];
      if (id === node.getAttribute('id')) {
        return node;
      }
    }
  }

  /**
   * @private
   */
  function parseUseDirectives(doc) {
    var nodelist = _getMultipleNodes(doc, ['use', 'svg:use']),
      i = 0;
    while (nodelist.length && i < nodelist.length) {
      var el = nodelist[i],
        xlinkAttribute = el.getAttribute('xlink:href') || el.getAttribute('href');
      if (xlinkAttribute === null) {
        return;
      }
      var xlink = xlinkAttribute.slice(1),
        x = el.getAttribute('x') || 0,
        y = el.getAttribute('y') || 0,
        el2 = elementById(doc, xlink).cloneNode(true),
        currentTrans = (el2.getAttribute('transform') || '') + ' translate(' + x + ', ' + y + ')',
        parentNode,
        oldLength = nodelist.length,
        attr,
        j,
        attrs,
        len,
        namespace = fabric.svgNS;
      applyViewboxTransform(el2);
      if (/^svg$/i.test(el2.nodeName)) {
        var el3 = el2.ownerDocument.createElementNS(namespace, 'g');
        for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {
          attr = attrs.item(j);
          el3.setAttributeNS(namespace, attr.nodeName, attr.nodeValue);
        }
        // el2.firstChild != null
        while (el2.firstChild) {
          el3.appendChild(el2.firstChild);
        }
        el2 = el3;
      }
      for (j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {
        attr = attrs.item(j);
        if (attr.nodeName === 'x' || attr.nodeName === 'y' || attr.nodeName === 'xlink:href' || attr.nodeName === 'href') {
          continue;
        }
        if (attr.nodeName === 'transform') {
          currentTrans = attr.nodeValue + ' ' + currentTrans;
        } else {
          el2.setAttribute(attr.nodeName, attr.nodeValue);
        }
      }
      el2.setAttribute('transform', currentTrans);
      el2.setAttribute('instantiated_by_use', '1');
      el2.removeAttribute('id');
      parentNode = el.parentNode;
      parentNode.replaceChild(el2, el);
      // some browsers do not shorten nodelist after replaceChild (IE8)
      if (nodelist.length === oldLength) {
        i++;
      }
    }
  }

  // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute
  // matches, e.g.: +14.56e-12, etc.
  var reViewBoxAttrValue = new RegExp('^' + '\\s*(' + fabric.reNum + '+)\\s*,?' + '\\s*(' + fabric.reNum + '+)\\s*,?' + '\\s*(' + fabric.reNum + '+)\\s*,?' + '\\s*(' + fabric.reNum + '+)\\s*' + '$');

  /**
   * Add a <g> element that envelop all child elements and makes the viewbox transformMatrix descend on all elements
   */
  function applyViewboxTransform(element) {
    if (!fabric.svgViewBoxElementsRegEx.test(element.nodeName)) {
      return {};
    }
    var viewBoxAttr = element.getAttribute('viewBox'),
      scaleX = 1,
      scaleY = 1,
      minX = 0,
      minY = 0,
      viewBoxWidth,
      viewBoxHeight,
      matrix,
      el,
      widthAttr = element.getAttribute('width'),
      heightAttr = element.getAttribute('height'),
      x = element.getAttribute('x') || 0,
      y = element.getAttribute('y') || 0,
      preserveAspectRatio = element.getAttribute('preserveAspectRatio') || '',
      missingViewBox = !viewBoxAttr || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue)),
      missingDimAttr = !widthAttr || !heightAttr || widthAttr === '100%' || heightAttr === '100%',
      toBeParsed = missingViewBox && missingDimAttr,
      parsedDim = {},
      translateMatrix = '',
      widthDiff = 0,
      heightDiff = 0;
    parsedDim.width = 0;
    parsedDim.height = 0;
    parsedDim.toBeParsed = toBeParsed;
    if (missingViewBox) {
      if ((x || y) && element.parentNode && element.parentNode.nodeName !== '#document') {
        translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';
        matrix = (element.getAttribute('transform') || '') + translateMatrix;
        element.setAttribute('transform', matrix);
        element.removeAttribute('x');
        element.removeAttribute('y');
      }
    }
    if (toBeParsed) {
      return parsedDim;
    }
    if (missingViewBox) {
      parsedDim.width = parseUnit(widthAttr);
      parsedDim.height = parseUnit(heightAttr);
      // set a transform for elements that have x y and are inner(only) SVGs
      return parsedDim;
    }
    minX = -parseFloat(viewBoxAttr[1]);
    minY = -parseFloat(viewBoxAttr[2]);
    viewBoxWidth = parseFloat(viewBoxAttr[3]);
    viewBoxHeight = parseFloat(viewBoxAttr[4]);
    parsedDim.minX = minX;
    parsedDim.minY = minY;
    parsedDim.viewBoxWidth = viewBoxWidth;
    parsedDim.viewBoxHeight = viewBoxHeight;
    if (!missingDimAttr) {
      parsedDim.width = parseUnit(widthAttr);
      parsedDim.height = parseUnit(heightAttr);
      scaleX = parsedDim.width / viewBoxWidth;
      scaleY = parsedDim.height / viewBoxHeight;
    } else {
      parsedDim.width = viewBoxWidth;
      parsedDim.height = viewBoxHeight;
    }

    // default is to preserve aspect ratio
    preserveAspectRatio = fabric.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);
    if (preserveAspectRatio.alignX !== 'none') {
      //translate all container for the effect of Mid, Min, Max
      if (preserveAspectRatio.meetOrSlice === 'meet') {
        scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;
        // calculate additional translation to move the viewbox
      }

      if (preserveAspectRatio.meetOrSlice === 'slice') {
        scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;
        // calculate additional translation to move the viewbox
      }

      widthDiff = parsedDim.width - viewBoxWidth * scaleX;
      heightDiff = parsedDim.height - viewBoxHeight * scaleX;
      if (preserveAspectRatio.alignX === 'Mid') {
        widthDiff /= 2;
      }
      if (preserveAspectRatio.alignY === 'Mid') {
        heightDiff /= 2;
      }
      if (preserveAspectRatio.alignX === 'Min') {
        widthDiff = 0;
      }
      if (preserveAspectRatio.alignY === 'Min') {
        heightDiff = 0;
      }
    }
    if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {
      return parsedDim;
    }
    if ((x || y) && element.parentNode.nodeName !== '#document') {
      translateMatrix = ' translate(' + parseUnit(x) + ' ' + parseUnit(y) + ') ';
    }
    matrix = translateMatrix + ' matrix(' + scaleX + ' 0' + ' 0 ' + scaleY + ' ' + (minX * scaleX + widthDiff) + ' ' + (minY * scaleY + heightDiff) + ') ';
    // seems unused.
    // parsedDim.viewboxTransform = fabric.parseTransformAttribute(matrix);
    if (element.nodeName === 'svg') {
      el = element.ownerDocument.createElementNS(fabric.svgNS, 'g');
      // element.firstChild != null
      while (element.firstChild) {
        el.appendChild(element.firstChild);
      }
      element.appendChild(el);
    } else {
      el = element;
      el.removeAttribute('x');
      el.removeAttribute('y');
      matrix = el.getAttribute('transform') + matrix;
    }
    el.setAttribute('transform', matrix);
    return parsedDim;
  }
  function hasAncestorWithNodeName(element, nodeName) {
    while (element && (element = element.parentNode)) {
      if (element.nodeName && nodeName.test(element.nodeName.replace('svg:', '')) && !element.getAttribute('instantiated_by_use')) {
        return true;
      }
    }
    return false;
  }

  /**
   * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback
   * @static
   * @function
   * @memberOf fabric
   * @param {SVGDocument} doc SVG document to parse
   * @param {Function} callback Callback to call when parsing is finished;
   * It's being passed an array of elements (parsed from a document).
   * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
   * @param {Object} [parsingOptions] options for parsing document
   * @param {String} [parsingOptions.crossOrigin] crossOrigin settings
   */
  fabric.parseSVGDocument = function (doc, callback, reviver, parsingOptions) {
    if (!doc) {
      return;
    }
    parseUseDirectives(doc);
    var svgUid = fabric.Object.__uid++,
      i,
      len,
      options = applyViewboxTransform(doc),
      descendants = fabric.util.toArray(doc.getElementsByTagName('*'));
    options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;
    options.svgUid = svgUid;
    if (descendants.length === 0 && fabric.isLikelyNode) {
      // we're likely in node, where "o3-xml" library fails to gEBTN("*")
      // https://github.com/ajaxorg/node-o3-xml/issues/21
      descendants = doc.selectNodes('//*[name(.)!="svg"]');
      var arr = [];
      for (i = 0, len = descendants.length; i < len; i++) {
        arr[i] = descendants[i];
      }
      descendants = arr;
    }
    var elements = descendants.filter(function (el) {
      applyViewboxTransform(el);
      return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', '')) && !hasAncestorWithNodeName(el, fabric.svgInvalidAncestorsRegEx); // http://www.w3.org/TR/SVG/struct.html#DefsElement
    });

    if (!elements || elements && !elements.length) {
      callback && callback([], {});
      return;
    }
    var clipPaths = {};
    descendants.filter(function (el) {
      return el.nodeName.replace('svg:', '') === 'clipPath';
    }).forEach(function (el) {
      var id = el.getAttribute('id');
      clipPaths[id] = fabric.util.toArray(el.getElementsByTagName('*')).filter(function (el) {
        return fabric.svgValidTagNamesRegEx.test(el.nodeName.replace('svg:', ''));
      });
    });
    fabric.gradientDefs[svgUid] = fabric.getGradientDefs(doc);
    fabric.cssRules[svgUid] = fabric.getCSSRules(doc);
    fabric.clipPaths[svgUid] = clipPaths;
    // Precedence of rules:   style > class > attribute
    fabric.parseElements(elements, function (instances, elements) {
      if (callback) {
        callback(instances, options, elements, descendants);
        delete fabric.gradientDefs[svgUid];
        delete fabric.cssRules[svgUid];
        delete fabric.clipPaths[svgUid];
      }
    }, clone(options), reviver, parsingOptions);
  };
  function recursivelyParseGradientsXlink(doc, gradient) {
    var gradientsAttrs = ['gradientTransform', 'x1', 'x2', 'y1', 'y2', 'gradientUnits', 'cx', 'cy', 'r', 'fx', 'fy'],
      xlinkAttr = 'xlink:href',
      xLink = gradient.getAttribute(xlinkAttr).slice(1),
      referencedGradient = elementById(doc, xLink);
    if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {
      recursivelyParseGradientsXlink(doc, referencedGradient);
    }
    gradientsAttrs.forEach(function (attr) {
      if (referencedGradient && !gradient.hasAttribute(attr) && referencedGradient.hasAttribute(attr)) {
        gradient.setAttribute(attr, referencedGradient.getAttribute(attr));
      }
    });
    if (!gradient.children.length) {
      var referenceClone = referencedGradient.cloneNode(true);
      while (referenceClone.firstChild) {
        gradient.appendChild(referenceClone.firstChild);
      }
    }
    gradient.removeAttribute(xlinkAttr);
  }
  var reFontDeclaration = new RegExp('(normal|italic)?\\s*(normal|small-caps)?\\s*' + '(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*(' + fabric.reNum + '(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|' + fabric.reNum + '))?\\s+(.*)');
  extend(fabric, {
    /**
     * Parses a short font declaration, building adding its properties to a style object
     * @static
     * @function
     * @memberOf fabric
     * @param {String} value font declaration
     * @param {Object} oStyle definition
     */
    parseFontDeclaration: function parseFontDeclaration(value, oStyle) {
      var match = value.match(reFontDeclaration);
      if (!match) {
        return;
      }
      var fontStyle = match[1],
        // font variant is not used
        // fontVariant = match[2],
        fontWeight = match[3],
        fontSize = match[4],
        lineHeight = match[5],
        fontFamily = match[6];
      if (fontStyle) {
        oStyle.fontStyle = fontStyle;
      }
      if (fontWeight) {
        oStyle.fontWeight = isNaN(parseFloat(fontWeight)) ? fontWeight : parseFloat(fontWeight);
      }
      if (fontSize) {
        oStyle.fontSize = parseUnit(fontSize);
      }
      if (fontFamily) {
        oStyle.fontFamily = fontFamily;
      }
      if (lineHeight) {
        oStyle.lineHeight = lineHeight === 'normal' ? 1 : lineHeight;
      }
    },
    /**
     * Parses an SVG document, returning all of the gradient declarations found in it
     * @static
     * @function
     * @memberOf fabric
     * @param {SVGDocument} doc SVG document to parse
     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element
     */
    getGradientDefs: function getGradientDefs(doc) {
      var tagArray = ['linearGradient', 'radialGradient', 'svg:linearGradient', 'svg:radialGradient'],
        elList = _getMultipleNodes(doc, tagArray),
        el,
        j = 0,
        gradientDefs = {};
      j = elList.length;
      while (j--) {
        el = elList[j];
        if (el.getAttribute('xlink:href')) {
          recursivelyParseGradientsXlink(doc, el);
        }
        gradientDefs[el.getAttribute('id')] = el;
      }
      return gradientDefs;
    },
    /**
     * Returns an object of attributes' name/value, given element and an array of attribute names;
     * Parses parent "g" nodes recursively upwards.
     * @static
     * @memberOf fabric
     * @param {DOMElement} element Element to parse
     * @param {Array} attributes Array of attributes to parse
     * @return {Object} object containing parsed attributes' names/values
     */
    parseAttributes: function parseAttributes(element, attributes, svgUid) {
      if (!element) {
        return;
      }
      var value,
        parentAttributes = {},
        fontSize,
        parentFontSize;
      if (typeof svgUid === 'undefined') {
        svgUid = element.getAttribute('svgUid');
      }
      // if there's a parent container (`g` or `a` or `symbol` node), parse its attributes recursively upwards
      if (element.parentNode && fabric.svgValidParentsRegEx.test(element.parentNode.nodeName)) {
        parentAttributes = fabric.parseAttributes(element.parentNode, attributes, svgUid);
      }
      var ownAttributes = attributes.reduce(function (memo, attr) {
        value = element.getAttribute(attr);
        if (value) {
          // eslint-disable-line
          memo[attr] = value;
        }
        return memo;
      }, {});
      // add values parsed from style, which take precedence over attributes
      // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)
      var cssAttrs = extend(getGlobalStylesForElement(element, svgUid), fabric.parseStyleAttribute(element));
      ownAttributes = extend(ownAttributes, cssAttrs);
      if (cssAttrs[cPath]) {
        element.setAttribute(cPath, cssAttrs[cPath]);
      }
      fontSize = parentFontSize = parentAttributes.fontSize || fabric.Text.DEFAULT_SVG_FONT_SIZE;
      if (ownAttributes[fSize]) {
        // looks like the minimum should be 9px when dealing with ems. this is what looks like in browsers.
        ownAttributes[fSize] = fontSize = parseUnit(ownAttributes[fSize], parentFontSize);
      }
      var normalizedAttr,
        normalizedValue,
        normalizedStyle = {};
      for (var attr in ownAttributes) {
        normalizedAttr = normalizeAttr(attr);
        normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize);
        normalizedStyle[normalizedAttr] = normalizedValue;
      }
      if (normalizedStyle && normalizedStyle.font) {
        fabric.parseFontDeclaration(normalizedStyle.font, normalizedStyle);
      }
      var mergedAttrs = extend(parentAttributes, normalizedStyle);
      return fabric.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);
    },
    /**
     * Transforms an array of svg elements to corresponding fabric.* instances
     * @static
     * @memberOf fabric
     * @param {Array} elements Array of elements to parse
     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)
     * @param {Object} [options] Options object
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     */
    parseElements: function parseElements(elements, callback, options, reviver, parsingOptions) {
      new fabric.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();
    },
    /**
     * Parses "style" attribute, retuning an object with values
     * @static
     * @memberOf fabric
     * @param {SVGElement} element Element to parse
     * @return {Object} Objects with values parsed from style attribute of an element
     */
    parseStyleAttribute: function parseStyleAttribute(element) {
      var oStyle = {},
        style = element.getAttribute('style');
      if (!style) {
        return oStyle;
      }
      if (typeof style === 'string') {
        parseStyleString(style, oStyle);
      } else {
        parseStyleObject(style, oStyle);
      }
      return oStyle;
    },
    /**
     * Parses "points" attribute, returning an array of values
     * @static
     * @memberOf fabric
     * @param {String} points points attribute string
     * @return {Array} array of points
     */
    parsePointsAttribute: function parsePointsAttribute(points) {
      // points attribute is required and must not be empty
      if (!points) {
        return null;
      }

      // replace commas with whitespace and remove bookending whitespace
      points = points.replace(/,/g, ' ').trim();
      points = points.split(/\s+/);
      var parsedPoints = [],
        i,
        len;
      for (i = 0, len = points.length; i < len; i += 2) {
        parsedPoints.push({
          x: parseFloat(points[i]),
          y: parseFloat(points[i + 1])
        });
      }

      // odd number of points is an error
      // if (parsedPoints.length % 2 !== 0) {
      //   return null;
      // }

      return parsedPoints;
    },
    /**
     * Returns CSS rules for a given SVG document
     * @static
     * @function
     * @memberOf fabric
     * @param {SVGDocument} doc SVG document to parse
     * @return {Object} CSS rules of this document
     */
    getCSSRules: function getCSSRules(doc) {
      var styles = doc.getElementsByTagName('style'),
        i,
        len,
        allRules = {},
        rules;

      // very crude parsing of style contents
      for (i = 0, len = styles.length; i < len; i++) {
        var styleContents = styles[i].textContent;

        // remove comments
        styleContents = styleContents.replace(/\/\*[\s\S]*?\*\//g, '');
        if (styleContents.trim() === '') {
          continue;
        }
        // recovers all the rule in this form `body { style code... }`
        // rules = styleContents.match(/[^{]*\{[\s\S]*?\}/g);
        rules = styleContents.split('}');
        // remove empty rules.
        rules = rules.filter(function (rule) {
          return rule.trim();
        });
        // at this point we have hopefully an array of rules `body { style code... `
        // eslint-disable-next-line no-loop-func
        rules.forEach(function (rule) {
          var match = rule.split('{'),
            ruleObj = {},
            declaration = match[1].trim(),
            propertyValuePairs = declaration.split(';').filter(function (pair) {
              return pair.trim();
            });
          for (i = 0, len = propertyValuePairs.length; i < len; i++) {
            var pair = propertyValuePairs[i].split(':'),
              property = pair[0].trim(),
              value = pair[1].trim();
            ruleObj[property] = value;
          }
          rule = match[0].trim();
          rule.split(',').forEach(function (_rule) {
            _rule = _rule.replace(/^svg/i, '').trim();
            if (_rule === '') {
              return;
            }
            if (allRules[_rule]) {
              fabric.util.object.extend(allRules[_rule], ruleObj);
            } else {
              allRules[_rule] = fabric.util.object.clone(ruleObj);
            }
          });
        });
      }
      return allRules;
    },
    /**
     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects.
     * Note that SVG is fetched via XMLHttpRequest, so it needs to conform to SOP (Same Origin Policy)
     * @memberOf fabric
     * @param {String} url
     * @param {Function} callback
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     * @param {Object} [options] Object containing options for parsing
     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
     */
    loadSVGFromURL: function loadSVGFromURL(url, callback, reviver, options) {
      url = url.replace(/^\n\s*/, '').trim();
      new fabric.util.request(url, {
        method: 'get',
        onComplete: onComplete
      });
      function onComplete(r) {
        var xml = r.responseXML;
        if (!xml || !xml.documentElement) {
          callback && callback(null);
          return false;
        }
        fabric.parseSVGDocument(xml.documentElement, function (results, _options, elements, allElements) {
          callback && callback(results, _options, elements, allElements);
        }, reviver, options);
      }
    },
    /**
     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects
     * @memberOf fabric
     * @param {String} string
     * @param {Function} callback
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     * @param {Object} [options] Object containing options for parsing
     * @param {String} [options.crossOrigin] crossOrigin crossOrigin setting to use for external resources
     */
    loadSVGFromString: function loadSVGFromString(string, callback, reviver, options) {
      var parser = new fabric.window.DOMParser(),
        doc = parser.parseFromString(string.trim(), 'text/xml');
      fabric.parseSVGDocument(doc.documentElement, function (results, _options, elements, allElements) {
        callback(results, _options, elements, allElements);
      }, reviver, options);
    }
  });
})(typeof exports !== 'undefined' ? exports : this);
fabric.ElementsParser = function (elements, callback, options, reviver, parsingOptions, doc) {
  this.elements = elements;
  this.callback = callback;
  this.options = options;
  this.reviver = reviver;
  this.svgUid = options && options.svgUid || 0;
  this.parsingOptions = parsingOptions;
  this.regexUrl = /^url\(['"]?#([^'"]+)['"]?\)/g;
  this.doc = doc;
};
(function (proto) {
  proto.parse = function () {
    this.instances = new Array(this.elements.length);
    this.numElements = this.elements.length;
    this.createObjects();
  };
  proto.createObjects = function () {
    var _this = this;
    this.elements.forEach(function (element, i) {
      element.setAttribute('svgUid', _this.svgUid);
      _this.createObject(element, i);
    });
  };
  proto.findTag = function (el) {
    return fabric[fabric.util.string.capitalize(el.tagName.replace('svg:', ''))];
  };
  proto.createObject = function (el, index) {
    var klass = this.findTag(el);
    if (klass && klass.fromElement) {
      try {
        klass.fromElement(el, this.createCallback(index, el), this.options);
      } catch (err) {
        fabric.log(err);
      }
    } else {
      this.checkIfDone();
    }
  };
  proto.createCallback = function (index, el) {
    var _this = this;
    return function (obj) {
      var _options;
      _this.resolveGradient(obj, el, 'fill');
      _this.resolveGradient(obj, el, 'stroke');
      if (obj instanceof fabric.Image && obj._originalElement) {
        _options = obj.parsePreserveAspectRatioAttribute(el);
      }
      obj._removeTransformMatrix(_options);
      _this.resolveClipPath(obj, el);
      _this.reviver && _this.reviver(el, obj);
      _this.instances[index] = obj;
      _this.checkIfDone();
    };
  };
  proto.extractPropertyDefinition = function (obj, property, storage) {
    var value = obj[property],
      regex = this.regexUrl;
    if (!regex.test(value)) {
      return;
    }
    regex.lastIndex = 0;
    var id = regex.exec(value)[1];
    regex.lastIndex = 0;
    return fabric[storage][this.svgUid][id];
  };
  proto.resolveGradient = function (obj, el, property) {
    var gradientDef = this.extractPropertyDefinition(obj, property, 'gradientDefs');
    if (gradientDef) {
      var opacityAttr = el.getAttribute(property + '-opacity');
      var gradient = fabric.Gradient.fromElement(gradientDef, obj, opacityAttr, this.options);
      obj.set(property, gradient);
    }
  };
  proto.createClipPathCallback = function (obj, container) {
    return function (_newObj) {
      _newObj._removeTransformMatrix();
      _newObj.fillRule = _newObj.clipRule;
      container.push(_newObj);
    };
  };
  proto.resolveClipPath = function (obj, usingElement) {
    var clipPath = this.extractPropertyDefinition(obj, 'clipPath', 'clipPaths'),
      element,
      klass,
      objTransformInv,
      container,
      gTransform,
      options;
    if (clipPath) {
      container = [];
      objTransformInv = fabric.util.invertTransform(obj.calcTransformMatrix());
      // move the clipPath tag as sibling to the real element that is using it
      var clipPathTag = clipPath[0].parentNode;
      var clipPathOwner = usingElement;
      while (clipPathOwner.parentNode && clipPathOwner.getAttribute('clip-path') !== obj.clipPath) {
        clipPathOwner = clipPathOwner.parentNode;
      }
      clipPathOwner.parentNode.appendChild(clipPathTag);
      for (var i = 0; i < clipPath.length; i++) {
        element = clipPath[i];
        klass = this.findTag(element);
        klass.fromElement(element, this.createClipPathCallback(obj, container), this.options);
      }
      if (container.length === 1) {
        clipPath = container[0];
      } else {
        clipPath = new fabric.Group(container);
      }
      gTransform = fabric.util.multiplyTransformMatrices(objTransformInv, clipPath.calcTransformMatrix());
      if (clipPath.clipPath) {
        this.resolveClipPath(clipPath, clipPathOwner);
      }
      var options = fabric.util.qrDecompose(gTransform);
      clipPath.flipX = false;
      clipPath.flipY = false;
      clipPath.set('scaleX', options.scaleX);
      clipPath.set('scaleY', options.scaleY);
      clipPath.angle = options.angle;
      clipPath.skewX = options.skewX;
      clipPath.skewY = 0;
      clipPath.setPositionByOrigin({
        x: options.translateX,
        y: options.translateY
      }, 'center', 'center');
      obj.clipPath = clipPath;
    } else {
      // if clip-path does not resolve to any element, delete the property.
      delete obj.clipPath;
    }
  };
  proto.checkIfDone = function () {
    if (--this.numElements === 0) {
      this.instances = this.instances.filter(function (el) {
        // eslint-disable-next-line no-eq-null, eqeqeq
        return el != null;
      });
      this.callback(this.instances, this.elements);
    }
  };
})(fabric.ElementsParser.prototype);
(function (global) {
  'use strict';

  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */
  var fabric = global.fabric || (global.fabric = {});
  if (fabric.Point) {
    fabric.warn('fabric.Point is already defined');
    return;
  }
  fabric.Point = Point;

  /**
   * Point class
   * @class fabric.Point
   * @memberOf fabric
   * @constructor
   * @param {Number} x
   * @param {Number} y
   * @return {fabric.Point} thisArg
   */
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.prototype = /** @lends fabric.Point.prototype */{
    type: 'point',
    constructor: Point,
    /**
     * Adds another point to this one and returns another one
     * @param {fabric.Point} that
     * @return {fabric.Point} new Point instance with added values
     */
    add: function add(that) {
      return new Point(this.x + that.x, this.y + that.y);
    },
    /**
     * Adds another point to this one
     * @param {fabric.Point} that
     * @return {fabric.Point} thisArg
     * @chainable
     */
    addEquals: function addEquals(that) {
      this.x += that.x;
      this.y += that.y;
      return this;
    },
    /**
     * Adds value to this point and returns a new one
     * @param {Number} scalar
     * @return {fabric.Point} new Point with added value
     */
    scalarAdd: function scalarAdd(scalar) {
      return new Point(this.x + scalar, this.y + scalar);
    },
    /**
     * Adds value to this point
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */
    scalarAddEquals: function scalarAddEquals(scalar) {
      this.x += scalar;
      this.y += scalar;
      return this;
    },
    /**
     * Subtracts another point from this point and returns a new one
     * @param {fabric.Point} that
     * @return {fabric.Point} new Point object with subtracted values
     */
    subtract: function subtract(that) {
      return new Point(this.x - that.x, this.y - that.y);
    },
    /**
     * Subtracts another point from this point
     * @param {fabric.Point} that
     * @return {fabric.Point} thisArg
     * @chainable
     */
    subtractEquals: function subtractEquals(that) {
      this.x -= that.x;
      this.y -= that.y;
      return this;
    },
    /**
     * Subtracts value from this point and returns a new one
     * @param {Number} scalar
     * @return {fabric.Point}
     */
    scalarSubtract: function scalarSubtract(scalar) {
      return new Point(this.x - scalar, this.y - scalar);
    },
    /**
     * Subtracts value from this point
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */
    scalarSubtractEquals: function scalarSubtractEquals(scalar) {
      this.x -= scalar;
      this.y -= scalar;
      return this;
    },
    /**
     * Multiplies this point by a value and returns a new one
     * TODO: rename in scalarMultiply in 2.0
     * @param {Number} scalar
     * @return {fabric.Point}
     */
    multiply: function multiply(scalar) {
      return new Point(this.x * scalar, this.y * scalar);
    },
    /**
     * Multiplies this point by a value
     * TODO: rename in scalarMultiplyEquals in 2.0
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */
    multiplyEquals: function multiplyEquals(scalar) {
      this.x *= scalar;
      this.y *= scalar;
      return this;
    },
    /**
     * Divides this point by a value and returns a new one
     * TODO: rename in scalarDivide in 2.0
     * @param {Number} scalar
     * @return {fabric.Point}
     */
    divide: function divide(scalar) {
      return new Point(this.x / scalar, this.y / scalar);
    },
    /**
     * Divides this point by a value
     * TODO: rename in scalarDivideEquals in 2.0
     * @param {Number} scalar
     * @return {fabric.Point} thisArg
     * @chainable
     */
    divideEquals: function divideEquals(scalar) {
      this.x /= scalar;
      this.y /= scalar;
      return this;
    },
    /**
     * Returns true if this point is equal to another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
    eq: function eq(that) {
      return this.x === that.x && this.y === that.y;
    },
    /**
     * Returns true if this point is less than another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
    lt: function lt(that) {
      return this.x < that.x && this.y < that.y;
    },
    /**
     * Returns true if this point is less than or equal to another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
    lte: function lte(that) {
      return this.x <= that.x && this.y <= that.y;
    },
    /**
      * Returns true if this point is greater another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
    gt: function gt(that) {
      return this.x > that.x && this.y > that.y;
    },
    /**
     * Returns true if this point is greater than or equal to another one
     * @param {fabric.Point} that
     * @return {Boolean}
     */
    gte: function gte(that) {
      return this.x >= that.x && this.y >= that.y;
    },
    /**
     * Returns new point which is the result of linear interpolation with this one and another one
     * @param {fabric.Point} that
     * @param {Number} t , position of interpolation, between 0 and 1 default 0.5
     * @return {fabric.Point}
     */
    lerp: function lerp(that, t) {
      if (typeof t === 'undefined') {
        t = 0.5;
      }
      t = Math.max(Math.min(1, t), 0);
      return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);
    },
    /**
     * Returns distance from this point and another one
     * @param {fabric.Point} that
     * @return {Number}
     */
    distanceFrom: function distanceFrom(that) {
      var dx = this.x - that.x,
        dy = this.y - that.y;
      return Math.sqrt(dx * dx + dy * dy);
    },
    /**
     * Returns the point between this point and another one
     * @param {fabric.Point} that
     * @return {fabric.Point}
     */
    midPointFrom: function midPointFrom(that) {
      return this.lerp(that);
    },
    /**
     * Returns a new point which is the min of this and another one
     * @param {fabric.Point} that
     * @return {fabric.Point}
     */
    min: function min(that) {
      return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));
    },
    /**
     * Returns a new point which is the max of this and another one
     * @param {fabric.Point} that
     * @return {fabric.Point}
     */
    max: function max(that) {
      return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));
    },
    /**
     * Returns string representation of this point
     * @return {String}
     */
    toString: function toString() {
      return this.x + ',' + this.y;
    },
    /**
     * Sets x/y of this point
     * @param {Number} x
     * @param {Number} y
     * @chainable
     */
    setXY: function setXY(x, y) {
      this.x = x;
      this.y = y;
      return this;
    },
    /**
     * Sets x of this point
     * @param {Number} x
     * @chainable
     */
    setX: function setX(x) {
      this.x = x;
      return this;
    },
    /**
     * Sets y of this point
     * @param {Number} y
     * @chainable
     */
    setY: function setY(y) {
      this.y = y;
      return this;
    },
    /**
     * Sets x/y of this point from another point
     * @param {fabric.Point} that
     * @chainable
     */
    setFromPoint: function setFromPoint(that) {
      this.x = that.x;
      this.y = that.y;
      return this;
    },
    /**
     * Swaps x/y of this point and another point
     * @param {fabric.Point} that
     */
    swap: function swap(that) {
      var x = this.x,
        y = this.y;
      this.x = that.x;
      this.y = that.y;
      that.x = x;
      that.y = y;
    },
    /**
     * return a cloned instance of the point
     * @return {fabric.Point}
     */
    clone: function clone() {
      return new Point(this.x, this.y);
    }
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */
  var fabric = global.fabric || (global.fabric = {});
  if (fabric.Intersection) {
    fabric.warn('fabric.Intersection is already defined');
    return;
  }

  /**
   * Intersection class
   * @class fabric.Intersection
   * @memberOf fabric
   * @constructor
   */
  function Intersection(status) {
    this.status = status;
    this.points = [];
  }
  fabric.Intersection = Intersection;
  fabric.Intersection.prototype = /** @lends fabric.Intersection.prototype */{
    constructor: Intersection,
    /**
     * Appends a point to intersection
     * @param {fabric.Point} point
     * @return {fabric.Intersection} thisArg
     * @chainable
     */
    appendPoint: function appendPoint(point) {
      this.points.push(point);
      return this;
    },
    /**
     * Appends points to intersection
     * @param {Array} points
     * @return {fabric.Intersection} thisArg
     * @chainable
     */
    appendPoints: function appendPoints(points) {
      this.points = this.points.concat(points);
      return this;
    }
  };

  /**
   * Checks if one line intersects another
   * TODO: rename in intersectSegmentSegment
   * @static
   * @param {fabric.Point} a1
   * @param {fabric.Point} a2
   * @param {fabric.Point} b1
   * @param {fabric.Point} b2
   * @return {fabric.Intersection}
   */
  fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {
    var result,
      uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
      ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
      uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
    if (uB !== 0) {
      var ua = uaT / uB,
        ub = ubT / uB;
      if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
        result = new Intersection('Intersection');
        result.appendPoint(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));
      } else {
        result = new Intersection();
      }
    } else {
      if (uaT === 0 || ubT === 0) {
        result = new Intersection('Coincident');
      } else {
        result = new Intersection('Parallel');
      }
    }
    return result;
  };

  /**
   * Checks if line intersects polygon
   * TODO: rename in intersectSegmentPolygon
   * fix detection of coincident
   * @static
   * @param {fabric.Point} a1
   * @param {fabric.Point} a2
   * @param {Array} points
   * @return {fabric.Intersection}
   */
  fabric.Intersection.intersectLinePolygon = function (a1, a2, points) {
    var result = new Intersection(),
      length = points.length,
      b1,
      b2,
      inter,
      i;
    for (i = 0; i < length; i++) {
      b1 = points[i];
      b2 = points[(i + 1) % length];
      inter = Intersection.intersectLineLine(a1, a2, b1, b2);
      result.appendPoints(inter.points);
    }
    if (result.points.length > 0) {
      result.status = 'Intersection';
    }
    return result;
  };

  /**
   * Checks if polygon intersects another polygon
   * @static
   * @param {Array} points1
   * @param {Array} points2
   * @return {fabric.Intersection}
   */
  fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {
    var result = new Intersection(),
      length = points1.length,
      i;
    for (i = 0; i < length; i++) {
      var a1 = points1[i],
        a2 = points1[(i + 1) % length],
        inter = Intersection.intersectLinePolygon(a1, a2, points2);
      result.appendPoints(inter.points);
    }
    if (result.points.length > 0) {
      result.status = 'Intersection';
    }
    return result;
  };

  /**
   * Checks if polygon intersects rectangle
   * @static
   * @param {Array} points
   * @param {fabric.Point} r1
   * @param {fabric.Point} r2
   * @return {fabric.Intersection}
   */
  fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {
    var min = r1.min(r2),
      max = r1.max(r2),
      topRight = new fabric.Point(max.x, min.y),
      bottomLeft = new fabric.Point(min.x, max.y),
      inter1 = Intersection.intersectLinePolygon(min, topRight, points),
      inter2 = Intersection.intersectLinePolygon(topRight, max, points),
      inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),
      inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),
      result = new Intersection();
    result.appendPoints(inter1.points);
    result.appendPoints(inter2.points);
    result.appendPoints(inter3.points);
    result.appendPoints(inter4.points);
    if (result.points.length > 0) {
      result.status = 'Intersection';
    }
    return result;
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {});
  if (fabric.Color) {
    fabric.warn('fabric.Color is already defined.');
    return;
  }

  /**
   * Color class
   * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;
   * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.
   *
   * @class fabric.Color
   * @param {String} color optional in hex or rgb(a) or hsl format or from known color list
   * @return {fabric.Color} thisArg
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2/#colors}
   */
  function Color(color) {
    if (!color) {
      this.setSource([0, 0, 0, 1]);
    } else {
      this._tryParsingColor(color);
    }
  }
  fabric.Color = Color;
  fabric.Color.prototype = /** @lends fabric.Color.prototype */{
    /**
     * @private
     * @param {String|Array} color Color value to parse
     */
    _tryParsingColor: function _tryParsingColor(color) {
      var source;
      if (color in Color.colorNameMap) {
        color = Color.colorNameMap[color];
      }
      if (color === 'transparent') {
        source = [255, 255, 255, 0];
      }
      if (!source) {
        source = Color.sourceFromHex(color);
      }
      if (!source) {
        source = Color.sourceFromRgb(color);
      }
      if (!source) {
        source = Color.sourceFromHsl(color);
      }
      if (!source) {
        //if color is not recognize let's make black as canvas does
        source = [0, 0, 0, 1];
      }
      if (source) {
        this.setSource(source);
      }
    },
    /**
     * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
     * @private
     * @param {Number} r Red color value
     * @param {Number} g Green color value
     * @param {Number} b Blue color value
     * @return {Array} Hsl color
     */
    _rgbToHsl: function _rgbToHsl(r, g, b) {
      r /= 255;
      g /= 255;
      b /= 255;
      var h,
        s,
        l,
        max = fabric.util.array.max([r, g, b]),
        min = fabric.util.array.min([r, g, b]);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0; // achromatic
      } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / d + 2;
            break;
          case b:
            h = (r - g) / d + 4;
            break;
        }
        h /= 6;
      }
      return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];
    },
    /**
     * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])
     * @return {Array}
     */
    getSource: function getSource() {
      return this._source;
    },
    /**
     * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])
     * @param {Array} source
     */
    setSource: function setSource(source) {
      this._source = source;
    },
    /**
     * Returns color representation in RGB format
     * @return {String} ex: rgb(0-255,0-255,0-255)
     */
    toRgb: function toRgb() {
      var source = this.getSource();
      return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';
    },
    /**
     * Returns color representation in RGBA format
     * @return {String} ex: rgba(0-255,0-255,0-255,0-1)
     */
    toRgba: function toRgba() {
      var source = this.getSource();
      return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';
    },
    /**
     * Returns color representation in HSL format
     * @return {String} ex: hsl(0-360,0%-100%,0%-100%)
     */
    toHsl: function toHsl() {
      var source = this.getSource(),
        hsl = this._rgbToHsl(source[0], source[1], source[2]);
      return 'hsl(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%)';
    },
    /**
     * Returns color representation in HSLA format
     * @return {String} ex: hsla(0-360,0%-100%,0%-100%,0-1)
     */
    toHsla: function toHsla() {
      var source = this.getSource(),
        hsl = this._rgbToHsl(source[0], source[1], source[2]);
      return 'hsla(' + hsl[0] + ',' + hsl[1] + '%,' + hsl[2] + '%,' + source[3] + ')';
    },
    /**
     * Returns color representation in HEX format
     * @return {String} ex: FF5555
     */
    toHex: function toHex() {
      var source = this.getSource(),
        r,
        g,
        b;
      r = source[0].toString(16);
      r = r.length === 1 ? '0' + r : r;
      g = source[1].toString(16);
      g = g.length === 1 ? '0' + g : g;
      b = source[2].toString(16);
      b = b.length === 1 ? '0' + b : b;
      return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();
    },
    /**
     * Returns color representation in HEXA format
     * @return {String} ex: FF5555CC
     */
    toHexa: function toHexa() {
      var source = this.getSource(),
        a;
      a = Math.round(source[3] * 255);
      a = a.toString(16);
      a = a.length === 1 ? '0' + a : a;
      return this.toHex() + a.toUpperCase();
    },
    /**
     * Gets value of alpha channel for this color
     * @return {Number} 0-1
     */
    getAlpha: function getAlpha() {
      return this.getSource()[3];
    },
    /**
     * Sets value of alpha channel for this color
     * @param {Number} alpha Alpha value 0-1
     * @return {fabric.Color} thisArg
     */
    setAlpha: function setAlpha(alpha) {
      var source = this.getSource();
      source[3] = alpha;
      this.setSource(source);
      return this;
    },
    /**
     * Transforms color to its grayscale representation
     * @return {fabric.Color} thisArg
     */
    toGrayscale: function toGrayscale() {
      var source = this.getSource(),
        average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),
        currentAlpha = source[3];
      this.setSource([average, average, average, currentAlpha]);
      return this;
    },
    /**
     * Transforms color to its black and white representation
     * @param {Number} threshold
     * @return {fabric.Color} thisArg
     */
    toBlackWhite: function toBlackWhite(threshold) {
      var source = this.getSource(),
        average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),
        currentAlpha = source[3];
      threshold = threshold || 127;
      average = Number(average) < Number(threshold) ? 0 : 255;
      this.setSource([average, average, average, currentAlpha]);
      return this;
    },
    /**
     * Overlays color with another color
     * @param {String|fabric.Color} otherColor
     * @return {fabric.Color} thisArg
     */
    overlayWith: function overlayWith(otherColor) {
      if (!(otherColor instanceof Color)) {
        otherColor = new Color(otherColor);
      }
      var result = [],
        alpha = this.getAlpha(),
        otherAlpha = 0.5,
        source = this.getSource(),
        otherSource = otherColor.getSource(),
        i;
      for (i = 0; i < 3; i++) {
        result.push(Math.round(source[i] * (1 - otherAlpha) + otherSource[i] * otherAlpha));
      }
      result[3] = alpha;
      this.setSource(result);
      return this;
    }
  };

  /**
   * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgba(255, 100, 10, 0.5), rgba( 255 , 100 , 10 , 0.5 ), rgb(1,1,1), rgba(100%, 60%, 10%, 0.5))
   * @static
   * @field
   * @memberOf fabric.Color
   */
  // eslint-disable-next-line max-len
  fabric.Color.reRGBa = /^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i;

  /**
   * Regex matching color in HSL or HSLA formats (ex: hsl(200, 80%, 10%), hsla(300, 50%, 80%, 0.5), hsla( 300 , 50% , 80% , 0.5 ))
   * @static
   * @field
   * @memberOf fabric.Color
   */
  fabric.Color.reHSLa = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i;

  /**
   * Regex matching color in HEX format (ex: #FF5544CC, #FF5555, 010155, aff)
   * @static
   * @field
   * @memberOf fabric.Color
   */
  fabric.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;

  /**
   * Map of the 148 color names with HEX code
   * @static
   * @field
   * @memberOf fabric.Color
   * @see: https://www.w3.org/TR/css3-color/#svg-color
   */
  fabric.Color.colorNameMap = {
    aliceblue: '#F0F8FF',
    antiquewhite: '#FAEBD7',
    aqua: '#00FFFF',
    aquamarine: '#7FFFD4',
    azure: '#F0FFFF',
    beige: '#F5F5DC',
    bisque: '#FFE4C4',
    black: '#000000',
    blanchedalmond: '#FFEBCD',
    blue: '#0000FF',
    blueviolet: '#8A2BE2',
    brown: '#A52A2A',
    burlywood: '#DEB887',
    cadetblue: '#5F9EA0',
    chartreuse: '#7FFF00',
    chocolate: '#D2691E',
    coral: '#FF7F50',
    cornflowerblue: '#6495ED',
    cornsilk: '#FFF8DC',
    crimson: '#DC143C',
    cyan: '#00FFFF',
    darkblue: '#00008B',
    darkcyan: '#008B8B',
    darkgoldenrod: '#B8860B',
    darkgray: '#A9A9A9',
    darkgrey: '#A9A9A9',
    darkgreen: '#006400',
    darkkhaki: '#BDB76B',
    darkmagenta: '#8B008B',
    darkolivegreen: '#556B2F',
    darkorange: '#FF8C00',
    darkorchid: '#9932CC',
    darkred: '#8B0000',
    darksalmon: '#E9967A',
    darkseagreen: '#8FBC8F',
    darkslateblue: '#483D8B',
    darkslategray: '#2F4F4F',
    darkslategrey: '#2F4F4F',
    darkturquoise: '#00CED1',
    darkviolet: '#9400D3',
    deeppink: '#FF1493',
    deepskyblue: '#00BFFF',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1E90FF',
    firebrick: '#B22222',
    floralwhite: '#FFFAF0',
    forestgreen: '#228B22',
    fuchsia: '#FF00FF',
    gainsboro: '#DCDCDC',
    ghostwhite: '#F8F8FF',
    gold: '#FFD700',
    goldenrod: '#DAA520',
    gray: '#808080',
    grey: '#808080',
    green: '#008000',
    greenyellow: '#ADFF2F',
    honeydew: '#F0FFF0',
    hotpink: '#FF69B4',
    indianred: '#CD5C5C',
    indigo: '#4B0082',
    ivory: '#FFFFF0',
    khaki: '#F0E68C',
    lavender: '#E6E6FA',
    lavenderblush: '#FFF0F5',
    lawngreen: '#7CFC00',
    lemonchiffon: '#FFFACD',
    lightblue: '#ADD8E6',
    lightcoral: '#F08080',
    lightcyan: '#E0FFFF',
    lightgoldenrodyellow: '#FAFAD2',
    lightgray: '#D3D3D3',
    lightgrey: '#D3D3D3',
    lightgreen: '#90EE90',
    lightpink: '#FFB6C1',
    lightsalmon: '#FFA07A',
    lightseagreen: '#20B2AA',
    lightskyblue: '#87CEFA',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#B0C4DE',
    lightyellow: '#FFFFE0',
    lime: '#00FF00',
    limegreen: '#32CD32',
    linen: '#FAF0E6',
    magenta: '#FF00FF',
    maroon: '#800000',
    mediumaquamarine: '#66CDAA',
    mediumblue: '#0000CD',
    mediumorchid: '#BA55D3',
    mediumpurple: '#9370DB',
    mediumseagreen: '#3CB371',
    mediumslateblue: '#7B68EE',
    mediumspringgreen: '#00FA9A',
    mediumturquoise: '#48D1CC',
    mediumvioletred: '#C71585',
    midnightblue: '#191970',
    mintcream: '#F5FFFA',
    mistyrose: '#FFE4E1',
    moccasin: '#FFE4B5',
    navajowhite: '#FFDEAD',
    navy: '#000080',
    oldlace: '#FDF5E6',
    olive: '#808000',
    olivedrab: '#6B8E23',
    orange: '#FFA500',
    orangered: '#FF4500',
    orchid: '#DA70D6',
    palegoldenrod: '#EEE8AA',
    palegreen: '#98FB98',
    paleturquoise: '#AFEEEE',
    palevioletred: '#DB7093',
    papayawhip: '#FFEFD5',
    peachpuff: '#FFDAB9',
    peru: '#CD853F',
    pink: '#FFC0CB',
    plum: '#DDA0DD',
    powderblue: '#B0E0E6',
    purple: '#800080',
    rebeccapurple: '#663399',
    red: '#FF0000',
    rosybrown: '#BC8F8F',
    royalblue: '#4169E1',
    saddlebrown: '#8B4513',
    salmon: '#FA8072',
    sandybrown: '#F4A460',
    seagreen: '#2E8B57',
    seashell: '#FFF5EE',
    sienna: '#A0522D',
    silver: '#C0C0C0',
    skyblue: '#87CEEB',
    slateblue: '#6A5ACD',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#FFFAFA',
    springgreen: '#00FF7F',
    steelblue: '#4682B4',
    tan: '#D2B48C',
    teal: '#008080',
    thistle: '#D8BFD8',
    tomato: '#FF6347',
    turquoise: '#40E0D0',
    violet: '#EE82EE',
    wheat: '#F5DEB3',
    white: '#FFFFFF',
    whitesmoke: '#F5F5F5',
    yellow: '#FFFF00',
    yellowgreen: '#9ACD32'
  };

  /**
   * @private
   * @param {Number} p
   * @param {Number} q
   * @param {Number} t
   * @return {Number}
   */
  function hue2rgb(p, q, t) {
    if (t < 0) {
      t += 1;
    }
    if (t > 1) {
      t -= 1;
    }
    if (t < 1 / 6) {
      return p + (q - p) * 6 * t;
    }
    if (t < 1 / 2) {
      return q;
    }
    if (t < 2 / 3) {
      return p + (q - p) * (2 / 3 - t) * 6;
    }
    return p;
  }

  /**
   * Returns new color object, when given a color in RGB format
   * @memberOf fabric.Color
   * @param {String} color Color value ex: rgb(0-255,0-255,0-255)
   * @return {fabric.Color}
   */
  fabric.Color.fromRgb = function (color) {
    return Color.fromSource(Color.sourceFromRgb(color));
  };

  /**
   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format
   * @memberOf fabric.Color
   * @param {String} color Color value ex: rgb(0-255,0-255,0-255), rgb(0%-100%,0%-100%,0%-100%)
   * @return {Array} source
   */
  fabric.Color.sourceFromRgb = function (color) {
    var match = color.match(Color.reRGBa);
    if (match) {
      var r = parseInt(match[1], 10) / (/%$/.test(match[1]) ? 100 : 1) * (/%$/.test(match[1]) ? 255 : 1),
        g = parseInt(match[2], 10) / (/%$/.test(match[2]) ? 100 : 1) * (/%$/.test(match[2]) ? 255 : 1),
        b = parseInt(match[3], 10) / (/%$/.test(match[3]) ? 100 : 1) * (/%$/.test(match[3]) ? 255 : 1);
      return [parseInt(r, 10), parseInt(g, 10), parseInt(b, 10), match[4] ? parseFloat(match[4]) : 1];
    }
  };

  /**
   * Returns new color object, when given a color in RGBA format
   * @static
   * @function
   * @memberOf fabric.Color
   * @param {String} color
   * @return {fabric.Color}
   */
  fabric.Color.fromRgba = Color.fromRgb;

  /**
   * Returns new color object, when given a color in HSL format
   * @param {String} color Color value ex: hsl(0-260,0%-100%,0%-100%)
   * @memberOf fabric.Color
   * @return {fabric.Color}
   */
  fabric.Color.fromHsl = function (color) {
    return Color.fromSource(Color.sourceFromHsl(color));
  };

  /**
   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HSL or HSLA format.
   * Adapted from <a href="https://rawgithub.com/mjijackson/mjijackson.github.com/master/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript.html">https://github.com/mjijackson</a>
   * @memberOf fabric.Color
   * @param {String} color Color value ex: hsl(0-360,0%-100%,0%-100%) or hsla(0-360,0%-100%,0%-100%, 0-1)
   * @return {Array} source
   * @see http://http://www.w3.org/TR/css3-color/#hsl-color
   */
  fabric.Color.sourceFromHsl = function (color) {
    var match = color.match(Color.reHSLa);
    if (!match) {
      return;
    }
    var h = (parseFloat(match[1]) % 360 + 360) % 360 / 360,
      s = parseFloat(match[2]) / (/%$/.test(match[2]) ? 100 : 1),
      l = parseFloat(match[3]) / (/%$/.test(match[3]) ? 100 : 1),
      r,
      g,
      b;
    if (s === 0) {
      r = g = b = l;
    } else {
      var q = l <= 0.5 ? l * (s + 1) : l + s - l * s,
        p = l * 2 - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), match[4] ? parseFloat(match[4]) : 1];
  };

  /**
   * Returns new color object, when given a color in HSLA format
   * @static
   * @function
   * @memberOf fabric.Color
   * @param {String} color
   * @return {fabric.Color}
   */
  fabric.Color.fromHsla = Color.fromHsl;

  /**
   * Returns new color object, when given a color in HEX format
   * @static
   * @memberOf fabric.Color
   * @param {String} color Color value ex: FF5555
   * @return {fabric.Color}
   */
  fabric.Color.fromHex = function (color) {
    return Color.fromSource(Color.sourceFromHex(color));
  };

  /**
   * Returns array representation (ex: [100, 100, 200, 1]) of a color that's in HEX format
   * @static
   * @memberOf fabric.Color
   * @param {String} color ex: FF5555 or FF5544CC (RGBa)
   * @return {Array} source
   */
  fabric.Color.sourceFromHex = function (color) {
    if (color.match(Color.reHex)) {
      var value = color.slice(color.indexOf('#') + 1),
        isShortNotation = value.length === 3 || value.length === 4,
        isRGBa = value.length === 8 || value.length === 4,
        r = isShortNotation ? value.charAt(0) + value.charAt(0) : value.substring(0, 2),
        g = isShortNotation ? value.charAt(1) + value.charAt(1) : value.substring(2, 4),
        b = isShortNotation ? value.charAt(2) + value.charAt(2) : value.substring(4, 6),
        a = isRGBa ? isShortNotation ? value.charAt(3) + value.charAt(3) : value.substring(6, 8) : 'FF';
      return [parseInt(r, 16), parseInt(g, 16), parseInt(b, 16), parseFloat((parseInt(a, 16) / 255).toFixed(2))];
    }
  };

  /**
   * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])
   * @static
   * @memberOf fabric.Color
   * @param {Array} source
   * @return {fabric.Color}
   */
  fabric.Color.fromSource = function (source) {
    var oColor = new Color();
    oColor.setSource(source);
    return oColor;
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    scaleMap = ['e', 'se', 's', 'sw', 'w', 'nw', 'n', 'ne', 'e'],
    skewMap = ['ns', 'nesw', 'ew', 'nwse'],
    controls = {},
    LEFT = 'left',
    TOP = 'top',
    RIGHT = 'right',
    BOTTOM = 'bottom',
    CENTER = 'center',
    opposite = {
      top: BOTTOM,
      bottom: TOP,
      left: RIGHT,
      right: LEFT,
      center: CENTER
    },
    radiansToDegrees = fabric.util.radiansToDegrees,
    sign = Math.sign || function (x) {
      return (x > 0) - (x < 0) || +x;
    };

  /**
   * Combine control position and object angle to find the control direction compared
   * to the object center.
   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls
   * @param {fabric.Control} control the control class
   * @return {Number} 0 - 7 a quadrant number
   */
  function findCornerQuadrant(fabricObject, control) {
    var cornerAngle = fabricObject.angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;
    return Math.round(cornerAngle % 360 / 45);
  }
  function fireEvent(eventName, options) {
    var target = options.transform.target,
      canvas = target.canvas,
      canvasOptions = fabric.util.object.clone(options);
    canvasOptions.target = target;
    canvas && canvas.fire('object:' + eventName, canvasOptions);
    target.fire(eventName, options);
  }

  /**
   * Inspect event and fabricObject properties to understand if the scaling action
   * @param {Event} eventData from the user action
   * @param {fabric.Object} fabricObject the fabric object about to scale
   * @return {Boolean} true if scale is proportional
   */
  function scaleIsProportional(eventData, fabricObject) {
    var canvas = fabricObject.canvas,
      uniScaleKey = canvas.uniScaleKey,
      uniformIsToggled = eventData[uniScaleKey];
    return canvas.uniformScaling && !uniformIsToggled || !canvas.uniformScaling && uniformIsToggled;
  }

  /**
   * Checks if transform is centered
   * @param {Object} transform transform data
   * @return {Boolean} true if transform is centered
   */
  function isTransformCentered(transform) {
    return transform.originX === CENTER && transform.originY === CENTER;
  }

  /**
   * Inspect fabricObject to understand if the current scaling action is allowed
   * @param {fabric.Object} fabricObject the fabric object about to scale
   * @param {String} by 'x' or 'y' or ''
   * @param {Boolean} scaleProportionally true if we are trying to scale proportionally
   * @return {Boolean} true if scaling is not allowed at current conditions
   */
  function scalingIsForbidden(fabricObject, by, scaleProportionally) {
    var lockX = fabricObject.lockScalingX,
      lockY = fabricObject.lockScalingY;
    if (lockX && lockY) {
      return true;
    }
    if (!by && (lockX || lockY) && scaleProportionally) {
      return true;
    }
    if (lockX && by === 'x') {
      return true;
    }
    if (lockY && by === 'y') {
      return true;
    }
    return false;
  }

  /**
   * return the correct cursor style for the scale action
   * @param {Event} eventData the javascript event that is causing the scale
   * @param {fabric.Control} control the control that is interested in the action
   * @param {fabric.Object} fabricObject the fabric object that is interested in the action
   * @return {String} a valid css string for the cursor
   */
  function scaleCursorStyleHandler(eventData, control, fabricObject) {
    var notAllowed = 'not-allowed',
      scaleProportionally = scaleIsProportional(eventData, fabricObject),
      by = '';
    if (control.x !== 0 && control.y === 0) {
      by = 'x';
    } else if (control.x === 0 && control.y !== 0) {
      by = 'y';
    }
    if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {
      return notAllowed;
    }
    var n = findCornerQuadrant(fabricObject, control);
    return scaleMap[n] + '-resize';
  }

  /**
   * return the correct cursor style for the skew action
   * @param {Event} eventData the javascript event that is causing the scale
   * @param {fabric.Control} control the control that is interested in the action
   * @param {fabric.Object} fabricObject the fabric object that is interested in the action
   * @return {String} a valid css string for the cursor
   */
  function skewCursorStyleHandler(eventData, control, fabricObject) {
    var notAllowed = 'not-allowed';
    if (control.x !== 0 && fabricObject.lockSkewingY) {
      return notAllowed;
    }
    if (control.y !== 0 && fabricObject.lockSkewingX) {
      return notAllowed;
    }
    var n = findCornerQuadrant(fabricObject, control) % 4;
    return skewMap[n] + '-resize';
  }

  /**
   * Combine skew and scale style handlers to cover fabric standard use case
   * @param {Event} eventData the javascript event that is causing the scale
   * @param {fabric.Control} control the control that is interested in the action
   * @param {fabric.Object} fabricObject the fabric object that is interested in the action
   * @return {String} a valid css string for the cursor
   */
  function scaleSkewCursorStyleHandler(eventData, control, fabricObject) {
    if (eventData[fabricObject.canvas.altActionKey]) {
      return controls.skewCursorStyleHandler(eventData, control, fabricObject);
    }
    return controls.scaleCursorStyleHandler(eventData, control, fabricObject);
  }

  /**
   * Inspect event, control and fabricObject to return the correct action name
   * @param {Event} eventData the javascript event that is causing the scale
   * @param {fabric.Control} control the control that is interested in the action
   * @param {fabric.Object} fabricObject the fabric object that is interested in the action
   * @return {String} an action name
   */
  function scaleOrSkewActionName(eventData, control, fabricObject) {
    var isAlternative = eventData[fabricObject.canvas.altActionKey];
    if (control.x === 0) {
      // then is scaleY or skewX
      return isAlternative ? 'skewX' : 'scaleY';
    }
    if (control.y === 0) {
      // then is scaleY or skewX
      return isAlternative ? 'skewY' : 'scaleX';
    }
  }

  /**
   * Find the correct style for the control that is used for rotation.
   * this function is very simple and it just take care of not-allowed or standard cursor
   * @param {Event} eventData the javascript event that is causing the scale
   * @param {fabric.Control} control the control that is interested in the action
   * @param {fabric.Object} fabricObject the fabric object that is interested in the action
   * @return {String} a valid css string for the cursor
   */
  function rotationStyleHandler(eventData, control, fabricObject) {
    if (fabricObject.lockRotation) {
      return 'not-allowed';
    }
    return control.cursorStyle;
  }
  function commonEventInfo(eventData, transform, x, y) {
    return {
      e: eventData,
      transform: transform,
      pointer: {
        x: x,
        y: y
      }
    };
  }

  /**
   * Wrap an action handler with saving/restoring object position on the transform.
   * this is the code that permits to objects to keep their position while transforming.
   * @param {Function} actionHandler the function to wrap
   * @return {Function} a function with an action handler signature
   */
  function wrapWithFixedAnchor(actionHandler) {
    return function (eventData, transform, x, y) {
      var target = transform.target,
        centerPoint = target.getCenterPoint(),
        constraint = target.translateToOriginPoint(centerPoint, transform.originX, transform.originY),
        actionPerformed = actionHandler(eventData, transform, x, y);
      target.setPositionByOrigin(constraint, transform.originX, transform.originY);
      return actionPerformed;
    };
  }

  /**
   * Wrap an action handler with firing an event if the action is performed
   * @param {Function} actionHandler the function to wrap
   * @return {Function} a function with an action handler signature
   */
  function wrapWithFireEvent(eventName, actionHandler) {
    return function (eventData, transform, x, y) {
      var actionPerformed = actionHandler(eventData, transform, x, y);
      if (actionPerformed) {
        fireEvent(eventName, commonEventInfo(eventData, transform, x, y));
      }
      return actionPerformed;
    };
  }

  /**
   * Transforms a point described by x and y in a distance from the top left corner of the object
   * bounding box.
   * @param {Object} transform
   * @param {String} originX
   * @param {String} originY
   * @param {number} x
   * @param {number} y
   * @return {Fabric.Point} the normalized point
   */
  function getLocalPoint(transform, originX, originY, x, y) {
    var target = transform.target,
      control = target.controls[transform.corner],
      zoom = target.canvas.getZoom(),
      padding = target.padding / zoom,
      localPoint = target.toLocalPoint(new fabric.Point(x, y), originX, originY);
    if (localPoint.x >= padding) {
      localPoint.x -= padding;
    }
    if (localPoint.x <= -padding) {
      localPoint.x += padding;
    }
    if (localPoint.y >= padding) {
      localPoint.y -= padding;
    }
    if (localPoint.y <= padding) {
      localPoint.y += padding;
    }
    localPoint.x -= control.offsetX;
    localPoint.y -= control.offsetY;
    return localPoint;
  }

  /**
   * Detect if the fabric object is flipped on one side.
   * @param {fabric.Object} target
   * @return {Boolean} true if one flip, but not two.
   */
  function targetHasOneFlip(target) {
    return target.flipX !== target.flipY;
  }

  /**
   * Utility function to compensate the scale factor when skew is applied on both axes
   * @private
   */
  function compensateScaleForSkew(target, oppositeSkew, scaleToCompensate, axis, reference) {
    if (target[oppositeSkew] !== 0) {
      var newDim = target._getTransformedDimensions()[axis];
      var newValue = reference / newDim * target[scaleToCompensate];
      target.set(scaleToCompensate, newValue);
    }
  }

  /**
   * Action handler for skewing on the X axis
   * @private
   */
  function skewObjectX(eventData, transform, x, y) {
    var target = transform.target,
      // find how big the object would be, if there was no skewX. takes in account scaling
      dimNoSkew = target._getTransformedDimensions(0, target.skewY),
      localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y),
      // the mouse is in the center of the object, and we want it to stay there.
      // so the object will grow twice as much as the mouse.
      // this makes the skew growth to localPoint * 2 - dimNoSkew.
      totalSkewSize = Math.abs(localPoint.x * 2) - dimNoSkew.x,
      currentSkew = target.skewX,
      newSkew;
    if (totalSkewSize < 2) {
      // let's make it easy to go back to position 0.
      newSkew = 0;
    } else {
      newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleX, dimNoSkew.y / target.scaleY));
      // now we have to find the sign of the skew.
      // it mostly depend on the origin of transformation.
      if (transform.originX === LEFT && transform.originY === BOTTOM) {
        newSkew = -newSkew;
      }
      if (transform.originX === RIGHT && transform.originY === TOP) {
        newSkew = -newSkew;
      }
      if (targetHasOneFlip(target)) {
        newSkew = -newSkew;
      }
    }
    var hasSkewed = currentSkew !== newSkew;
    if (hasSkewed) {
      var dimBeforeSkewing = target._getTransformedDimensions().y;
      target.set('skewX', newSkew);
      compensateScaleForSkew(target, 'skewY', 'scaleY', 'y', dimBeforeSkewing);
    }
    return hasSkewed;
  }

  /**
   * Action handler for skewing on the Y axis
   * @private
   */
  function skewObjectY(eventData, transform, x, y) {
    var target = transform.target,
      // find how big the object would be, if there was no skewX. takes in account scaling
      dimNoSkew = target._getTransformedDimensions(target.skewX, 0),
      localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y),
      // the mouse is in the center of the object, and we want it to stay there.
      // so the object will grow twice as much as the mouse.
      // this makes the skew growth to localPoint * 2 - dimNoSkew.
      totalSkewSize = Math.abs(localPoint.y * 2) - dimNoSkew.y,
      currentSkew = target.skewY,
      newSkew;
    if (totalSkewSize < 2) {
      // let's make it easy to go back to position 0.
      newSkew = 0;
    } else {
      newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleY, dimNoSkew.x / target.scaleX));
      // now we have to find the sign of the skew.
      // it mostly depend on the origin of transformation.
      if (transform.originX === LEFT && transform.originY === BOTTOM) {
        newSkew = -newSkew;
      }
      if (transform.originX === RIGHT && transform.originY === TOP) {
        newSkew = -newSkew;
      }
      if (targetHasOneFlip(target)) {
        newSkew = -newSkew;
      }
    }
    var hasSkewed = currentSkew !== newSkew;
    if (hasSkewed) {
      var dimBeforeSkewing = target._getTransformedDimensions().x;
      target.set('skewY', newSkew);
      compensateScaleForSkew(target, 'skewX', 'scaleX', 'x', dimBeforeSkewing);
    }
    return hasSkewed;
  }

  /**
   * Wrapped Action handler for skewing on the Y axis, takes care of the
   * skew direction and determine the correct transform origin for the anchor point
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if some change happened
   */
  function skewHandlerX(eventData, transform, x, y) {
    // step1 figure out and change transform origin.
    // if skewX > 0 and originY bottom we anchor on right
    // if skewX > 0 and originY top we anchor on left
    // if skewX < 0 and originY bottom we anchor on left
    // if skewX < 0 and originY top we anchor on right
    // if skewX is 0, we look for mouse position to understand where are we going.
    var target = transform.target,
      currentSkew = target.skewX,
      originX,
      originY = transform.originY;
    if (target.lockSkewingX) {
      return false;
    }
    if (currentSkew === 0) {
      var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);
      if (localPointFromCenter.x > 0) {
        // we are pulling right, anchor left;
        originX = LEFT;
      } else {
        // we are pulling right, anchor right
        originX = RIGHT;
      }
    } else {
      if (currentSkew > 0) {
        originX = originY === TOP ? LEFT : RIGHT;
      }
      if (currentSkew < 0) {
        originX = originY === TOP ? RIGHT : LEFT;
      }
      // is the object flipped on one side only? swap the origin.
      if (targetHasOneFlip(target)) {
        originX = originX === LEFT ? RIGHT : LEFT;
      }
    }

    // once we have the origin, we find the anchor point
    transform.originX = originX;
    var finalHandler = wrapWithFireEvent('skewing', wrapWithFixedAnchor(skewObjectX));
    return finalHandler(eventData, transform, x, y);
  }

  /**
   * Wrapped Action handler for skewing on the Y axis, takes care of the
   * skew direction and determine the correct transform origin for the anchor point
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if some change happened
   */
  function skewHandlerY(eventData, transform, x, y) {
    // step1 figure out and change transform origin.
    // if skewY > 0 and originX left we anchor on top
    // if skewY > 0 and originX right we anchor on bottom
    // if skewY < 0 and originX left we anchor on bottom
    // if skewY < 0 and originX right we anchor on top
    // if skewY is 0, we look for mouse position to understand where are we going.
    var target = transform.target,
      currentSkew = target.skewY,
      originY,
      originX = transform.originX;
    if (target.lockSkewingY) {
      return false;
    }
    if (currentSkew === 0) {
      var localPointFromCenter = getLocalPoint(transform, CENTER, CENTER, x, y);
      if (localPointFromCenter.y > 0) {
        // we are pulling down, anchor up;
        originY = TOP;
      } else {
        // we are pulling up, anchor down
        originY = BOTTOM;
      }
    } else {
      if (currentSkew > 0) {
        originY = originX === LEFT ? TOP : BOTTOM;
      }
      if (currentSkew < 0) {
        originY = originX === LEFT ? BOTTOM : TOP;
      }
      // is the object flipped on one side only? swap the origin.
      if (targetHasOneFlip(target)) {
        originY = originY === TOP ? BOTTOM : TOP;
      }
    }

    // once we have the origin, we find the anchor point
    transform.originY = originY;
    var finalHandler = wrapWithFireEvent('skewing', wrapWithFixedAnchor(skewObjectY));
    return finalHandler(eventData, transform, x, y);
  }

  /**
   * Action handler for rotation and snapping, without anchor point.
   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if some change happened
   * @private
   */
  function rotationWithSnapping(eventData, transform, x, y) {
    var t = transform,
      target = t.target,
      pivotPoint = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);
    if (target.lockRotation) {
      return false;
    }
    var lastAngle = Math.atan2(t.ey - pivotPoint.y, t.ex - pivotPoint.x),
      curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x),
      angle = radiansToDegrees(curAngle - lastAngle + t.theta),
      hasRotated = true;
    if (target.snapAngle > 0) {
      var snapAngle = target.snapAngle,
        snapThreshold = target.snapThreshold || snapAngle,
        rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle,
        leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;
      if (Math.abs(angle - leftAngleLocked) < snapThreshold) {
        angle = leftAngleLocked;
      } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {
        angle = rightAngleLocked;
      }
    }

    // normalize angle to positive value
    if (angle < 0) {
      angle = 360 + angle;
    }
    angle %= 360;
    hasRotated = target.angle !== angle;
    target.angle = angle;
    return hasRotated;
  }

  /**
   * Basic scaling logic, reused with different constrain for scaling X,Y, freely or equally.
   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @param {Object} options additional information for scaling
   * @param {String} options.by 'x', 'y', 'equally' or '' to indicate type of scaling
   * @return {Boolean} true if some change happened
   * @private
   */
  function scaleObject(eventData, transform, x, y, options) {
    options = options || {};
    var target = transform.target,
      lockScalingX = target.lockScalingX,
      lockScalingY = target.lockScalingY,
      by = options.by,
      newPoint,
      scaleX,
      scaleY,
      dim,
      scaleProportionally = scaleIsProportional(eventData, target),
      forbidScaling = scalingIsForbidden(target, by, scaleProportionally),
      signX,
      signY,
      gestureScale = transform.gestureScale;
    if (forbidScaling) {
      return false;
    }
    if (gestureScale) {
      scaleX = transform.scaleX * gestureScale;
      scaleY = transform.scaleY * gestureScale;
    } else {
      newPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y);
      // use of sign: We use sign to detect change of direction of an action. sign usually change when
      // we cross the origin point with the mouse. So a scale flip for example. There is an issue when scaling
      // by center and scaling using one middle control ( default: mr, mt, ml, mb), the mouse movement can easily
      // cross many time the origin point and flip the object. so we need a way to filter out the noise.
      // This ternary here should be ok to filter out X scaling when we want Y only and vice versa.
      signX = by !== 'y' ? sign(newPoint.x) : 1;
      signY = by !== 'x' ? sign(newPoint.y) : 1;
      if (!transform.signX) {
        transform.signX = signX;
      }
      if (!transform.signY) {
        transform.signY = signY;
      }
      if (target.lockScalingFlip && (transform.signX !== signX || transform.signY !== signY)) {
        return false;
      }
      dim = target._getTransformedDimensions();
      // missing detection of flip and logic to switch the origin
      if (scaleProportionally && !by) {
        // uniform scaling
        var distance = Math.abs(newPoint.x) + Math.abs(newPoint.y),
          original = transform.original,
          originalDistance = Math.abs(dim.x * original.scaleX / target.scaleX) + Math.abs(dim.y * original.scaleY / target.scaleY),
          scale = distance / originalDistance;
        scaleX = original.scaleX * scale;
        scaleY = original.scaleY * scale;
      } else {
        scaleX = Math.abs(newPoint.x * target.scaleX / dim.x);
        scaleY = Math.abs(newPoint.y * target.scaleY / dim.y);
      }
      // if we are scaling by center, we need to double the scale
      if (isTransformCentered(transform)) {
        scaleX *= 2;
        scaleY *= 2;
      }
      if (transform.signX !== signX && by !== 'y') {
        transform.originX = opposite[transform.originX];
        scaleX *= -1;
        transform.signX = signX;
      }
      if (transform.signY !== signY && by !== 'x') {
        transform.originY = opposite[transform.originY];
        scaleY *= -1;
        transform.signY = signY;
      }
    }
    // minScale is taken are in the setter.
    var oldScaleX = target.scaleX,
      oldScaleY = target.scaleY;
    if (!by) {
      !lockScalingX && target.set('scaleX', scaleX);
      !lockScalingY && target.set('scaleY', scaleY);
    } else {
      // forbidden cases already handled on top here.
      by === 'x' && target.set('scaleX', scaleX);
      by === 'y' && target.set('scaleY', scaleY);
    }
    return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;
  }

  /**
   * Generic scaling logic, to scale from corners either equally or freely.
   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if some change happened
   */
  function scaleObjectFromCorner(eventData, transform, x, y) {
    return scaleObject(eventData, transform, x, y);
  }

  /**
   * Scaling logic for the X axis.
   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if some change happened
   */
  function scaleObjectX(eventData, transform, x, y) {
    return scaleObject(eventData, transform, x, y, {
      by: 'x'
    });
  }

  /**
   * Scaling logic for the Y axis.
   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if some change happened
   */
  function scaleObjectY(eventData, transform, x, y) {
    return scaleObject(eventData, transform, x, y, {
      by: 'y'
    });
  }

  /**
   * Composed action handler to either scale Y or skew X
   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if some change happened
   */
  function scalingYOrSkewingX(eventData, transform, x, y) {
    // ok some safety needed here.
    if (eventData[transform.target.canvas.altActionKey]) {
      return controls.skewHandlerX(eventData, transform, x, y);
    }
    return controls.scalingY(eventData, transform, x, y);
  }

  /**
   * Composed action handler to either scale X or skew Y
   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if some change happened
   */
  function scalingXOrSkewingY(eventData, transform, x, y) {
    // ok some safety needed here.
    if (eventData[transform.target.canvas.altActionKey]) {
      return controls.skewHandlerY(eventData, transform, x, y);
    }
    return controls.scalingX(eventData, transform, x, y);
  }

  /**
   * Action handler to change textbox width
   * Needs to be wrapped with `wrapWithFixedAnchor` to be effective
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if some change happened
   */
  function changeWidth(eventData, transform, x, y) {
    var target = transform.target,
      localPoint = getLocalPoint(transform, transform.originX, transform.originY, x, y),
      strokePadding = target.strokeWidth / (target.strokeUniform ? target.scaleX : 1),
      multiplier = isTransformCentered(transform) ? 2 : 1,
      oldWidth = target.width,
      newWidth = Math.abs(localPoint.x * multiplier / target.scaleX) - strokePadding;
    target.set('width', Math.max(newWidth, 0));
    return oldWidth !== newWidth;
  }

  /**
   * Action handler
   * @private
   * @param {Event} eventData javascript event that is doing the transform
   * @param {Object} transform javascript object containing a series of information around the current transform
   * @param {number} x current mouse x position, canvas normalized
   * @param {number} y current mouse y position, canvas normalized
   * @return {Boolean} true if the translation occurred
   */
  function dragHandler(eventData, transform, x, y) {
    var target = transform.target,
      newLeft = x - transform.offsetX,
      newTop = y - transform.offsetY,
      moveX = !target.get('lockMovementX') && target.left !== newLeft,
      moveY = !target.get('lockMovementY') && target.top !== newTop;
    moveX && target.set('left', newLeft);
    moveY && target.set('top', newTop);
    if (moveX || moveY) {
      fireEvent('moving', commonEventInfo(eventData, transform, x, y));
    }
    return moveX || moveY;
  }
  controls.scaleCursorStyleHandler = scaleCursorStyleHandler;
  controls.skewCursorStyleHandler = skewCursorStyleHandler;
  controls.scaleSkewCursorStyleHandler = scaleSkewCursorStyleHandler;
  controls.rotationWithSnapping = wrapWithFireEvent('rotating', wrapWithFixedAnchor(rotationWithSnapping));
  controls.scalingEqually = wrapWithFireEvent('scaling', wrapWithFixedAnchor(scaleObjectFromCorner));
  controls.scalingX = wrapWithFireEvent('scaling', wrapWithFixedAnchor(scaleObjectX));
  controls.scalingY = wrapWithFireEvent('scaling', wrapWithFixedAnchor(scaleObjectY));
  controls.scalingYOrSkewingX = scalingYOrSkewingX;
  controls.scalingXOrSkewingY = scalingXOrSkewingY;
  controls.changeWidth = wrapWithFireEvent('resizing', wrapWithFixedAnchor(changeWidth));
  controls.skewHandlerX = skewHandlerX;
  controls.skewHandlerY = skewHandlerY;
  controls.dragHandler = dragHandler;
  controls.scaleOrSkewActionName = scaleOrSkewActionName;
  controls.rotationStyleHandler = rotationStyleHandler;
  controls.fireEvent = fireEvent;
  controls.wrapWithFixedAnchor = wrapWithFixedAnchor;
  controls.wrapWithFireEvent = wrapWithFireEvent;
  controls.getLocalPoint = getLocalPoint;
  fabric.controlsUtils = controls;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    degreesToRadians = fabric.util.degreesToRadians,
    controls = fabric.controlsUtils;

  /**
   * Render a round control, as per fabric features.
   * This function is written to respect object properties like transparentCorners, cornerSize
   * cornerColor, cornerStrokeColor
   * plus the addition of offsetY and offsetX.
   * @param {CanvasRenderingContext2D} ctx context to render on
   * @param {Number} left x coordinate where the control center should be
   * @param {Number} top y coordinate where the control center should be
   * @param {Object} styleOverride override for fabric.Object controls style
   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls
   */
  function renderCircleControl(ctx, left, top, styleOverride, fabricObject) {
    styleOverride = styleOverride || {};
    var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,
      ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,
      transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ? styleOverride.transparentCorners : fabricObject.transparentCorners,
      methodName = transparentCorners ? 'stroke' : 'fill',
      stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),
      myLeft = left,
      myTop = top,
      size;
    ctx.save();
    ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;
    ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;
    // as soon as fabric react v5, remove ie11, use proper ellipse code.
    if (xSize > ySize) {
      size = xSize;
      ctx.scale(1.0, ySize / xSize);
      myTop = top * xSize / ySize;
    } else if (ySize > xSize) {
      size = ySize;
      ctx.scale(xSize / ySize, 1.0);
      myLeft = left * ySize / xSize;
    } else {
      size = xSize;
    }
    // this is still wrong
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.arc(myLeft, myTop, size / 2, 0, 2 * Math.PI, false);
    ctx[methodName]();
    if (stroke) {
      ctx.stroke();
    }
    ctx.restore();
  }

  /**
   * Render a square control, as per fabric features.
   * This function is written to respect object properties like transparentCorners, cornerSize
   * cornerColor, cornerStrokeColor
   * plus the addition of offsetY and offsetX.
   * @param {CanvasRenderingContext2D} ctx context to render on
   * @param {Number} left x coordinate where the control center should be
   * @param {Number} top y coordinate where the control center should be
   * @param {Object} styleOverride override for fabric.Object controls style
   * @param {fabric.Object} fabricObject the fabric object for which we are rendering controls
   */
  function renderSquareControl(ctx, left, top, styleOverride, fabricObject) {
    styleOverride = styleOverride || {};
    var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize,
      ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize,
      transparentCorners = typeof styleOverride.transparentCorners !== 'undefined' ? styleOverride.transparentCorners : fabricObject.transparentCorners,
      methodName = transparentCorners ? 'stroke' : 'fill',
      stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor),
      xSizeBy2 = xSize / 2,
      ySizeBy2 = ySize / 2;
    ctx.save();
    ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;
    ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;
    // this is still wrong
    ctx.lineWidth = 1;
    ctx.translate(left, top);
    ctx.rotate(degreesToRadians(fabricObject.angle));
    // this does not work, and fixed with ( && ) does not make sense.
    // to have real transparent corners we need the controls on upperCanvas
    // transparentCorners || ctx.clearRect(-xSizeBy2, -ySizeBy2, xSize, ySize);
    ctx[methodName + 'Rect'](-xSizeBy2, -ySizeBy2, xSize, ySize);
    if (stroke) {
      ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);
    }
    ctx.restore();
  }
  controls.renderCircleControl = renderCircleControl;
  controls.renderSquareControl = renderSquareControl;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {});
  function Control(options) {
    for (var i in options) {
      this[i] = options[i];
    }
  }
  fabric.Control = Control;
  fabric.Control.prototype = /** @lends fabric.Control.prototype */{
    /**
     * keep track of control visibility.
     * mainly for backward compatibility.
     * if you do not want to see a control, you can remove it
     * from the controlset.
     * @type {Boolean}
     * @default true
     */
    visible: true,
    /**
     * Name of the action that the control will likely execute.
     * This is optional. FabricJS uses to identify what the user is doing for some
     * extra optimizations. If you are writing a custom control and you want to know
     * somewhere else in the code what is going on, you can use this string here.
     * you can also provide a custom getActionName if your control run multiple actions
     * depending on some external state.
     * default to scale since is the most common, used on 4 corners by default
     * @type {String}
     * @default 'scale'
     */
    actionName: 'scale',
    /**
     * Drawing angle of the control.
     * NOT used for now, but name marked as needed for internal logic
     * example: to reuse the same drawing function for different rotated controls
     * @type {Number}
     * @default 0
     */
    angle: 0,
    /**
     * Relative position of the control. X
     * 0,0 is the center of the Object, while -0.5 (left) or 0.5 (right) are the extremities
     * of the bounding box.
     * @type {Number}
     * @default 0
     */
    x: 0,
    /**
     * Relative position of the control. Y
     * 0,0 is the center of the Object, while -0.5 (top) or 0.5 (bottom) are the extremities
     * of the bounding box.
     * @type {Number}
     * @default 0
     */
    y: 0,
    /**
     * Horizontal offset of the control from the defined position. In pixels
     * Positive offset moves the control to the right, negative to the left.
     * It used when you want to have position of control that does not scale with
     * the bounding box. Example: rotation control is placed at x:0, y: 0.5 on
     * the boundindbox, with an offset of 30 pixels vertically. Those 30 pixels will
     * stay 30 pixels no matter how the object is big. Another example is having 2
     * controls in the corner, that stay in the same position when the object scale.
     * of the bounding box.
     * @type {Number}
     * @default 0
     */
    offsetX: 0,
    /**
     * Vertical offset of the control from the defined position. In pixels
     * Positive offset moves the control to the bottom, negative to the top.
     * @type {Number}
     * @default 0
     */
    offsetY: 0,
    /**
     * Sets the length of the control. If null, defaults to object's cornerSize.
     * Expects both sizeX and sizeY to be set when set.
     * @type {?Number}
     * @default null
     */
    sizeX: null,
    /**
     * Sets the height of the control. If null, defaults to object's cornerSize.
     * Expects both sizeX and sizeY to be set when set.
     * @type {?Number}
     * @default null
     */
    sizeY: null,
    /**
     * Sets the length of the touch area of the control. If null, defaults to object's touchCornerSize.
     * Expects both touchSizeX and touchSizeY to be set when set.
     * @type {?Number}
     * @default null
     */
    touchSizeX: null,
    /**
     * Sets the height of the touch area of the control. If null, defaults to object's touchCornerSize.
     * Expects both touchSizeX and touchSizeY to be set when set.
     * @type {?Number}
     * @default null
     */
    touchSizeY: null,
    /**
     * Css cursor style to display when the control is hovered.
     * if the method `cursorStyleHandler` is provided, this property is ignored.
     * @type {String}
     * @default 'crosshair'
     */
    cursorStyle: 'crosshair',
    /**
     * If controls has an offsetY or offsetX, draw a line that connects
     * the control to the bounding box
     * @type {Boolean}
     * @default false
     */
    withConnection: false,
    /**
     * The control actionHandler, provide one to handle action ( control being moved )
     * @param {Event} eventData the native mouse event
     * @param {Object} transformData properties of the current transform
     * @param {Number} x x position of the cursor
     * @param {Number} y y position of the cursor
     * @return {Boolean} true if the action/event modified the object
     */
    actionHandler: function actionHandler( /* eventData, transformData, x, y */) {},
    /**
     * The control handler for mouse down, provide one to handle mouse down on control
     * @param {Event} eventData the native mouse event
     * @param {Object} transformData properties of the current transform
     * @param {Number} x x position of the cursor
     * @param {Number} y y position of the cursor
     * @return {Boolean} true if the action/event modified the object
     */
    mouseDownHandler: function mouseDownHandler( /* eventData, transformData, x, y */) {},
    /**
     * The control mouseUpHandler, provide one to handle an effect on mouse up.
     * @param {Event} eventData the native mouse event
     * @param {Object} transformData properties of the current transform
     * @param {Number} x x position of the cursor
     * @param {Number} y y position of the cursor
     * @return {Boolean} true if the action/event modified the object
     */
    mouseUpHandler: function mouseUpHandler( /* eventData, transformData, x, y */) {},
    /**
     * Returns control actionHandler
     * @param {Event} eventData the native mouse event
     * @param {fabric.Object} fabricObject on which the control is displayed
     * @param {fabric.Control} control control for which the action handler is being asked
     * @return {Function} the action handler
     */
    getActionHandler: function getActionHandler( /* eventData, fabricObject, control */
    ) {
      return this.actionHandler;
    },
    /**
     * Returns control mouseDown handler
     * @param {Event} eventData the native mouse event
     * @param {fabric.Object} fabricObject on which the control is displayed
     * @param {fabric.Control} control control for which the action handler is being asked
     * @return {Function} the action handler
     */
    getMouseDownHandler: function getMouseDownHandler( /* eventData, fabricObject, control */
    ) {
      return this.mouseDownHandler;
    },
    /**
     * Returns control mouseUp handler
     * @param {Event} eventData the native mouse event
     * @param {fabric.Object} fabricObject on which the control is displayed
     * @param {fabric.Control} control control for which the action handler is being asked
     * @return {Function} the action handler
     */
    getMouseUpHandler: function getMouseUpHandler( /* eventData, fabricObject, control */
    ) {
      return this.mouseUpHandler;
    },
    /**
     * Returns control cursorStyle for css using cursorStyle. If you need a more elaborate
     * function you can pass one in the constructor
     * the cursorStyle property
     * @param {Event} eventData the native mouse event
     * @param {fabric.Control} control the current control ( likely this)
     * @param {fabric.Object} object on which the control is displayed
     * @return {String}
     */
    cursorStyleHandler: function cursorStyleHandler(eventData, control /* fabricObject */) {
      return control.cursorStyle;
    },
    /**
     * Returns the action name. The basic implementation just return the actionName property.
     * @param {Event} eventData the native mouse event
     * @param {fabric.Control} control the current control ( likely this)
     * @param {fabric.Object} object on which the control is displayed
     * @return {String}
     */
    getActionName: function getActionName(eventData, control /* fabricObject */) {
      return control.actionName;
    },
    /**
     * Returns controls visibility
     * @param {fabric.Object} object on which the control is displayed
     * @param {String} controlKey key where the control is memorized on the
     * @return {Boolean}
     */
    getVisibility: function getVisibility(fabricObject, controlKey) {
      var objectVisibility = fabricObject._controlsVisibility;
      if (objectVisibility && typeof objectVisibility[controlKey] !== 'undefined') {
        return objectVisibility[controlKey];
      }
      return this.visible;
    },
    /**
     * Sets controls visibility
     * @param {Boolean} visibility for the object
     * @return {Void}
     */
    setVisibility: function setVisibility(visibility /* name, fabricObject */) {
      this.visible = visibility;
    },
    positionHandler: function positionHandler(dim, finalMatrix /*, fabricObject, currentControl */) {
      var point = fabric.util.transformPoint({
        x: this.x * dim.x + this.offsetX,
        y: this.y * dim.y + this.offsetY
      }, finalMatrix);
      return point;
    },
    /**
     * Returns the coords for this control based on object values.
     * @param {Number} objectAngle angle from the fabric object holding the control
     * @param {Number} objectCornerSize cornerSize from the fabric object holding the control (or touchCornerSize if
     *   isTouch is true)
     * @param {Number} centerX x coordinate where the control center should be
     * @param {Number} centerY y coordinate where the control center should be
     * @param {boolean} isTouch true if touch corner, false if normal corner
     */
    calcCornerCoords: function calcCornerCoords(objectAngle, objectCornerSize, centerX, centerY, isTouch) {
      var cosHalfOffset,
        sinHalfOffset,
        cosHalfOffsetComp,
        sinHalfOffsetComp,
        xSize = isTouch ? this.touchSizeX : this.sizeX,
        ySize = isTouch ? this.touchSizeY : this.sizeY;
      if (xSize && ySize && xSize !== ySize) {
        // handle rectangular corners
        var controlTriangleAngle = Math.atan2(ySize, xSize);
        var cornerHypotenuse = Math.sqrt(xSize * xSize + ySize * ySize) / 2;
        var newTheta = controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);
        var newThetaComp = Math.PI / 2 - controlTriangleAngle - fabric.util.degreesToRadians(objectAngle);
        cosHalfOffset = cornerHypotenuse * fabric.util.cos(newTheta);
        sinHalfOffset = cornerHypotenuse * fabric.util.sin(newTheta);
        // use complementary angle for two corners
        cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newThetaComp);
        sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newThetaComp);
      } else {
        // handle square corners
        // use default object corner size unless size is defined
        var cornerSize = xSize && ySize ? xSize : objectCornerSize;
        /* 0.7071067812 stands for sqrt(2)/2 */
        cornerHypotenuse = cornerSize * 0.7071067812;
        // complementary angles are equal since they're both 45 degrees
        var newTheta = fabric.util.degreesToRadians(45 - objectAngle);
        cosHalfOffset = cosHalfOffsetComp = cornerHypotenuse * fabric.util.cos(newTheta);
        sinHalfOffset = sinHalfOffsetComp = cornerHypotenuse * fabric.util.sin(newTheta);
      }
      return {
        tl: {
          x: centerX - sinHalfOffsetComp,
          y: centerY - cosHalfOffsetComp
        },
        tr: {
          x: centerX + cosHalfOffset,
          y: centerY - sinHalfOffset
        },
        bl: {
          x: centerX - cosHalfOffset,
          y: centerY + sinHalfOffset
        },
        br: {
          x: centerX + sinHalfOffsetComp,
          y: centerY + cosHalfOffsetComp
        }
      };
    },
    /**
    * Render function for the control.
    * When this function runs the context is unscaled. unrotate. Just retina scaled.
    * all the functions will have to translate to the point left,top before starting Drawing
    * if they want to draw a control where the position is detected.
    * left and top are the result of the positionHandler function
    * @param {RenderingContext2D} ctx the context where the control will be drawn
    * @param {Number} left position of the canvas where we are about to render the control.
    * @param {Number} top position of the canvas where we are about to render the control.
    * @param {Object} styleOverride
    * @param {fabric.Object} fabricObject the object where the control is about to be rendered
    */
    render: function render(ctx, left, top, styleOverride, fabricObject) {
      styleOverride = styleOverride || {};
      switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {
        case 'circle':
          fabric.controlsUtils.renderCircleControl.call(this, ctx, left, top, styleOverride, fabricObject);
          break;
        default:
          fabric.controlsUtils.renderSquareControl.call(this, ctx, left, top, styleOverride, fabricObject);
      }
    }
  };
})(typeof exports !== 'undefined' ? exports : this);
(function () {
  /* _FROM_SVG_START_ */
  function getColorStop(el, multiplier) {
    var style = el.getAttribute('style'),
      offset = el.getAttribute('offset') || 0,
      color,
      colorAlpha,
      opacity,
      i;

    // convert percents to absolute values
    offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);
    offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;
    if (style) {
      var keyValuePairs = style.split(/\s*;\s*/);
      if (keyValuePairs[keyValuePairs.length - 1] === '') {
        keyValuePairs.pop();
      }
      for (i = keyValuePairs.length; i--;) {
        var split = keyValuePairs[i].split(/\s*:\s*/),
          key = split[0].trim(),
          value = split[1].trim();
        if (key === 'stop-color') {
          color = value;
        } else if (key === 'stop-opacity') {
          opacity = value;
        }
      }
    }
    if (!color) {
      color = el.getAttribute('stop-color') || 'rgb(0,0,0)';
    }
    if (!opacity) {
      opacity = el.getAttribute('stop-opacity');
    }
    color = new fabric.Color(color);
    colorAlpha = color.getAlpha();
    opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);
    opacity *= colorAlpha * multiplier;
    return {
      offset: offset,
      color: color.toRgb(),
      opacity: opacity
    };
  }
  function getLinearCoords(el) {
    return {
      x1: el.getAttribute('x1') || 0,
      y1: el.getAttribute('y1') || 0,
      x2: el.getAttribute('x2') || '100%',
      y2: el.getAttribute('y2') || 0
    };
  }
  function getRadialCoords(el) {
    return {
      x1: el.getAttribute('fx') || el.getAttribute('cx') || '50%',
      y1: el.getAttribute('fy') || el.getAttribute('cy') || '50%',
      r1: 0,
      x2: el.getAttribute('cx') || '50%',
      y2: el.getAttribute('cy') || '50%',
      r2: el.getAttribute('r') || '50%'
    };
  }
  /* _FROM_SVG_END_ */

  var clone = fabric.util.object.clone;

  /**
   * Gradient class
   * @class fabric.Gradient
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#gradients}
   * @see {@link fabric.Gradient#initialize} for constructor definition
   */
  fabric.Gradient = fabric.util.createClass( /** @lends fabric.Gradient.prototype */{
    /**
     * Horizontal offset for aligning gradients coming from SVG when outside pathgroups
     * @type Number
     * @default 0
     */
    offsetX: 0,
    /**
     * Vertical offset for aligning gradients coming from SVG when outside pathgroups
     * @type Number
     * @default 0
     */
    offsetY: 0,
    /**
     * A transform matrix to apply to the gradient before painting.
     * Imported from svg gradients, is not applied with the current transform in the center.
     * Before this transform is applied, the origin point is at the top left corner of the object
     * plus the addition of offsetY and offsetX.
     * @type Number[]
     * @default null
     */
    gradientTransform: null,
    /**
     * coordinates units for coords.
     * If `pixels`, the number of coords are in the same unit of width / height.
     * If set as `percentage` the coords are still a number, but 1 means 100% of width
     * for the X and 100% of the height for the y. It can be bigger than 1 and negative.
     * allowed values pixels or percentage.
     * @type String
     * @default 'pixels'
     */
    gradientUnits: 'pixels',
    /**
     * Gradient type linear or radial
     * @type String
     * @default 'pixels'
     */
    type: 'linear',
    /**
     * Constructor
     * @param {Object} options Options object with type, coords, gradientUnits and colorStops
     * @param {Object} [options.type] gradient type linear or radial
     * @param {Object} [options.gradientUnits] gradient units
     * @param {Object} [options.offsetX] SVG import compatibility
     * @param {Object} [options.offsetY] SVG import compatibility
     * @param {Object[]} options.colorStops contains the colorstops.
     * @param {Object} options.coords contains the coords of the gradient
     * @param {Number} [options.coords.x1] X coordiante of the first point for linear or of the focal point for radial
     * @param {Number} [options.coords.y1] Y coordiante of the first point for linear or of the focal point for radial
     * @param {Number} [options.coords.x2] X coordiante of the second point for linear or of the center point for radial
     * @param {Number} [options.coords.y2] Y coordiante of the second point for linear or of the center point for radial
     * @param {Number} [options.coords.r1] only for radial gradient, radius of the inner circle
     * @param {Number} [options.coords.r2] only for radial gradient, radius of the external circle
     * @return {fabric.Gradient} thisArg
     */
    initialize: function initialize(options) {
      options || (options = {});
      options.coords || (options.coords = {});
      var coords,
        _this = this;

      // sets everything, then coords and colorstops get sets again
      Object.keys(options).forEach(function (option) {
        _this[option] = options[option];
      });
      if (this.id) {
        this.id += '_' + fabric.Object.__uid++;
      } else {
        this.id = fabric.Object.__uid++;
      }
      coords = {
        x1: options.coords.x1 || 0,
        y1: options.coords.y1 || 0,
        x2: options.coords.x2 || 0,
        y2: options.coords.y2 || 0
      };
      if (this.type === 'radial') {
        coords.r1 = options.coords.r1 || 0;
        coords.r2 = options.coords.r2 || 0;
      }
      this.coords = coords;
      this.colorStops = options.colorStops.slice();
    },
    /**
     * Adds another colorStop
     * @param {Object} colorStop Object with offset and color
     * @return {fabric.Gradient} thisArg
     */
    addColorStop: function addColorStop(colorStops) {
      for (var position in colorStops) {
        var color = new fabric.Color(colorStops[position]);
        this.colorStops.push({
          offset: parseFloat(position),
          color: color.toRgb(),
          opacity: color.getAlpha()
        });
      }
      return this;
    },
    /**
     * Returns object representation of a gradient
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object}
     */
    toObject: function toObject(propertiesToInclude) {
      var object = {
        type: this.type,
        coords: this.coords,
        colorStops: this.colorStops,
        offsetX: this.offsetX,
        offsetY: this.offsetY,
        gradientUnits: this.gradientUnits,
        gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform
      };
      fabric.util.populateWithProperties(this, object, propertiesToInclude);
      return object;
    },
    /* _TO_SVG_START_ */
    /**
     * Returns SVG representation of an gradient
     * @param {Object} object Object to create a gradient for
     * @return {String} SVG representation of an gradient (linear/radial)
     */
    toSVG: function toSVG(object, options) {
      var coords = clone(this.coords, true),
        i,
        len,
        options = options || {},
        markup,
        commonAttributes,
        colorStops = clone(this.colorStops, true),
        needsSwap = coords.r1 > coords.r2,
        transform = this.gradientTransform ? this.gradientTransform.concat() : fabric.iMatrix.concat(),
        offsetX = -this.offsetX,
        offsetY = -this.offsetY,
        withViewport = !!options.additionalTransform,
        gradientUnits = this.gradientUnits === 'pixels' ? 'userSpaceOnUse' : 'objectBoundingBox';
      // colorStops must be sorted ascending
      colorStops.sort(function (a, b) {
        return a.offset - b.offset;
      });
      if (gradientUnits === 'objectBoundingBox') {
        offsetX /= object.width;
        offsetY /= object.height;
      } else {
        offsetX += object.width / 2;
        offsetY += object.height / 2;
      }
      if (object.type === 'path' && this.gradientUnits !== 'percentage') {
        offsetX -= object.pathOffset.x;
        offsetY -= object.pathOffset.y;
      }
      transform[4] -= offsetX;
      transform[5] -= offsetY;
      commonAttributes = 'id="SVGID_' + this.id + '" gradientUnits="' + gradientUnits + '"';
      commonAttributes += ' gradientTransform="' + (withViewport ? options.additionalTransform + ' ' : '') + fabric.util.matrixToSVG(transform) + '" ';
      if (this.type === 'linear') {
        markup = ['<linearGradient ', commonAttributes, ' x1="', coords.x1, '" y1="', coords.y1, '" x2="', coords.x2, '" y2="', coords.y2, '">\n'];
      } else if (this.type === 'radial') {
        // svg radial gradient has just 1 radius. the biggest.
        markup = ['<radialGradient ', commonAttributes, ' cx="', needsSwap ? coords.x1 : coords.x2, '" cy="', needsSwap ? coords.y1 : coords.y2, '" r="', needsSwap ? coords.r1 : coords.r2, '" fx="', needsSwap ? coords.x2 : coords.x1, '" fy="', needsSwap ? coords.y2 : coords.y1, '">\n'];
      }
      if (this.type === 'radial') {
        if (needsSwap) {
          // svg goes from internal to external radius. if radius are inverted, swap color stops.
          colorStops = colorStops.concat();
          colorStops.reverse();
          for (i = 0, len = colorStops.length; i < len; i++) {
            colorStops[i].offset = 1 - colorStops[i].offset;
          }
        }
        var minRadius = Math.min(coords.r1, coords.r2);
        if (minRadius > 0) {
          // i have to shift all colorStops and add new one in 0.
          var maxRadius = Math.max(coords.r1, coords.r2),
            percentageShift = minRadius / maxRadius;
          for (i = 0, len = colorStops.length; i < len; i++) {
            colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);
          }
        }
      }
      for (i = 0, len = colorStops.length; i < len; i++) {
        var colorStop = colorStops[i];
        markup.push('<stop ', 'offset="', colorStop.offset * 100 + '%', '" style="stop-color:', colorStop.color, typeof colorStop.opacity !== 'undefined' ? ';stop-opacity: ' + colorStop.opacity : ';', '"/>\n');
      }
      markup.push(this.type === 'linear' ? '</linearGradient>\n' : '</radialGradient>\n');
      return markup.join('');
    },
    /* _TO_SVG_END_ */

    /**
     * Returns an instance of CanvasGradient
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @return {CanvasGradient}
     */
    toLive: function toLive(ctx) {
      var gradient,
        coords = fabric.util.object.clone(this.coords),
        i,
        len;
      if (!this.type) {
        return;
      }
      if (this.type === 'linear') {
        gradient = ctx.createLinearGradient(coords.x1, coords.y1, coords.x2, coords.y2);
      } else if (this.type === 'radial') {
        gradient = ctx.createRadialGradient(coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);
      }
      for (i = 0, len = this.colorStops.length; i < len; i++) {
        var color = this.colorStops[i].color,
          opacity = this.colorStops[i].opacity,
          offset = this.colorStops[i].offset;
        if (typeof opacity !== 'undefined') {
          color = new fabric.Color(color).setAlpha(opacity).toRgba();
        }
        gradient.addColorStop(offset, color);
      }
      return gradient;
    }
  });
  fabric.util.object.extend(fabric.Gradient, {
    /* _FROM_SVG_START_ */
    /**
     * Returns {@link fabric.Gradient} instance from an SVG element
     * @static
     * @memberOf fabric.Gradient
     * @param {SVGGradientElement} el SVG gradient element
     * @param {fabric.Object} instance
     * @param {String} opacityAttr A fill-opacity or stroke-opacity attribute to multiply to each stop's opacity.
     * @param {Object} svgOptions an object containing the size of the SVG in order to parse correctly gradients
     * that uses gradientUnits as 'userSpaceOnUse' and percentages.
     * @param {Object.number} viewBoxWidth width part of the viewBox attribute on svg
     * @param {Object.number} viewBoxHeight height part of the viewBox attribute on svg
     * @param {Object.number} width width part of the svg tag if viewBox is not specified
     * @param {Object.number} height height part of the svg tag if viewBox is not specified
     * @return {fabric.Gradient} Gradient instance
     * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement
     * @see http://www.w3.org/TR/SVG/pservers.html#RadialGradientElement
     */
    fromElement: function fromElement(el, instance, opacityAttr, svgOptions) {
      /**
       *  @example:
       *
       *  <linearGradient id="linearGrad1">
       *    <stop offset="0%" stop-color="white"/>
       *    <stop offset="100%" stop-color="black"/>
       *  </linearGradient>
       *
       *  OR
       *
       *  <linearGradient id="linearGrad2">
       *    <stop offset="0" style="stop-color:rgb(255,255,255)"/>
       *    <stop offset="1" style="stop-color:rgb(0,0,0)"/>
       *  </linearGradient>
       *
       *  OR
       *
       *  <radialGradient id="radialGrad1">
       *    <stop offset="0%" stop-color="white" stop-opacity="1" />
       *    <stop offset="50%" stop-color="black" stop-opacity="0.5" />
       *    <stop offset="100%" stop-color="white" stop-opacity="1" />
       *  </radialGradient>
       *
       *  OR
       *
       *  <radialGradient id="radialGrad2">
       *    <stop offset="0" stop-color="rgb(255,255,255)" />
       *    <stop offset="0.5" stop-color="rgb(0,0,0)" />
       *    <stop offset="1" stop-color="rgb(255,255,255)" />
       *  </radialGradient>
       *
       */

      var multiplier = parseFloat(opacityAttr) / (/%$/.test(opacityAttr) ? 100 : 1);
      multiplier = multiplier < 0 ? 0 : multiplier > 1 ? 1 : multiplier;
      if (isNaN(multiplier)) {
        multiplier = 1;
      }
      var colorStopEls = el.getElementsByTagName('stop'),
        type,
        gradientUnits = el.getAttribute('gradientUnits') === 'userSpaceOnUse' ? 'pixels' : 'percentage',
        gradientTransform = el.getAttribute('gradientTransform') || '',
        colorStops = [],
        coords,
        i,
        offsetX = 0,
        offsetY = 0,
        transformMatrix;
      if (el.nodeName === 'linearGradient' || el.nodeName === 'LINEARGRADIENT') {
        type = 'linear';
        coords = getLinearCoords(el);
      } else {
        type = 'radial';
        coords = getRadialCoords(el);
      }
      for (i = colorStopEls.length; i--;) {
        colorStops.push(getColorStop(colorStopEls[i], multiplier));
      }
      transformMatrix = fabric.parseTransformAttribute(gradientTransform);
      __convertPercentUnitsToValues(instance, coords, svgOptions, gradientUnits);
      if (gradientUnits === 'pixels') {
        offsetX = -instance.left;
        offsetY = -instance.top;
      }
      var gradient = new fabric.Gradient({
        id: el.getAttribute('id'),
        type: type,
        coords: coords,
        colorStops: colorStops,
        gradientUnits: gradientUnits,
        gradientTransform: transformMatrix,
        offsetX: offsetX,
        offsetY: offsetY
      });
      return gradient;
    }
    /* _FROM_SVG_END_ */
  });

  /**
   * @private
   */
  function __convertPercentUnitsToValues(instance, options, svgOptions, gradientUnits) {
    var propValue, finalValue;
    Object.keys(options).forEach(function (prop) {
      propValue = options[prop];
      if (propValue === 'Infinity') {
        finalValue = 1;
      } else if (propValue === '-Infinity') {
        finalValue = 0;
      } else {
        finalValue = parseFloat(options[prop], 10);
        if (typeof propValue === 'string' && /^(\d+\.\d+)%|(\d+)%$/.test(propValue)) {
          finalValue *= 0.01;
          if (gradientUnits === 'pixels') {
            // then we need to fix those percentages here in svg parsing
            if (prop === 'x1' || prop === 'x2' || prop === 'r2') {
              finalValue *= svgOptions.viewBoxWidth || svgOptions.width;
            }
            if (prop === 'y1' || prop === 'y2') {
              finalValue *= svgOptions.viewBoxHeight || svgOptions.height;
            }
          }
        }
      }
      options[prop] = finalValue;
    });
  }
})();
(function () {
  'use strict';

  var toFixed = fabric.util.toFixed;

  /**
   * Pattern class
   * @class fabric.Pattern
   * @see {@link http://fabricjs.com/patterns|Pattern demo}
   * @see {@link http://fabricjs.com/dynamic-patterns|DynamicPattern demo}
   * @see {@link fabric.Pattern#initialize} for constructor definition
   */

  fabric.Pattern = fabric.util.createClass( /** @lends fabric.Pattern.prototype */{
    /**
     * Repeat property of a pattern (one of repeat, repeat-x, repeat-y or no-repeat)
     * @type String
     * @default
     */
    repeat: 'repeat',
    /**
     * Pattern horizontal offset from object's left/top corner
     * @type Number
     * @default
     */
    offsetX: 0,
    /**
     * Pattern vertical offset from object's left/top corner
     * @type Number
     * @default
     */
    offsetY: 0,
    /**
     * crossOrigin value (one of "", "anonymous", "use-credentials")
     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
     * @type String
     * @default
     */
    crossOrigin: '',
    /**
     * transform matrix to change the pattern, imported from svgs.
     * @type Array
     * @default
     */
    patternTransform: null,
    /**
     * Constructor
     * @param {Object} [options] Options object
     * @param {Function} [callback] function to invoke after callback init.
     * @return {fabric.Pattern} thisArg
     */
    initialize: function initialize(options, callback) {
      options || (options = {});
      this.id = fabric.Object.__uid++;
      this.setOptions(options);
      if (!options.source || options.source && typeof options.source !== 'string') {
        callback && callback(this);
        return;
      } else {
        // img src string
        var _this = this;
        this.source = fabric.util.createImage();
        fabric.util.loadImage(options.source, function (img, isError) {
          _this.source = img;
          callback && callback(_this, isError);
        }, null, this.crossOrigin);
      }
    },
    /**
     * Returns object representation of a pattern
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of a pattern instance
     */
    toObject: function toObject(propertiesToInclude) {
      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,
        source,
        object;

      // <img> element
      if (typeof this.source.src === 'string') {
        source = this.source.src;
      }
      // <canvas> element
      else if (_typeof(this.source) === 'object' && this.source.toDataURL) {
        source = this.source.toDataURL();
      }
      object = {
        type: 'pattern',
        source: source,
        repeat: this.repeat,
        crossOrigin: this.crossOrigin,
        offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),
        offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),
        patternTransform: this.patternTransform ? this.patternTransform.concat() : null
      };
      fabric.util.populateWithProperties(this, object, propertiesToInclude);
      return object;
    },
    /* _TO_SVG_START_ */
    /**
     * Returns SVG representation of a pattern
     * @param {fabric.Object} object
     * @return {String} SVG representation of a pattern
     */
    toSVG: function toSVG(object) {
      var patternSource = typeof this.source === 'function' ? this.source() : this.source,
        patternWidth = patternSource.width / object.width,
        patternHeight = patternSource.height / object.height,
        patternOffsetX = this.offsetX / object.width,
        patternOffsetY = this.offsetY / object.height,
        patternImgSrc = '';
      if (this.repeat === 'repeat-x' || this.repeat === 'no-repeat') {
        patternHeight = 1;
        if (patternOffsetY) {
          patternHeight += Math.abs(patternOffsetY);
        }
      }
      if (this.repeat === 'repeat-y' || this.repeat === 'no-repeat') {
        patternWidth = 1;
        if (patternOffsetX) {
          patternWidth += Math.abs(patternOffsetX);
        }
      }
      if (patternSource.src) {
        patternImgSrc = patternSource.src;
      } else if (patternSource.toDataURL) {
        patternImgSrc = patternSource.toDataURL();
      }
      return '<pattern id="SVGID_' + this.id + '" x="' + patternOffsetX + '" y="' + patternOffsetY + '" width="' + patternWidth + '" height="' + patternHeight + '">\n' + '<image x="0" y="0"' + ' width="' + patternSource.width + '" height="' + patternSource.height + '" xlink:href="' + patternImgSrc + '"></image>\n' + '</pattern>\n';
    },
    /* _TO_SVG_END_ */

    setOptions: function setOptions(options) {
      for (var prop in options) {
        this[prop] = options[prop];
      }
    },
    /**
     * Returns an instance of CanvasPattern
     * @param {CanvasRenderingContext2D} ctx Context to create pattern
     * @return {CanvasPattern}
     */
    toLive: function toLive(ctx) {
      var source = this.source;
      // if the image failed to load, return, and allow rest to continue loading
      if (!source) {
        return '';
      }

      // if an image
      if (typeof source.src !== 'undefined') {
        if (!source.complete) {
          return '';
        }
        if (source.naturalWidth === 0 || source.naturalHeight === 0) {
          return '';
        }
      }
      return ctx.createPattern(source, this.repeat);
    }
  });
})();
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    toFixed = fabric.util.toFixed;
  if (fabric.Shadow) {
    fabric.warn('fabric.Shadow is already defined.');
    return;
  }

  /**
   * Shadow class
   * @class fabric.Shadow
   * @see {@link http://fabricjs.com/shadows|Shadow demo}
   * @see {@link fabric.Shadow#initialize} for constructor definition
   */
  fabric.Shadow = fabric.util.createClass( /** @lends fabric.Shadow.prototype */{
    /**
     * Shadow color
     * @type String
     * @default
     */
    color: 'rgb(0,0,0)',
    /**
     * Shadow blur
     * @type Number
     */
    blur: 0,
    /**
     * Shadow horizontal offset
     * @type Number
     * @default
     */
    offsetX: 0,
    /**
     * Shadow vertical offset
     * @type Number
     * @default
     */
    offsetY: 0,
    /**
     * Whether the shadow should affect stroke operations
     * @type Boolean
     * @default
     */
    affectStroke: false,
    /**
     * Indicates whether toObject should include default values
     * @type Boolean
     * @default
     */
    includeDefaultValues: true,
    /**
     * When `false`, the shadow will scale with the object.
     * When `true`, the shadow's offsetX, offsetY, and blur will not be affected by the object's scale.
     * default to false
     * @type Boolean
     * @default
     */
    nonScaling: false,
    /**
     * Constructor
     * @param {Object|String} [options] Options object with any of color, blur, offsetX, offsetY properties or string (e.g. "rgba(0,0,0,0.2) 2px 2px 10px")
     * @return {fabric.Shadow} thisArg
     */
    initialize: function initialize(options) {
      if (typeof options === 'string') {
        options = this._parseShadow(options);
      }
      for (var prop in options) {
        this[prop] = options[prop];
      }
      this.id = fabric.Object.__uid++;
    },
    /**
     * @private
     * @param {String} shadow Shadow value to parse
     * @return {Object} Shadow object with color, offsetX, offsetY and blur
     */
    _parseShadow: function _parseShadow(shadow) {
      var shadowStr = shadow.trim(),
        offsetsAndBlur = fabric.Shadow.reOffsetsAndBlur.exec(shadowStr) || [],
        color = shadowStr.replace(fabric.Shadow.reOffsetsAndBlur, '') || 'rgb(0,0,0)';
      return {
        color: color.trim(),
        offsetX: parseFloat(offsetsAndBlur[1], 10) || 0,
        offsetY: parseFloat(offsetsAndBlur[2], 10) || 0,
        blur: parseFloat(offsetsAndBlur[3], 10) || 0
      };
    },
    /**
     * Returns a string representation of an instance
     * @see http://www.w3.org/TR/css-text-decor-3/#text-shadow
     * @return {String} Returns CSS3 text-shadow declaration
     */
    toString: function toString() {
      return [this.offsetX, this.offsetY, this.blur, this.color].join('px ');
    },
    /* _TO_SVG_START_ */
    /**
     * Returns SVG representation of a shadow
     * @param {fabric.Object} object
     * @return {String} SVG representation of a shadow
     */
    toSVG: function toSVG(object) {
      var fBoxX = 40,
        fBoxY = 40,
        NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,
        offset = fabric.util.rotateVector({
          x: this.offsetX,
          y: this.offsetY
        }, fabric.util.degreesToRadians(-object.angle)),
        BLUR_BOX = 20,
        color = new fabric.Color(this.color);
      if (object.width && object.height) {
        //http://www.w3.org/TR/SVG/filters.html#FilterEffectsRegion
        // we add some extra space to filter box to contain the blur ( 20 )
        fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
        fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
      }
      if (object.flipX) {
        offset.x *= -1;
      }
      if (object.flipY) {
        offset.y *= -1;
      }
      return '<filter id="SVGID_' + this.id + '" y="-' + fBoxY + '%" height="' + (100 + 2 * fBoxY) + '%" ' + 'x="-' + fBoxX + '%" width="' + (100 + 2 * fBoxX) + '%" ' + '>\n' + '\t<feGaussianBlur in="SourceAlpha" stdDeviation="' + toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '"></feGaussianBlur>\n' + '\t<feOffset dx="' + toFixed(offset.x, NUM_FRACTION_DIGITS) + '" dy="' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '" result="oBlur" ></feOffset>\n' + '\t<feFlood flood-color="' + color.toRgb() + '" flood-opacity="' + color.getAlpha() + '"/>\n' + '\t<feComposite in2="oBlur" operator="in" />\n' + '\t<feMerge>\n' + '\t\t<feMergeNode></feMergeNode>\n' + '\t\t<feMergeNode in="SourceGraphic"></feMergeNode>\n' + '\t</feMerge>\n' + '</filter>\n';
    },
    /* _TO_SVG_END_ */

    /**
     * Returns object representation of a shadow
     * @return {Object} Object representation of a shadow instance
     */
    toObject: function toObject() {
      if (this.includeDefaultValues) {
        return {
          color: this.color,
          blur: this.blur,
          offsetX: this.offsetX,
          offsetY: this.offsetY,
          affectStroke: this.affectStroke,
          nonScaling: this.nonScaling
        };
      }
      var obj = {},
        proto = fabric.Shadow.prototype;
      ['color', 'blur', 'offsetX', 'offsetY', 'affectStroke', 'nonScaling'].forEach(function (prop) {
        if (this[prop] !== proto[prop]) {
          obj[prop] = this[prop];
        }
      }, this);
      return obj;
    }
  });

  /**
   * Regex matching shadow offsetX, offsetY and blur (ex: "2px 2px 10px rgba(0,0,0,0.2)", "rgb(0,255,0) 2px 2px")
   * @static
   * @field
   * @memberOf fabric.Shadow
   */
  // eslint-disable-next-line max-len
  fabric.Shadow.reOffsetsAndBlur = /(?:\s|^)(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(\d+(?:\.\d*)?(?:px)?)?(?:\s?|$)(?:$|\s)/;
})(typeof exports !== 'undefined' ? exports : this);
(function () {
  'use strict';

  if (fabric.StaticCanvas) {
    fabric.warn('fabric.StaticCanvas is already defined.');
    return;
  }

  // aliases for faster resolution
  var extend = fabric.util.object.extend,
    getElementOffset = fabric.util.getElementOffset,
    removeFromArray = fabric.util.removeFromArray,
    toFixed = fabric.util.toFixed,
    transformPoint = fabric.util.transformPoint,
    invertTransform = fabric.util.invertTransform,
    getNodeCanvas = fabric.util.getNodeCanvas,
    createCanvasElement = fabric.util.createCanvasElement,
    CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');

  /**
   * Static canvas class
   * @class fabric.StaticCanvas
   * @mixes fabric.Collection
   * @mixes fabric.Observable
   * @see {@link http://fabricjs.com/static_canvas|StaticCanvas demo}
   * @see {@link fabric.StaticCanvas#initialize} for constructor definition
   * @fires before:render
   * @fires after:render
   * @fires canvas:cleared
   * @fires object:added
   * @fires object:removed
   */
  fabric.StaticCanvas = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.StaticCanvas.prototype */{
    /**
     * Constructor
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */
    initialize: function initialize(el, options) {
      options || (options = {});
      this.renderAndResetBound = this.renderAndReset.bind(this);
      this.requestRenderAllBound = this.requestRenderAll.bind(this);
      this._initStatic(el, options);
    },
    /**
     * Background color of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setBackgroundColor}.
     * @type {(String|fabric.Pattern)}
     * @default
     */
    backgroundColor: '',
    /**
     * Background image of canvas instance.
     * since 2.4.0 image caching is active, please when putting an image as background, add to the
     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
     * vale. As an alternative you can disable image objectCaching
     * @type fabric.Image
     * @default
     */
    backgroundImage: null,
    /**
     * Overlay color of canvas instance.
     * Should be set via {@link fabric.StaticCanvas#setOverlayColor}
     * @since 1.3.9
     * @type {(String|fabric.Pattern)}
     * @default
     */
    overlayColor: '',
    /**
     * Overlay image of canvas instance.
     * since 2.4.0 image caching is active, please when putting an image as overlay, add to the
     * canvas property a reference to the canvas it is on. Otherwise the image cannot detect the zoom
     * vale. As an alternative you can disable image objectCaching
     * @type fabric.Image
     * @default
     */
    overlayImage: null,
    /**
     * Indicates whether toObject/toDatalessObject should include default values
     * if set to false, takes precedence over the object value.
     * @type Boolean
     * @default
     */
    includeDefaultValues: true,
    /**
     * Indicates whether objects' state should be saved
     * @type Boolean
     * @default
     */
    stateful: false,
    /**
     * Indicates whether {@link fabric.Collection.add}, {@link fabric.Collection.insertAt} and {@link fabric.Collection.remove},
     * {@link fabric.StaticCanvas.moveTo}, {@link fabric.StaticCanvas.clear} and many more, should also re-render canvas.
     * Disabling this option will not give a performance boost when adding/removing a lot of objects to/from canvas at once
     * since the renders are quequed and executed one per frame.
     * Disabling is suggested anyway and managing the renders of the app manually is not a big effort ( canvas.requestRenderAll() )
     * Left default to true to do not break documentation and old app, fiddles.
     * @type Boolean
     * @default
     */
    renderOnAddRemove: true,
    /**
     * Indicates whether object controls (borders/controls) are rendered above overlay image
     * @type Boolean
     * @default
     */
    controlsAboveOverlay: false,
    /**
     * Indicates whether the browser can be scrolled when using a touchscreen and dragging on the canvas
     * @type Boolean
     * @default
     */
    allowTouchScrolling: false,
    /**
     * Indicates whether this canvas will use image smoothing, this is on by default in browsers
     * @type Boolean
     * @default
     */
    imageSmoothingEnabled: true,
    /**
     * The transformation (a Canvas 2D API transform matrix) which focuses the viewport
     * @type Array
     * @example <caption>Default transform</caption>
     * canvas.viewportTransform = [1, 0, 0, 1, 0, 0];
     * @example <caption>Scale by 70% and translate toward bottom-right by 50, without skewing</caption>
     * canvas.viewportTransform = [0.7, 0, 0, 0.7, 50, 50];
     * @default
     */
    viewportTransform: fabric.iMatrix.concat(),
    /**
     * if set to false background image is not affected by viewport transform
     * @since 1.6.3
     * @type Boolean
     * @default
     */
    backgroundVpt: true,
    /**
     * if set to false overlya image is not affected by viewport transform
     * @since 1.6.3
     * @type Boolean
     * @default
     */
    overlayVpt: true,
    /**
     * When true, canvas is scaled by devicePixelRatio for better rendering on retina screens
     * @type Boolean
     * @default
     */
    enableRetinaScaling: true,
    /**
     * Describe canvas element extension over design
     * properties are tl,tr,bl,br.
     * if canvas is not zoomed/panned those points are the four corner of canvas
     * if canvas is viewportTransformed you those points indicate the extension
     * of canvas element in plain untrasformed coordinates
     * The coordinates get updated with @method calcViewportBoundaries.
     * @memberOf fabric.StaticCanvas.prototype
     */
    vptCoords: {},
    /**
     * Based on vptCoords and object.aCoords, skip rendering of objects that
     * are not included in current viewport.
     * May greatly help in applications with crowded canvas and use of zoom/pan
     * If One of the corner of the bounding box of the object is on the canvas
     * the objects get rendered.
     * @memberOf fabric.StaticCanvas.prototype
     * @type Boolean
     * @default
     */
    skipOffscreen: true,
    /**
     * a fabricObject that, without stroke define a clipping area with their shape. filled in black
     * the clipPath object gets used when the canvas has rendered, and the context is placed in the
     * top left corner of the canvas.
     * clipPath will clip away controls, if you do not want this to happen use controlsAboveOverlay = true
     * @type fabric.Object
     */
    clipPath: undefined,
    /**
     * @private
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     */
    _initStatic: function _initStatic(el, options) {
      var cb = this.requestRenderAllBound;
      this._objects = [];
      this._createLowerCanvas(el);
      this._initOptions(options);
      // only initialize retina scaling once
      if (!this.interactive) {
        this._initRetinaScaling();
      }
      if (options.overlayImage) {
        this.setOverlayImage(options.overlayImage, cb);
      }
      if (options.backgroundImage) {
        this.setBackgroundImage(options.backgroundImage, cb);
      }
      if (options.backgroundColor) {
        this.setBackgroundColor(options.backgroundColor, cb);
      }
      if (options.overlayColor) {
        this.setOverlayColor(options.overlayColor, cb);
      }
      this.calcOffset();
    },
    /**
     * @private
     */
    _isRetinaScaling: function _isRetinaScaling() {
      return fabric.devicePixelRatio > 1 && this.enableRetinaScaling;
    },
    /**
     * @private
     * @return {Number} retinaScaling if applied, otherwise 1;
     */
    getRetinaScaling: function getRetinaScaling() {
      return this._isRetinaScaling() ? Math.max(1, fabric.devicePixelRatio) : 1;
    },
    /**
     * @private
     */
    _initRetinaScaling: function _initRetinaScaling() {
      if (!this._isRetinaScaling()) {
        return;
      }
      var scaleRatio = fabric.devicePixelRatio;
      this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);
      if (this.upperCanvasEl) {
        this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);
      }
    },
    __initRetinaScaling: function __initRetinaScaling(scaleRatio, canvas, context) {
      canvas.setAttribute('width', this.width * scaleRatio);
      canvas.setAttribute('height', this.height * scaleRatio);
      context.scale(scaleRatio, scaleRatio);
    },
    /**
     * Calculates canvas element offset relative to the document
     * This method is also attached as "resize" event handler of window
     * @return {fabric.Canvas} instance
     * @chainable
     */
    calcOffset: function calcOffset() {
      this._offset = getElementOffset(this.lowerCanvasEl);
      return this;
    },
    /**
     * Sets {@link fabric.StaticCanvas#overlayImage|overlay image} for this canvas
     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set overlay to
     * @param {Function} callback callback to invoke when image is loaded and set as an overlay
     * @param {Object} [options] Optional options to set for the {@link fabric.Image|overlay image}.
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/MnzHT/|jsFiddle demo}
     * @example <caption>Normal overlayImage with left/top = 0</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   // Needed to position overlayImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>overlayImage with different properties</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>Stretched overlayImage #1 - width/height correspond to canvas width/height</caption>
     * fabric.Image.fromURL('http://fabricjs.com/assets/jail_cell_bars.png', function(img, isError) {
     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
     *    canvas.setOverlayImage(img, canvas.renderAll.bind(canvas));
     * });
     * @example <caption>Stretched overlayImage #2 - width/height correspond to canvas width/height</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   width: canvas.width,
     *   height: canvas.height,
     *   // Needed to position overlayImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>overlayImage loaded from cross-origin</caption>
     * canvas.setOverlayImage('http://fabricjs.com/assets/jail_cell_bars.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top',
     *   crossOrigin: 'anonymous'
     * });
     */
    setOverlayImage: function setOverlayImage(image, callback, options) {
      return this.__setBgOverlayImage('overlayImage', image, callback, options);
    },
    /**
     * Sets {@link fabric.StaticCanvas#backgroundImage|background image} for this canvas
     * @param {(fabric.Image|String)} image fabric.Image instance or URL of an image to set background to
     * @param {Function} callback Callback to invoke when image is loaded and set as background
     * @param {Object} [options] Optional options to set for the {@link fabric.Image|background image}.
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/djnr8o7a/28/|jsFiddle demo}
     * @example <caption>Normal backgroundImage with left/top = 0</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   // Needed to position backgroundImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>backgroundImage with different properties</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>Stretched backgroundImage #1 - width/height correspond to canvas width/height</caption>
     * fabric.Image.fromURL('http://fabricjs.com/assets/honey_im_subtle.png', function(img, isError) {
     *    img.set({width: canvas.width, height: canvas.height, originX: 'left', originY: 'top'});
     *    canvas.setBackgroundImage(img, canvas.renderAll.bind(canvas));
     * });
     * @example <caption>Stretched backgroundImage #2 - width/height correspond to canvas width/height</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   width: canvas.width,
     *   height: canvas.height,
     *   // Needed to position backgroundImage at 0/0
     *   originX: 'left',
     *   originY: 'top'
     * });
     * @example <caption>backgroundImage loaded from cross-origin</caption>
     * canvas.setBackgroundImage('http://fabricjs.com/assets/honey_im_subtle.png', canvas.renderAll.bind(canvas), {
     *   opacity: 0.5,
     *   angle: 45,
     *   left: 400,
     *   top: 400,
     *   originX: 'left',
     *   originY: 'top',
     *   crossOrigin: 'anonymous'
     * });
     */
    // TODO: fix stretched examples
    setBackgroundImage: function setBackgroundImage(image, callback, options) {
      return this.__setBgOverlayImage('backgroundImage', image, callback, options);
    },
    /**
     * Sets {@link fabric.StaticCanvas#overlayColor|foreground color} for this canvas
     * @param {(String|fabric.Pattern)} overlayColor Color or pattern to set foreground color to
     * @param {Function} callback Callback to invoke when foreground color is set
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/pB55h/|jsFiddle demo}
     * @example <caption>Normal overlayColor - color value</caption>
     * canvas.setOverlayColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as overlayColor</caption>
     * canvas.setOverlayColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
     * }, canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as overlayColor with repeat and offset</caption>
     * canvas.setOverlayColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
     *   repeat: 'repeat',
     *   offsetX: 200,
     *   offsetY: 100
     * }, canvas.renderAll.bind(canvas));
     */
    setOverlayColor: function setOverlayColor(overlayColor, callback) {
      return this.__setBgOverlayColor('overlayColor', overlayColor, callback);
    },
    /**
     * Sets {@link fabric.StaticCanvas#backgroundColor|background color} for this canvas
     * @param {(String|fabric.Pattern)} backgroundColor Color or pattern to set background color to
     * @param {Function} callback Callback to invoke when background color is set
     * @return {fabric.Canvas} thisArg
     * @chainable
     * @see {@link http://jsfiddle.net/fabricjs/hXzvk/|jsFiddle demo}
     * @example <caption>Normal backgroundColor - color value</caption>
     * canvas.setBackgroundColor('rgba(255, 73, 64, 0.6)', canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as backgroundColor</caption>
     * canvas.setBackgroundColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png'
     * }, canvas.renderAll.bind(canvas));
     * @example <caption>fabric.Pattern used as backgroundColor with repeat and offset</caption>
     * canvas.setBackgroundColor({
     *   source: 'http://fabricjs.com/assets/escheresque_ste.png',
     *   repeat: 'repeat',
     *   offsetX: 200,
     *   offsetY: 100
     * }, canvas.renderAll.bind(canvas));
     */
    setBackgroundColor: function setBackgroundColor(backgroundColor, callback) {
      return this.__setBgOverlayColor('backgroundColor', backgroundColor, callback);
    },
    /**
     * @private
     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundImage|backgroundImage}
     * or {@link fabric.StaticCanvas#overlayImage|overlayImage})
     * @param {(fabric.Image|String|null)} image fabric.Image instance, URL of an image or null to set background or overlay to
     * @param {Function} callback Callback to invoke when image is loaded and set as background or overlay. The first argument is the created image, the second argument is a flag indicating whether an error occurred or not.
     * @param {Object} [options] Optional options to set for the {@link fabric.Image|image}.
     */
    __setBgOverlayImage: function __setBgOverlayImage(property, image, callback, options) {
      if (typeof image === 'string') {
        fabric.util.loadImage(image, function (img, isError) {
          if (img) {
            var instance = new fabric.Image(img, options);
            this[property] = instance;
            instance.canvas = this;
          }
          callback && callback(img, isError);
        }, this, options && options.crossOrigin);
      } else {
        options && image.setOptions(options);
        this[property] = image;
        image && (image.canvas = this);
        callback && callback(image, false);
      }
      return this;
    },
    /**
     * @private
     * @param {String} property Property to set ({@link fabric.StaticCanvas#backgroundColor|backgroundColor}
     * or {@link fabric.StaticCanvas#overlayColor|overlayColor})
     * @param {(Object|String|null)} color Object with pattern information, color value or null
     * @param {Function} [callback] Callback is invoked when color is set
     */
    __setBgOverlayColor: function __setBgOverlayColor(property, color, callback) {
      this[property] = color;
      this._initGradient(color, property);
      this._initPattern(color, property, callback);
      return this;
    },
    /**
     * @private
     */
    _createCanvasElement: function _createCanvasElement() {
      var element = createCanvasElement();
      if (!element) {
        throw CANVAS_INIT_ERROR;
      }
      if (!element.style) {
        element.style = {};
      }
      if (typeof element.getContext === 'undefined') {
        throw CANVAS_INIT_ERROR;
      }
      return element;
    },
    /**
     * @private
     * @param {Object} [options] Options object
     */
    _initOptions: function _initOptions(options) {
      var lowerCanvasEl = this.lowerCanvasEl;
      this._setOptions(options);
      this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;
      this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;
      if (!this.lowerCanvasEl.style) {
        return;
      }
      lowerCanvasEl.width = this.width;
      lowerCanvasEl.height = this.height;
      lowerCanvasEl.style.width = this.width + 'px';
      lowerCanvasEl.style.height = this.height + 'px';
      this.viewportTransform = this.viewportTransform.slice();
    },
    /**
     * Creates a bottom canvas
     * @private
     * @param {HTMLElement} [canvasEl]
     */
    _createLowerCanvas: function _createLowerCanvas(canvasEl) {
      // canvasEl === 'HTMLCanvasElement' does not work on jsdom/node
      if (canvasEl && canvasEl.getContext) {
        this.lowerCanvasEl = canvasEl;
      } else {
        this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();
      }
      fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');
      this._originalCanvasStyle = this.lowerCanvasEl.style;
      if (this.interactive) {
        this._applyCanvasStyle(this.lowerCanvasEl);
      }
      this.contextContainer = this.lowerCanvasEl.getContext('2d');
    },
    /**
     * Returns canvas width (in px)
     * @return {Number}
     */
    getWidth: function getWidth() {
      return this.width;
    },
    /**
     * Returns canvas height (in px)
     * @return {Number}
     */
    getHeight: function getHeight() {
      return this.height;
    },
    /**
     * Sets width of this canvas instance
     * @param {Number|String} value                         Value to set width to
     * @param {Object}        [options]                     Options object
     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
     * @return {fabric.Canvas} instance
     * @chainable true
     */
    setWidth: function setWidth(value, options) {
      return this.setDimensions({
        width: value
      }, options);
    },
    /**
     * Sets height of this canvas instance
     * @param {Number|String} value                         Value to set height to
     * @param {Object}        [options]                     Options object
     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
     * @return {fabric.Canvas} instance
     * @chainable true
     */
    setHeight: function setHeight(value, options) {
      return this.setDimensions({
        height: value
      }, options);
    },
    /**
     * Sets dimensions (width, height) of this canvas instance. when options.cssOnly flag active you should also supply the unit of measure (px/%/em)
     * @param {Object}        dimensions                    Object with width/height properties
     * @param {Number|String} [dimensions.width]            Width of canvas element
     * @param {Number|String} [dimensions.height]           Height of canvas element
     * @param {Object}        [options]                     Options object
     * @param {Boolean}       [options.backstoreOnly=false] Set the given dimensions only as canvas backstore dimensions
     * @param {Boolean}       [options.cssOnly=false]       Set the given dimensions only as css dimensions
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    setDimensions: function setDimensions(dimensions, options) {
      var cssValue;
      options = options || {};
      for (var prop in dimensions) {
        cssValue = dimensions[prop];
        if (!options.cssOnly) {
          this._setBackstoreDimension(prop, dimensions[prop]);
          cssValue += 'px';
          this.hasLostContext = true;
        }
        if (!options.backstoreOnly) {
          this._setCssDimension(prop, cssValue);
        }
      }
      if (this._isCurrentlyDrawing) {
        this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles(this.contextTop);
      }
      this._initRetinaScaling();
      this.calcOffset();
      if (!options.cssOnly) {
        this.requestRenderAll();
      }
      return this;
    },
    /**
     * Helper for setting width/height
     * @private
     * @param {String} prop property (width|height)
     * @param {Number} value value to set property to
     * @return {fabric.Canvas} instance
     * @chainable true
     */
    _setBackstoreDimension: function _setBackstoreDimension(prop, value) {
      this.lowerCanvasEl[prop] = value;
      if (this.upperCanvasEl) {
        this.upperCanvasEl[prop] = value;
      }
      if (this.cacheCanvasEl) {
        this.cacheCanvasEl[prop] = value;
      }
      this[prop] = value;
      return this;
    },
    /**
     * Helper for setting css width/height
     * @private
     * @param {String} prop property (width|height)
     * @param {String} value value to set property to
     * @return {fabric.Canvas} instance
     * @chainable true
     */
    _setCssDimension: function _setCssDimension(prop, value) {
      this.lowerCanvasEl.style[prop] = value;
      if (this.upperCanvasEl) {
        this.upperCanvasEl.style[prop] = value;
      }
      if (this.wrapperEl) {
        this.wrapperEl.style[prop] = value;
      }
      return this;
    },
    /**
     * Returns canvas zoom level
     * @return {Number}
     */
    getZoom: function getZoom() {
      return this.viewportTransform[0];
    },
    /**
     * Sets viewport transformation of this canvas instance
     * @param {Array} vpt a Canvas 2D API transform matrix
     * @return {fabric.Canvas} instance
     * @chainable true
     */
    setViewportTransform: function setViewportTransform(vpt) {
      var activeObject = this._activeObject,
        backgroundObject = this.backgroundImage,
        overlayObject = this.overlayImage,
        object,
        i,
        len;
      this.viewportTransform = vpt;
      for (i = 0, len = this._objects.length; i < len; i++) {
        object = this._objects[i];
        object.group || object.setCoords(true);
      }
      if (activeObject) {
        activeObject.setCoords();
      }
      if (backgroundObject) {
        backgroundObject.setCoords(true);
      }
      if (overlayObject) {
        overlayObject.setCoords(true);
      }
      this.calcViewportBoundaries();
      this.renderOnAddRemove && this.requestRenderAll();
      return this;
    },
    /**
     * Sets zoom level of this canvas instance, the zoom centered around point
     * meaning that following zoom to point with the same point will have the visual
     * effect of the zoom originating from that point. The point won't move.
     * It has nothing to do with canvas center or visual center of the viewport.
     * @param {fabric.Point} point to zoom with respect to
     * @param {Number} value to set zoom to, less than 1 zooms out
     * @return {fabric.Canvas} instance
     * @chainable true
     */
    zoomToPoint: function zoomToPoint(point, value) {
      // TODO: just change the scale, preserve other transformations
      var before = point,
        vpt = this.viewportTransform.slice(0);
      point = transformPoint(point, invertTransform(this.viewportTransform));
      vpt[0] = value;
      vpt[3] = value;
      var after = transformPoint(point, vpt);
      vpt[4] += before.x - after.x;
      vpt[5] += before.y - after.y;
      return this.setViewportTransform(vpt);
    },
    /**
     * Sets zoom level of this canvas instance
     * @param {Number} value to set zoom to, less than 1 zooms out
     * @return {fabric.Canvas} instance
     * @chainable true
     */
    setZoom: function setZoom(value) {
      this.zoomToPoint(new fabric.Point(0, 0), value);
      return this;
    },
    /**
     * Pan viewport so as to place point at top left corner of canvas
     * @param {fabric.Point} point to move to
     * @return {fabric.Canvas} instance
     * @chainable true
     */
    absolutePan: function absolutePan(point) {
      var vpt = this.viewportTransform.slice(0);
      vpt[4] = -point.x;
      vpt[5] = -point.y;
      return this.setViewportTransform(vpt);
    },
    /**
     * Pans viewpoint relatively
     * @param {fabric.Point} point (position vector) to move by
     * @return {fabric.Canvas} instance
     * @chainable true
     */
    relativePan: function relativePan(point) {
      return this.absolutePan(new fabric.Point(-point.x - this.viewportTransform[4], -point.y - this.viewportTransform[5]));
    },
    /**
     * Returns &lt;canvas> element corresponding to this instance
     * @return {HTMLCanvasElement}
     */
    getElement: function getElement() {
      return this.lowerCanvasEl;
    },
    /**
     * @private
     * @param {fabric.Object} obj Object that was added
     */
    _onObjectAdded: function _onObjectAdded(obj) {
      this.stateful && obj.setupState();
      obj._set('canvas', this);
      obj.setCoords();
      this.fire('object:added', {
        target: obj
      });
      obj.fire('added');
    },
    /**
     * @private
     * @param {fabric.Object} obj Object that was removed
     */
    _onObjectRemoved: function _onObjectRemoved(obj) {
      this.fire('object:removed', {
        target: obj
      });
      obj.fire('removed');
      delete obj.canvas;
    },
    /**
     * Clears specified context of canvas element
     * @param {CanvasRenderingContext2D} ctx Context to clear
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    clearContext: function clearContext(ctx) {
      ctx.clearRect(0, 0, this.width, this.height);
      return this;
    },
    /**
     * Returns context of canvas where objects are drawn
     * @return {CanvasRenderingContext2D}
     */
    getContext: function getContext() {
      return this.contextContainer;
    },
    /**
     * Clears all contexts (background, main, top) of an instance
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    clear: function clear() {
      this.remove.apply(this, this.getObjects());
      this.backgroundImage = null;
      this.overlayImage = null;
      this.backgroundColor = '';
      this.overlayColor = '';
      if (this._hasITextHandlers) {
        this.off('mouse:up', this._mouseUpITextHandler);
        this._iTextInstances = null;
        this._hasITextHandlers = false;
      }
      this.clearContext(this.contextContainer);
      this.fire('canvas:cleared');
      this.renderOnAddRemove && this.requestRenderAll();
      return this;
    },
    /**
     * Renders the canvas
     * @return {fabric.Canvas} instance
     * @chainable
     */
    renderAll: function renderAll() {
      var canvasToDrawOn = this.contextContainer;
      this.renderCanvas(canvasToDrawOn, this._objects);
      return this;
    },
    /**
     * Function created to be instance bound at initialization
     * used in requestAnimationFrame rendering
     * Let the fabricJS call it. If you call it manually you could have more
     * animationFrame stacking on to of each other
     * for an imperative rendering, use canvas.renderAll
     * @private
     * @return {fabric.Canvas} instance
     * @chainable
     */
    renderAndReset: function renderAndReset() {
      this.isRendering = 0;
      this.renderAll();
    },
    /**
     * Append a renderAll request to next animation frame.
     * unless one is already in progress, in that case nothing is done
     * a boolean flag will avoid appending more.
     * @return {fabric.Canvas} instance
     * @chainable
     */
    requestRenderAll: function requestRenderAll() {
      if (!this.isRendering) {
        this.isRendering = fabric.util.requestAnimFrame(this.renderAndResetBound);
      }
      return this;
    },
    /**
     * Calculate the position of the 4 corner of canvas with current viewportTransform.
     * helps to determinate when an object is in the current rendering viewport using
     * object absolute coordinates ( aCoords )
     * @return {Object} points.tl
     * @chainable
     */
    calcViewportBoundaries: function calcViewportBoundaries() {
      var points = {},
        width = this.width,
        height = this.height,
        iVpt = invertTransform(this.viewportTransform);
      points.tl = transformPoint({
        x: 0,
        y: 0
      }, iVpt);
      points.br = transformPoint({
        x: width,
        y: height
      }, iVpt);
      points.tr = new fabric.Point(points.br.x, points.tl.y);
      points.bl = new fabric.Point(points.tl.x, points.br.y);
      this.vptCoords = points;
      return points;
    },
    cancelRequestedRender: function cancelRequestedRender() {
      if (this.isRendering) {
        fabric.util.cancelAnimFrame(this.isRendering);
        this.isRendering = 0;
      }
    },
    /**
     * Renders background, objects, overlay and controls.
     * @param {CanvasRenderingContext2D} ctx
     * @param {Array} objects to render
     * @return {fabric.Canvas} instance
     * @chainable
     */
    renderCanvas: function renderCanvas(ctx, objects) {
      var v = this.viewportTransform,
        path = this.clipPath;
      this.cancelRequestedRender();
      this.calcViewportBoundaries();
      this.clearContext(ctx);
      fabric.util.setImageSmoothing(ctx, this.imageSmoothingEnabled);
      this.fire('before:render', {
        ctx: ctx
      });
      this._renderBackground(ctx);
      ctx.save();
      //apply viewport transform once for all rendering process
      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
      this._renderObjects(ctx, objects);
      ctx.restore();
      if (!this.controlsAboveOverlay && this.interactive) {
        this.drawControls(ctx);
      }
      if (path) {
        path.canvas = this;
        // needed to setup a couple of variables
        path.shouldCache();
        path._transformDone = true;
        path.renderCache({
          forClipping: true
        });
        this.drawClipPathOnCanvas(ctx);
      }
      this._renderOverlay(ctx);
      if (this.controlsAboveOverlay && this.interactive) {
        this.drawControls(ctx);
      }
      this.fire('after:render', {
        ctx: ctx
      });
    },
    /**
     * Paint the cached clipPath on the lowerCanvasEl
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    drawClipPathOnCanvas: function drawClipPathOnCanvas(ctx) {
      var v = this.viewportTransform,
        path = this.clipPath;
      ctx.save();
      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
      // DEBUG: uncomment this line, comment the following
      // ctx.globalAlpha = 0.4;
      ctx.globalCompositeOperation = 'destination-in';
      path.transform(ctx);
      ctx.scale(1 / path.zoomX, 1 / path.zoomY);
      ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);
      ctx.restore();
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Array} objects to render
     */
    _renderObjects: function _renderObjects(ctx, objects) {
      var i, len;
      for (i = 0, len = objects.length; i < len; ++i) {
        objects[i] && objects[i].render(ctx);
      }
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {string} property 'background' or 'overlay'
     */
    _renderBackgroundOrOverlay: function _renderBackgroundOrOverlay(ctx, property) {
      var fill = this[property + 'Color'],
        object = this[property + 'Image'],
        v = this.viewportTransform,
        needsVpt = this[property + 'Vpt'];
      if (!fill && !object) {
        return;
      }
      if (fill) {
        ctx.save();
        ctx.beginPath();
        ctx.moveTo(0, 0);
        ctx.lineTo(this.width, 0);
        ctx.lineTo(this.width, this.height);
        ctx.lineTo(0, this.height);
        ctx.closePath();
        ctx.fillStyle = fill.toLive ? fill.toLive(ctx, this) : fill;
        if (needsVpt) {
          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
        }
        ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);
        var m = fill.gradientTransform || fill.patternTransform;
        m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
        ctx.fill();
        ctx.restore();
      }
      if (object) {
        ctx.save();
        if (needsVpt) {
          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
        }
        object.render(ctx);
        ctx.restore();
      }
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderBackground: function _renderBackground(ctx) {
      this._renderBackgroundOrOverlay(ctx, 'background');
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderOverlay: function _renderOverlay(ctx) {
      this._renderBackgroundOrOverlay(ctx, 'overlay');
    },
    /**
     * Returns coordinates of a center of canvas.
     * Returned value is an object with top and left properties
     * @return {Object} object with "top" and "left" number values
     * @deprecated migrate to `getCenterPoint`
     */
    getCenter: function getCenter() {
      return {
        top: this.height / 2,
        left: this.width / 2
      };
    },
    /**
     * Returns coordinates of a center of canvas.
     * @return {fabric.Point} 
     */
    getCenterPoint: function getCenterPoint() {
      return new fabric.Point(this.width / 2, this.height / 2);
    },
    /**
     * Centers object horizontally in the canvas
     * @param {fabric.Object} object Object to center horizontally
     * @return {fabric.Canvas} thisArg
     */
    centerObjectH: function centerObjectH(object) {
      return this._centerObject(object, new fabric.Point(this.getCenterPoint().x, object.getCenterPoint().y));
    },
    /**
     * Centers object vertically in the canvas
     * @param {fabric.Object} object Object to center vertically
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    centerObjectV: function centerObjectV(object) {
      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, this.getCenterPoint().y));
    },
    /**
     * Centers object vertically and horizontally in the canvas
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    centerObject: function centerObject(object) {
      var center = this.getCenterPoint();
      return this._centerObject(object, center);
    },
    /**
     * Centers object vertically and horizontally in the viewport
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    viewportCenterObject: function viewportCenterObject(object) {
      var vpCenter = this.getVpCenter();
      return this._centerObject(object, vpCenter);
    },
    /**
     * Centers object horizontally in the viewport, object.top is unchanged
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    viewportCenterObjectH: function viewportCenterObjectH(object) {
      var vpCenter = this.getVpCenter();
      this._centerObject(object, new fabric.Point(vpCenter.x, object.getCenterPoint().y));
      return this;
    },
    /**
     * Centers object Vertically in the viewport, object.top is unchanged
     * @param {fabric.Object} object Object to center vertically and horizontally
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    viewportCenterObjectV: function viewportCenterObjectV(object) {
      var vpCenter = this.getVpCenter();
      return this._centerObject(object, new fabric.Point(object.getCenterPoint().x, vpCenter.y));
    },
    /**
     * Calculate the point in canvas that correspond to the center of actual viewport.
     * @return {fabric.Point} vpCenter, viewport center
     * @chainable
     */
    getVpCenter: function getVpCenter() {
      var center = this.getCenterPoint(),
        iVpt = invertTransform(this.viewportTransform);
      return transformPoint(center, iVpt);
    },
    /**
     * @private
     * @param {fabric.Object} object Object to center
     * @param {fabric.Point} center Center point
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    _centerObject: function _centerObject(object, center) {
      object.setPositionByOrigin(center, 'center', 'center');
      object.setCoords();
      this.renderOnAddRemove && this.requestRenderAll();
      return this;
    },
    /**
     * Returns dataless JSON representation of canvas
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {String} json string
     */
    toDatalessJSON: function toDatalessJSON(propertiesToInclude) {
      return this.toDatalessObject(propertiesToInclude);
    },
    /**
     * Returns object representation of canvas
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      return this._toObjectMethod('toObject', propertiesToInclude);
    },
    /**
     * Returns dataless object representation of canvas
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toDatalessObject: function toDatalessObject(propertiesToInclude) {
      return this._toObjectMethod('toDatalessObject', propertiesToInclude);
    },
    /**
     * @private
     */
    _toObjectMethod: function _toObjectMethod(methodName, propertiesToInclude) {
      var clipPath = this.clipPath,
        data = {
          version: fabric.version,
          objects: this._toObjects(methodName, propertiesToInclude)
        };
      if (clipPath && !clipPath.excludeFromExport) {
        data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);
      }
      extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));
      fabric.util.populateWithProperties(this, data, propertiesToInclude);
      return data;
    },
    /**
     * @private
     */
    _toObjects: function _toObjects(methodName, propertiesToInclude) {
      return this._objects.filter(function (object) {
        return !object.excludeFromExport;
      }).map(function (instance) {
        return this._toObject(instance, methodName, propertiesToInclude);
      }, this);
    },
    /**
     * @private
     */
    _toObject: function _toObject(instance, methodName, propertiesToInclude) {
      var originalValue;
      if (!this.includeDefaultValues) {
        originalValue = instance.includeDefaultValues;
        instance.includeDefaultValues = false;
      }
      var object = instance[methodName](propertiesToInclude);
      if (!this.includeDefaultValues) {
        instance.includeDefaultValues = originalValue;
      }
      return object;
    },
    /**
     * @private
     */
    __serializeBgOverlay: function __serializeBgOverlay(methodName, propertiesToInclude) {
      var data = {},
        bgImage = this.backgroundImage,
        overlayImage = this.overlayImage,
        bgColor = this.backgroundColor,
        overlayColor = this.overlayColor;
      if (bgColor && bgColor.toObject) {
        if (!bgColor.excludeFromExport) {
          data.background = bgColor.toObject(propertiesToInclude);
        }
      } else if (bgColor) {
        data.background = bgColor;
      }
      if (overlayColor && overlayColor.toObject) {
        if (!overlayColor.excludeFromExport) {
          data.overlay = overlayColor.toObject(propertiesToInclude);
        }
      } else if (overlayColor) {
        data.overlay = overlayColor;
      }
      if (bgImage && !bgImage.excludeFromExport) {
        data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);
      }
      if (overlayImage && !overlayImage.excludeFromExport) {
        data.overlayImage = this._toObject(overlayImage, methodName, propertiesToInclude);
      }
      return data;
    },
    /* _TO_SVG_START_ */
    /**
     * When true, getSvgTransform() will apply the StaticCanvas.viewportTransform to the SVG transformation. When true,
     * a zoomed canvas will then produce zoomed SVG output.
     * @type Boolean
     * @default
     */
    svgViewportTransformation: true,
    /**
     * Returns SVG representation of canvas
     * @function
     * @param {Object} [options] Options object for SVG output
     * @param {Boolean} [options.suppressPreamble=false] If true xml tag is not included
     * @param {Object} [options.viewBox] SVG viewbox object
     * @param {Number} [options.viewBox.x] x-coordinate of viewbox
     * @param {Number} [options.viewBox.y] y-coordinate of viewbox
     * @param {Number} [options.viewBox.width] Width of viewbox
     * @param {Number} [options.viewBox.height] Height of viewbox
     * @param {String} [options.encoding=UTF-8] Encoding of SVG output
     * @param {String} [options.width] desired width of svg with or without units
     * @param {String} [options.height] desired height of svg with or without units
     * @param {Function} [reviver] Method for further parsing of svg elements, called after each fabric object converted into svg representation.
     * @return {String} SVG string
     * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
     * @see {@link http://jsfiddle.net/fabricjs/jQ3ZZ/|jsFiddle demo}
     * @example <caption>Normal SVG output</caption>
     * var svg = canvas.toSVG();
     * @example <caption>SVG output without preamble (without &lt;?xml ../>)</caption>
     * var svg = canvas.toSVG({suppressPreamble: true});
     * @example <caption>SVG output with viewBox attribute</caption>
     * var svg = canvas.toSVG({
     *   viewBox: {
     *     x: 100,
     *     y: 100,
     *     width: 200,
     *     height: 300
     *   }
     * });
     * @example <caption>SVG output with different encoding (default: UTF-8)</caption>
     * var svg = canvas.toSVG({encoding: 'ISO-8859-1'});
     * @example <caption>Modify SVG output with reviver function</caption>
     * var svg = canvas.toSVG(null, function(svg) {
     *   return svg.replace('stroke-dasharray: ; stroke-linecap: butt; stroke-linejoin: miter; stroke-miterlimit: 10; ', '');
     * });
     */
    toSVG: function toSVG(options, reviver) {
      options || (options = {});
      options.reviver = reviver;
      var markup = [];
      this._setSVGPreamble(markup, options);
      this._setSVGHeader(markup, options);
      if (this.clipPath) {
        markup.push('<g clip-path="url(#' + this.clipPath.clipPathId + ')" >\n');
      }
      this._setSVGBgOverlayColor(markup, 'background');
      this._setSVGBgOverlayImage(markup, 'backgroundImage', reviver);
      this._setSVGObjects(markup, reviver);
      if (this.clipPath) {
        markup.push('</g>\n');
      }
      this._setSVGBgOverlayColor(markup, 'overlay');
      this._setSVGBgOverlayImage(markup, 'overlayImage', reviver);
      markup.push('</svg>');
      return markup.join('');
    },
    /**
     * @private
     */
    _setSVGPreamble: function _setSVGPreamble(markup, options) {
      if (options.suppressPreamble) {
        return;
      }
      markup.push('<?xml version="1.0" encoding="', options.encoding || 'UTF-8', '" standalone="no" ?>\n', '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ', '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n');
    },
    /**
     * @private
     */
    _setSVGHeader: function _setSVGHeader(markup, options) {
      var width = options.width || this.width,
        height = options.height || this.height,
        vpt,
        viewBox = 'viewBox="0 0 ' + this.width + ' ' + this.height + '" ',
        NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
      if (options.viewBox) {
        viewBox = 'viewBox="' + options.viewBox.x + ' ' + options.viewBox.y + ' ' + options.viewBox.width + ' ' + options.viewBox.height + '" ';
      } else {
        if (this.svgViewportTransformation) {
          vpt = this.viewportTransform;
          viewBox = 'viewBox="' + toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + ' ' + toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + ' ' + toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + ' ' + toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '" ';
        }
      }
      markup.push('<svg ', 'xmlns="http://www.w3.org/2000/svg" ', 'xmlns:xlink="http://www.w3.org/1999/xlink" ', 'version="1.1" ', 'width="', width, '" ', 'height="', height, '" ', viewBox, 'xml:space="preserve">\n', '<desc>Created with Fabric.js ', fabric.version, '</desc>\n', '<defs>\n', this.createSVGFontFacesMarkup(), this.createSVGRefElementsMarkup(), this.createSVGClipPathMarkup(options), '</defs>\n');
    },
    createSVGClipPathMarkup: function createSVGClipPathMarkup(options) {
      var clipPath = this.clipPath;
      if (clipPath) {
        clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;
        return '<clipPath id="' + clipPath.clipPathId + '" >\n' + this.clipPath.toClipPathSVG(options.reviver) + '</clipPath>\n';
      }
      return '';
    },
    /**
     * Creates markup containing SVG referenced elements like patterns, gradients etc.
     * @return {String}
     */
    createSVGRefElementsMarkup: function createSVGRefElementsMarkup() {
      var _this = this,
        markup = ['background', 'overlay'].map(function (prop) {
          var fill = _this[prop + 'Color'];
          if (fill && fill.toLive) {
            var shouldTransform = _this[prop + 'Vpt'],
              vpt = _this.viewportTransform,
              object = {
                width: _this.width / (shouldTransform ? vpt[0] : 1),
                height: _this.height / (shouldTransform ? vpt[3] : 1)
              };
            return fill.toSVG(object, {
              additionalTransform: shouldTransform ? fabric.util.matrixToSVG(vpt) : ''
            });
          }
        });
      return markup.join('');
    },
    /**
     * Creates markup containing SVG font faces,
     * font URLs for font faces must be collected by developers
     * and are not extracted from the DOM by fabricjs
     * @param {Array} objects Array of fabric objects
     * @return {String}
     */
    createSVGFontFacesMarkup: function createSVGFontFacesMarkup() {
      var markup = '',
        fontList = {},
        obj,
        fontFamily,
        style,
        row,
        rowIndex,
        _char,
        charIndex,
        i,
        len,
        fontPaths = fabric.fontPaths,
        objects = [];
      this._objects.forEach(function add(object) {
        objects.push(object);
        if (object._objects) {
          object._objects.forEach(add);
        }
      });
      for (i = 0, len = objects.length; i < len; i++) {
        obj = objects[i];
        fontFamily = obj.fontFamily;
        if (obj.type.indexOf('text') === -1 || fontList[fontFamily] || !fontPaths[fontFamily]) {
          continue;
        }
        fontList[fontFamily] = true;
        if (!obj.styles) {
          continue;
        }
        style = obj.styles;
        for (rowIndex in style) {
          row = style[rowIndex];
          for (charIndex in row) {
            _char = row[charIndex];
            fontFamily = _char.fontFamily;
            if (!fontList[fontFamily] && fontPaths[fontFamily]) {
              fontList[fontFamily] = true;
            }
          }
        }
      }
      for (var j in fontList) {
        markup += ['\t\t@font-face {\n', '\t\t\tfont-family: \'', j, '\';\n', '\t\t\tsrc: url(\'', fontPaths[j], '\');\n', '\t\t}\n'].join('');
      }
      if (markup) {
        markup = ['\t<style type="text/css">', '<![CDATA[\n', markup, ']]>', '</style>\n'].join('');
      }
      return markup;
    },
    /**
     * @private
     */
    _setSVGObjects: function _setSVGObjects(markup, reviver) {
      var instance,
        i,
        len,
        objects = this._objects;
      for (i = 0, len = objects.length; i < len; i++) {
        instance = objects[i];
        if (instance.excludeFromExport) {
          continue;
        }
        this._setSVGObject(markup, instance, reviver);
      }
    },
    /**
     * @private
     */
    _setSVGObject: function _setSVGObject(markup, instance, reviver) {
      markup.push(instance.toSVG(reviver));
    },
    /**
     * @private
     */
    _setSVGBgOverlayImage: function _setSVGBgOverlayImage(markup, property, reviver) {
      if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {
        markup.push(this[property].toSVG(reviver));
      }
    },
    /**
     * @private
     */
    _setSVGBgOverlayColor: function _setSVGBgOverlayColor(markup, property) {
      var filler = this[property + 'Color'],
        vpt = this.viewportTransform,
        finalWidth = this.width,
        finalHeight = this.height;
      if (!filler) {
        return;
      }
      if (filler.toLive) {
        var repeat = filler.repeat,
          iVpt = fabric.util.invertTransform(vpt),
          shouldInvert = this[property + 'Vpt'],
          additionalTransform = shouldInvert ? fabric.util.matrixToSVG(iVpt) : '';
        markup.push('<rect transform="' + additionalTransform + ' translate(', finalWidth / 2, ',', finalHeight / 2, ')"', ' x="', filler.offsetX - finalWidth / 2, '" y="', filler.offsetY - finalHeight / 2, '" ', 'width="', repeat === 'repeat-y' || repeat === 'no-repeat' ? filler.source.width : finalWidth, '" height="', repeat === 'repeat-x' || repeat === 'no-repeat' ? filler.source.height : finalHeight, '" fill="url(#SVGID_' + filler.id + ')"', '></rect>\n');
      } else {
        markup.push('<rect x="0" y="0" width="100%" height="100%" ', 'fill="', filler, '"', '></rect>\n');
      }
    },
    /* _TO_SVG_END_ */

    /**
     * Moves an object or the objects of a multiple selection
     * to the bottom of the stack of drawn objects
     * @param {fabric.Object} object Object to send to back
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    sendToBack: function sendToBack(object) {
      if (!object) {
        return this;
      }
      var activeSelection = this._activeObject,
        i,
        obj,
        objs;
      if (object === activeSelection && object.type === 'activeSelection') {
        objs = activeSelection._objects;
        for (i = objs.length; i--;) {
          obj = objs[i];
          removeFromArray(this._objects, obj);
          this._objects.unshift(obj);
        }
      } else {
        removeFromArray(this._objects, object);
        this._objects.unshift(object);
      }
      this.renderOnAddRemove && this.requestRenderAll();
      return this;
    },
    /**
     * Moves an object or the objects of a multiple selection
     * to the top of the stack of drawn objects
     * @param {fabric.Object} object Object to send
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    bringToFront: function bringToFront(object) {
      if (!object) {
        return this;
      }
      var activeSelection = this._activeObject,
        i,
        obj,
        objs;
      if (object === activeSelection && object.type === 'activeSelection') {
        objs = activeSelection._objects;
        for (i = 0; i < objs.length; i++) {
          obj = objs[i];
          removeFromArray(this._objects, obj);
          this._objects.push(obj);
        }
      } else {
        removeFromArray(this._objects, object);
        this._objects.push(object);
      }
      this.renderOnAddRemove && this.requestRenderAll();
      return this;
    },
    /**
     * Moves an object or a selection down in stack of drawn objects
     * An optional parameter, intersecting allows to move the object in behind
     * the first intersecting object. Where intersection is calculated with
     * bounding box. If no intersection is found, there will not be change in the
     * stack.
     * @param {fabric.Object} object Object to send
     * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    sendBackwards: function sendBackwards(object, intersecting) {
      if (!object) {
        return this;
      }
      var activeSelection = this._activeObject,
        i,
        obj,
        idx,
        newIdx,
        objs,
        objsMoved = 0;
      if (object === activeSelection && object.type === 'activeSelection') {
        objs = activeSelection._objects;
        for (i = 0; i < objs.length; i++) {
          obj = objs[i];
          idx = this._objects.indexOf(obj);
          if (idx > 0 + objsMoved) {
            newIdx = idx - 1;
            removeFromArray(this._objects, obj);
            this._objects.splice(newIdx, 0, obj);
          }
          objsMoved++;
        }
      } else {
        idx = this._objects.indexOf(object);
        if (idx !== 0) {
          // if object is not on the bottom of stack
          newIdx = this._findNewLowerIndex(object, idx, intersecting);
          removeFromArray(this._objects, object);
          this._objects.splice(newIdx, 0, object);
        }
      }
      this.renderOnAddRemove && this.requestRenderAll();
      return this;
    },
    /**
     * @private
     */
    _findNewLowerIndex: function _findNewLowerIndex(object, idx, intersecting) {
      var newIdx, i;
      if (intersecting) {
        newIdx = idx;

        // traverse down the stack looking for the nearest intersecting object
        for (i = idx - 1; i >= 0; --i) {
          var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);
          if (isIntersecting) {
            newIdx = i;
            break;
          }
        }
      } else {
        newIdx = idx - 1;
      }
      return newIdx;
    },
    /**
     * Moves an object or a selection up in stack of drawn objects
     * An optional parameter, intersecting allows to move the object in front
     * of the first intersecting object. Where intersection is calculated with
     * bounding box. If no intersection is found, there will not be change in the
     * stack.
     * @param {fabric.Object} object Object to send
     * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    bringForward: function bringForward(object, intersecting) {
      if (!object) {
        return this;
      }
      var activeSelection = this._activeObject,
        i,
        obj,
        idx,
        newIdx,
        objs,
        objsMoved = 0;
      if (object === activeSelection && object.type === 'activeSelection') {
        objs = activeSelection._objects;
        for (i = objs.length; i--;) {
          obj = objs[i];
          idx = this._objects.indexOf(obj);
          if (idx < this._objects.length - 1 - objsMoved) {
            newIdx = idx + 1;
            removeFromArray(this._objects, obj);
            this._objects.splice(newIdx, 0, obj);
          }
          objsMoved++;
        }
      } else {
        idx = this._objects.indexOf(object);
        if (idx !== this._objects.length - 1) {
          // if object is not on top of stack (last item in an array)
          newIdx = this._findNewUpperIndex(object, idx, intersecting);
          removeFromArray(this._objects, object);
          this._objects.splice(newIdx, 0, object);
        }
      }
      this.renderOnAddRemove && this.requestRenderAll();
      return this;
    },
    /**
     * @private
     */
    _findNewUpperIndex: function _findNewUpperIndex(object, idx, intersecting) {
      var newIdx, i, len;
      if (intersecting) {
        newIdx = idx;

        // traverse up the stack looking for the nearest intersecting object
        for (i = idx + 1, len = this._objects.length; i < len; ++i) {
          var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);
          if (isIntersecting) {
            newIdx = i;
            break;
          }
        }
      } else {
        newIdx = idx + 1;
      }
      return newIdx;
    },
    /**
     * Moves an object to specified level in stack of drawn objects
     * @param {fabric.Object} object Object to send
     * @param {Number} index Position to move to
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    moveTo: function moveTo(object, index) {
      removeFromArray(this._objects, object);
      this._objects.splice(index, 0, object);
      return this.renderOnAddRemove && this.requestRenderAll();
    },
    /**
     * Clears a canvas element and dispose objects
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    dispose: function dispose() {
      // cancel eventually ongoing renders
      if (this.isRendering) {
        fabric.util.cancelAnimFrame(this.isRendering);
        this.isRendering = 0;
      }
      this.forEachObject(function (object) {
        object.dispose && object.dispose();
      });
      this._objects = [];
      if (this.backgroundImage && this.backgroundImage.dispose) {
        this.backgroundImage.dispose();
      }
      this.backgroundImage = null;
      if (this.overlayImage && this.overlayImage.dispose) {
        this.overlayImage.dispose();
      }
      this.overlayImage = null;
      this._iTextInstances = null;
      this.contextContainer = null;
      // restore canvas style
      this.lowerCanvasEl.classList.remove('lower-canvas');
      fabric.util.setStyle(this.lowerCanvasEl, this._originalCanvasStyle);
      delete this._originalCanvasStyle;
      // restore canvas size to original size in case retina scaling was applied
      this.lowerCanvasEl.setAttribute('width', this.width);
      this.lowerCanvasEl.setAttribute('height', this.height);
      fabric.util.cleanUpJsdomNode(this.lowerCanvasEl);
      this.lowerCanvasEl = undefined;
      return this;
    },
    /**
     * Returns a string representation of an instance
     * @return {String} string representation of an instance
     */
    toString: function toString() {
      return '#<fabric.Canvas (' + this.complexity() + '): ' + '{ objects: ' + this._objects.length + ' }>';
    }
  });
  extend(fabric.StaticCanvas.prototype, fabric.Observable);
  extend(fabric.StaticCanvas.prototype, fabric.Collection);
  extend(fabric.StaticCanvas.prototype, fabric.DataURLExporter);
  extend(fabric.StaticCanvas, /** @lends fabric.StaticCanvas */{
    /**
     * @static
     * @type String
     * @default
     */
    EMPTY_JSON: '{"objects": [], "background": "white"}',
    /**
     * Provides a way to check support of some of the canvas methods
     * (either those of HTMLCanvasElement itself, or rendering context)
     *
     * @param {String} methodName Method to check support for;
     *                            Could be one of "setLineDash"
     * @return {Boolean | null} `true` if method is supported (or at least exists),
     *                          `null` if canvas element or context can not be initialized
     */
    supports: function supports(methodName) {
      var el = createCanvasElement();
      if (!el || !el.getContext) {
        return null;
      }
      var ctx = el.getContext('2d');
      if (!ctx) {
        return null;
      }
      switch (methodName) {
        case 'setLineDash':
          return typeof ctx.setLineDash !== 'undefined';
        default:
          return null;
      }
    }
  });

  /**
   * Returns Object representation of canvas
   * this alias is provided because if you call JSON.stringify on an instance,
   * the toJSON object will be invoked if it exists.
   * Having a toJSON method means you can do JSON.stringify(myCanvas)
   * @function
   * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
   * @return {Object} JSON compatible object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#serialization}
   * @see {@link http://jsfiddle.net/fabricjs/pec86/|jsFiddle demo}
   * @example <caption>JSON without additional properties</caption>
   * var json = canvas.toJSON();
   * @example <caption>JSON with additional properties included</caption>
   * var json = canvas.toJSON(['lockMovementX', 'lockMovementY', 'lockRotation', 'lockScalingX', 'lockScalingY']);
   * @example <caption>JSON without default values</caption>
   * canvas.includeDefaultValues = false;
   * var json = canvas.toJSON();
   */
  fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;
  if (fabric.isLikelyNode) {
    fabric.StaticCanvas.prototype.createPNGStream = function () {
      var impl = getNodeCanvas(this.lowerCanvasEl);
      return impl && impl.createPNGStream();
    };
    fabric.StaticCanvas.prototype.createJPEGStream = function (opts) {
      var impl = getNodeCanvas(this.lowerCanvasEl);
      return impl && impl.createJPEGStream(opts);
    };
  }
})();

/**
 * BaseBrush class
 * @class fabric.BaseBrush
 * @see {@link http://fabricjs.com/freedrawing|Freedrawing demo}
 */
fabric.BaseBrush = fabric.util.createClass( /** @lends fabric.BaseBrush.prototype */{
  /**
   * Color of a brush
   * @type String
   * @default
   */
  color: 'rgb(0, 0, 0)',
  /**
   * Width of a brush, has to be a Number, no string literals
   * @type Number
   * @default
   */
  width: 1,
  /**
   * Shadow object representing shadow of this shape.
   * <b>Backwards incompatibility note:</b> This property replaces "shadowColor" (String), "shadowOffsetX" (Number),
   * "shadowOffsetY" (Number) and "shadowBlur" (Number) since v1.2.12
   * @type fabric.Shadow
   * @default
   */
  shadow: null,
  /**
   * Line endings style of a brush (one of "butt", "round", "square")
   * @type String
   * @default
   */
  strokeLineCap: 'round',
  /**
   * Corner style of a brush (one of "bevel", "round", "miter")
   * @type String
   * @default
   */
  strokeLineJoin: 'round',
  /**
   * Maximum miter length (used for strokeLineJoin = "miter") of a brush's
   * @type Number
   * @default
   */
  strokeMiterLimit: 10,
  /**
   * Stroke Dash Array.
   * @type Array
   * @default
   */
  strokeDashArray: null,
  /**
   * When `true`, the free drawing is limited to the whiteboard size. Default to false.
   * @type Boolean
   * @default false
  */

  limitedToCanvasSize: false,
  /**
   * Sets brush styles
   * @private
   * @param {CanvasRenderingContext2D} ctx
   */
  _setBrushStyles: function _setBrushStyles(ctx) {
    ctx.strokeStyle = this.color;
    ctx.lineWidth = this.width;
    ctx.lineCap = this.strokeLineCap;
    ctx.miterLimit = this.strokeMiterLimit;
    ctx.lineJoin = this.strokeLineJoin;
    ctx.setLineDash(this.strokeDashArray || []);
  },
  /**
   * Sets the transformation on given context
   * @param {RenderingContext2d} ctx context to render on
   * @private
   */
  _saveAndTransform: function _saveAndTransform(ctx) {
    var v = this.canvas.viewportTransform;
    ctx.save();
    ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
  },
  /**
   * Sets brush shadow styles
   * @private
   */
  _setShadow: function _setShadow() {
    if (!this.shadow) {
      return;
    }
    var canvas = this.canvas,
      shadow = this.shadow,
      ctx = canvas.contextTop,
      zoom = canvas.getZoom();
    if (canvas && canvas._isRetinaScaling()) {
      zoom *= fabric.devicePixelRatio;
    }
    ctx.shadowColor = shadow.color;
    ctx.shadowBlur = shadow.blur * zoom;
    ctx.shadowOffsetX = shadow.offsetX * zoom;
    ctx.shadowOffsetY = shadow.offsetY * zoom;
  },
  needsFullRender: function needsFullRender() {
    var color = new fabric.Color(this.color);
    return color.getAlpha() < 1 || !!this.shadow;
  },
  /**
   * Removes brush shadow styles
   * @private
   */
  _resetShadow: function _resetShadow() {
    var ctx = this.canvas.contextTop;
    ctx.shadowColor = '';
    ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
  },
  /**
   * Check is pointer is outside canvas boundaries
   * @param {Object} pointer
   * @private
  */
  _isOutSideCanvas: function _isOutSideCanvas(pointer) {
    return pointer.x < 0 || pointer.x > this.canvas.getWidth() || pointer.y < 0 || pointer.y > this.canvas.getHeight();
  }
});
(function () {
  /**
   * PencilBrush class
   * @class fabric.PencilBrush
   * @extends fabric.BaseBrush
   */
  fabric.PencilBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.PencilBrush.prototype */{
    /**
     * Discard points that are less than `decimate` pixel distant from each other
     * @type Number
     * @default 0.4
     */
    decimate: 0.4,
    /**
     * Draws a straight line between last recorded point to current pointer
     * Used for `shift` functionality
     *
     * @type boolean
     * @default false
     */
    drawStraightLine: false,
    /**
     * The event modifier key that makes the brush draw a straight line.
     * If `null` or 'none' or any other string that is not a modifier key the feature is disabled.
     * @type {'altKey' | 'shiftKey' | 'ctrlKey' | 'none' | undefined | null}
     */
    straightLineKey: 'shiftKey',
    /**
     * Constructor
     * @param {fabric.Canvas} canvas
     * @return {fabric.PencilBrush} Instance of a pencil brush
     */
    initialize: function initialize(canvas) {
      this.canvas = canvas;
      this._points = [];
    },
    needsFullRender: function needsFullRender() {
      return this.callSuper('needsFullRender') || this._hasStraightLine;
    },
    /**
     * Invoked inside on mouse down and mouse move
     * @param {Object} pointer
     */
    _drawSegment: function _drawSegment(ctx, p1, p2) {
      var midPoint = p1.midPointFrom(p2);
      ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);
      return midPoint;
    },
    /**
     * Invoked on mouse down
     * @param {Object} pointer
     */
    onMouseDown: function onMouseDown(pointer, options) {
      if (!this.canvas._isMainEvent(options.e)) {
        return;
      }
      this.drawStraightLine = options.e[this.straightLineKey];
      this._prepareForDrawing(pointer);
      // capture coordinates immediately
      // this allows to draw dots (when movement never occurs)
      this._captureDrawingPath(pointer);
      this._render();
    },
    /**
     * Invoked on mouse move
     * @param {Object} pointer
     */
    onMouseMove: function onMouseMove(pointer, options) {
      if (!this.canvas._isMainEvent(options.e)) {
        return;
      }
      this.drawStraightLine = options.e[this.straightLineKey];
      if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {
        return;
      }
      if (this._captureDrawingPath(pointer) && this._points.length > 1) {
        if (this.needsFullRender()) {
          // redraw curve
          // clear top canvas
          this.canvas.clearContext(this.canvas.contextTop);
          this._render();
        } else {
          var points = this._points,
            length = points.length,
            ctx = this.canvas.contextTop;
          // draw the curve update
          this._saveAndTransform(ctx);
          if (this.oldEnd) {
            ctx.beginPath();
            ctx.moveTo(this.oldEnd.x, this.oldEnd.y);
          }
          this.oldEnd = this._drawSegment(ctx, points[length - 2], points[length - 1], true);
          ctx.stroke();
          ctx.restore();
        }
      }
    },
    /**
     * Invoked on mouse up
     */
    onMouseUp: function onMouseUp(options) {
      if (!this.canvas._isMainEvent(options.e)) {
        return true;
      }
      this.drawStraightLine = false;
      this.oldEnd = undefined;
      this._finalizeAndAddPath();
      return false;
    },
    /**
     * @private
     * @param {Object} pointer Actual mouse position related to the canvas.
     */
    _prepareForDrawing: function _prepareForDrawing(pointer) {
      var p = new fabric.Point(pointer.x, pointer.y);
      this._reset();
      this._addPoint(p);
      this.canvas.contextTop.moveTo(p.x, p.y);
    },
    /**
     * @private
     * @param {fabric.Point} point Point to be added to points array
     */
    _addPoint: function _addPoint(point) {
      if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {
        return false;
      }
      if (this.drawStraightLine && this._points.length > 1) {
        this._hasStraightLine = true;
        this._points.pop();
      }
      this._points.push(point);
      return true;
    },
    /**
     * Clear points array and set contextTop canvas style.
     * @private
     */
    _reset: function _reset() {
      this._points = [];
      this._setBrushStyles(this.canvas.contextTop);
      this._setShadow();
      this._hasStraightLine = false;
    },
    /**
     * @private
     * @param {Object} pointer Actual mouse position related to the canvas.
     */
    _captureDrawingPath: function _captureDrawingPath(pointer) {
      var pointerPoint = new fabric.Point(pointer.x, pointer.y);
      return this._addPoint(pointerPoint);
    },
    /**
     * Draw a smooth path on the topCanvas using quadraticCurveTo
     * @private
     * @param {CanvasRenderingContext2D} [ctx]
     */
    _render: function _render(ctx) {
      var i,
        len,
        p1 = this._points[0],
        p2 = this._points[1];
      ctx = ctx || this.canvas.contextTop;
      this._saveAndTransform(ctx);
      ctx.beginPath();
      //if we only have 2 points in the path and they are the same
      //it means that the user only clicked the canvas without moving the mouse
      //then we should be drawing a dot. A path isn't drawn between two identical dots
      //that's why we set them apart a bit
      if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {
        var width = this.width / 1000;
        p1 = new fabric.Point(p1.x, p1.y);
        p2 = new fabric.Point(p2.x, p2.y);
        p1.x -= width;
        p2.x += width;
      }
      ctx.moveTo(p1.x, p1.y);
      for (i = 1, len = this._points.length; i < len; i++) {
        // we pick the point between pi + 1 & pi + 2 as the
        // end point and p1 as our control point.
        this._drawSegment(ctx, p1, p2);
        p1 = this._points[i];
        p2 = this._points[i + 1];
      }
      // Draw last line as a straight line while
      // we wait for the next point to be able to calculate
      // the bezier control point
      ctx.lineTo(p1.x, p1.y);
      ctx.stroke();
      ctx.restore();
    },
    /**
     * Converts points to SVG path
     * @param {Array} points Array of points
     * @return {(string|number)[][]} SVG path commands
     */
    convertPointsToSVGPath: function convertPointsToSVGPath(points) {
      var correction = this.width / 1000;
      return fabric.util.getSmoothPathFromPoints(points, correction);
    },
    /**
     * @private
     * @param {(string|number)[][]} pathData SVG path commands
     * @returns {boolean}
     */
    _isEmptySVGPath: function _isEmptySVGPath(pathData) {
      var pathString = fabric.util.joinPath(pathData);
      return pathString === 'M 0 0 Q 0 0 0 0 L 0 0';
    },
    /**
     * Creates fabric.Path object to add on canvas
     * @param {(string|number)[][]} pathData Path data
     * @return {fabric.Path} Path to add on canvas
     */
    createPath: function createPath(pathData) {
      var path = new fabric.Path(pathData, {
        fill: null,
        stroke: this.color,
        strokeWidth: this.width,
        strokeLineCap: this.strokeLineCap,
        strokeMiterLimit: this.strokeMiterLimit,
        strokeLineJoin: this.strokeLineJoin,
        strokeDashArray: this.strokeDashArray
      });
      if (this.shadow) {
        this.shadow.affectStroke = true;
        path.shadow = new fabric.Shadow(this.shadow);
      }
      return path;
    },
    /**
     * Decimate points array with the decimate value
     */
    decimatePoints: function decimatePoints(points, distance) {
      if (points.length <= 2) {
        return points;
      }
      var zoom = this.canvas.getZoom(),
        adjustedDistance = Math.pow(distance / zoom, 2),
        i,
        l = points.length - 1,
        lastPoint = points[0],
        newPoints = [lastPoint],
        cDistance;
      for (i = 1; i < l - 1; i++) {
        cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);
        if (cDistance >= adjustedDistance) {
          lastPoint = points[i];
          newPoints.push(lastPoint);
        }
      }
      /**
       * Add the last point from the original line to the end of the array.
       * This ensures decimate doesn't delete the last point on the line, and ensures the line is > 1 point.
       */
      newPoints.push(points[l]);
      return newPoints;
    },
    /**
     * On mouseup after drawing the path on contextTop canvas
     * we use the points captured to create an new fabric path object
     * and add it to the fabric canvas.
     */
    _finalizeAndAddPath: function _finalizeAndAddPath() {
      var ctx = this.canvas.contextTop;
      ctx.closePath();
      if (this.decimate) {
        this._points = this.decimatePoints(this._points, this.decimate);
      }
      var pathData = this.convertPointsToSVGPath(this._points);
      if (this._isEmptySVGPath(pathData)) {
        // do not create 0 width/height paths, as they are
        // rendered inconsistently across browsers
        // Firefox 4, for example, renders a dot,
        // whereas Chrome 10 renders nothing
        this.canvas.requestRenderAll();
        return;
      }
      var path = this.createPath(pathData);
      this.canvas.clearContext(this.canvas.contextTop);
      this.canvas.fire('before:path:created', {
        path: path
      });
      this.canvas.add(path);
      this.canvas.requestRenderAll();
      path.setCoords();
      this._resetShadow();

      // fire event 'path' created
      this.canvas.fire('path:created', {
        path: path
      });
    }
  });
})();

/**
 * CircleBrush class
 * @class fabric.CircleBrush
 */
fabric.CircleBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.CircleBrush.prototype */{
  /**
   * Width of a brush
   * @type Number
   * @default
   */
  width: 10,
  /**
   * Constructor
   * @param {fabric.Canvas} canvas
   * @return {fabric.CircleBrush} Instance of a circle brush
   */
  initialize: function initialize(canvas) {
    this.canvas = canvas;
    this.points = [];
  },
  /**
   * Invoked inside on mouse down and mouse move
   * @param {Object} pointer
   */
  drawDot: function drawDot(pointer) {
    var point = this.addPoint(pointer),
      ctx = this.canvas.contextTop;
    this._saveAndTransform(ctx);
    this.dot(ctx, point);
    ctx.restore();
  },
  dot: function dot(ctx, point) {
    ctx.fillStyle = point.fill;
    ctx.beginPath();
    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);
    ctx.closePath();
    ctx.fill();
  },
  /**
   * Invoked on mouse down
   */
  onMouseDown: function onMouseDown(pointer) {
    this.points.length = 0;
    this.canvas.clearContext(this.canvas.contextTop);
    this._setShadow();
    this.drawDot(pointer);
  },
  /**
   * Render the full state of the brush
   * @private
   */
  _render: function _render() {
    var ctx = this.canvas.contextTop,
      i,
      len,
      points = this.points;
    this._saveAndTransform(ctx);
    for (i = 0, len = points.length; i < len; i++) {
      this.dot(ctx, points[i]);
    }
    ctx.restore();
  },
  /**
   * Invoked on mouse move
   * @param {Object} pointer
   */
  onMouseMove: function onMouseMove(pointer) {
    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {
      return;
    }
    if (this.needsFullRender()) {
      this.canvas.clearContext(this.canvas.contextTop);
      this.addPoint(pointer);
      this._render();
    } else {
      this.drawDot(pointer);
    }
  },
  /**
   * Invoked on mouse up
   */
  onMouseUp: function onMouseUp() {
    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove,
      i,
      len;
    this.canvas.renderOnAddRemove = false;
    var circles = [];
    for (i = 0, len = this.points.length; i < len; i++) {
      var point = this.points[i],
        circle = new fabric.Circle({
          radius: point.radius,
          left: point.x,
          top: point.y,
          originX: 'center',
          originY: 'center',
          fill: point.fill
        });
      this.shadow && (circle.shadow = new fabric.Shadow(this.shadow));
      circles.push(circle);
    }
    var group = new fabric.Group(circles);
    group.canvas = this.canvas;
    this.canvas.fire('before:path:created', {
      path: group
    });
    this.canvas.add(group);
    this.canvas.fire('path:created', {
      path: group
    });
    this.canvas.clearContext(this.canvas.contextTop);
    this._resetShadow();
    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
    this.canvas.requestRenderAll();
  },
  /**
   * @param {Object} pointer
   * @return {fabric.Point} Just added pointer point
   */
  addPoint: function addPoint(pointer) {
    var pointerPoint = new fabric.Point(pointer.x, pointer.y),
      circleRadius = fabric.util.getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2,
      circleColor = new fabric.Color(this.color).setAlpha(fabric.util.getRandomInt(0, 100) / 100).toRgba();
    pointerPoint.radius = circleRadius;
    pointerPoint.fill = circleColor;
    this.points.push(pointerPoint);
    return pointerPoint;
  }
});

/**
 * SprayBrush class
 * @class fabric.SprayBrush
 */
fabric.SprayBrush = fabric.util.createClass(fabric.BaseBrush, /** @lends fabric.SprayBrush.prototype */{
  /**
   * Width of a spray
   * @type Number
   * @default
   */
  width: 10,
  /**
   * Density of a spray (number of dots per chunk)
   * @type Number
   * @default
   */
  density: 20,
  /**
   * Width of spray dots
   * @type Number
   * @default
   */
  dotWidth: 1,
  /**
   * Width variance of spray dots
   * @type Number
   * @default
   */
  dotWidthVariance: 1,
  /**
   * Whether opacity of a dot should be random
   * @type Boolean
   * @default
   */
  randomOpacity: false,
  /**
   * Whether overlapping dots (rectangles) should be removed (for performance reasons)
   * @type Boolean
   * @default
   */
  optimizeOverlapping: true,
  /**
   * Constructor
   * @param {fabric.Canvas} canvas
   * @return {fabric.SprayBrush} Instance of a spray brush
   */
  initialize: function initialize(canvas) {
    this.canvas = canvas;
    this.sprayChunks = [];
  },
  /**
   * Invoked on mouse down
   * @param {Object} pointer
   */
  onMouseDown: function onMouseDown(pointer) {
    this.sprayChunks.length = 0;
    this.canvas.clearContext(this.canvas.contextTop);
    this._setShadow();
    this.addSprayChunk(pointer);
    this.render(this.sprayChunkPoints);
  },
  /**
   * Invoked on mouse move
   * @param {Object} pointer
   */
  onMouseMove: function onMouseMove(pointer) {
    if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {
      return;
    }
    this.addSprayChunk(pointer);
    this.render(this.sprayChunkPoints);
  },
  /**
   * Invoked on mouse up
   */
  onMouseUp: function onMouseUp() {
    var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;
    this.canvas.renderOnAddRemove = false;
    var rects = [];
    for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {
      var sprayChunk = this.sprayChunks[i];
      for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {
        var rect = new fabric.Rect({
          width: sprayChunk[j].width,
          height: sprayChunk[j].width,
          left: sprayChunk[j].x + 1,
          top: sprayChunk[j].y + 1,
          originX: 'center',
          originY: 'center',
          fill: this.color
        });
        rects.push(rect);
      }
    }
    if (this.optimizeOverlapping) {
      rects = this._getOptimizedRects(rects);
    }
    var group = new fabric.Group(rects);
    this.shadow && group.set('shadow', new fabric.Shadow(this.shadow));
    this.canvas.fire('before:path:created', {
      path: group
    });
    this.canvas.add(group);
    this.canvas.fire('path:created', {
      path: group
    });
    this.canvas.clearContext(this.canvas.contextTop);
    this._resetShadow();
    this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
    this.canvas.requestRenderAll();
  },
  /**
   * @private
   * @param {Array} rects
   */
  _getOptimizedRects: function _getOptimizedRects(rects) {
    // avoid creating duplicate rects at the same coordinates
    var uniqueRects = {},
      key,
      i,
      len;
    for (i = 0, len = rects.length; i < len; i++) {
      key = rects[i].left + '' + rects[i].top;
      if (!uniqueRects[key]) {
        uniqueRects[key] = rects[i];
      }
    }
    var uniqueRectsArray = [];
    for (key in uniqueRects) {
      uniqueRectsArray.push(uniqueRects[key]);
    }
    return uniqueRectsArray;
  },
  /**
   * Render new chunk of spray brush
   */
  render: function render(sprayChunk) {
    var ctx = this.canvas.contextTop,
      i,
      len;
    ctx.fillStyle = this.color;
    this._saveAndTransform(ctx);
    for (i = 0, len = sprayChunk.length; i < len; i++) {
      var point = sprayChunk[i];
      if (typeof point.opacity !== 'undefined') {
        ctx.globalAlpha = point.opacity;
      }
      ctx.fillRect(point.x, point.y, point.width, point.width);
    }
    ctx.restore();
  },
  /**
   * Render all spray chunks
   */
  _render: function _render() {
    var ctx = this.canvas.contextTop,
      i,
      ilen;
    ctx.fillStyle = this.color;
    this._saveAndTransform(ctx);
    for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {
      this.render(this.sprayChunks[i]);
    }
    ctx.restore();
  },
  /**
   * @param {Object} pointer
   */
  addSprayChunk: function addSprayChunk(pointer) {
    this.sprayChunkPoints = [];
    var x,
      y,
      width,
      radius = this.width / 2,
      i;
    for (i = 0; i < this.density; i++) {
      x = fabric.util.getRandomInt(pointer.x - radius, pointer.x + radius);
      y = fabric.util.getRandomInt(pointer.y - radius, pointer.y + radius);
      if (this.dotWidthVariance) {
        width = fabric.util.getRandomInt(
        // bottom clamp width to 1
        Math.max(1, this.dotWidth - this.dotWidthVariance), this.dotWidth + this.dotWidthVariance);
      } else {
        width = this.dotWidth;
      }
      var point = new fabric.Point(x, y);
      point.width = width;
      if (this.randomOpacity) {
        point.opacity = fabric.util.getRandomInt(0, 100) / 100;
      }
      this.sprayChunkPoints.push(point);
    }
    this.sprayChunks.push(this.sprayChunkPoints);
  }
});

/**
 * PatternBrush class
 * @class fabric.PatternBrush
 * @extends fabric.BaseBrush
 */
fabric.PatternBrush = fabric.util.createClass(fabric.PencilBrush, /** @lends fabric.PatternBrush.prototype */{
  getPatternSrc: function getPatternSrc() {
    var dotWidth = 20,
      dotDistance = 5,
      patternCanvas = fabric.util.createCanvasElement(),
      patternCtx = patternCanvas.getContext('2d');
    patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;
    patternCtx.fillStyle = this.color;
    patternCtx.beginPath();
    patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);
    patternCtx.closePath();
    patternCtx.fill();
    return patternCanvas;
  },
  getPatternSrcFunction: function getPatternSrcFunction() {
    return String(this.getPatternSrc).replace('this.color', '"' + this.color + '"');
  },
  /**
   * Creates "pattern" instance property
   * @param {CanvasRenderingContext2D} ctx
   */
  getPattern: function getPattern(ctx) {
    return ctx.createPattern(this.source || this.getPatternSrc(), 'repeat');
  },
  /**
   * Sets brush styles
   * @param {CanvasRenderingContext2D} ctx
   */
  _setBrushStyles: function _setBrushStyles(ctx) {
    this.callSuper('_setBrushStyles', ctx);
    ctx.strokeStyle = this.getPattern(ctx);
  },
  /**
   * Creates path
   */
  createPath: function createPath(pathData) {
    var path = this.callSuper('createPath', pathData),
      topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);
    path.stroke = new fabric.Pattern({
      source: this.source || this.getPatternSrcFunction(),
      offsetX: -topLeft.x,
      offsetY: -topLeft.y
    });
    return path;
  }
});
(function () {
  var _getPointer = fabric.util.getPointer,
    degreesToRadians = fabric.util.degreesToRadians,
    isTouchEvent = fabric.util.isTouchEvent;

  /**
   * Canvas class
   * @class fabric.Canvas
   * @extends fabric.StaticCanvas
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#canvas}
   * @see {@link fabric.Canvas#initialize} for constructor definition
   *
   * @fires object:modified at the end of a transform or any change when statefull is true
   * @fires object:rotating while an object is being rotated from the control
   * @fires object:scaling while an object is being scaled by controls
   * @fires object:moving while an object is being dragged
   * @fires object:skewing while an object is being skewed from the controls
   *
   * @fires before:transform before a transform is is started
   * @fires before:selection:cleared
   * @fires selection:cleared
   * @fires selection:updated
   * @fires selection:created
   *
   * @fires path:created after a drawing operation ends and the path is added
   * @fires mouse:down
   * @fires mouse:move
   * @fires mouse:up
   * @fires mouse:down:before  on mouse down, before the inner fabric logic runs
   * @fires mouse:move:before on mouse move, before the inner fabric logic runs
   * @fires mouse:up:before on mouse up, before the inner fabric logic runs
   * @fires mouse:over
   * @fires mouse:out
   * @fires mouse:dblclick whenever a native dbl click event fires on the canvas.
   *
   * @fires dragover
   * @fires dragenter
   * @fires dragleave
   * @fires drop:before before drop event. same native event. This is added to handle edge cases
   * @fires drop
   * @fires after:render at the end of the render process, receives the context in the callback
   * @fires before:render at start the render process, receives the context in the callback
   *
   */
  fabric.Canvas = fabric.util.createClass(fabric.StaticCanvas, /** @lends fabric.Canvas.prototype */{
    /**
     * Constructor
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */
    initialize: function initialize(el, options) {
      options || (options = {});
      this.renderAndResetBound = this.renderAndReset.bind(this);
      this.requestRenderAllBound = this.requestRenderAll.bind(this);
      this._initStatic(el, options);
      this._initInteractive();
      this._createCacheCanvas();
    },
    /**
     * When true, objects can be transformed by one side (unproportionally)
     * when dragged on the corners that normally would not do that.
     * @type Boolean
     * @default
     * @since fabric 4.0 // changed name and default value
     */
    uniformScaling: true,
    /**
     * Indicates which key switches uniform scaling.
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled.
     * totally wrong named. this sounds like `uniform scaling`
     * if Canvas.uniformScaling is true, pressing this will set it to false
     * and viceversa.
     * @since 1.6.2
     * @type String
     * @default
     */
    uniScaleKey: 'shiftKey',
    /**
     * When true, objects use center point as the origin of scale transformation.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */
    centeredScaling: false,
    /**
     * When true, objects use center point as the origin of rotate transformation.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */
    centeredRotation: false,
    /**
     * Indicates which key enable centered Transform
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.2
     * @type String
     * @default
     */
    centeredKey: 'altKey',
    /**
     * Indicates which key enable alternate action on corner
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled feature disabled.
     * @since 1.6.2
     * @type String
     * @default
     */
    altActionKey: 'shiftKey',
    /**
     * Indicates that canvas is interactive. This property should not be changed.
     * @type Boolean
     * @default
     */
    interactive: true,
    /**
     * Indicates whether group selection should be enabled
     * @type Boolean
     * @default
     */
    selection: true,
    /**
     * Indicates which key or keys enable multiple click selection
     * Pass value as a string or array of strings
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * If `null` or empty or containing any other string that is not a modifier key
     * feature is disabled.
     * @since 1.6.2
     * @type String|Array
     * @default
     */
    selectionKey: 'shiftKey',
    /**
     * Indicates which key enable alternative selection
     * in case of target overlapping with active object
     * values: 'altKey', 'shiftKey', 'ctrlKey'.
     * For a series of reason that come from the general expectations on how
     * things should work, this feature works only for preserveObjectStacking true.
     * If `null` or 'none' or any other string that is not a modifier key
     * feature is disabled.
     * @since 1.6.5
     * @type null|String
     * @default
     */
    altSelectionKey: null,
    /**
     * Color of selection
     * @type String
     * @default
     */
    selectionColor: 'rgba(100, 100, 255, 0.3)',
    // blue

    /**
     * Default dash array pattern
     * If not empty the selection border is dashed
     * @type Array
     */
    selectionDashArray: [],
    /**
     * Color of the border of selection (usually slightly darker than color of selection itself)
     * @type String
     * @default
     */
    selectionBorderColor: 'rgba(255, 255, 255, 0.3)',
    /**
     * Width of a line used in object/group selection
     * @type Number
     * @default
     */
    selectionLineWidth: 1,
    /**
     * Select only shapes that are fully contained in the dragged selection rectangle.
     * @type Boolean
     * @default
     */
    selectionFullyContained: false,
    /**
     * Default cursor value used when hovering over an object on canvas
     * @type String
     * @default
     */
    hoverCursor: 'move',
    /**
     * Default cursor value used when moving an object on canvas
     * @type String
     * @default
     */
    moveCursor: 'move',
    /**
     * Default cursor value used for the entire canvas
     * @type String
     * @default
     */
    defaultCursor: 'default',
    /**
     * Cursor value used during free drawing
     * @type String
     * @default
     */
    freeDrawingCursor: 'crosshair',
    /**
     * Cursor value used for disabled elements ( corners with disabled action )
     * @type String
     * @since 2.0.0
     * @default
     */
    notAllowedCursor: 'not-allowed',
    /**
     * Default element class that's given to wrapper (div) element of canvas
     * @type String
     * @default
     */
    containerClass: 'canvas-container',
    /**
     * When true, object detection happens on per-pixel basis rather than on per-bounding-box
     * @type Boolean
     * @default
     */
    perPixelTargetFind: false,
    /**
     * Number of pixels around target pixel to tolerate (consider active) during object detection
     * @type Number
     * @default
     */
    targetFindTolerance: 0,
    /**
     * When true, target detection is skipped. Target detection will return always undefined.
     * click selection won't work anymore, events will fire with no targets.
     * if something is selected before setting it to true, it will be deselected at the first click.
     * area selection will still work. check the `selection` property too.
     * if you deactivate both, you should look into staticCanvas.
     * @type Boolean
     * @default
     */
    skipTargetFind: false,
    /**
     * When true, mouse events on canvas (mousedown/mousemove/mouseup) result in free drawing.
     * After mousedown, mousemove creates a shape,
     * and then mouseup finalizes it and adds an instance of `fabric.Path` onto canvas.
     * @tutorial {@link http://fabricjs.com/fabric-intro-part-4#free_drawing}
     * @type Boolean
     * @default
     */
    isDrawingMode: false,
    /**
     * Indicates whether objects should remain in current stack position when selected.
     * When false objects are brought to top and rendered as part of the selection group
     * @type Boolean
     * @default
     */
    preserveObjectStacking: false,
    /**
     * Indicates the angle that an object will lock to while rotating.
     * @type Number
     * @since 1.6.7
     * @default
     */
    snapAngle: 0,
    /**
     * Indicates the distance from the snapAngle the rotation will lock to the snapAngle.
     * When `null`, the snapThreshold will default to the snapAngle.
     * @type null|Number
     * @since 1.6.7
     * @default
     */
    snapThreshold: null,
    /**
     * Indicates if the right click on canvas can output the context menu or not
     * @type Boolean
     * @since 1.6.5
     * @default
     */
    stopContextMenu: false,
    /**
     * Indicates if the canvas can fire right click events
     * @type Boolean
     * @since 1.6.5
     * @default
     */
    fireRightClick: false,
    /**
     * Indicates if the canvas can fire middle click events
     * @type Boolean
     * @since 1.7.8
     * @default
     */
    fireMiddleClick: false,
    /**
     * Keep track of the subTargets for Mouse Events
     * @type fabric.Object[]
     */
    targets: [],
    /**
     * When the option is enabled, PointerEvent is used instead of MouseEvent.
     * @type Boolean
     * @default
     */
    enablePointerEvents: false,
    /**
     * Keep track of the hovered target
     * @type fabric.Object
     * @private
     */
    _hoveredTarget: null,
    /**
     * hold the list of nested targets hovered
     * @type fabric.Object[]
     * @private
     */
    _hoveredTargets: [],
    /**
     * @private
     */
    _initInteractive: function _initInteractive() {
      this._currentTransform = null;
      this._groupSelector = null;
      this._initWrapperElement();
      this._createUpperCanvas();
      this._initEventListeners();
      this._initRetinaScaling();
      this.freeDrawingBrush = fabric.PencilBrush && new fabric.PencilBrush(this);
      this.calcOffset();
    },
    /**
     * Divides objects in two groups, one to render immediately
     * and one to render as activeGroup.
     * @return {Array} objects to render immediately and pushes the other in the activeGroup.
     */
    _chooseObjectsToRender: function _chooseObjectsToRender() {
      var activeObjects = this.getActiveObjects(),
        object,
        objsToRender,
        activeGroupObjects;
      if (activeObjects.length > 0 && !this.preserveObjectStacking) {
        objsToRender = [];
        activeGroupObjects = [];
        for (var i = 0, length = this._objects.length; i < length; i++) {
          object = this._objects[i];
          if (activeObjects.indexOf(object) === -1) {
            objsToRender.push(object);
          } else {
            activeGroupObjects.push(object);
          }
        }
        if (activeObjects.length > 1) {
          this._activeObject._objects = activeGroupObjects;
        }
        objsToRender.push.apply(objsToRender, activeGroupObjects);
      } else {
        objsToRender = this._objects;
      }
      return objsToRender;
    },
    /**
     * Renders both the top canvas and the secondary container canvas.
     * @return {fabric.Canvas} instance
     * @chainable
     */
    renderAll: function renderAll() {
      if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {
        this.clearContext(this.contextTop);
        this.contextTopDirty = false;
      }
      if (this.hasLostContext) {
        this.renderTopLayer(this.contextTop);
        this.hasLostContext = false;
      }
      var canvasToDrawOn = this.contextContainer;
      this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());
      return this;
    },
    renderTopLayer: function renderTopLayer(ctx) {
      ctx.save();
      if (this.isDrawingMode && this._isCurrentlyDrawing) {
        this.freeDrawingBrush && this.freeDrawingBrush._render();
        this.contextTopDirty = true;
      }
      // we render the top context - last object
      if (this.selection && this._groupSelector) {
        this._drawSelection(ctx);
        this.contextTopDirty = true;
      }
      ctx.restore();
    },
    /**
     * Method to render only the top canvas.
     * Also used to render the group selection box.
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    renderTop: function renderTop() {
      var ctx = this.contextTop;
      this.clearContext(ctx);
      this.renderTopLayer(ctx);
      this.fire('after:render');
      return this;
    },
    /**
     * @private
     */
    _normalizePointer: function _normalizePointer(object, pointer) {
      var m = object.calcTransformMatrix(),
        invertedM = fabric.util.invertTransform(m),
        vptPointer = this.restorePointerVpt(pointer);
      return fabric.util.transformPoint(vptPointer, invertedM);
    },
    /**
     * Returns true if object is transparent at a certain location
     * @param {fabric.Object} target Object to check
     * @param {Number} x Left coordinate
     * @param {Number} y Top coordinate
     * @return {Boolean}
     */
    isTargetTransparent: function isTargetTransparent(target, x, y) {
      // in case the target is the activeObject, we cannot execute this optimization
      // because we need to draw controls too.
      if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {
        var normalizedPointer = this._normalizePointer(target, {
            x: x,
            y: y
          }),
          targetRelativeX = Math.max(target.cacheTranslationX + normalizedPointer.x * target.zoomX, 0),
          targetRelativeY = Math.max(target.cacheTranslationY + normalizedPointer.y * target.zoomY, 0);
        var isTransparent = fabric.util.isTransparent(target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);
        return isTransparent;
      }
      var ctx = this.contextCache,
        originalColor = target.selectionBackgroundColor,
        v = this.viewportTransform;
      target.selectionBackgroundColor = '';
      this.clearContext(ctx);
      ctx.save();
      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
      target.render(ctx);
      ctx.restore();
      target.selectionBackgroundColor = originalColor;
      var isTransparent = fabric.util.isTransparent(ctx, x, y, this.targetFindTolerance);
      return isTransparent;
    },
    /**
     * takes an event and determines if selection key has been pressed
     * @private
     * @param {Event} e Event object
     */
    _isSelectionKeyPressed: function _isSelectionKeyPressed(e) {
      var selectionKeyPressed = false;
      if (Array.isArray(this.selectionKey)) {
        selectionKeyPressed = !!this.selectionKey.find(function (key) {
          return e[key] === true;
        });
      } else {
        selectionKeyPressed = e[this.selectionKey];
      }
      return selectionKeyPressed;
    },
    /**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     */
    _shouldClearSelection: function _shouldClearSelection(e, target) {
      var activeObjects = this.getActiveObjects(),
        activeObject = this._activeObject;
      return !target || target && activeObject && activeObjects.length > 1 && activeObjects.indexOf(target) === -1 && activeObject !== target && !this._isSelectionKeyPressed(e) || target && !target.evented || target && !target.selectable && activeObject && activeObject !== target;
    },
    /**
     * centeredScaling from object can't override centeredScaling from canvas.
     * this should be fixed, since object setting should take precedence over canvas.
     * also this should be something that will be migrated in the control properties.
     * as ability to define the origin of the transformation that the control provide.
     * @private
     * @param {fabric.Object} target
     * @param {String} action
     * @param {Boolean} altKey
     */
    _shouldCenterTransform: function _shouldCenterTransform(target, action, altKey) {
      if (!target) {
        return;
      }
      var centerTransform;
      if (action === 'scale' || action === 'scaleX' || action === 'scaleY' || action === 'resizing') {
        centerTransform = this.centeredScaling || target.centeredScaling;
      } else if (action === 'rotate') {
        centerTransform = this.centeredRotation || target.centeredRotation;
      }
      return centerTransform ? !altKey : altKey;
    },
    /**
     * should disappear before release 4.0
     * @private
     */
    _getOriginFromCorner: function _getOriginFromCorner(target, corner) {
      var origin = {
        x: target.originX,
        y: target.originY
      };
      if (corner === 'ml' || corner === 'tl' || corner === 'bl') {
        origin.x = 'right';
      } else if (corner === 'mr' || corner === 'tr' || corner === 'br') {
        origin.x = 'left';
      }
      if (corner === 'tl' || corner === 'mt' || corner === 'tr') {
        origin.y = 'bottom';
      } else if (corner === 'bl' || corner === 'mb' || corner === 'br') {
        origin.y = 'top';
      }
      return origin;
    },
    /**
     * @private
     * @param {Boolean} alreadySelected true if target is already selected
     * @param {String} corner a string representing the corner ml, mr, tl ...
     * @param {Event} e Event object
     * @param {fabric.Object} [target] inserted back to help overriding. Unused
     */
    _getActionFromCorner: function _getActionFromCorner(alreadySelected, corner, e, target) {
      if (!corner || !alreadySelected) {
        return 'drag';
      }
      var control = target.controls[corner];
      return control.getActionName(e, control, target);
    },
    /**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     */
    _setupCurrentTransform: function _setupCurrentTransform(e, target, alreadySelected) {
      if (!target) {
        return;
      }
      var pointer = this.getPointer(e),
        corner = target.__corner,
        control = target.controls[corner],
        actionHandler = alreadySelected && corner ? control.getActionHandler(e, target, control) : fabric.controlsUtils.dragHandler,
        action = this._getActionFromCorner(alreadySelected, corner, e, target),
        origin = this._getOriginFromCorner(target, corner),
        altKey = e[this.centeredKey],
        transform = {
          target: target,
          action: action,
          actionHandler: actionHandler,
          corner: corner,
          scaleX: target.scaleX,
          scaleY: target.scaleY,
          skewX: target.skewX,
          skewY: target.skewY,
          // used by transation
          offsetX: pointer.x - target.left,
          offsetY: pointer.y - target.top,
          originX: origin.x,
          originY: origin.y,
          ex: pointer.x,
          ey: pointer.y,
          lastX: pointer.x,
          lastY: pointer.y,
          // unsure they are useful anymore.
          // left: target.left,
          // top: target.top,
          theta: degreesToRadians(target.angle),
          // end of unsure
          width: target.width * target.scaleX,
          shiftKey: e.shiftKey,
          altKey: altKey,
          original: fabric.util.saveObjectTransform(target)
        };
      if (this._shouldCenterTransform(target, action, altKey)) {
        transform.originX = 'center';
        transform.originY = 'center';
      }
      transform.original.originX = origin.x;
      transform.original.originY = origin.y;
      this._currentTransform = transform;
      this._beforeTransform(e);
    },
    /**
     * Set the cursor type of the canvas element
     * @param {String} value Cursor type of the canvas element.
     * @see http://www.w3.org/TR/css3-ui/#cursor
     */
    setCursor: function setCursor(value) {
      this.upperCanvasEl.style.cursor = value;
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx to draw the selection on
     */
    _drawSelection: function _drawSelection(ctx) {
      var selector = this._groupSelector,
        viewportStart = new fabric.Point(selector.ex, selector.ey),
        start = fabric.util.transformPoint(viewportStart, this.viewportTransform),
        viewportExtent = new fabric.Point(selector.ex + selector.left, selector.ey + selector.top),
        extent = fabric.util.transformPoint(viewportExtent, this.viewportTransform),
        minX = Math.min(start.x, extent.x),
        minY = Math.min(start.y, extent.y),
        maxX = Math.max(start.x, extent.x),
        maxY = Math.max(start.y, extent.y),
        strokeOffset = this.selectionLineWidth / 2;
      if (this.selectionColor) {
        ctx.fillStyle = this.selectionColor;
        ctx.fillRect(minX, minY, maxX - minX, maxY - minY);
      }
      if (!this.selectionLineWidth || !this.selectionBorderColor) {
        return;
      }
      ctx.lineWidth = this.selectionLineWidth;
      ctx.strokeStyle = this.selectionBorderColor;
      minX += strokeOffset;
      minY += strokeOffset;
      maxX -= strokeOffset;
      maxY -= strokeOffset;
      // selection border
      fabric.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);
      ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);
    },
    /**
     * Method that determines what object we are clicking on
     * the skipGroup parameter is for internal use, is needed for shift+click action
     * 11/09/2018 TODO: would be cool if findTarget could discern between being a full target
     * or the outside part of the corner.
     * @param {Event} e mouse event
     * @param {Boolean} skipGroup when true, activeGroup is skipped and only objects are traversed through
     * @return {fabric.Object} the target found
     */
    findTarget: function findTarget(e, skipGroup) {
      if (this.skipTargetFind) {
        return;
      }
      var ignoreZoom = true,
        pointer = this.getPointer(e, ignoreZoom),
        activeObject = this._activeObject,
        aObjects = this.getActiveObjects(),
        activeTarget,
        activeTargetSubs,
        isTouch = isTouchEvent(e),
        shouldLookForActive = aObjects.length > 1 && !skipGroup || aObjects.length === 1;

      // first check current group (if one exists)
      // active group does not check sub targets like normal groups.
      // if active group just exits.
      this.targets = [];

      // if we hit the corner of an activeObject, let's return that.
      if (shouldLookForActive && activeObject._findTargetCorner(pointer, isTouch)) {
        return activeObject;
      }
      if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {
        return activeObject;
      }
      if (aObjects.length === 1 && activeObject === this._searchPossibleTargets([activeObject], pointer)) {
        if (!this.preserveObjectStacking) {
          return activeObject;
        } else {
          activeTarget = activeObject;
          activeTargetSubs = this.targets;
          this.targets = [];
        }
      }
      var target = this._searchPossibleTargets(this._objects, pointer);
      if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {
        target = activeTarget;
        this.targets = activeTargetSubs;
      }
      return target;
    },
    /**
     * Checks point is inside the object.
     * @param {Object} [pointer] x,y object of point coordinates we want to check.
     * @param {fabric.Object} obj Object to test against
     * @param {Object} [globalPointer] x,y object of point coordinates relative to canvas used to search per pixel target.
     * @return {Boolean} true if point is contained within an area of given object
     * @private
     */
    _checkTarget: function _checkTarget(pointer, obj, globalPointer) {
      if (obj && obj.visible && obj.evented &&
      // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html
      // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html
      obj.containsPoint(pointer)) {
        if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {
          var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);
          if (!isTransparent) {
            return true;
          }
        } else {
          return true;
        }
      }
    },
    /**
     * Function used to search inside objects an object that contains pointer in bounding box or that contains pointerOnCanvas when painted
     * @param {Array} [objects] objects array to look into
     * @param {Object} [pointer] x,y object of point coordinates we want to check.
     * @return {fabric.Object} object that contains pointer
     * @private
     */
    _searchPossibleTargets: function _searchPossibleTargets(objects, pointer) {
      // Cache all targets where their bounding box contains point.
      var target,
        i = objects.length,
        subTarget;
      // Do not check for currently grouped objects, since we check the parent group itself.
      // until we call this function specifically to search inside the activeGroup
      while (i--) {
        var objToCheck = objects[i];
        var pointerToUse = objToCheck.group ? this._normalizePointer(objToCheck.group, pointer) : pointer;
        if (this._checkTarget(pointerToUse, objToCheck, pointer)) {
          target = objects[i];
          if (target.subTargetCheck && target instanceof fabric.Group) {
            subTarget = this._searchPossibleTargets(target._objects, pointer);
            subTarget && this.targets.push(subTarget);
          }
          break;
        }
      }
      return target;
    },
    /**
     * Returns pointer coordinates without the effect of the viewport
     * @param {Object} pointer with "x" and "y" number values
     * @return {Object} object with "x" and "y" number values
     */
    restorePointerVpt: function restorePointerVpt(pointer) {
      return fabric.util.transformPoint(pointer, fabric.util.invertTransform(this.viewportTransform));
    },
    /**
     * Returns pointer coordinates relative to canvas.
     * Can return coordinates with or without viewportTransform.
     * ignoreZoom false gives back coordinates that represent
     * the point clicked on canvas element.
     * ignoreZoom true gives back coordinates after being processed
     * by the viewportTransform ( sort of coordinates of what is displayed
     * on the canvas where you are clicking.
     * ignoreZoom true = HTMLElement coordinates relative to top,left
     * ignoreZoom false, default = fabric space coordinates, the same used for shape position
     * To interact with your shapes top and left you want to use ignoreZoom true
     * most of the time, while ignoreZoom false will give you coordinates
     * compatible with the object.oCoords system.
     * of the time.
     * @param {Event} e
     * @param {Boolean} ignoreZoom
     * @return {Object} object with "x" and "y" number values
     */
    getPointer: function getPointer(e, ignoreZoom) {
      // return cached values if we are in the event processing chain
      if (this._absolutePointer && !ignoreZoom) {
        return this._absolutePointer;
      }
      if (this._pointer && ignoreZoom) {
        return this._pointer;
      }
      var pointer = _getPointer(e),
        upperCanvasEl = this.upperCanvasEl,
        bounds = upperCanvasEl.getBoundingClientRect(),
        boundsWidth = bounds.width || 0,
        boundsHeight = bounds.height || 0,
        cssScale;
      if (!boundsWidth || !boundsHeight) {
        if ('top' in bounds && 'bottom' in bounds) {
          boundsHeight = Math.abs(bounds.top - bounds.bottom);
        }
        if ('right' in bounds && 'left' in bounds) {
          boundsWidth = Math.abs(bounds.right - bounds.left);
        }
      }
      this.calcOffset();
      pointer.x = pointer.x - this._offset.left;
      pointer.y = pointer.y - this._offset.top;
      if (!ignoreZoom) {
        pointer = this.restorePointerVpt(pointer);
      }
      var retinaScaling = this.getRetinaScaling();
      if (retinaScaling !== 1) {
        pointer.x /= retinaScaling;
        pointer.y /= retinaScaling;
      }
      if (boundsWidth === 0 || boundsHeight === 0) {
        // If bounds are not available (i.e. not visible), do not apply scale.
        cssScale = {
          width: 1,
          height: 1
        };
      } else {
        cssScale = {
          width: upperCanvasEl.width / boundsWidth,
          height: upperCanvasEl.height / boundsHeight
        };
      }
      return {
        x: pointer.x * cssScale.width,
        y: pointer.y * cssScale.height
      };
    },
    /**
     * @private
     * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized
     */
    _createUpperCanvas: function _createUpperCanvas() {
      var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/, ''),
        lowerCanvasEl = this.lowerCanvasEl,
        upperCanvasEl = this.upperCanvasEl;

      // there is no need to create a new upperCanvas element if we have already one.
      if (upperCanvasEl) {
        upperCanvasEl.className = '';
      } else {
        upperCanvasEl = this._createCanvasElement();
        this.upperCanvasEl = upperCanvasEl;
      }
      fabric.util.addClass(upperCanvasEl, 'upper-canvas ' + lowerCanvasClass);
      this.wrapperEl.appendChild(upperCanvasEl);
      this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);
      this._applyCanvasStyle(upperCanvasEl);
      this.contextTop = upperCanvasEl.getContext('2d');
    },
    /**
     * Returns context of top canvas where interactions are drawn
     * @returns {CanvasRenderingContext2D}
     */
    getTopContext: function getTopContext() {
      return this.contextTop;
    },
    /**
     * @private
     */
    _createCacheCanvas: function _createCacheCanvas() {
      this.cacheCanvasEl = this._createCanvasElement();
      this.cacheCanvasEl.setAttribute('width', this.width);
      this.cacheCanvasEl.setAttribute('height', this.height);
      this.contextCache = this.cacheCanvasEl.getContext('2d');
    },
    /**
     * @private
     */
    _initWrapperElement: function _initWrapperElement() {
      this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {
        'class': this.containerClass
      });
      fabric.util.setStyle(this.wrapperEl, {
        width: this.width + 'px',
        height: this.height + 'px',
        position: 'relative'
      });
      fabric.util.makeElementUnselectable(this.wrapperEl);
    },
    /**
     * @private
     * @param {HTMLElement} element canvas element to apply styles on
     */
    _applyCanvasStyle: function _applyCanvasStyle(element) {
      var width = this.width || element.width,
        height = this.height || element.height;
      fabric.util.setStyle(element, {
        position: 'absolute',
        width: width + 'px',
        height: height + 'px',
        left: 0,
        top: 0,
        'touch-action': this.allowTouchScrolling ? 'manipulation' : 'none',
        '-ms-touch-action': this.allowTouchScrolling ? 'manipulation' : 'none'
      });
      element.width = width;
      element.height = height;
      fabric.util.makeElementUnselectable(element);
    },
    /**
     * Copy the entire inline style from one element (fromEl) to another (toEl)
     * @private
     * @param {Element} fromEl Element style is copied from
     * @param {Element} toEl Element copied style is applied to
     */
    _copyCanvasStyle: function _copyCanvasStyle(fromEl, toEl) {
      toEl.style.cssText = fromEl.style.cssText;
    },
    /**
     * Returns context of canvas where object selection is drawn
     * @return {CanvasRenderingContext2D}
     */
    getSelectionContext: function getSelectionContext() {
      return this.contextTop;
    },
    /**
     * Returns &lt;canvas> element on which object selection is drawn
     * @return {HTMLCanvasElement}
     */
    getSelectionElement: function getSelectionElement() {
      return this.upperCanvasEl;
    },
    /**
     * Returns currently active object
     * @return {fabric.Object} active object
     */
    getActiveObject: function getActiveObject() {
      return this._activeObject;
    },
    /**
     * Returns an array with the current selected objects
     * @return {fabric.Object} active object
     */
    getActiveObjects: function getActiveObjects() {
      var active = this._activeObject;
      if (active) {
        if (active.type === 'activeSelection' && active._objects) {
          return active._objects.slice(0);
        } else {
          return [active];
        }
      }
      return [];
    },
    /**
     * @private
     * @param {fabric.Object} obj Object that was removed
     */
    _onObjectRemoved: function _onObjectRemoved(obj) {
      // removing active object should fire "selection:cleared" events
      if (obj === this._activeObject) {
        this.fire('before:selection:cleared', {
          target: obj
        });
        this._discardActiveObject();
        this.fire('selection:cleared', {
          target: obj
        });
        obj.fire('deselected');
      }
      if (obj === this._hoveredTarget) {
        this._hoveredTarget = null;
        this._hoveredTargets = [];
      }
      this.callSuper('_onObjectRemoved', obj);
    },
    /**
     * @private
     * Compares the old activeObject with the current one and fires correct events
     * @param {fabric.Object} obj old activeObject
     */
    _fireSelectionEvents: function _fireSelectionEvents(oldObjects, e) {
      var somethingChanged = false,
        objects = this.getActiveObjects(),
        added = [],
        removed = [];
      oldObjects.forEach(function (oldObject) {
        if (objects.indexOf(oldObject) === -1) {
          somethingChanged = true;
          oldObject.fire('deselected', {
            e: e,
            target: oldObject
          });
          removed.push(oldObject);
        }
      });
      objects.forEach(function (object) {
        if (oldObjects.indexOf(object) === -1) {
          somethingChanged = true;
          object.fire('selected', {
            e: e,
            target: object
          });
          added.push(object);
        }
      });
      if (oldObjects.length > 0 && objects.length > 0) {
        somethingChanged && this.fire('selection:updated', {
          e: e,
          selected: added,
          deselected: removed
        });
      } else if (objects.length > 0) {
        this.fire('selection:created', {
          e: e,
          selected: added
        });
      } else if (oldObjects.length > 0) {
        this.fire('selection:cleared', {
          e: e,
          deselected: removed
        });
      }
    },
    /**
     * Sets given object as the only active object on canvas
     * @param {fabric.Object} object Object to set as an active one
     * @param {Event} [e] Event (passed along when firing "object:selected")
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    setActiveObject: function setActiveObject(object, e) {
      var currentActives = this.getActiveObjects();
      this._setActiveObject(object, e);
      this._fireSelectionEvents(currentActives, e);
      return this;
    },
    /**
     * This is a private method for now.
     * This is supposed to be equivalent to setActiveObject but without firing
     * any event. There is commitment to have this stay this way.
     * This is the functional part of setActiveObject.
     * @private
     * @param {Object} object to set as active
     * @param {Event} [e] Event (passed along when firing "object:selected")
     * @return {Boolean} true if the selection happened
     */
    _setActiveObject: function _setActiveObject(object, e) {
      if (this._activeObject === object) {
        return false;
      }
      if (!this._discardActiveObject(e, object)) {
        return false;
      }
      if (object.onSelect({
        e: e
      })) {
        return false;
      }
      this._activeObject = object;
      return true;
    },
    /**
     * This is a private method for now.
     * This is supposed to be equivalent to discardActiveObject but without firing
     * any events. There is commitment to have this stay this way.
     * This is the functional part of discardActiveObject.
     * @param {Event} [e] Event (passed along when firing "object:deselected")
     * @param {Object} object to set as active
     * @return {Boolean} true if the selection happened
     * @private
     */
    _discardActiveObject: function _discardActiveObject(e, object) {
      var obj = this._activeObject;
      if (obj) {
        // onDeselect return TRUE to cancel selection;
        if (obj.onDeselect({
          e: e,
          object: object
        })) {
          return false;
        }
        this._activeObject = null;
      }
      return true;
    },
    /**
     * Discards currently active object and fire events. If the function is called by fabric
     * as a consequence of a mouse event, the event is passed as a parameter and
     * sent to the fire function for the custom events. When used as a method the
     * e param does not have any application.
     * @param {event} e
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    discardActiveObject: function discardActiveObject(e) {
      var currentActives = this.getActiveObjects(),
        activeObject = this.getActiveObject();
      if (currentActives.length) {
        this.fire('before:selection:cleared', {
          target: activeObject,
          e: e
        });
      }
      this._discardActiveObject(e);
      this._fireSelectionEvents(currentActives, e);
      return this;
    },
    /**
     * Clears a canvas element and removes all event listeners
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    dispose: function dispose() {
      var wrapper = this.wrapperEl;
      this.removeListeners();
      wrapper.removeChild(this.upperCanvasEl);
      wrapper.removeChild(this.lowerCanvasEl);
      this.contextCache = null;
      this.contextTop = null;
      ['upperCanvasEl', 'cacheCanvasEl'].forEach(function (element) {
        fabric.util.cleanUpJsdomNode(this[element]);
        this[element] = undefined;
      }.bind(this));
      if (wrapper.parentNode) {
        wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);
      }
      delete this.wrapperEl;
      fabric.StaticCanvas.prototype.dispose.call(this);
      return this;
    },
    /**
     * Clears all contexts (background, main, top) of an instance
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    clear: function clear() {
      // this.discardActiveGroup();
      this.discardActiveObject();
      this.clearContext(this.contextTop);
      return this.callSuper('clear');
    },
    /**
     * Draws objects' controls (borders/controls)
     * @param {CanvasRenderingContext2D} ctx Context to render controls on
     */
    drawControls: function drawControls(ctx) {
      var activeObject = this._activeObject;
      if (activeObject) {
        activeObject._renderControls(ctx);
      }
    },
    /**
     * @private
     */
    _toObject: function _toObject(instance, methodName, propertiesToInclude) {
      //If the object is part of the current selection group, it should
      //be transformed appropriately
      //i.e. it should be serialised as it would appear if the selection group
      //were to be destroyed.
      var originalProperties = this._realizeGroupTransformOnObject(instance),
        object = this.callSuper('_toObject', instance, methodName, propertiesToInclude);
      //Undo the damage we did by changing all of its properties
      this._unwindGroupTransformOnObject(instance, originalProperties);
      return object;
    },
    /**
     * Realises an object's group transformation on it
     * @private
     * @param {fabric.Object} [instance] the object to transform (gets mutated)
     * @returns the original values of instance which were changed
     */
    _realizeGroupTransformOnObject: function _realizeGroupTransformOnObject(instance) {
      if (instance.group && instance.group.type === 'activeSelection' && this._activeObject === instance.group) {
        var layoutProps = ['angle', 'flipX', 'flipY', 'left', 'scaleX', 'scaleY', 'skewX', 'skewY', 'top'];
        //Copy all the positionally relevant properties across now
        var originalValues = {};
        layoutProps.forEach(function (prop) {
          originalValues[prop] = instance[prop];
        });
        fabric.util.addTransformToObject(instance, this._activeObject.calcOwnMatrix());
        return originalValues;
      } else {
        return null;
      }
    },
    /**
     * Restores the changed properties of instance
     * @private
     * @param {fabric.Object} [instance] the object to un-transform (gets mutated)
     * @param {Object} [originalValues] the original values of instance, as returned by _realizeGroupTransformOnObject
     */
    _unwindGroupTransformOnObject: function _unwindGroupTransformOnObject(instance, originalValues) {
      if (originalValues) {
        instance.set(originalValues);
      }
    },
    /**
     * @private
     */
    _setSVGObject: function _setSVGObject(markup, instance, reviver) {
      //If the object is in a selection group, simulate what would happen to that
      //object when the group is deselected
      var originalProperties = this._realizeGroupTransformOnObject(instance);
      this.callSuper('_setSVGObject', markup, instance, reviver);
      this._unwindGroupTransformOnObject(instance, originalProperties);
    },
    setViewportTransform: function setViewportTransform(vpt) {
      if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {
        this._activeObject.clearContextTop();
      }
      fabric.StaticCanvas.prototype.setViewportTransform.call(this, vpt);
    }
  });

  // copying static properties manually to work around Opera's bug,
  // where "prototype" property is enumerable and overrides existing prototype
  for (var prop in fabric.StaticCanvas) {
    if (prop !== 'prototype') {
      fabric.Canvas[prop] = fabric.StaticCanvas[prop];
    }
  }
})();
(function () {
  var addListener = fabric.util.addListener,
    removeListener = fabric.util.removeListener,
    RIGHT_CLICK = 3,
    MIDDLE_CLICK = 2,
    LEFT_CLICK = 1,
    addEventOptions = {
      passive: false
    };
  function checkClick(e, value) {
    return e.button && e.button === value - 1;
  }
  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */{
    /**
     * Contains the id of the touch event that owns the fabric transform
     * @type Number
     * @private
     */
    mainTouchId: null,
    /**
     * Adds mouse listeners to canvas
     * @private
     */
    _initEventListeners: function _initEventListeners() {
      // in case we initialized the class twice. This should not happen normally
      // but in some kind of applications where the canvas element may be changed
      // this is a workaround to having double listeners.
      this.removeListeners();
      this._bindEvents();
      this.addOrRemove(addListener, 'add');
    },
    /**
     * return an event prefix pointer or mouse.
     * @private
     */
    _getEventPrefix: function _getEventPrefix() {
      return this.enablePointerEvents ? 'pointer' : 'mouse';
    },
    addOrRemove: function addOrRemove(functor, eventjsFunctor) {
      var canvasElement = this.upperCanvasEl,
        eventTypePrefix = this._getEventPrefix();
      functor(fabric.window, 'resize', this._onResize);
      functor(canvasElement, eventTypePrefix + 'down', this._onMouseDown);
      functor(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
      functor(canvasElement, eventTypePrefix + 'out', this._onMouseOut);
      functor(canvasElement, eventTypePrefix + 'enter', this._onMouseEnter);
      functor(canvasElement, 'wheel', this._onMouseWheel);
      functor(canvasElement, 'contextmenu', this._onContextMenu);
      functor(canvasElement, 'dblclick', this._onDoubleClick);
      functor(canvasElement, 'dragover', this._onDragOver);
      functor(canvasElement, 'dragenter', this._onDragEnter);
      functor(canvasElement, 'dragleave', this._onDragLeave);
      functor(canvasElement, 'drop', this._onDrop);
      if (!this.enablePointerEvents) {
        functor(canvasElement, 'touchstart', this._onTouchStart, addEventOptions);
      }
      if (typeof eventjs !== 'undefined' && eventjsFunctor in eventjs) {
        eventjs[eventjsFunctor](canvasElement, 'gesture', this._onGesture);
        eventjs[eventjsFunctor](canvasElement, 'drag', this._onDrag);
        eventjs[eventjsFunctor](canvasElement, 'orientation', this._onOrientationChange);
        eventjs[eventjsFunctor](canvasElement, 'shake', this._onShake);
        eventjs[eventjsFunctor](canvasElement, 'longpress', this._onLongPress);
      }
    },
    /**
     * Removes all event listeners
     */
    removeListeners: function removeListeners() {
      this.addOrRemove(removeListener, 'remove');
      // if you dispose on a mouseDown, before mouse up, you need to clean document to...
      var eventTypePrefix = this._getEventPrefix();
      removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);
      removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);
      removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);
    },
    /**
     * @private
     */
    _bindEvents: function _bindEvents() {
      if (this.eventsBound) {
        // for any reason we pass here twice we do not want to bind events twice.
        return;
      }
      this._onMouseDown = this._onMouseDown.bind(this);
      this._onTouchStart = this._onTouchStart.bind(this);
      this._onMouseMove = this._onMouseMove.bind(this);
      this._onMouseUp = this._onMouseUp.bind(this);
      this._onTouchEnd = this._onTouchEnd.bind(this);
      this._onResize = this._onResize.bind(this);
      this._onGesture = this._onGesture.bind(this);
      this._onDrag = this._onDrag.bind(this);
      this._onShake = this._onShake.bind(this);
      this._onLongPress = this._onLongPress.bind(this);
      this._onOrientationChange = this._onOrientationChange.bind(this);
      this._onMouseWheel = this._onMouseWheel.bind(this);
      this._onMouseOut = this._onMouseOut.bind(this);
      this._onMouseEnter = this._onMouseEnter.bind(this);
      this._onContextMenu = this._onContextMenu.bind(this);
      this._onDoubleClick = this._onDoubleClick.bind(this);
      this._onDragOver = this._onDragOver.bind(this);
      this._onDragEnter = this._simpleEventHandler.bind(this, 'dragenter');
      this._onDragLeave = this._simpleEventHandler.bind(this, 'dragleave');
      this._onDrop = this._onDrop.bind(this);
      this.eventsBound = true;
    },
    /**
     * @private
     * @param {Event} [e] Event object fired on Event.js gesture
     * @param {Event} [self] Inner Event object
     */
    _onGesture: function _onGesture(e, self) {
      this.__onTransformGesture && this.__onTransformGesture(e, self);
    },
    /**
     * @private
     * @param {Event} [e] Event object fired on Event.js drag
     * @param {Event} [self] Inner Event object
     */
    _onDrag: function _onDrag(e, self) {
      this.__onDrag && this.__onDrag(e, self);
    },
    /**
     * @private
     * @param {Event} [e] Event object fired on wheel event
     */
    _onMouseWheel: function _onMouseWheel(e) {
      this.__onMouseWheel(e);
    },
    /**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
    _onMouseOut: function _onMouseOut(e) {
      var target = this._hoveredTarget;
      this.fire('mouse:out', {
        target: target,
        e: e
      });
      this._hoveredTarget = null;
      target && target.fire('mouseout', {
        e: e
      });
      var _this = this;
      this._hoveredTargets.forEach(function (_target) {
        _this.fire('mouse:out', {
          target: target,
          e: e
        });
        _target && target.fire('mouseout', {
          e: e
        });
      });
      this._hoveredTargets = [];
    },
    /**
     * @private
     * @param {Event} e Event object fired on mouseenter
     */
    _onMouseEnter: function _onMouseEnter(e) {
      // This find target and consequent 'mouse:over' is used to
      // clear old instances on hovered target.
      // calling findTarget has the side effect of killing target.__corner.
      // as a short term fix we are not firing this if we are currently transforming.
      // as a long term fix we need to separate the action of finding a target with the
      // side effects we added to it.
      if (!this._currentTransform && !this.findTarget(e)) {
        this.fire('mouse:over', {
          target: null,
          e: e
        });
        this._hoveredTarget = null;
        this._hoveredTargets = [];
      }
    },
    /**
     * @private
     * @param {Event} [e] Event object fired on Event.js orientation change
     * @param {Event} [self] Inner Event object
     */
    _onOrientationChange: function _onOrientationChange(e, self) {
      this.__onOrientationChange && this.__onOrientationChange(e, self);
    },
    /**
     * @private
     * @param {Event} [e] Event object fired on Event.js shake
     * @param {Event} [self] Inner Event object
     */
    _onShake: function _onShake(e, self) {
      this.__onShake && this.__onShake(e, self);
    },
    /**
     * @private
     * @param {Event} [e] Event object fired on Event.js shake
     * @param {Event} [self] Inner Event object
     */
    _onLongPress: function _onLongPress(e, self) {
      this.__onLongPress && this.__onLongPress(e, self);
    },
    /**
     * prevent default to allow drop event to be fired
     * @private
     * @param {Event} [e] Event object fired on Event.js shake
     */
    _onDragOver: function _onDragOver(e) {
      e.preventDefault();
      var target = this._simpleEventHandler('dragover', e);
      this._fireEnterLeaveEvents(target, e);
    },
    /**
     * `drop:before` is a an event that allow you to schedule logic
     * before the `drop` event. Prefer `drop` event always, but if you need
     * to run some drop-disabling logic on an event, since there is no way
     * to handle event handlers ordering, use `drop:before`
     * @param {Event} e
     */
    _onDrop: function _onDrop(e) {
      this._simpleEventHandler('drop:before', e);
      return this._simpleEventHandler('drop', e);
    },
    /**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
    _onContextMenu: function _onContextMenu(e) {
      if (this.stopContextMenu) {
        e.stopPropagation();
        e.preventDefault();
      }
      return false;
    },
    /**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
    _onDoubleClick: function _onDoubleClick(e) {
      this._cacheTransformEventData(e);
      this._handleEvent(e, 'dblclick');
      this._resetTransformEventData(e);
    },
    /**
     * Return a the id of an event.
     * returns either the pointerId or the identifier or 0 for the mouse event
     * @private
     * @param {Event} evt Event object
     */
    getPointerId: function getPointerId(evt) {
      var changedTouches = evt.changedTouches;
      if (changedTouches) {
        return changedTouches[0] && changedTouches[0].identifier;
      }
      if (this.enablePointerEvents) {
        return evt.pointerId;
      }
      return -1;
    },
    /**
     * Determines if an event has the id of the event that is considered main
     * @private
     * @param {evt} event Event object
     */
    _isMainEvent: function _isMainEvent(evt) {
      if (evt.isPrimary === true) {
        return true;
      }
      if (evt.isPrimary === false) {
        return false;
      }
      if (evt.type === 'touchend' && evt.touches.length === 0) {
        return true;
      }
      if (evt.changedTouches) {
        return evt.changedTouches[0].identifier === this.mainTouchId;
      }
      return true;
    },
    /**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
    _onTouchStart: function _onTouchStart(e) {
      e.preventDefault();
      if (this.mainTouchId === null) {
        this.mainTouchId = this.getPointerId(e);
      }
      this.__onMouseDown(e);
      this._resetTransformEventData();
      var canvasElement = this.upperCanvasEl,
        eventTypePrefix = this._getEventPrefix();
      addListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);
      addListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);
      // Unbind mousedown to prevent double triggers from touch devices
      removeListener(canvasElement, eventTypePrefix + 'down', this._onMouseDown);
    },
    /**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
    _onMouseDown: function _onMouseDown(e) {
      this.__onMouseDown(e);
      this._resetTransformEventData();
      var canvasElement = this.upperCanvasEl,
        eventTypePrefix = this._getEventPrefix();
      removeListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
      addListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);
      addListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
    },
    /**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
    _onTouchEnd: function _onTouchEnd(e) {
      if (e.touches.length > 0) {
        // if there are still touches stop here
        return;
      }
      this.__onMouseUp(e);
      this._resetTransformEventData();
      this.mainTouchId = null;
      var eventTypePrefix = this._getEventPrefix();
      removeListener(fabric.document, 'touchend', this._onTouchEnd, addEventOptions);
      removeListener(fabric.document, 'touchmove', this._onMouseMove, addEventOptions);
      var _this = this;
      if (this._willAddMouseDown) {
        clearTimeout(this._willAddMouseDown);
      }
      this._willAddMouseDown = setTimeout(function () {
        // Wait 400ms before rebinding mousedown to prevent double triggers
        // from touch devices
        addListener(_this.upperCanvasEl, eventTypePrefix + 'down', _this._onMouseDown);
        _this._willAddMouseDown = 0;
      }, 400);
    },
    /**
     * @private
     * @param {Event} e Event object fired on mouseup
     */
    _onMouseUp: function _onMouseUp(e) {
      this.__onMouseUp(e);
      this._resetTransformEventData();
      var canvasElement = this.upperCanvasEl,
        eventTypePrefix = this._getEventPrefix();
      if (this._isMainEvent(e)) {
        removeListener(fabric.document, eventTypePrefix + 'up', this._onMouseUp);
        removeListener(fabric.document, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
        addListener(canvasElement, eventTypePrefix + 'move', this._onMouseMove, addEventOptions);
      }
    },
    /**
     * @private
     * @param {Event} e Event object fired on mousemove
     */
    _onMouseMove: function _onMouseMove(e) {
      !this.allowTouchScrolling && e.preventDefault && e.preventDefault();
      this.__onMouseMove(e);
    },
    /**
     * @private
     */
    _onResize: function _onResize() {
      this.calcOffset();
    },
    /**
     * Decides whether the canvas should be redrawn in mouseup and mousedown events.
     * @private
     * @param {Object} target
     */
    _shouldRender: function _shouldRender(target) {
      var activeObject = this._activeObject;
      if (!!activeObject !== !!target || activeObject && target && activeObject !== target) {
        // this covers: switch of target, from target to no target, selection of target
        // multiSelection with key and mouse
        return true;
      } else if (activeObject && activeObject.isEditing) {
        // if we mouse up/down over a editing textbox a cursor change,
        // there is no need to re render
        return false;
      }
      return false;
    },
    /**
     * Method that defines the actions when mouse is released on canvas.
     * The method resets the currentTransform parameters, store the image corner
     * position in the image object and render the canvas on top.
     * @private
     * @param {Event} e Event object fired on mouseup
     */
    __onMouseUp: function __onMouseUp(e) {
      var target,
        transform = this._currentTransform,
        groupSelector = this._groupSelector,
        shouldRender = false,
        isClick = !groupSelector || groupSelector.left === 0 && groupSelector.top === 0;
      this._cacheTransformEventData(e);
      target = this._target;
      this._handleEvent(e, 'up:before');
      // if right/middle click just fire events and return
      // target undefined will make the _handleEvent search the target
      if (checkClick(e, RIGHT_CLICK)) {
        if (this.fireRightClick) {
          this._handleEvent(e, 'up', RIGHT_CLICK, isClick);
        }
        return;
      }
      if (checkClick(e, MIDDLE_CLICK)) {
        if (this.fireMiddleClick) {
          this._handleEvent(e, 'up', MIDDLE_CLICK, isClick);
        }
        this._resetTransformEventData();
        return;
      }
      if (this.isDrawingMode && this._isCurrentlyDrawing) {
        this._onMouseUpInDrawingMode(e);
        return;
      }
      if (!this._isMainEvent(e)) {
        return;
      }
      if (transform) {
        this._finalizeCurrentTransform(e);
        shouldRender = transform.actionPerformed;
      }
      if (!isClick) {
        var targetWasActive = target === this._activeObject;
        this._maybeGroupObjects(e);
        if (!shouldRender) {
          shouldRender = this._shouldRender(target) || !targetWasActive && target === this._activeObject;
        }
      }
      var corner, pointer;
      if (target) {
        corner = target._findTargetCorner(this.getPointer(e, true), fabric.util.isTouchEvent(e));
        if (target.selectable && target !== this._activeObject && target.activeOn === 'up') {
          this.setActiveObject(target, e);
          shouldRender = true;
        } else {
          var control = target.controls[corner],
            mouseUpHandler = control && control.getMouseUpHandler(e, target, control);
          if (mouseUpHandler) {
            pointer = this.getPointer(e);
            mouseUpHandler(e, transform, pointer.x, pointer.y);
          }
        }
        target.isMoving = false;
      }
      // if we are ending up a transform on a different control or a new object
      // fire the original mouse up from the corner that started the transform
      if (transform && (transform.target !== target || transform.corner !== corner)) {
        var originalControl = transform.target && transform.target.controls[transform.corner],
          originalMouseUpHandler = originalControl && originalControl.getMouseUpHandler(e, target, control);
        pointer = pointer || this.getPointer(e);
        originalMouseUpHandler && originalMouseUpHandler(e, transform, pointer.x, pointer.y);
      }
      this._setCursorFromEvent(e, target);
      this._handleEvent(e, 'up', LEFT_CLICK, isClick);
      this._groupSelector = null;
      this._currentTransform = null;
      // reset the target information about which corner is selected
      target && (target.__corner = 0);
      if (shouldRender) {
        this.requestRenderAll();
      } else if (!isClick) {
        this.renderTop();
      }
    },
    /**
     * @private
     * Handle event firing for target and subtargets
     * @param {Event} e event from mouse
     * @param {String} eventType event to fire (up, down or move)
     * @return {Fabric.Object} target return the the target found, for internal reasons.
     */
    _simpleEventHandler: function _simpleEventHandler(eventType, e) {
      var target = this.findTarget(e),
        targets = this.targets,
        options = {
          e: e,
          target: target,
          subTargets: targets
        };
      this.fire(eventType, options);
      target && target.fire(eventType, options);
      if (!targets) {
        return target;
      }
      for (var i = 0; i < targets.length; i++) {
        targets[i].fire(eventType, options);
      }
      return target;
    },
    /**
     * @private
     * Handle event firing for target and subtargets
     * @param {Event} e event from mouse
     * @param {String} eventType event to fire (up, down or move)
     * @param {fabric.Object} targetObj receiving event
     * @param {Number} [button] button used in the event 1 = left, 2 = middle, 3 = right
     * @param {Boolean} isClick for left button only, indicates that the mouse up happened without move.
     */
    _handleEvent: function _handleEvent(e, eventType, button, isClick) {
      var target = this._target,
        targets = this.targets || [],
        options = {
          e: e,
          target: target,
          subTargets: targets,
          button: button || LEFT_CLICK,
          isClick: isClick || false,
          pointer: this._pointer,
          absolutePointer: this._absolutePointer,
          transform: this._currentTransform
        };
      if (eventType === 'up') {
        options.currentTarget = this.findTarget(e);
        options.currentSubTargets = this.targets;
      }
      this.fire('mouse:' + eventType, options);
      target && target.fire('mouse' + eventType, options);
      for (var i = 0; i < targets.length; i++) {
        targets[i].fire('mouse' + eventType, options);
      }
    },
    /**
     * @private
     * @param {Event} e send the mouse event that generate the finalize down, so it can be used in the event
     */
    _finalizeCurrentTransform: function _finalizeCurrentTransform(e) {
      var transform = this._currentTransform,
        target = transform.target,
        options = {
          e: e,
          target: target,
          transform: transform,
          action: transform.action
        };
      if (target._scaling) {
        target._scaling = false;
      }
      target.setCoords();
      if (transform.actionPerformed || this.stateful && target.hasStateChanged()) {
        this._fire('modified', options);
      }
    },
    /**
     * @private
     * @param {Event} e Event object fired on mousedown
     */
    _onMouseDownInDrawingMode: function _onMouseDownInDrawingMode(e) {
      this._isCurrentlyDrawing = true;
      if (this.getActiveObject()) {
        this.discardActiveObject(e).requestRenderAll();
      }
      var pointer = this.getPointer(e);
      this.freeDrawingBrush.onMouseDown(pointer, {
        e: e,
        pointer: pointer
      });
      this._handleEvent(e, 'down');
    },
    /**
     * @private
     * @param {Event} e Event object fired on mousemove
     */
    _onMouseMoveInDrawingMode: function _onMouseMoveInDrawingMode(e) {
      if (this._isCurrentlyDrawing) {
        var pointer = this.getPointer(e);
        this.freeDrawingBrush.onMouseMove(pointer, {
          e: e,
          pointer: pointer
        });
      }
      this.setCursor(this.freeDrawingCursor);
      this._handleEvent(e, 'move');
    },
    /**
     * @private
     * @param {Event} e Event object fired on mouseup
     */
    _onMouseUpInDrawingMode: function _onMouseUpInDrawingMode(e) {
      var pointer = this.getPointer(e);
      this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({
        e: e,
        pointer: pointer
      });
      this._handleEvent(e, 'up');
    },
    /**
     * Method that defines the actions when mouse is clicked on canvas.
     * The method inits the currentTransform parameters and renders all the
     * canvas so the current image can be placed on the top canvas and the rest
     * in on the container one.
     * @private
     * @param {Event} e Event object fired on mousedown
     */
    __onMouseDown: function __onMouseDown(e) {
      this._cacheTransformEventData(e);
      this._handleEvent(e, 'down:before');
      var target = this._target;
      // if right click just fire events
      if (checkClick(e, RIGHT_CLICK)) {
        if (this.fireRightClick) {
          this._handleEvent(e, 'down', RIGHT_CLICK);
        }
        return;
      }
      if (checkClick(e, MIDDLE_CLICK)) {
        if (this.fireMiddleClick) {
          this._handleEvent(e, 'down', MIDDLE_CLICK);
        }
        return;
      }
      if (this.isDrawingMode) {
        this._onMouseDownInDrawingMode(e);
        return;
      }
      if (!this._isMainEvent(e)) {
        return;
      }

      // ignore if some object is being transformed at this moment
      if (this._currentTransform) {
        return;
      }
      var pointer = this._pointer;
      // save pointer for check in __onMouseUp event
      this._previousPointer = pointer;
      var shouldRender = this._shouldRender(target),
        shouldGroup = this._shouldGroup(e, target);
      if (this._shouldClearSelection(e, target)) {
        this.discardActiveObject(e);
      } else if (shouldGroup) {
        this._handleGrouping(e, target);
        target = this._activeObject;
      }
      if (this.selection && (!target || !target.selectable && !target.isEditing && target !== this._activeObject)) {
        this._groupSelector = {
          ex: this._absolutePointer.x,
          ey: this._absolutePointer.y,
          top: 0,
          left: 0
        };
      }
      if (target) {
        var alreadySelected = target === this._activeObject;
        if (target.selectable && target.activeOn === 'down') {
          this.setActiveObject(target, e);
        }
        var corner = target._findTargetCorner(this.getPointer(e, true), fabric.util.isTouchEvent(e));
        target.__corner = corner;
        if (target === this._activeObject && (corner || !shouldGroup)) {
          this._setupCurrentTransform(e, target, alreadySelected);
          var control = target.controls[corner],
            pointer = this.getPointer(e),
            mouseDownHandler = control && control.getMouseDownHandler(e, target, control);
          if (mouseDownHandler) {
            mouseDownHandler(e, this._currentTransform, pointer.x, pointer.y);
          }
        }
      }
      this._handleEvent(e, 'down');
      // we must renderAll so that we update the visuals
      (shouldRender || shouldGroup) && this.requestRenderAll();
    },
    /**
     * reset cache form common information needed during event processing
     * @private
     */
    _resetTransformEventData: function _resetTransformEventData() {
      this._target = null;
      this._pointer = null;
      this._absolutePointer = null;
    },
    /**
     * Cache common information needed during event processing
     * @private
     * @param {Event} e Event object fired on event
     */
    _cacheTransformEventData: function _cacheTransformEventData(e) {
      // reset in order to avoid stale caching
      this._resetTransformEventData();
      this._pointer = this.getPointer(e, true);
      this._absolutePointer = this.restorePointerVpt(this._pointer);
      this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;
    },
    /**
     * @private
     */
    _beforeTransform: function _beforeTransform(e) {
      var t = this._currentTransform;
      this.stateful && t.target.saveState();
      this.fire('before:transform', {
        e: e,
        transform: t
      });
    },
    /**
     * Method that defines the actions when mouse is hovering the canvas.
     * The currentTransform parameter will define whether the user is rotating/scaling/translating
     * an image or neither of them (only hovering). A group selection is also possible and would cancel
     * all any other type of action.
     * In case of an image transformation only the top canvas will be rendered.
     * @private
     * @param {Event} e Event object fired on mousemove
     */
    __onMouseMove: function __onMouseMove(e) {
      this._handleEvent(e, 'move:before');
      this._cacheTransformEventData(e);
      var target, pointer;
      if (this.isDrawingMode) {
        this._onMouseMoveInDrawingMode(e);
        return;
      }
      if (!this._isMainEvent(e)) {
        return;
      }
      var groupSelector = this._groupSelector;

      // We initially clicked in an empty area, so we draw a box for multiple selection
      if (groupSelector) {
        pointer = this._absolutePointer;
        groupSelector.left = pointer.x - groupSelector.ex;
        groupSelector.top = pointer.y - groupSelector.ey;
        this.renderTop();
      } else if (!this._currentTransform) {
        target = this.findTarget(e) || null;
        this._setCursorFromEvent(e, target);
        this._fireOverOutEvents(target, e);
      } else {
        this._transformObject(e);
      }
      this._handleEvent(e, 'move');
      this._resetTransformEventData();
    },
    /**
     * Manage the mouseout, mouseover events for the fabric object on the canvas
     * @param {Fabric.Object} target the target where the target from the mousemove event
     * @param {Event} e Event object fired on mousemove
     * @private
     */
    _fireOverOutEvents: function _fireOverOutEvents(target, e) {
      var _hoveredTarget = this._hoveredTarget,
        _hoveredTargets = this._hoveredTargets,
        targets = this.targets,
        length = Math.max(_hoveredTargets.length, targets.length);
      this.fireSyntheticInOutEvents(target, e, {
        oldTarget: _hoveredTarget,
        evtOut: 'mouseout',
        canvasEvtOut: 'mouse:out',
        evtIn: 'mouseover',
        canvasEvtIn: 'mouse:over'
      });
      for (var i = 0; i < length; i++) {
        this.fireSyntheticInOutEvents(targets[i], e, {
          oldTarget: _hoveredTargets[i],
          evtOut: 'mouseout',
          evtIn: 'mouseover'
        });
      }
      this._hoveredTarget = target;
      this._hoveredTargets = this.targets.concat();
    },
    /**
     * Manage the dragEnter, dragLeave events for the fabric objects on the canvas
     * @param {Fabric.Object} target the target where the target from the onDrag event
     * @param {Event} e Event object fired on ondrag
     * @private
     */
    _fireEnterLeaveEvents: function _fireEnterLeaveEvents(target, e) {
      var _draggedoverTarget = this._draggedoverTarget,
        _hoveredTargets = this._hoveredTargets,
        targets = this.targets,
        length = Math.max(_hoveredTargets.length, targets.length);
      this.fireSyntheticInOutEvents(target, e, {
        oldTarget: _draggedoverTarget,
        evtOut: 'dragleave',
        evtIn: 'dragenter'
      });
      for (var i = 0; i < length; i++) {
        this.fireSyntheticInOutEvents(targets[i], e, {
          oldTarget: _hoveredTargets[i],
          evtOut: 'dragleave',
          evtIn: 'dragenter'
        });
      }
      this._draggedoverTarget = target;
    },
    /**
     * Manage the synthetic in/out events for the fabric objects on the canvas
     * @param {Fabric.Object} target the target where the target from the supported events
     * @param {Event} e Event object fired
     * @param {Object} config configuration for the function to work
     * @param {String} config.targetName property on the canvas where the old target is stored
     * @param {String} [config.canvasEvtOut] name of the event to fire at canvas level for out
     * @param {String} config.evtOut name of the event to fire for out
     * @param {String} [config.canvasEvtIn] name of the event to fire at canvas level for in
     * @param {String} config.evtIn name of the event to fire for in
     * @private
     */
    fireSyntheticInOutEvents: function fireSyntheticInOutEvents(target, e, config) {
      var inOpt,
        outOpt,
        oldTarget = config.oldTarget,
        outFires,
        inFires,
        targetChanged = oldTarget !== target,
        canvasEvtIn = config.canvasEvtIn,
        canvasEvtOut = config.canvasEvtOut;
      if (targetChanged) {
        inOpt = {
          e: e,
          target: target,
          previousTarget: oldTarget
        };
        outOpt = {
          e: e,
          target: oldTarget,
          nextTarget: target
        };
      }
      inFires = target && targetChanged;
      outFires = oldTarget && targetChanged;
      if (outFires) {
        canvasEvtOut && this.fire(canvasEvtOut, outOpt);
        oldTarget.fire(config.evtOut, outOpt);
      }
      if (inFires) {
        canvasEvtIn && this.fire(canvasEvtIn, inOpt);
        target.fire(config.evtIn, inOpt);
      }
    },
    /**
     * Method that defines actions when an Event Mouse Wheel
     * @param {Event} e Event object fired on mouseup
     */
    __onMouseWheel: function __onMouseWheel(e) {
      this._cacheTransformEventData(e);
      this._handleEvent(e, 'wheel');
      this._resetTransformEventData();
    },
    /**
     * @private
     * @param {Event} e Event fired on mousemove
     */
    _transformObject: function _transformObject(e) {
      var pointer = this.getPointer(e),
        transform = this._currentTransform;
      transform.reset = false;
      transform.shiftKey = e.shiftKey;
      transform.altKey = e[this.centeredKey];
      this._performTransformAction(e, transform, pointer);
      transform.actionPerformed && this.requestRenderAll();
    },
    /**
     * @private
     */
    _performTransformAction: function _performTransformAction(e, transform, pointer) {
      var x = pointer.x,
        y = pointer.y,
        action = transform.action,
        actionPerformed = false,
        actionHandler = transform.actionHandler;
      // this object could be created from the function in the control handlers

      if (actionHandler) {
        actionPerformed = actionHandler(e, transform, x, y);
      }
      if (action === 'drag' && actionPerformed) {
        transform.target.isMoving = true;
        this.setCursor(transform.target.moveCursor || this.moveCursor);
      }
      transform.actionPerformed = transform.actionPerformed || actionPerformed;
    },
    /**
     * @private
     */
    _fire: fabric.controlsUtils.fireEvent,
    /**
     * Sets the cursor depending on where the canvas is being hovered.
     * Note: very buggy in Opera
     * @param {Event} e Event object
     * @param {Object} target Object that the mouse is hovering, if so.
     */
    _setCursorFromEvent: function _setCursorFromEvent(e, target) {
      if (!target) {
        this.setCursor(this.defaultCursor);
        return false;
      }
      var hoverCursor = target.hoverCursor || this.hoverCursor,
        activeSelection = this._activeObject && this._activeObject.type === 'activeSelection' ? this._activeObject : null,
        // only show proper corner when group selection is not active
        corner = (!activeSelection || !activeSelection.contains(target)
        // here we call findTargetCorner always with undefined for the touch parameter.
        // we assume that if you are using a cursor you do not need to interact with
        // the bigger touch area.
        ) && target._findTargetCorner(this.getPointer(e, true));
      if (!corner) {
        if (target.subTargetCheck) {
          // hoverCursor should come from top-most subTarget,
          // so we walk the array backwards
          this.targets.concat().reverse().map(function (_target) {
            hoverCursor = _target.hoverCursor || hoverCursor;
          });
        }
        this.setCursor(hoverCursor);
      } else {
        this.setCursor(this.getCornerCursor(corner, target, e));
      }
    },
    /**
     * @private
     */
    getCornerCursor: function getCornerCursor(corner, target, e) {
      var control = target.controls[corner];
      return control.cursorStyleHandler(e, control, target);
    }
  });
})();
(function () {
  var min = Math.min,
    max = Math.max;
  fabric.util.object.extend(fabric.Canvas.prototype, /** @lends fabric.Canvas.prototype */{
    /**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     * @return {Boolean}
     */
    _shouldGroup: function _shouldGroup(e, target) {
      var activeObject = this._activeObject;
      return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection && (activeObject !== target || activeObject.type === 'activeSelection') && !target.onSelect({
        e: e
      });
    },
    /**
     * @private
     * @param {Event} e Event object
     * @param {fabric.Object} target
     */
    _handleGrouping: function _handleGrouping(e, target) {
      var activeObject = this._activeObject;
      // avoid multi select when shift click on a corner
      if (activeObject.__corner) {
        return;
      }
      if (target === activeObject) {
        // if it's a group, find target again, using activeGroup objects
        target = this.findTarget(e, true);
        // if even object is not found or we are on activeObjectCorner, bail out
        if (!target || !target.selectable) {
          return;
        }
      }
      if (activeObject && activeObject.type === 'activeSelection') {
        this._updateActiveSelection(target, e);
      } else {
        this._createActiveSelection(target, e);
      }
    },
    /**
     * @private
     */
    _updateActiveSelection: function _updateActiveSelection(target, e) {
      var activeSelection = this._activeObject,
        currentActiveObjects = activeSelection._objects.slice(0);
      if (activeSelection.contains(target)) {
        activeSelection.removeWithUpdate(target);
        this._hoveredTarget = target;
        this._hoveredTargets = this.targets.concat();
        if (activeSelection.size() === 1) {
          // activate last remaining object
          this._setActiveObject(activeSelection.item(0), e);
        }
      } else {
        activeSelection.addWithUpdate(target);
        this._hoveredTarget = activeSelection;
        this._hoveredTargets = this.targets.concat();
      }
      this._fireSelectionEvents(currentActiveObjects, e);
    },
    /**
     * @private
     */
    _createActiveSelection: function _createActiveSelection(target, e) {
      var currentActives = this.getActiveObjects(),
        group = this._createGroup(target);
      this._hoveredTarget = group;
      // ISSUE 4115: should we consider subTargets here?
      // this._hoveredTargets = [];
      // this._hoveredTargets = this.targets.concat();
      this._setActiveObject(group, e);
      this._fireSelectionEvents(currentActives, e);
    },
    /**
     * @private
     * @param {Object} target
     */
    _createGroup: function _createGroup(target) {
      var objects = this._objects,
        isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target),
        groupObjects = isActiveLower ? [this._activeObject, target] : [target, this._activeObject];
      this._activeObject.isEditing && this._activeObject.exitEditing();
      return new fabric.ActiveSelection(groupObjects, {
        canvas: this
      });
    },
    /**
     * @private
     * @param {Event} e mouse event
     */
    _groupSelectedObjects: function _groupSelectedObjects(e) {
      var group = this._collectObjects(e),
        aGroup;

      // do not create group for 1 element only
      if (group.length === 1) {
        this.setActiveObject(group[0], e);
      } else if (group.length > 1) {
        aGroup = new fabric.ActiveSelection(group.reverse(), {
          canvas: this
        });
        this.setActiveObject(aGroup, e);
      }
    },
    /**
     * @private
     */
    _collectObjects: function _collectObjects(e) {
      var group = [],
        currentObject,
        x1 = this._groupSelector.ex,
        y1 = this._groupSelector.ey,
        x2 = x1 + this._groupSelector.left,
        y2 = y1 + this._groupSelector.top,
        selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),
        selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2)),
        allowIntersect = !this.selectionFullyContained,
        isClick = x1 === x2 && y1 === y2;
      // we iterate reverse order to collect top first in case of click.
      for (var i = this._objects.length; i--;) {
        currentObject = this._objects[i];
        if (!currentObject || !currentObject.selectable || !currentObject.visible) {
          continue;
        }
        if (allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2, true) || currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2, true) || allowIntersect && currentObject.containsPoint(selectionX1Y1, null, true) || allowIntersect && currentObject.containsPoint(selectionX2Y2, null, true)) {
          group.push(currentObject);
          // only add one object if it's a click
          if (isClick) {
            break;
          }
        }
      }
      if (group.length > 1) {
        group = group.filter(function (object) {
          return !object.onSelect({
            e: e
          });
        });
      }
      return group;
    },
    /**
     * @private
     */
    _maybeGroupObjects: function _maybeGroupObjects(e) {
      if (this.selection && this._groupSelector) {
        this._groupSelectedObjects(e);
      }
      this.setCursor(this.defaultCursor);
      // clear selection and current transformation
      this._groupSelector = null;
    }
  });
})();
(function () {
  fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */{
    /**
     * Exports canvas element to a dataurl image. Note that when multiplier is used, cropping is scaled appropriately
     * @param {Object} [options] Options object
     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
     * @param {Number} [options.multiplier=1] Multiplier to scale by, to have consistent
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 2.0.0
     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
     * @see {@link http://jsfiddle.net/fabricjs/NfZVb/|jsFiddle demo}
     * @example <caption>Generate jpeg dataURL with lower quality</caption>
     * var dataURL = canvas.toDataURL({
     *   format: 'jpeg',
     *   quality: 0.8
     * });
     * @example <caption>Generate cropped png dataURL (clipping of canvas)</caption>
     * var dataURL = canvas.toDataURL({
     *   format: 'png',
     *   left: 100,
     *   top: 100,
     *   width: 200,
     *   height: 200
     * });
     * @example <caption>Generate double scaled png dataURL</caption>
     * var dataURL = canvas.toDataURL({
     *   format: 'png',
     *   multiplier: 2
     * });
     */
    toDataURL: function toDataURL(options) {
      options || (options = {});
      var format = options.format || 'png',
        quality = options.quality || 1,
        multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1),
        canvasEl = this.toCanvasElement(multiplier, options);
      return fabric.util.toDataURL(canvasEl, format, quality);
    },
    /**
     * Create a new HTMLCanvas element painted with the current canvas content.
     * No need to resize the actual one or repaint it.
     * Will transfer object ownership to a new canvas, paint it, and set everything back.
     * This is an intermediary step used to get to a dataUrl but also it is useful to
     * create quick image copies of a canvas without passing for the dataUrl string
     * @param {Number} [multiplier] a zoom factor.
     * @param {Object} [cropping] Cropping informations
     * @param {Number} [cropping.left] Cropping left offset.
     * @param {Number} [cropping.top] Cropping top offset.
     * @param {Number} [cropping.width] Cropping width.
     * @param {Number} [cropping.height] Cropping height.
     */
    toCanvasElement: function toCanvasElement(multiplier, cropping) {
      multiplier = multiplier || 1;
      cropping = cropping || {};
      var scaledWidth = (cropping.width || this.width) * multiplier,
        scaledHeight = (cropping.height || this.height) * multiplier,
        zoom = this.getZoom(),
        originalWidth = this.width,
        originalHeight = this.height,
        newZoom = zoom * multiplier,
        vp = this.viewportTransform,
        translateX = (vp[4] - (cropping.left || 0)) * multiplier,
        translateY = (vp[5] - (cropping.top || 0)) * multiplier,
        originalInteractive = this.interactive,
        newVp = [newZoom, 0, 0, newZoom, translateX, translateY],
        originalRetina = this.enableRetinaScaling,
        canvasEl = fabric.util.createCanvasElement(),
        originalContextTop = this.contextTop;
      canvasEl.width = scaledWidth;
      canvasEl.height = scaledHeight;
      this.contextTop = null;
      this.enableRetinaScaling = false;
      this.interactive = false;
      this.viewportTransform = newVp;
      this.width = scaledWidth;
      this.height = scaledHeight;
      this.calcViewportBoundaries();
      this.renderCanvas(canvasEl.getContext('2d'), this._objects);
      this.viewportTransform = vp;
      this.width = originalWidth;
      this.height = originalHeight;
      this.calcViewportBoundaries();
      this.interactive = originalInteractive;
      this.enableRetinaScaling = originalRetina;
      this.contextTop = originalContextTop;
      return canvasEl;
    }
  });
})();
fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */{
  /**
   * Populates canvas with data from the specified JSON.
   * JSON format must conform to the one of {@link fabric.Canvas#toJSON}
   * @param {String|Object} json JSON string or object
   * @param {Function} callback Callback, invoked when json is parsed
   *                            and corresponding objects (e.g: {@link fabric.Image})
   *                            are initialized
   * @param {Function} [reviver] Method for further parsing of JSON elements, called after each fabric object created.
   * @return {fabric.Canvas} instance
   * @chainable
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#deserialization}
   * @see {@link http://jsfiddle.net/fabricjs/fmgXt/|jsFiddle demo}
   * @example <caption>loadFromJSON</caption>
   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas));
   * @example <caption>loadFromJSON with reviver</caption>
   * canvas.loadFromJSON(json, canvas.renderAll.bind(canvas), function(o, object) {
   *   // `o` = json object
   *   // `object` = fabric.Object instance
   *   // ... do some stuff ...
   * });
   */
  loadFromJSON: function loadFromJSON(json, callback, reviver) {
    if (!json) {
      return;
    }

    // serialize if it wasn't already
    var serialized = typeof json === 'string' ? JSON.parse(json) : fabric.util.object.clone(json);
    var _this = this,
      clipPath = serialized.clipPath,
      renderOnAddRemove = this.renderOnAddRemove;
    this.renderOnAddRemove = false;
    delete serialized.clipPath;
    this._enlivenObjects(serialized.objects, function (enlivenedObjects) {
      _this.clear();
      _this._setBgOverlay(serialized, function () {
        if (clipPath) {
          _this._enlivenObjects([clipPath], function (enlivenedCanvasClip) {
            _this.clipPath = enlivenedCanvasClip[0];
            _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
          });
        } else {
          _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
        }
      });
    }, reviver);
    return this;
  },
  /**
   * @private
   * @param {Object} serialized Object with background and overlay information
   * @param {Array} restored canvas objects
   * @param {Function} cached renderOnAddRemove callback
   * @param {Function} callback Invoked after all background and overlay images/patterns loaded
   */
  __setupCanvas: function __setupCanvas(serialized, enlivenedObjects, renderOnAddRemove, callback) {
    var _this = this;
    enlivenedObjects.forEach(function (obj, index) {
      // we splice the array just in case some custom classes restored from JSON
      // will add more object to canvas at canvas init.
      _this.insertAt(obj, index);
    });
    this.renderOnAddRemove = renderOnAddRemove;
    // remove parts i cannot set as options
    delete serialized.objects;
    delete serialized.backgroundImage;
    delete serialized.overlayImage;
    delete serialized.background;
    delete serialized.overlay;
    // this._initOptions does too many things to just
    // call it. Normally loading an Object from JSON
    // create the Object instance. Here the Canvas is
    // already an instance and we are just loading things over it
    this._setOptions(serialized);
    this.renderAll();
    callback && callback();
  },
  /**
   * @private
   * @param {Object} serialized Object with background and overlay information
   * @param {Function} callback Invoked after all background and overlay images/patterns loaded
   */
  _setBgOverlay: function _setBgOverlay(serialized, callback) {
    var loaded = {
      backgroundColor: false,
      overlayColor: false,
      backgroundImage: false,
      overlayImage: false
    };
    if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {
      callback && callback();
      return;
    }
    var cbIfLoaded = function cbIfLoaded() {
      if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {
        callback && callback();
      }
    };
    this.__setBgOverlay('backgroundImage', serialized.backgroundImage, loaded, cbIfLoaded);
    this.__setBgOverlay('overlayImage', serialized.overlayImage, loaded, cbIfLoaded);
    this.__setBgOverlay('backgroundColor', serialized.background, loaded, cbIfLoaded);
    this.__setBgOverlay('overlayColor', serialized.overlay, loaded, cbIfLoaded);
  },
  /**
   * @private
   * @param {String} property Property to set (backgroundImage, overlayImage, backgroundColor, overlayColor)
   * @param {(Object|String)} value Value to set
   * @param {Object} loaded Set loaded property to true if property is set
   * @param {Object} callback Callback function to invoke after property is set
   */
  __setBgOverlay: function __setBgOverlay(property, value, loaded, callback) {
    var _this = this;
    if (!value) {
      loaded[property] = true;
      callback && callback();
      return;
    }
    if (property === 'backgroundImage' || property === 'overlayImage') {
      fabric.util.enlivenObjects([value], function (enlivedObject) {
        _this[property] = enlivedObject[0];
        loaded[property] = true;
        callback && callback();
      });
    } else {
      this['set' + fabric.util.string.capitalize(property, true)](value, function () {
        loaded[property] = true;
        callback && callback();
      });
    }
  },
  /**
   * @private
   * @param {Array} objects
   * @param {Function} callback
   * @param {Function} [reviver]
   */
  _enlivenObjects: function _enlivenObjects(objects, callback, reviver) {
    if (!objects || objects.length === 0) {
      callback && callback([]);
      return;
    }
    fabric.util.enlivenObjects(objects, function (enlivenedObjects) {
      callback && callback(enlivenedObjects);
    }, null, reviver);
  },
  /**
   * @private
   * @param {String} format
   * @param {Function} callback
   */
  _toDataURL: function _toDataURL(format, callback) {
    this.clone(function (clone) {
      callback(clone.toDataURL(format));
    });
  },
  /**
   * @private
   * @param {String} format
   * @param {Number} multiplier
   * @param {Function} callback
   */
  _toDataURLWithMultiplier: function _toDataURLWithMultiplier(format, multiplier, callback) {
    this.clone(function (clone) {
      callback(clone.toDataURLWithMultiplier(format, multiplier));
    });
  },
  /**
   * Clones canvas instance
   * @param {Object} [callback] Receives cloned instance as a first argument
   * @param {Array} [properties] Array of properties to include in the cloned canvas and children
   */
  clone: function clone(callback, properties) {
    var data = JSON.stringify(this.toJSON(properties));
    this.cloneWithoutData(function (clone) {
      clone.loadFromJSON(data, function () {
        callback && callback(clone);
      });
    });
  },
  /**
   * Clones canvas instance without cloning existing data.
   * This essentially copies canvas dimensions, clipping properties, etc.
   * but leaves data empty (so that you can populate it with your own)
   * @param {Object} [callback] Receives cloned instance as a first argument
   */
  cloneWithoutData: function cloneWithoutData(callback) {
    var el = fabric.util.createCanvasElement();
    el.width = this.width;
    el.height = this.height;
    var clone = new fabric.Canvas(el);
    if (this.backgroundImage) {
      clone.setBackgroundImage(this.backgroundImage.src, function () {
        clone.renderAll();
        callback && callback(clone);
      });
      clone.backgroundImageOpacity = this.backgroundImageOpacity;
      clone.backgroundImageStretch = this.backgroundImageStretch;
    } else {
      callback && callback(clone);
    }
  }
});
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    extend = fabric.util.object.extend,
    clone = fabric.util.object.clone,
    toFixed = fabric.util.toFixed,
    capitalize = fabric.util.string.capitalize,
    degreesToRadians = fabric.util.degreesToRadians,
    objectCaching = !fabric.isLikelyNode,
    ALIASING_LIMIT = 2;
  if (fabric.Object) {
    return;
  }

  /**
   * Root object class from which all 2d shape classes inherit from
   * @class fabric.Object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#objects}
   * @see {@link fabric.Object#initialize} for constructor definition
   *
   * @fires added
   * @fires removed
   *
   * @fires selected
   * @fires deselected
   * @fires modified
   * @fires modified
   * @fires moved
   * @fires scaled
   * @fires rotated
   * @fires skewed
   *
   * @fires rotating
   * @fires scaling
   * @fires moving
   * @fires skewing
   *
   * @fires mousedown
   * @fires mouseup
   * @fires mouseover
   * @fires mouseout
   * @fires mousewheel
   * @fires mousedblclick
   *
   * @fires dragover
   * @fires dragenter
   * @fires dragleave
   * @fires drop
   */
  fabric.Object = fabric.util.createClass(fabric.CommonMethods, /** @lends fabric.Object.prototype */{
    /**
     * Type of an object (rect, circle, path, etc.).
     * Note that this property is meant to be read-only and not meant to be modified.
     * If you modify, certain parts of Fabric (such as JSON loading) won't work correctly.
     * @type String
     * @default
     */
    type: 'object',
    /**
     * Horizontal origin of transformation of an object (one of "left", "right", "center")
     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
     * @type String
     * @default
     */
    originX: 'left',
    /**
     * Vertical origin of transformation of an object (one of "top", "bottom", "center")
     * See http://jsfiddle.net/1ow02gea/244/ on how originX/originY affect objects in groups
     * @type String
     * @default
     */
    originY: 'top',
    /**
     * Top position of an object. Note that by default it's relative to object top. You can change this by setting originY={top/center/bottom}
     * @type Number
     * @default
     */
    top: 0,
    /**
     * Left position of an object. Note that by default it's relative to object left. You can change this by setting originX={left/center/right}
     * @type Number
     * @default
     */
    left: 0,
    /**
     * Object width
     * @type Number
     * @default
     */
    width: 0,
    /**
     * Object height
     * @type Number
     * @default
     */
    height: 0,
    /**
     * Object scale factor (horizontal)
     * @type Number
     * @default
     */
    scaleX: 1,
    /**
     * Object scale factor (vertical)
     * @type Number
     * @default
     */
    scaleY: 1,
    /**
     * When true, an object is rendered as flipped horizontally
     * @type Boolean
     * @default
     */
    flipX: false,
    /**
     * When true, an object is rendered as flipped vertically
     * @type Boolean
     * @default
     */
    flipY: false,
    /**
     * Opacity of an object
     * @type Number
     * @default
     */
    opacity: 1,
    /**
     * Angle of rotation of an object (in degrees)
     * @type Number
     * @default
     */
    angle: 0,
    /**
     * Angle of skew on x axes of an object (in degrees)
     * @type Number
     * @default
     */
    skewX: 0,
    /**
     * Angle of skew on y axes of an object (in degrees)
     * @type Number
     * @default
     */
    skewY: 0,
    /**
     * Size of object's controlling corners (in pixels)
     * @type Number
     * @default
     */
    cornerSize: 13,
    /**
     * Size of object's controlling corners when touch interaction is detected
     * @type Number
     * @default
     */
    touchCornerSize: 24,
    /**
     * When true, object's controlling corners are rendered as transparent inside (i.e. stroke instead of fill)
     * @type Boolean
     * @default
     */
    transparentCorners: true,
    /**
     * Default cursor value used when hovering over this object on canvas
     * @type String
     * @default
     */
    hoverCursor: null,
    /**
     * Default cursor value used when moving this object on canvas
     * @type String
     * @default
     */
    moveCursor: null,
    /**
     * Padding between object and its controlling borders (in pixels)
     * @type Number
     * @default
     */
    padding: 0,
    /**
     * Color of controlling borders of an object (when it's active)
     * @type String
     * @default
     */
    borderColor: 'rgb(178,204,255)',
    /**
     * Array specifying dash pattern of an object's borders (hasBorder must be true)
     * @since 1.6.2
     * @type Array
     */
    borderDashArray: null,
    /**
     * Color of controlling corners of an object (when it's active)
     * @type String
     * @default
     */
    cornerColor: 'rgb(178,204,255)',
    /**
     * Color of controlling corners of an object (when it's active and transparentCorners false)
     * @since 1.6.2
     * @type String
     * @default
     */
    cornerStrokeColor: null,
    /**
     * Specify style of control, 'rect' or 'circle'
     * @since 1.6.2
     * @type String
     */
    cornerStyle: 'rect',
    /**
     * Array specifying dash pattern of an object's control (hasBorder must be true)
     * @since 1.6.2
     * @type Array
     */
    cornerDashArray: null,
    /**
     * When true, this object will use center point as the origin of transformation
     * when being scaled via the controls.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */
    centeredScaling: false,
    /**
     * When true, this object will use center point as the origin of transformation
     * when being rotated via the controls.
     * <b>Backwards incompatibility note:</b> This property replaces "centerTransform" (Boolean).
     * @since 1.3.4
     * @type Boolean
     * @default
     */
    centeredRotation: true,
    /**
     * Color of object's fill
     * takes css colors https://www.w3.org/TR/css-color-3/
     * @type String
     * @default
     */
    fill: 'rgb(0,0,0)',
    /**
     * Fill rule used to fill an object
     * accepted values are nonzero, evenodd
     * <b>Backwards incompatibility note:</b> This property was used for setting globalCompositeOperation until v1.4.12 (use `fabric.Object#globalCompositeOperation` instead)
     * @type String
     * @default
     */
    fillRule: 'nonzero',
    /**
     * Composite rule used for canvas globalCompositeOperation
     * @type String
     * @default
     */
    globalCompositeOperation: 'source-over',
    /**
     * Background color of an object.
     * takes css colors https://www.w3.org/TR/css-color-3/
     * @type String
     * @default
     */
    backgroundColor: '',
    /**
     * Selection Background color of an object. colored layer behind the object when it is active.
     * does not mix good with globalCompositeOperation methods.
     * @type String
     * @default
     */
    selectionBackgroundColor: '',
    /**
     * When defined, an object is rendered via stroke and this property specifies its color
     * takes css colors https://www.w3.org/TR/css-color-3/
     * @type String
     * @default
     */
    stroke: null,
    /**
     * Width of a stroke used to render this object
     * @type Number
     * @default
     */
    strokeWidth: 1,
    /**
     * Array specifying dash pattern of an object's stroke (stroke must be defined)
     * @type Array
     */
    strokeDashArray: null,
    /**
     * Line offset of an object's stroke
     * @type Number
     * @default
     */
    strokeDashOffset: 0,
    /**
     * Line endings style of an object's stroke (one of "butt", "round", "square")
     * @type String
     * @default
     */
    strokeLineCap: 'butt',
    /**
     * Corner style of an object's stroke (one of "bevel", "round", "miter")
     * @type String
     * @default
     */
    strokeLineJoin: 'miter',
    /**
     * Maximum miter length (used for strokeLineJoin = "miter") of an object's stroke
     * @type Number
     * @default
     */
    strokeMiterLimit: 4,
    /**
     * Shadow object representing shadow of this shape
     * @type fabric.Shadow
     * @default
     */
    shadow: null,
    /**
     * Opacity of object's controlling borders when object is active and moving
     * @type Number
     * @default
     */
    borderOpacityWhenMoving: 0.4,
    /**
     * Scale factor of object's controlling borders
     * bigger number will make a thicker border
     * border is 1, so this is basically a border thickness
     * since there is no way to change the border itself.
     * @type Number
     * @default
     */
    borderScaleFactor: 1,
    /**
     * Minimum allowed scale value of an object
     * @type Number
     * @default
     */
    minScaleLimit: 0,
    /**
     * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection).
     * But events still fire on it.
     * @type Boolean
     * @default
     */
    selectable: true,
    /**
     * When set to `false`, an object can not be a target of events. All events propagate through it. Introduced in v1.3.4
     * @type Boolean
     * @default
     */
    evented: true,
    /**
     * When set to `false`, an object is not rendered on canvas
     * @type Boolean
     * @default
     */
    visible: true,
    /**
     * When set to `false`, object's controls are not displayed and can not be used to manipulate object
     * @type Boolean
     * @default
     */
    hasControls: true,
    /**
     * When set to `false`, object's controlling borders are not rendered
     * @type Boolean
     * @default
     */
    hasBorders: true,
    /**
     * When set to `true`, objects are "found" on canvas on per-pixel basis rather than according to bounding box
     * @type Boolean
     * @default
     */
    perPixelTargetFind: false,
    /**
     * When `false`, default object's values are not included in its serialization
     * @type Boolean
     * @default
     */
    includeDefaultValues: true,
    /**
     * When `true`, object horizontal movement is locked
     * @type Boolean
     * @default
     */
    lockMovementX: false,
    /**
     * When `true`, object vertical movement is locked
     * @type Boolean
     * @default
     */
    lockMovementY: false,
    /**
     * When `true`, object rotation is locked
     * @type Boolean
     * @default
     */
    lockRotation: false,
    /**
     * When `true`, object horizontal scaling is locked
     * @type Boolean
     * @default
     */
    lockScalingX: false,
    /**
     * When `true`, object vertical scaling is locked
     * @type Boolean
     * @default
     */
    lockScalingY: false,
    /**
     * When `true`, object horizontal skewing is locked
     * @type Boolean
     * @default
     */
    lockSkewingX: false,
    /**
     * When `true`, object vertical skewing is locked
     * @type Boolean
     * @default
     */
    lockSkewingY: false,
    /**
     * When `true`, object cannot be flipped by scaling into negative values
     * @type Boolean
     * @default
     */
    lockScalingFlip: false,
    /**
     * When `true`, object is not exported in OBJECT/JSON
     * @since 1.6.3
     * @type Boolean
     * @default
     */
    excludeFromExport: false,
    /**
     * When `true`, object is cached on an additional canvas.
     * When `false`, object is not cached unless necessary ( clipPath )
     * default to true
     * @since 1.7.0
     * @type Boolean
     * @default true
     */
    objectCaching: objectCaching,
    /**
     * When `true`, object properties are checked for cache invalidation. In some particular
     * situation you may want this to be disabled ( spray brush, very big, groups)
     * or if your application does not allow you to modify properties for groups child you want
     * to disable it for groups.
     * default to false
     * since 1.7.0
     * @type Boolean
     * @default false
     */
    statefullCache: false,
    /**
     * When `true`, cache does not get updated during scaling. The picture will get blocky if scaled
     * too much and will be redrawn with correct details at the end of scaling.
     * this setting is performance and application dependant.
     * default to true
     * since 1.7.0
     * @type Boolean
     * @default true
     */
    noScaleCache: true,
    /**
     * When `false`, the stoke width will scale with the object.
     * When `true`, the stroke will always match the exact pixel size entered for stroke width.
     * this Property does not work on Text classes or drawing call that uses strokeText,fillText methods
     * default to false
     * @since 2.6.0
     * @type Boolean
     * @default false
     * @type Boolean
     * @default false
     */
    strokeUniform: false,
    /**
     * When set to `true`, object's cache will be rerendered next render call.
     * since 1.7.0
     * @type Boolean
     * @default true
     */
    dirty: true,
    /**
     * keeps the value of the last hovered corner during mouse move.
     * 0 is no corner, or 'mt', 'ml', 'mtr' etc..
     * It should be private, but there is no harm in using it as
     * a read-only property.
     * @type number|string|any
     * @default 0
     */
    __corner: 0,
    /**
     * Determines if the fill or the stroke is drawn first (one of "fill" or "stroke")
     * @type String
     * @default
     */
    paintFirst: 'fill',
    /**
     * When 'down', object is set to active on mousedown/touchstart
     * When 'up', object is set to active on mouseup/touchend
     * Experimental. Let's see if this breaks anything before supporting officially
     * @private
     * since 4.4.0
     * @type String
     * @default 'down'
     */
    activeOn: 'down',
    /**
     * List of properties to consider when checking if state
     * of an object is changed (fabric.Object#hasStateChanged)
     * as well as for history (undo/redo) purposes
     * @type Array
     */
    stateProperties: ('top left width height scaleX scaleY flipX flipY originX originY transformMatrix ' + 'stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit ' + 'angle opacity fill globalCompositeOperation shadow visible backgroundColor ' + 'skewX skewY fillRule paintFirst clipPath strokeUniform').split(' '),
    /**
     * List of properties to consider when checking if cache needs refresh
     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single
     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty
     * and refreshed at the next render
     * @type Array
     */
    cacheProperties: ('fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform' + ' strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath').split(' '),
    /**
     * List of properties to consider for animating colors.
     * @type Array
     */
    colorProperties: 'fill stroke backgroundColor'.split(' '),
    /**
     * a fabricObject that, without stroke define a clipping area with their shape. filled in black
     * the clipPath object gets used when the object has rendered, and the context is placed in the center
     * of the object cacheCanvas.
     * If you want 0,0 of a clipPath to align with an object center, use clipPath.originX/Y to 'center'
     * @type fabric.Object
     */
    clipPath: undefined,
    /**
     * Meaningful ONLY when the object is used as clipPath.
     * if true, the clipPath will make the object clip to the outside of the clipPath
     * since 2.4.0
     * @type boolean
     * @default false
     */
    inverted: false,
    /**
     * Meaningful ONLY when the object is used as clipPath.
     * if true, the clipPath will have its top and left relative to canvas, and will
     * not be influenced by the object transform. This will make the clipPath relative
     * to the canvas, but clipping just a particular object.
     * WARNING this is beta, this feature may change or be renamed.
     * since 2.4.0
     * @type boolean
     * @default false
     */
    absolutePositioned: false,
    /**
     * Constructor
     * @param {Object} [options] Options object
     */
    initialize: function initialize(options) {
      if (options) {
        this.setOptions(options);
      }
    },
    /**
     * Create a the canvas used to keep the cached copy of the object
     * @private
     */
    _createCacheCanvas: function _createCacheCanvas() {
      this._cacheProperties = {};
      this._cacheCanvas = fabric.util.createCanvasElement();
      this._cacheContext = this._cacheCanvas.getContext('2d');
      this._updateCacheCanvas();
      // if canvas gets created, is empty, so dirty.
      this.dirty = true;
    },
    /**
     * Limit the cache dimensions so that X * Y do not cross fabric.perfLimitSizeTotal
     * and each side do not cross fabric.cacheSideLimit
     * those numbers are configurable so that you can get as much detail as you want
     * making bargain with performances.
     * @param {Object} dims
     * @param {Object} dims.width width of canvas
     * @param {Object} dims.height height of canvas
     * @param {Object} dims.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @param {Object} dims.zoomY zoomY zoom value to unscale the canvas before drawing cache
     * @return {Object}.width width of canvas
     * @return {Object}.height height of canvas
     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
     */
    _limitCacheSize: function _limitCacheSize(dims) {
      var perfLimitSizeTotal = fabric.perfLimitSizeTotal,
        width = dims.width,
        height = dims.height,
        max = fabric.maxCacheSideLimit,
        min = fabric.minCacheSideLimit;
      if (width <= max && height <= max && width * height <= perfLimitSizeTotal) {
        if (width < min) {
          dims.width = min;
        }
        if (height < min) {
          dims.height = min;
        }
        return dims;
      }
      var ar = width / height,
        limitedDims = fabric.util.limitDimsByArea(ar, perfLimitSizeTotal),
        capValue = fabric.util.capValue,
        x = capValue(min, limitedDims.x, max),
        y = capValue(min, limitedDims.y, max);
      if (width > x) {
        dims.zoomX /= width / x;
        dims.width = x;
        dims.capped = true;
      }
      if (height > y) {
        dims.zoomY /= height / y;
        dims.height = y;
        dims.capped = true;
      }
      return dims;
    },
    /**
     * Return the dimension and the zoom level needed to create a cache canvas
     * big enough to host the object to be cached.
     * @private
     * @return {Object}.x width of object to be cached
     * @return {Object}.y height of object to be cached
     * @return {Object}.width width of canvas
     * @return {Object}.height height of canvas
     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
     */
    _getCacheCanvasDimensions: function _getCacheCanvasDimensions() {
      var objectScale = this.getTotalObjectScaling(),
        // caculate dimensions without skewing
        dim = this._getTransformedDimensions(0, 0),
        neededX = dim.x * objectScale.scaleX / this.scaleX,
        neededY = dim.y * objectScale.scaleY / this.scaleY;
      return {
        // for sure this ALIASING_LIMIT is slightly creating problem
        // in situation in which the cache canvas gets an upper limit
        // also objectScale contains already scaleX and scaleY
        width: neededX + ALIASING_LIMIT,
        height: neededY + ALIASING_LIMIT,
        zoomX: objectScale.scaleX,
        zoomY: objectScale.scaleY,
        x: neededX,
        y: neededY
      };
    },
    /**
     * Update width and height of the canvas for cache
     * returns true or false if canvas needed resize.
     * @private
     * @return {Boolean} true if the canvas has been resized
     */
    _updateCacheCanvas: function _updateCacheCanvas() {
      var targetCanvas = this.canvas;
      if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {
        var target = targetCanvas._currentTransform.target,
          action = targetCanvas._currentTransform.action;
        if (this === target && action.slice && action.slice(0, 5) === 'scale') {
          return false;
        }
      }
      var canvas = this._cacheCanvas,
        dims = this._limitCacheSize(this._getCacheCanvasDimensions()),
        minCacheSize = fabric.minCacheSideLimit,
        width = dims.width,
        height = dims.height,
        drawingWidth,
        drawingHeight,
        zoomX = dims.zoomX,
        zoomY = dims.zoomY,
        dimensionsChanged = width !== this.cacheWidth || height !== this.cacheHeight,
        zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY,
        shouldRedraw = dimensionsChanged || zoomChanged,
        additionalWidth = 0,
        additionalHeight = 0,
        shouldResizeCanvas = false;
      if (dimensionsChanged) {
        var canvasWidth = this._cacheCanvas.width,
          canvasHeight = this._cacheCanvas.height,
          sizeGrowing = width > canvasWidth || height > canvasHeight,
          sizeShrinking = (width < canvasWidth * 0.9 || height < canvasHeight * 0.9) && canvasWidth > minCacheSize && canvasHeight > minCacheSize;
        shouldResizeCanvas = sizeGrowing || sizeShrinking;
        if (sizeGrowing && !dims.capped && (width > minCacheSize || height > minCacheSize)) {
          additionalWidth = width * 0.1;
          additionalHeight = height * 0.1;
        }
      }
      if (this instanceof fabric.Text && this.path) {
        shouldRedraw = true;
        shouldResizeCanvas = true;
        additionalWidth += this.getHeightOfLine(0) * this.zoomX;
        additionalHeight += this.getHeightOfLine(0) * this.zoomY;
      }
      if (shouldRedraw) {
        if (shouldResizeCanvas) {
          canvas.width = Math.ceil(width + additionalWidth);
          canvas.height = Math.ceil(height + additionalHeight);
        } else {
          this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);
          this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);
        }
        drawingWidth = dims.x / 2;
        drawingHeight = dims.y / 2;
        this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;
        this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;
        this.cacheWidth = width;
        this.cacheHeight = height;
        this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);
        this._cacheContext.scale(zoomX, zoomY);
        this.zoomX = zoomX;
        this.zoomY = zoomY;
        return true;
      }
      return false;
    },
    /**
     * Sets object's properties from options
     * @param {Object} [options] Options object
     */
    setOptions: function setOptions(options) {
      this._setOptions(options);
      this._initGradient(options.fill, 'fill');
      this._initGradient(options.stroke, 'stroke');
      this._initPattern(options.fill, 'fill');
      this._initPattern(options.stroke, 'stroke');
    },
    /**
     * Transforms context when rendering an object
     * @param {CanvasRenderingContext2D} ctx Context
     */
    transform: function transform(ctx) {
      var needFullTransform = this.group && !this.group._transformDone || this.group && this.canvas && ctx === this.canvas.contextTop;
      var m = this.calcTransformMatrix(!needFullTransform);
      ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
    },
    /**
     * Returns an object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS,
        object = {
          type: this.type,
          version: fabric.version,
          originX: this.originX,
          originY: this.originY,
          left: toFixed(this.left, NUM_FRACTION_DIGITS),
          top: toFixed(this.top, NUM_FRACTION_DIGITS),
          width: toFixed(this.width, NUM_FRACTION_DIGITS),
          height: toFixed(this.height, NUM_FRACTION_DIGITS),
          fill: this.fill && this.fill.toObject ? this.fill.toObject() : this.fill,
          stroke: this.stroke && this.stroke.toObject ? this.stroke.toObject() : this.stroke,
          strokeWidth: toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),
          strokeDashArray: this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,
          strokeLineCap: this.strokeLineCap,
          strokeDashOffset: this.strokeDashOffset,
          strokeLineJoin: this.strokeLineJoin,
          strokeUniform: this.strokeUniform,
          strokeMiterLimit: toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),
          scaleX: toFixed(this.scaleX, NUM_FRACTION_DIGITS),
          scaleY: toFixed(this.scaleY, NUM_FRACTION_DIGITS),
          angle: toFixed(this.angle, NUM_FRACTION_DIGITS),
          flipX: this.flipX,
          flipY: this.flipY,
          opacity: toFixed(this.opacity, NUM_FRACTION_DIGITS),
          shadow: this.shadow && this.shadow.toObject ? this.shadow.toObject() : this.shadow,
          visible: this.visible,
          backgroundColor: this.backgroundColor,
          fillRule: this.fillRule,
          paintFirst: this.paintFirst,
          globalCompositeOperation: this.globalCompositeOperation,
          skewX: toFixed(this.skewX, NUM_FRACTION_DIGITS),
          skewY: toFixed(this.skewY, NUM_FRACTION_DIGITS)
        };
      if (this.clipPath && !this.clipPath.excludeFromExport) {
        object.clipPath = this.clipPath.toObject(propertiesToInclude);
        object.clipPath.inverted = this.clipPath.inverted;
        object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;
      }
      fabric.util.populateWithProperties(this, object, propertiesToInclude);
      if (!this.includeDefaultValues) {
        object = this._removeDefaultValues(object);
      }
      return object;
    },
    /**
     * Returns (dataless) object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
    toDatalessObject: function toDatalessObject(propertiesToInclude) {
      // will be overwritten by subclasses
      return this.toObject(propertiesToInclude);
    },
    /**
     * @private
     * @param {Object} object
     */
    _removeDefaultValues: function _removeDefaultValues(object) {
      var prototype = fabric.util.getKlass(object.type).prototype,
        stateProperties = prototype.stateProperties;
      stateProperties.forEach(function (prop) {
        if (prop === 'left' || prop === 'top') {
          return;
        }
        if (object[prop] === prototype[prop]) {
          delete object[prop];
        }
        // basically a check for [] === []
        if (Array.isArray(object[prop]) && Array.isArray(prototype[prop]) && object[prop].length === 0 && prototype[prop].length === 0) {
          delete object[prop];
        }
      });
      return object;
    },
    /**
     * Returns a string representation of an instance
     * @return {String}
     */
    toString: function toString() {
      return '#<fabric.' + capitalize(this.type) + '>';
    },
    /**
     * Return the object scale factor counting also the group scaling
     * @return {Object} object with scaleX and scaleY properties
     */
    getObjectScaling: function getObjectScaling() {
      // if the object is a top level one, on the canvas, we go for simple aritmetic
      // otherwise the complex method with angles will return approximations and decimals
      // and will likely kill the cache when not needed
      // https://github.com/fabricjs/fabric.js/issues/7157
      if (!this.group) {
        return {
          scaleX: this.scaleX,
          scaleY: this.scaleY
        };
      }
      // if we are inside a group total zoom calculation is complex, we defer to generic matrices
      var options = fabric.util.qrDecompose(this.calcTransformMatrix());
      return {
        scaleX: Math.abs(options.scaleX),
        scaleY: Math.abs(options.scaleY)
      };
    },
    /**
     * Return the object scale factor counting also the group scaling, zoom and retina
     * @return {Object} object with scaleX and scaleY properties
     */
    getTotalObjectScaling: function getTotalObjectScaling() {
      var scale = this.getObjectScaling(),
        scaleX = scale.scaleX,
        scaleY = scale.scaleY;
      if (this.canvas) {
        var zoom = this.canvas.getZoom();
        var retina = this.canvas.getRetinaScaling();
        scaleX *= zoom * retina;
        scaleY *= zoom * retina;
      }
      return {
        scaleX: scaleX,
        scaleY: scaleY
      };
    },
    /**
     * Return the object opacity counting also the group property
     * @return {Number}
     */
    getObjectOpacity: function getObjectOpacity() {
      var opacity = this.opacity;
      if (this.group) {
        opacity *= this.group.getObjectOpacity();
      }
      return opacity;
    },
    /**
     * @private
     * @param {String} key
     * @param {*} value
     * @return {fabric.Object} thisArg
     */
    _set: function _set(key, value) {
      var shouldConstrainValue = key === 'scaleX' || key === 'scaleY',
        isChanged = this[key] !== value,
        groupNeedsUpdate = false;
      if (shouldConstrainValue) {
        value = this._constrainScale(value);
      }
      if (key === 'scaleX' && value < 0) {
        this.flipX = !this.flipX;
        value *= -1;
      } else if (key === 'scaleY' && value < 0) {
        this.flipY = !this.flipY;
        value *= -1;
      } else if (key === 'shadow' && value && !(value instanceof fabric.Shadow)) {
        value = new fabric.Shadow(value);
      } else if (key === 'dirty' && this.group) {
        this.group.set('dirty', value);
      }
      this[key] = value;
      if (isChanged) {
        groupNeedsUpdate = this.group && this.group.isOnACache();
        if (this.cacheProperties.indexOf(key) > -1) {
          this.dirty = true;
          groupNeedsUpdate && this.group.set('dirty', true);
        } else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {
          this.group.set('dirty', true);
        }
      }
      return this;
    },
    /**
     * This callback function is called by the parent group of an object every
     * time a non-delegated property changes on the group. It is passed the key
     * and value as parameters. Not adding in this function's signature to avoid
     * Travis build error about unused variables.
     */
    setOnGroup: function setOnGroup() {
      // implemented by sub-classes, as needed.
    },
    /**
     * Retrieves viewportTransform from Object's canvas if possible
     * @method getViewportTransform
     * @memberOf fabric.Object.prototype
     * @return {Array}
     */
    getViewportTransform: function getViewportTransform() {
      if (this.canvas && this.canvas.viewportTransform) {
        return this.canvas.viewportTransform;
      }
      return fabric.iMatrix.concat();
    },
    /*
     * @private
     * return if the object would be visible in rendering
     * @memberOf fabric.Object.prototype
     * @return {Boolean}
     */
    isNotVisible: function isNotVisible() {
      return this.opacity === 0 || !this.width && !this.height && this.strokeWidth === 0 || !this.visible;
    },
    /**
     * Renders an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    render: function render(ctx) {
      // do not render if width/height are zeros or object is not visible
      if (this.isNotVisible()) {
        return;
      }
      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
        return;
      }
      ctx.save();
      this._setupCompositeOperation(ctx);
      this.drawSelectionBackground(ctx);
      this.transform(ctx);
      this._setOpacity(ctx);
      this._setShadow(ctx, this);
      if (this.shouldCache()) {
        this.renderCache();
        this.drawCacheOnCanvas(ctx);
      } else {
        this._removeCacheCanvas();
        this.dirty = false;
        this.drawObject(ctx);
        if (this.objectCaching && this.statefullCache) {
          this.saveState({
            propertySet: 'cacheProperties'
          });
        }
      }
      ctx.restore();
    },
    renderCache: function renderCache(options) {
      options = options || {};
      if (!this._cacheCanvas || !this._cacheContext) {
        this._createCacheCanvas();
      }
      if (this.isCacheDirty()) {
        this.statefullCache && this.saveState({
          propertySet: 'cacheProperties'
        });
        this.drawObject(this._cacheContext, options.forClipping);
        this.dirty = false;
      }
    },
    /**
     * Remove cacheCanvas and its dimensions from the objects
     */
    _removeCacheCanvas: function _removeCacheCanvas() {
      this._cacheCanvas = null;
      this._cacheContext = null;
      this.cacheWidth = 0;
      this.cacheHeight = 0;
    },
    /**
     * return true if the object will draw a stroke
     * Does not consider text styles. This is just a shortcut used at rendering time
     * We want it to be an approximation and be fast.
     * wrote to avoid extra caching, it has to return true when stroke happens,
     * can guess when it will not happen at 100% chance, does not matter if it misses
     * some use case where the stroke is invisible.
     * @since 3.0.0
     * @returns Boolean
     */
    hasStroke: function hasStroke() {
      return this.stroke && this.stroke !== 'transparent' && this.strokeWidth !== 0;
    },
    /**
     * return true if the object will draw a fill
     * Does not consider text styles. This is just a shortcut used at rendering time
     * We want it to be an approximation and be fast.
     * wrote to avoid extra caching, it has to return true when fill happens,
     * can guess when it will not happen at 100% chance, does not matter if it misses
     * some use case where the fill is invisible.
     * @since 3.0.0
     * @returns Boolean
     */
    hasFill: function hasFill() {
      return this.fill && this.fill !== 'transparent';
    },
    /**
     * When set to `true`, force the object to have its own cache, even if it is inside a group
     * it may be needed when your object behave in a particular way on the cache and always needs
     * its own isolated canvas to render correctly.
     * Created to be overridden
     * since 1.7.12
     * @returns Boolean
     */
    needsItsOwnCache: function needsItsOwnCache() {
      if (this.paintFirst === 'stroke' && this.hasFill() && this.hasStroke() && _typeof(this.shadow) === 'object') {
        return true;
      }
      if (this.clipPath) {
        return true;
      }
      return false;
    },
    /**
     * Decide if the object should cache or not. Create its own cache level
     * objectCaching is a global flag, wins over everything
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group outside is cached.
     * Read as: cache if is needed, or if the feature is enabled but we are not already caching.
     * @return {Boolean}
     */
    shouldCache: function shouldCache() {
      this.ownCaching = this.needsItsOwnCache() || this.objectCaching && (!this.group || !this.group.isOnACache());
      return this.ownCaching;
    },
    /**
     * Check if this object or a child object will cast a shadow
     * used by Group.shouldCache to know if child has a shadow recursively
     * @return {Boolean}
     */
    willDrawShadow: function willDrawShadow() {
      return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);
    },
    /**
     * Execute the drawing operation for an object clipPath
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {fabric.Object} clipPath
     */
    drawClipPathOnCache: function drawClipPathOnCache(ctx, clipPath) {
      ctx.save();
      // DEBUG: uncomment this line, comment the following
      // ctx.globalAlpha = 0.4
      if (clipPath.inverted) {
        ctx.globalCompositeOperation = 'destination-out';
      } else {
        ctx.globalCompositeOperation = 'destination-in';
      }
      //ctx.scale(1 / 2, 1 / 2);
      if (clipPath.absolutePositioned) {
        var m = fabric.util.invertTransform(this.calcTransformMatrix());
        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
      }
      clipPath.transform(ctx);
      ctx.scale(1 / clipPath.zoomX, 1 / clipPath.zoomY);
      ctx.drawImage(clipPath._cacheCanvas, -clipPath.cacheTranslationX, -clipPath.cacheTranslationY);
      ctx.restore();
    },
    /**
     * Execute the drawing operation for an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    drawObject: function drawObject(ctx, forClipping) {
      var originalFill = this.fill,
        originalStroke = this.stroke;
      if (forClipping) {
        this.fill = 'black';
        this.stroke = '';
        this._setClippingProperties(ctx);
      } else {
        this._renderBackground(ctx);
      }
      this._render(ctx);
      this._drawClipPath(ctx, this.clipPath);
      this.fill = originalFill;
      this.stroke = originalStroke;
    },
    /**
     * Prepare clipPath state and cache and draw it on instance's cache
     * @param {CanvasRenderingContext2D} ctx
     * @param {fabric.Object} clipPath
     */
    _drawClipPath: function _drawClipPath(ctx, clipPath) {
      if (!clipPath) {
        return;
      }
      // needed to setup a couple of variables
      // path canvas gets overridden with this one.
      // TODO find a better solution?
      clipPath.canvas = this.canvas;
      clipPath.shouldCache();
      clipPath._transformDone = true;
      clipPath.renderCache({
        forClipping: true
      });
      this.drawClipPathOnCache(ctx, clipPath);
    },
    /**
     * Paint the cached copy of the object on the target context.
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    drawCacheOnCanvas: function drawCacheOnCanvas(ctx) {
      ctx.scale(1 / this.zoomX, 1 / this.zoomY);
      ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);
    },
    /**
     * Check if cache is dirty
     * @param {Boolean} skipCanvas skip canvas checks because this object is painted
     * on parent canvas.
     */
    isCacheDirty: function isCacheDirty(skipCanvas) {
      if (this.isNotVisible()) {
        return false;
      }
      if (this._cacheCanvas && this._cacheContext && !skipCanvas && this._updateCacheCanvas()) {
        // in this case the context is already cleared.
        return true;
      } else {
        if (this.dirty || this.clipPath && this.clipPath.absolutePositioned || this.statefullCache && this.hasStateChanged('cacheProperties')) {
          if (this._cacheCanvas && this._cacheContext && !skipCanvas) {
            var width = this.cacheWidth / this.zoomX;
            var height = this.cacheHeight / this.zoomY;
            this._cacheContext.clearRect(-width / 2, -height / 2, width, height);
          }
          return true;
        }
      }
      return false;
    },
    /**
     * Draws a background for the object big as its untransformed dimensions
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderBackground: function _renderBackground(ctx) {
      if (!this.backgroundColor) {
        return;
      }
      var dim = this._getNonTransformedDimensions();
      ctx.fillStyle = this.backgroundColor;
      ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);
      // if there is background color no other shadows
      // should be casted
      this._removeShadow(ctx);
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _setOpacity: function _setOpacity(ctx) {
      if (this.group && !this.group._transformDone) {
        ctx.globalAlpha = this.getObjectOpacity();
      } else {
        ctx.globalAlpha *= this.opacity;
      }
    },
    _setStrokeStyles: function _setStrokeStyles(ctx, decl) {
      var stroke = decl.stroke;
      if (stroke) {
        ctx.lineWidth = decl.strokeWidth;
        ctx.lineCap = decl.strokeLineCap;
        ctx.lineDashOffset = decl.strokeDashOffset;
        ctx.lineJoin = decl.strokeLineJoin;
        ctx.miterLimit = decl.strokeMiterLimit;
        if (stroke.toLive) {
          if (stroke.gradientUnits === 'percentage' || stroke.gradientTransform || stroke.patternTransform) {
            // need to transform gradient in a pattern.
            // this is a slow process. If you are hitting this codepath, and the object
            // is not using caching, you should consider switching it on.
            // we need a canvas as big as the current object caching canvas.
            this._applyPatternForTransformedGradient(ctx, stroke);
          } else {
            // is a simple gradient or pattern
            ctx.strokeStyle = stroke.toLive(ctx, this);
            this._applyPatternGradientTransform(ctx, stroke);
          }
        } else {
          // is a color
          ctx.strokeStyle = decl.stroke;
        }
      }
    },
    _setFillStyles: function _setFillStyles(ctx, decl) {
      var fill = decl.fill;
      if (fill) {
        if (fill.toLive) {
          ctx.fillStyle = fill.toLive(ctx, this);
          this._applyPatternGradientTransform(ctx, decl.fill);
        } else {
          ctx.fillStyle = fill;
        }
      }
    },
    _setClippingProperties: function _setClippingProperties(ctx) {
      ctx.globalAlpha = 1;
      ctx.strokeStyle = 'transparent';
      ctx.fillStyle = '#000000';
    },
    /**
     * @private
     * Sets line dash
     * @param {CanvasRenderingContext2D} ctx Context to set the dash line on
     * @param {Array} dashArray array representing dashes
     */
    _setLineDash: function _setLineDash(ctx, dashArray) {
      if (!dashArray || dashArray.length === 0) {
        return;
      }
      // Spec requires the concatenation of two copies the dash list when the number of elements is odd
      if (1 & dashArray.length) {
        dashArray.push.apply(dashArray, dashArray);
      }
      ctx.setLineDash(dashArray);
    },
    /**
     * Renders controls and borders for the object
     * the context here is not transformed
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} [styleOverride] properties to override the object style
     */
    _renderControls: function _renderControls(ctx, styleOverride) {
      var vpt = this.getViewportTransform(),
        matrix = this.calcTransformMatrix(),
        options,
        drawBorders,
        drawControls;
      styleOverride = styleOverride || {};
      drawBorders = typeof styleOverride.hasBorders !== 'undefined' ? styleOverride.hasBorders : this.hasBorders;
      drawControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls;
      matrix = fabric.util.multiplyTransformMatrices(vpt, matrix);
      options = fabric.util.qrDecompose(matrix);
      ctx.save();
      ctx.translate(options.translateX, options.translateY);
      ctx.lineWidth = 1 * this.borderScaleFactor;
      if (!this.group) {
        ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
      }
      if (this.flipX) {
        options.angle -= 180;
      }
      ctx.rotate(degreesToRadians(this.group ? options.angle : this.angle));
      if (styleOverride.forActiveSelection || this.group) {
        drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);
      } else {
        drawBorders && this.drawBorders(ctx, styleOverride);
      }
      drawControls && this.drawControls(ctx, styleOverride);
      ctx.restore();
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _setShadow: function _setShadow(ctx) {
      if (!this.shadow) {
        return;
      }
      var shadow = this.shadow,
        canvas = this.canvas,
        scaling,
        multX = canvas && canvas.viewportTransform[0] || 1,
        multY = canvas && canvas.viewportTransform[3] || 1;
      if (shadow.nonScaling) {
        scaling = {
          scaleX: 1,
          scaleY: 1
        };
      } else {
        scaling = this.getObjectScaling();
      }
      if (canvas && canvas._isRetinaScaling()) {
        multX *= fabric.devicePixelRatio;
        multY *= fabric.devicePixelRatio;
      }
      ctx.shadowColor = shadow.color;
      ctx.shadowBlur = shadow.blur * fabric.browserShadowBlurConstant * (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;
      ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;
      ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _removeShadow: function _removeShadow(ctx) {
      if (!this.shadow) {
        return;
      }
      ctx.shadowColor = '';
      ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} filler fabric.Pattern or fabric.Gradient
     * @return {Object} offset.offsetX offset for text rendering
     * @return {Object} offset.offsetY offset for text rendering
     */
    _applyPatternGradientTransform: function _applyPatternGradientTransform(ctx, filler) {
      if (!filler || !filler.toLive) {
        return {
          offsetX: 0,
          offsetY: 0
        };
      }
      var t = filler.gradientTransform || filler.patternTransform;
      var offsetX = -this.width / 2 + filler.offsetX || 0,
        offsetY = -this.height / 2 + filler.offsetY || 0;
      if (filler.gradientUnits === 'percentage') {
        ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);
      } else {
        ctx.transform(1, 0, 0, 1, offsetX, offsetY);
      }
      if (t) {
        ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);
      }
      return {
        offsetX: offsetX,
        offsetY: offsetY
      };
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderPaintInOrder: function _renderPaintInOrder(ctx) {
      if (this.paintFirst === 'stroke') {
        this._renderStroke(ctx);
        this._renderFill(ctx);
      } else {
        this._renderFill(ctx);
        this._renderStroke(ctx);
      }
    },
    /**
     * @private
     * function that actually render something on the context.
     * empty here to allow Obects to work on tests to benchmark fabric functionalites
     * not related to rendering
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _render: function _render( /* ctx */
    ) {},
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderFill: function _renderFill(ctx) {
      if (!this.fill) {
        return;
      }
      ctx.save();
      this._setFillStyles(ctx, this);
      if (this.fillRule === 'evenodd') {
        ctx.fill('evenodd');
      } else {
        ctx.fill();
      }
      ctx.restore();
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderStroke: function _renderStroke(ctx) {
      if (!this.stroke || this.strokeWidth === 0) {
        return;
      }
      if (this.shadow && !this.shadow.affectStroke) {
        this._removeShadow(ctx);
      }
      ctx.save();
      if (this.strokeUniform && this.group) {
        var scaling = this.getObjectScaling();
        ctx.scale(1 / scaling.scaleX, 1 / scaling.scaleY);
      } else if (this.strokeUniform) {
        ctx.scale(1 / this.scaleX, 1 / this.scaleY);
      }
      this._setLineDash(ctx, this.strokeDashArray);
      this._setStrokeStyles(ctx, this);
      ctx.stroke();
      ctx.restore();
    },
    /**
     * This function try to patch the missing gradientTransform on canvas gradients.
     * transforming a context to transform the gradient, is going to transform the stroke too.
     * we want to transform the gradient but not the stroke operation, so we create
     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.
     * this method has drwabacks: is slow, is in low resolution, needs a patch for when the size
     * is limited.
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {fabric.Gradient} filler a fabric gradient instance
     */
    _applyPatternForTransformedGradient: function _applyPatternForTransformedGradient(ctx, filler) {
      var dims = this._limitCacheSize(this._getCacheCanvasDimensions()),
        pCanvas = fabric.util.createCanvasElement(),
        pCtx,
        retinaScaling = this.canvas.getRetinaScaling(),
        width = dims.x / this.scaleX / retinaScaling,
        height = dims.y / this.scaleY / retinaScaling;
      pCanvas.width = width;
      pCanvas.height = height;
      pCtx = pCanvas.getContext('2d');
      pCtx.beginPath();
      pCtx.moveTo(0, 0);
      pCtx.lineTo(width, 0);
      pCtx.lineTo(width, height);
      pCtx.lineTo(0, height);
      pCtx.closePath();
      pCtx.translate(width / 2, height / 2);
      pCtx.scale(dims.zoomX / this.scaleX / retinaScaling, dims.zoomY / this.scaleY / retinaScaling);
      this._applyPatternGradientTransform(pCtx, filler);
      pCtx.fillStyle = filler.toLive(ctx);
      pCtx.fill();
      ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);
      ctx.scale(retinaScaling * this.scaleX / dims.zoomX, retinaScaling * this.scaleY / dims.zoomY);
      ctx.strokeStyle = pCtx.createPattern(pCanvas, 'no-repeat');
    },
    /**
     * This function is an helper for svg import. it returns the center of the object in the svg
     * untransformed coordinates
     * @private
     * @return {Object} center point from element coordinates
     */
    _findCenterFromElement: function _findCenterFromElement() {
      return {
        x: this.left + this.width / 2,
        y: this.top + this.height / 2
      };
    },
    /**
     * This function is an helper for svg import. it decompose the transformMatrix
     * and assign properties to object.
     * untransformed coordinates
     * @private
     * @chainable
     */
    _assignTransformMatrixProps: function _assignTransformMatrixProps() {
      if (this.transformMatrix) {
        var options = fabric.util.qrDecompose(this.transformMatrix);
        this.flipX = false;
        this.flipY = false;
        this.set('scaleX', options.scaleX);
        this.set('scaleY', options.scaleY);
        this.angle = options.angle;
        this.skewX = options.skewX;
        this.skewY = 0;
      }
    },
    /**
     * This function is an helper for svg import. it removes the transform matrix
     * and set to object properties that fabricjs can handle
     * @private
     * @param {Object} preserveAspectRatioOptions
     * @return {thisArg}
     */
    _removeTransformMatrix: function _removeTransformMatrix(preserveAspectRatioOptions) {
      var center = this._findCenterFromElement();
      if (this.transformMatrix) {
        this._assignTransformMatrixProps();
        center = fabric.util.transformPoint(center, this.transformMatrix);
      }
      this.transformMatrix = null;
      if (preserveAspectRatioOptions) {
        this.scaleX *= preserveAspectRatioOptions.scaleX;
        this.scaleY *= preserveAspectRatioOptions.scaleY;
        this.cropX = preserveAspectRatioOptions.cropX;
        this.cropY = preserveAspectRatioOptions.cropY;
        center.x += preserveAspectRatioOptions.offsetLeft;
        center.y += preserveAspectRatioOptions.offsetTop;
        this.width = preserveAspectRatioOptions.width;
        this.height = preserveAspectRatioOptions.height;
      }
      this.setPositionByOrigin(center, 'center', 'center');
    },
    /**
     * Clones an instance, using a callback method will work for every object.
     * @param {Function} callback Callback is invoked with a clone as a first argument
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     */
    clone: function clone(callback, propertiesToInclude) {
      var objectForm = this.toObject(propertiesToInclude);
      if (this.constructor.fromObject) {
        this.constructor.fromObject(objectForm, callback);
      } else {
        fabric.Object._fromObject('Object', objectForm, callback);
      }
    },
    /**
     * Creates an instance of fabric.Image out of an object
     * makes use of toCanvasElement.
     * Once this method was based on toDataUrl and loadImage, so it also had a quality
     * and format option. toCanvasElement is faster and produce no loss of quality.
     * If you need to get a real Jpeg or Png from an object, using toDataURL is the right way to do it.
     * toCanvasElement and then toBlob from the obtained canvas is also a good option.
     * This method is sync now, but still support the callback because we did not want to break.
     * When fabricJS 5.0 will be planned, this will probably be changed to not have a callback.
     * @param {Function} callback callback, invoked with an instance as a first argument
     * @param {Object} [options] for clone as image, passed to toDataURL
     * @param {Number} [options.multiplier=1] Multiplier to scale by
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
     * @return {fabric.Object} thisArg
     */
    cloneAsImage: function cloneAsImage(callback, options) {
      var canvasEl = this.toCanvasElement(options);
      if (callback) {
        callback(new fabric.Image(canvasEl));
      }
      return this;
    },
    /**
     * Converts an object into a HTMLCanvas element
     * @param {Object} options Options object
     * @param {Number} [options.multiplier=1] Multiplier to scale by
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
     * @return {HTMLCanvasElement} Returns DOM element <canvas> with the fabric.Object
     */
    toCanvasElement: function toCanvasElement(options) {
      options || (options = {});
      var utils = fabric.util,
        origParams = utils.saveObjectTransform(this),
        originalGroup = this.group,
        originalShadow = this.shadow,
        abs = Math.abs,
        multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric.devicePixelRatio : 1);
      delete this.group;
      if (options.withoutTransform) {
        utils.resetObjectTransform(this);
      }
      if (options.withoutShadow) {
        this.shadow = null;
      }
      var el = fabric.util.createCanvasElement(),
        // skip canvas zoom and calculate with setCoords now.
        boundingRect = this.getBoundingRect(true, true),
        shadow = this.shadow,
        scaling,
        shadowOffset = {
          x: 0,
          y: 0
        },
        shadowBlur,
        width,
        height;
      if (shadow) {
        shadowBlur = shadow.blur;
        if (shadow.nonScaling) {
          scaling = {
            scaleX: 1,
            scaleY: 1
          };
        } else {
          scaling = this.getObjectScaling();
        }
        // consider non scaling shadow.
        shadowOffset.x = 2 * Math.round(abs(shadow.offsetX) + shadowBlur) * abs(scaling.scaleX);
        shadowOffset.y = 2 * Math.round(abs(shadow.offsetY) + shadowBlur) * abs(scaling.scaleY);
      }
      width = boundingRect.width + shadowOffset.x;
      height = boundingRect.height + shadowOffset.y;
      // if the current width/height is not an integer
      // we need to make it so.
      el.width = Math.ceil(width);
      el.height = Math.ceil(height);
      var canvas = new fabric.StaticCanvas(el, {
        enableRetinaScaling: false,
        renderOnAddRemove: false,
        skipOffscreen: false
      });
      if (options.format === 'jpeg') {
        canvas.backgroundColor = '#fff';
      }
      this.setPositionByOrigin(new fabric.Point(canvas.width / 2, canvas.height / 2), 'center', 'center');
      var originalCanvas = this.canvas;
      canvas.add(this);
      var canvasEl = canvas.toCanvasElement(multiplier || 1, options);
      this.shadow = originalShadow;
      this.set('canvas', originalCanvas);
      if (originalGroup) {
        this.group = originalGroup;
      }
      this.set(origParams).setCoords();
      // canvas.dispose will call image.dispose that will nullify the elements
      // since this canvas is a simple element for the process, we remove references
      // to objects in this way in order to avoid object trashing.
      canvas._objects = [];
      canvas.dispose();
      canvas = null;
      return canvasEl;
    },
    /**
     * Converts an object into a data-url-like string
     * @param {Object} options Options object
     * @param {String} [options.format=png] The format of the output image. Either "jpeg" or "png"
     * @param {Number} [options.quality=1] Quality level (0..1). Only used for jpeg.
     * @param {Number} [options.multiplier=1] Multiplier to scale by
     * @param {Number} [options.left] Cropping left offset. Introduced in v1.2.14
     * @param {Number} [options.top] Cropping top offset. Introduced in v1.2.14
     * @param {Number} [options.width] Cropping width. Introduced in v1.2.14
     * @param {Number} [options.height] Cropping height. Introduced in v1.2.14
     * @param {Boolean} [options.enableRetinaScaling] Enable retina scaling for clone image. Introduce in 1.6.4
     * @param {Boolean} [options.withoutTransform] Remove current object transform ( no scale , no angle, no flip, no skew ). Introduced in 2.3.4
     * @param {Boolean} [options.withoutShadow] Remove current object shadow. Introduced in 2.4.2
     * @return {String} Returns a data: URL containing a representation of the object in the format specified by options.format
     */
    toDataURL: function toDataURL(options) {
      options || (options = {});
      return fabric.util.toDataURL(this.toCanvasElement(options), options.format || 'png', options.quality || 1);
    },
    /**
     * Returns true if specified type is identical to the type of an instance
     * @param {String} type Type to check against
     * @return {Boolean}
     */
    isType: function isType(type) {
      return arguments.length > 1 ? Array.from(arguments).includes(this.type) : this.type === type;
    },
    /**
     * Returns complexity of an instance
     * @return {Number} complexity of this instance (is 1 unless subclassed)
     */
    complexity: function complexity() {
      return 1;
    },
    /**
     * Returns a JSON representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} JSON
     */
    toJSON: function toJSON(propertiesToInclude) {
      // delegate, not alias
      return this.toObject(propertiesToInclude);
    },
    /**
     * Sets "angle" of an instance with centered rotation
     * @param {Number} angle Angle value (in degrees)
     * @return {fabric.Object} thisArg
     * @chainable
     */
    rotate: function rotate(angle) {
      var shouldCenterOrigin = (this.originX !== 'center' || this.originY !== 'center') && this.centeredRotation;
      if (shouldCenterOrigin) {
        this._setOriginToCenter();
      }
      this.set('angle', angle);
      if (shouldCenterOrigin) {
        this._resetOrigin();
      }
      return this;
    },
    /**
     * Centers object horizontally on canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
    centerH: function centerH() {
      this.canvas && this.canvas.centerObjectH(this);
      return this;
    },
    /**
     * Centers object horizontally on current viewport of canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
    viewportCenterH: function viewportCenterH() {
      this.canvas && this.canvas.viewportCenterObjectH(this);
      return this;
    },
    /**
     * Centers object vertically on canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
    centerV: function centerV() {
      this.canvas && this.canvas.centerObjectV(this);
      return this;
    },
    /**
     * Centers object vertically on current viewport of canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
    viewportCenterV: function viewportCenterV() {
      this.canvas && this.canvas.viewportCenterObjectV(this);
      return this;
    },
    /**
     * Centers object vertically and horizontally on canvas to which is was added last
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
    center: function center() {
      this.canvas && this.canvas.centerObject(this);
      return this;
    },
    /**
     * Centers object on current viewport of canvas to which it was added last.
     * You might need to call `setCoords` on an object after centering, to update controls area.
     * @return {fabric.Object} thisArg
     * @chainable
     */
    viewportCenter: function viewportCenter() {
      this.canvas && this.canvas.viewportCenterObject(this);
      return this;
    },
    /**
     * Returns coordinates of a pointer relative to an object
     * @param {Event} e Event to operate upon
     * @param {Object} [pointer] Pointer to operate upon (instead of event)
     * @return {Object} Coordinates of a pointer (x, y)
     */
    getLocalPointer: function getLocalPointer(e, pointer) {
      pointer = pointer || this.canvas.getPointer(e);
      var pClicked = new fabric.Point(pointer.x, pointer.y),
        objectLeftTop = this._getLeftTopCoords();
      if (this.angle) {
        pClicked = fabric.util.rotatePoint(pClicked, objectLeftTop, degreesToRadians(-this.angle));
      }
      return {
        x: pClicked.x - objectLeftTop.x,
        y: pClicked.y - objectLeftTop.y
      };
    },
    /**
     * Sets canvas globalCompositeOperation for specific object
     * custom composition operation for the particular object can be specified using globalCompositeOperation property
     * @param {CanvasRenderingContext2D} ctx Rendering canvas context
     */
    _setupCompositeOperation: function _setupCompositeOperation(ctx) {
      if (this.globalCompositeOperation) {
        ctx.globalCompositeOperation = this.globalCompositeOperation;
      }
    },
    /**
     * cancel instance's running animations
     * override if necessary to dispose artifacts such as `clipPath`
     */
    dispose: function dispose() {
      if (fabric.runningAnimations) {
        fabric.runningAnimations.cancelByTarget(this);
      }
    }
  });
  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Object);
  extend(fabric.Object.prototype, fabric.Observable);

  /**
   * Defines the number of fraction digits to use when serializing object values.
   * You can use it to increase/decrease precision of such values like left, top, scaleX, scaleY, etc.
   * @static
   * @memberOf fabric.Object
   * @constant
   * @type Number
   */
  fabric.Object.NUM_FRACTION_DIGITS = 2;

  /**
   * Defines which properties should be enlivened from the object passed to {@link fabric.Object._fromObject}
   * @static
   * @memberOf fabric.Object
   * @constant
   * @type string[]
   */
  fabric.Object.ENLIVEN_PROPS = ['clipPath'];
  fabric.Object._fromObject = function (className, object, callback, extraParam) {
    var klass = fabric[className];
    object = clone(object, true);
    fabric.util.enlivenPatterns([object.fill, object.stroke], function (patterns) {
      if (typeof patterns[0] !== 'undefined') {
        object.fill = patterns[0];
      }
      if (typeof patterns[1] !== 'undefined') {
        object.stroke = patterns[1];
      }
      fabric.util.enlivenObjectEnlivables(object, object, function () {
        var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);
        callback && callback(instance);
      });
    });
  };

  /**
   * Unique id used internally when creating SVG elements
   * @static
   * @memberOf fabric.Object
   * @type Number
   */
  fabric.Object.__uid = 0;
})(typeof exports !== 'undefined' ? exports : this);
(function () {
  var degreesToRadians = fabric.util.degreesToRadians,
    originXOffset = {
      left: -0.5,
      center: 0,
      right: 0.5
    },
    originYOffset = {
      top: -0.5,
      center: 0,
      bottom: 0.5
    };
  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */{
    /**
     * Translates the coordinates from a set of origin to another (based on the object's dimensions)
     * @param {fabric.Point} point The point which corresponds to the originX and originY params
     * @param {String} fromOriginX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} fromOriginY Vertical origin: 'top', 'center' or 'bottom'
     * @param {String} toOriginX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} toOriginY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
    translateToGivenOrigin: function translateToGivenOrigin(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {
      var x = point.x,
        y = point.y,
        offsetX,
        offsetY,
        dim;
      if (typeof fromOriginX === 'string') {
        fromOriginX = originXOffset[fromOriginX];
      } else {
        fromOriginX -= 0.5;
      }
      if (typeof toOriginX === 'string') {
        toOriginX = originXOffset[toOriginX];
      } else {
        toOriginX -= 0.5;
      }
      offsetX = toOriginX - fromOriginX;
      if (typeof fromOriginY === 'string') {
        fromOriginY = originYOffset[fromOriginY];
      } else {
        fromOriginY -= 0.5;
      }
      if (typeof toOriginY === 'string') {
        toOriginY = originYOffset[toOriginY];
      } else {
        toOriginY -= 0.5;
      }
      offsetY = toOriginY - fromOriginY;
      if (offsetX || offsetY) {
        dim = this._getTransformedDimensions();
        x = point.x + offsetX * dim.x;
        y = point.y + offsetY * dim.y;
      }
      return new fabric.Point(x, y);
    },
    /**
     * Translates the coordinates from origin to center coordinates (based on the object's dimensions)
     * @param {fabric.Point} point The point which corresponds to the originX and originY params
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
    translateToCenterPoint: function translateToCenterPoint(point, originX, originY) {
      var p = this.translateToGivenOrigin(point, originX, originY, 'center', 'center');
      if (this.angle) {
        return fabric.util.rotatePoint(p, point, degreesToRadians(this.angle));
      }
      return p;
    },
    /**
     * Translates the coordinates from center to origin coordinates (based on the object's dimensions)
     * @param {fabric.Point} center The point which corresponds to center of the object
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
    translateToOriginPoint: function translateToOriginPoint(center, originX, originY) {
      var p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);
      if (this.angle) {
        return fabric.util.rotatePoint(p, center, degreesToRadians(this.angle));
      }
      return p;
    },
    /**
     * Returns the real center coordinates of the object
     * @return {fabric.Point}
     */
    getCenterPoint: function getCenterPoint() {
      var leftTop = new fabric.Point(this.left, this.top);
      return this.translateToCenterPoint(leftTop, this.originX, this.originY);
    },
    /**
     * Returns the coordinates of the object based on center coordinates
     * @param {fabric.Point} point The point which corresponds to the originX and originY params
     * @return {fabric.Point}
     */
    // getOriginPoint: function(center) {
    //   return this.translateToOriginPoint(center, this.originX, this.originY);
    // },

    /**
     * Returns the coordinates of the object as if it has a different origin
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
    getPointByOrigin: function getPointByOrigin(originX, originY) {
      var center = this.getCenterPoint();
      return this.translateToOriginPoint(center, originX, originY);
    },
    /**
     * Returns the point in local coordinates
     * @param {fabric.Point} point The point relative to the global coordinate system
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {fabric.Point}
     */
    toLocalPoint: function toLocalPoint(point, originX, originY) {
      var center = this.getCenterPoint(),
        p,
        p2;
      if (typeof originX !== 'undefined' && typeof originY !== 'undefined') {
        p = this.translateToGivenOrigin(center, 'center', 'center', originX, originY);
      } else {
        p = new fabric.Point(this.left, this.top);
      }
      p2 = new fabric.Point(point.x, point.y);
      if (this.angle) {
        p2 = fabric.util.rotatePoint(p2, center, -degreesToRadians(this.angle));
      }
      return p2.subtractEquals(p);
    },
    /**
     * Returns the point in global coordinates
     * @param {fabric.Point} The point relative to the local coordinate system
     * @return {fabric.Point}
     */
    // toGlobalPoint: function(point) {
    //   return fabric.util.rotatePoint(point, this.getCenterPoint(), degreesToRadians(this.angle)).addEquals(new fabric.Point(this.left, this.top));
    // },

    /**
     * Sets the position of the object taking into consideration the object's origin
     * @param {fabric.Point} pos The new position of the object
     * @param {String} originX Horizontal origin: 'left', 'center' or 'right'
     * @param {String} originY Vertical origin: 'top', 'center' or 'bottom'
     * @return {void}
     */
    setPositionByOrigin: function setPositionByOrigin(pos, originX, originY) {
      var center = this.translateToCenterPoint(pos, originX, originY),
        position = this.translateToOriginPoint(center, this.originX, this.originY);
      this.set('left', position.x);
      this.set('top', position.y);
    },
    /**
     * @param {String} to One of 'left', 'center', 'right'
     */
    adjustPosition: function adjustPosition(to) {
      var angle = degreesToRadians(this.angle),
        hypotFull = this.getScaledWidth(),
        xFull = fabric.util.cos(angle) * hypotFull,
        yFull = fabric.util.sin(angle) * hypotFull,
        offsetFrom,
        offsetTo;

      //TODO: this function does not consider mixed situation like top, center.
      if (typeof this.originX === 'string') {
        offsetFrom = originXOffset[this.originX];
      } else {
        offsetFrom = this.originX - 0.5;
      }
      if (typeof to === 'string') {
        offsetTo = originXOffset[to];
      } else {
        offsetTo = to - 0.5;
      }
      this.left += xFull * (offsetTo - offsetFrom);
      this.top += yFull * (offsetTo - offsetFrom);
      this.setCoords();
      this.originX = to;
    },
    /**
     * Sets the origin/position of the object to it's center point
     * @private
     * @return {void}
     */
    _setOriginToCenter: function _setOriginToCenter() {
      this._originalOriginX = this.originX;
      this._originalOriginY = this.originY;
      var center = this.getCenterPoint();
      this.originX = 'center';
      this.originY = 'center';
      this.left = center.x;
      this.top = center.y;
    },
    /**
     * Resets the origin/position of the object to it's original origin
     * @private
     * @return {void}
     */
    _resetOrigin: function _resetOrigin() {
      var originPoint = this.translateToOriginPoint(this.getCenterPoint(), this._originalOriginX, this._originalOriginY);
      this.originX = this._originalOriginX;
      this.originY = this._originalOriginY;
      this.left = originPoint.x;
      this.top = originPoint.y;
      this._originalOriginX = null;
      this._originalOriginY = null;
    },
    /**
     * @private
     */
    _getLeftTopCoords: function _getLeftTopCoords() {
      return this.translateToOriginPoint(this.getCenterPoint(), 'left', 'top');
    }
  });
})();
(function () {
  function arrayFromCoords(coords) {
    return [new fabric.Point(coords.tl.x, coords.tl.y), new fabric.Point(coords.tr.x, coords.tr.y), new fabric.Point(coords.br.x, coords.br.y), new fabric.Point(coords.bl.x, coords.bl.y)];
  }
  var util = fabric.util,
    degreesToRadians = util.degreesToRadians,
    multiplyMatrices = util.multiplyTransformMatrices,
    transformPoint = util.transformPoint;
  util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */{
    /**
     * Describe object's corner position in canvas element coordinates.
     * properties are depending on control keys and padding the main controls.
     * each property is an object with x, y and corner.
     * The `corner` property contains in a similar manner the 4 points of the
     * interactive area of the corner.
     * The coordinates depends from the controls positionHandler and are used
     * to draw and locate controls
     * @memberOf fabric.Object.prototype
     */
    oCoords: null,
    /**
     * Describe object's corner position in canvas object absolute coordinates
     * properties are tl,tr,bl,br and describe the four main corner.
     * each property is an object with x, y, instance of Fabric.Point.
     * The coordinates depends from this properties: width, height, scaleX, scaleY
     * skewX, skewY, angle, strokeWidth, top, left.
     * Those coordinates are useful to understand where an object is. They get updated
     * with oCoords but they do not need to be updated when zoom or panning change.
     * The coordinates get updated with @method setCoords.
     * You can calculate them without updating with @method calcACoords();
     * @memberOf fabric.Object.prototype
     */
    aCoords: null,
    /**
     * Describe object's corner position in canvas element coordinates.
     * includes padding. Used of object detection.
     * set and refreshed with setCoords.
     * @memberOf fabric.Object.prototype
     */
    lineCoords: null,
    /**
     * storage for object transform matrix
     */
    ownMatrixCache: null,
    /**
     * storage for object full transform matrix
     */
    matrixCache: null,
    /**
     * custom controls interface
     * controls are added by default_controls.js
     */
    controls: {},
    /**
     * return correct set of coordinates for intersection
     * this will return either aCoords or lineCoords.
     * @param {Boolean} absolute will return aCoords if true or lineCoords
     * @return {Object} {tl, tr, br, bl} points
     */
    _getCoords: function _getCoords(absolute, calculate) {
      if (calculate) {
        return absolute ? this.calcACoords() : this.calcLineCoords();
      }
      if (!this.aCoords || !this.lineCoords) {
        this.setCoords(true);
      }
      return absolute ? this.aCoords : this.lineCoords;
    },
    /**
     * return correct set of coordinates for intersection
     * this will return either aCoords or lineCoords.
     * The coords are returned in an array.
     * @return {Array} [tl, tr, br, bl] of points
     */
    getCoords: function getCoords(absolute, calculate) {
      return arrayFromCoords(this._getCoords(absolute, calculate));
    },
    /**
     * Checks if object intersects with an area formed by 2 points
     * @param {Object} pointTL top-left point of area
     * @param {Object} pointBR bottom-right point of area
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object intersects with an area formed by 2 points
     */
    intersectsWithRect: function intersectsWithRect(pointTL, pointBR, absolute, calculate) {
      var coords = this.getCoords(absolute, calculate),
        intersection = fabric.Intersection.intersectPolygonRectangle(coords, pointTL, pointBR);
      return intersection.status === 'Intersection';
    },
    /**
     * Checks if object intersects with another object
     * @param {Object} other Object to test
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object intersects with another object
     */
    intersectsWithObject: function intersectsWithObject(other, absolute, calculate) {
      var intersection = fabric.Intersection.intersectPolygonPolygon(this.getCoords(absolute, calculate), other.getCoords(absolute, calculate));
      return intersection.status === 'Intersection' || other.isContainedWithinObject(this, absolute, calculate) || this.isContainedWithinObject(other, absolute, calculate);
    },
    /**
     * Checks if object is fully contained within area of another object
     * @param {Object} other Object to test
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object is fully contained within area of another object
     */
    isContainedWithinObject: function isContainedWithinObject(other, absolute, calculate) {
      var points = this.getCoords(absolute, calculate),
        otherCoords = absolute ? other.aCoords : other.lineCoords,
        i = 0,
        lines = other._getImageLines(otherCoords);
      for (; i < 4; i++) {
        if (!other.containsPoint(points[i], lines)) {
          return false;
        }
      }
      return true;
    },
    /**
     * Checks if object is fully contained within area formed by 2 points
     * @param {Object} pointTL top-left point of area
     * @param {Object} pointBR bottom-right point of area
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object is fully contained within area formed by 2 points
     */
    isContainedWithinRect: function isContainedWithinRect(pointTL, pointBR, absolute, calculate) {
      var boundingRect = this.getBoundingRect(absolute, calculate);
      return boundingRect.left >= pointTL.x && boundingRect.left + boundingRect.width <= pointBR.x && boundingRect.top >= pointTL.y && boundingRect.top + boundingRect.height <= pointBR.y;
    },
    /**
     * Checks if point is inside the object
     * @param {fabric.Point} point Point to check against
     * @param {Object} [lines] object returned from @method _getImageLines
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if point is inside the object
     */
    containsPoint: function containsPoint(point, lines, absolute, calculate) {
      var coords = this._getCoords(absolute, calculate),
        lines = lines || this._getImageLines(coords),
        xPoints = this._findCrossPoints(point, lines);
      // if xPoints is odd then point is inside the object
      return xPoints !== 0 && xPoints % 2 === 1;
    },
    /**
     * Checks if object is contained within the canvas with current viewportTransform
     * the check is done stopping at first point that appears on screen
     * @param {Boolean} [calculate] use coordinates of current position instead of .aCoords
     * @return {Boolean} true if object is fully or partially contained within canvas
     */
    isOnScreen: function isOnScreen(calculate) {
      if (!this.canvas) {
        return false;
      }
      var pointTL = this.canvas.vptCoords.tl,
        pointBR = this.canvas.vptCoords.br;
      var points = this.getCoords(true, calculate);
      // if some point is on screen, the object is on screen.
      if (points.some(function (point) {
        return point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y;
      })) {
        return true;
      }
      // no points on screen, check intersection with absolute coordinates
      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
        return true;
      }
      return this._containsCenterOfCanvas(pointTL, pointBR, calculate);
    },
    /**
     * Checks if the object contains the midpoint between canvas extremities
     * Does not make sense outside the context of isOnScreen and isPartiallyOnScreen
     * @private
     * @param {Fabric.Point} pointTL Top Left point
     * @param {Fabric.Point} pointBR Top Right point
     * @param {Boolean} calculate use coordinates of current position instead of .oCoords
     * @return {Boolean} true if the object contains the point
     */
    _containsCenterOfCanvas: function _containsCenterOfCanvas(pointTL, pointBR, calculate) {
      // worst case scenario the object is so big that contains the screen
      var centerPoint = {
        x: (pointTL.x + pointBR.x) / 2,
        y: (pointTL.y + pointBR.y) / 2
      };
      if (this.containsPoint(centerPoint, null, true, calculate)) {
        return true;
      }
      return false;
    },
    /**
     * Checks if object is partially contained within the canvas with current viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords
     * @return {Boolean} true if object is partially contained within canvas
     */
    isPartiallyOnScreen: function isPartiallyOnScreen(calculate) {
      if (!this.canvas) {
        return false;
      }
      var pointTL = this.canvas.vptCoords.tl,
        pointBR = this.canvas.vptCoords.br;
      if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
        return true;
      }
      var allPointsAreOutside = this.getCoords(true, calculate).every(function (point) {
        return (point.x >= pointBR.x || point.x <= pointTL.x) && (point.y >= pointBR.y || point.y <= pointTL.y);
      });
      return allPointsAreOutside && this._containsCenterOfCanvas(pointTL, pointBR, calculate);
    },
    /**
     * Method that returns an object with the object edges in it, given the coordinates of the corners
     * @private
     * @param {Object} oCoords Coordinates of the object corners
     */
    _getImageLines: function _getImageLines(oCoords) {
      var lines = {
        topline: {
          o: oCoords.tl,
          d: oCoords.tr
        },
        rightline: {
          o: oCoords.tr,
          d: oCoords.br
        },
        bottomline: {
          o: oCoords.br,
          d: oCoords.bl
        },
        leftline: {
          o: oCoords.bl,
          d: oCoords.tl
        }
      };

      // // debugging
      // if (this.canvas.contextTop) {
      //   this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);
      //   this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);
      //
      //   this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);
      //   this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);
      //
      //   this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);
      //   this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);
      //
      //   this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);
      //   this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);
      // }

      return lines;
    },
    /**
     * Helper method to determine how many cross points are between the 4 object edges
     * and the horizontal line determined by a point on canvas
     * @private
     * @param {fabric.Point} point Point to check
     * @param {Object} lines Coordinates of the object being evaluated
     */
    // remove yi, not used but left code here just in case.
    _findCrossPoints: function _findCrossPoints(point, lines) {
      var b1,
        b2,
        a1,
        a2,
        xi,
        // yi,
        xcount = 0,
        iLine;
      for (var lineKey in lines) {
        iLine = lines[lineKey];
        // optimisation 1: line below point. no cross
        if (iLine.o.y < point.y && iLine.d.y < point.y) {
          continue;
        }
        // optimisation 2: line above point. no cross
        if (iLine.o.y >= point.y && iLine.d.y >= point.y) {
          continue;
        }
        // optimisation 3: vertical line case
        if (iLine.o.x === iLine.d.x && iLine.o.x >= point.x) {
          xi = iLine.o.x;
          // yi = point.y;
        }
        // calculate the intersection point
        else {
          b1 = 0;
          b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);
          a1 = point.y - b1 * point.x;
          a2 = iLine.o.y - b2 * iLine.o.x;
          xi = -(a1 - a2) / (b1 - b2);
          // yi = a1 + b1 * xi;
        }
        // dont count xi < point.x cases
        if (xi >= point.x) {
          xcount += 1;
        }
        // optimisation 4: specific for square images
        if (xcount === 2) {
          break;
        }
      }
      return xcount;
    },
    /**
     * Returns coordinates of object's bounding rectangle (left, top, width, height)
     * the box is intended as aligned to axis of canvas.
     * @param {Boolean} [absolute] use coordinates without viewportTransform
     * @param {Boolean} [calculate] use coordinates of current position instead of .oCoords / .aCoords
     * @return {Object} Object with left, top, width, height properties
     */
    getBoundingRect: function getBoundingRect(absolute, calculate) {
      var coords = this.getCoords(absolute, calculate);
      return util.makeBoundingBoxFromPoints(coords);
    },
    /**
     * Returns width of an object's bounding box counting transformations
     * before 2.0 it was named getWidth();
     * @return {Number} width value
     */
    getScaledWidth: function getScaledWidth() {
      return this._getTransformedDimensions().x;
    },
    /**
     * Returns height of an object bounding box counting transformations
     * before 2.0 it was named getHeight();
     * @return {Number} height value
     */
    getScaledHeight: function getScaledHeight() {
      return this._getTransformedDimensions().y;
    },
    /**
     * Makes sure the scale is valid and modifies it if necessary
     * @private
     * @param {Number} value
     * @return {Number}
     */
    _constrainScale: function _constrainScale(value) {
      if (Math.abs(value) < this.minScaleLimit) {
        if (value < 0) {
          return -this.minScaleLimit;
        } else {
          return this.minScaleLimit;
        }
      } else if (value === 0) {
        return 0.0001;
      }
      return value;
    },
    /**
     * Scales an object (equally by x and y)
     * @param {Number} value Scale factor
     * @return {fabric.Object} thisArg
     * @chainable
     */
    scale: function scale(value) {
      this._set('scaleX', value);
      this._set('scaleY', value);
      return this.setCoords();
    },
    /**
     * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)
     * @param {Number} value New width value
     * @param {Boolean} absolute ignore viewport
     * @return {fabric.Object} thisArg
     * @chainable
     */
    scaleToWidth: function scaleToWidth(value, absolute) {
      // adjust to bounding rect factor so that rotated shapes would fit as well
      var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();
      return this.scale(value / this.width / boundingRectFactor);
    },
    /**
     * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)
     * @param {Number} value New height value
     * @param {Boolean} absolute ignore viewport
     * @return {fabric.Object} thisArg
     * @chainable
     */
    scaleToHeight: function scaleToHeight(value, absolute) {
      // adjust to bounding rect factor so that rotated shapes would fit as well
      var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();
      return this.scale(value / this.height / boundingRectFactor);
    },
    calcLineCoords: function calcLineCoords() {
      var vpt = this.getViewportTransform(),
        padding = this.padding,
        angle = degreesToRadians(this.angle),
        cos = util.cos(angle),
        sin = util.sin(angle),
        cosP = cos * padding,
        sinP = sin * padding,
        cosPSinP = cosP + sinP,
        cosPMinusSinP = cosP - sinP,
        aCoords = this.calcACoords();
      var lineCoords = {
        tl: transformPoint(aCoords.tl, vpt),
        tr: transformPoint(aCoords.tr, vpt),
        bl: transformPoint(aCoords.bl, vpt),
        br: transformPoint(aCoords.br, vpt)
      };
      if (padding) {
        lineCoords.tl.x -= cosPMinusSinP;
        lineCoords.tl.y -= cosPSinP;
        lineCoords.tr.x += cosPSinP;
        lineCoords.tr.y -= cosPMinusSinP;
        lineCoords.bl.x -= cosPSinP;
        lineCoords.bl.y += cosPMinusSinP;
        lineCoords.br.x += cosPMinusSinP;
        lineCoords.br.y += cosPSinP;
      }
      return lineCoords;
    },
    calcOCoords: function calcOCoords() {
      var rotateMatrix = this._calcRotateMatrix(),
        translateMatrix = this._calcTranslateMatrix(),
        vpt = this.getViewportTransform(),
        startMatrix = multiplyMatrices(vpt, translateMatrix),
        finalMatrix = multiplyMatrices(startMatrix, rotateMatrix),
        finalMatrix = multiplyMatrices(finalMatrix, [1 / vpt[0], 0, 0, 1 / vpt[3], 0, 0]),
        dim = this._calculateCurrentDimensions(),
        coords = {};
      this.forEachControl(function (control, key, fabricObject) {
        coords[key] = control.positionHandler(dim, finalMatrix, fabricObject);
      });

      // debug code
      // var canvas = this.canvas;
      // setTimeout(function() {
      //   canvas.contextTop.clearRect(0, 0, 700, 700);
      //   canvas.contextTop.fillStyle = 'green';
      //   Object.keys(coords).forEach(function(key) {
      //     var control = coords[key];
      //     canvas.contextTop.fillRect(control.x, control.y, 3, 3);
      //   });
      // }, 50);
      return coords;
    },
    calcACoords: function calcACoords() {
      var rotateMatrix = this._calcRotateMatrix(),
        translateMatrix = this._calcTranslateMatrix(),
        finalMatrix = multiplyMatrices(translateMatrix, rotateMatrix),
        dim = this._getTransformedDimensions(),
        w = dim.x / 2,
        h = dim.y / 2;
      return {
        // corners
        tl: transformPoint({
          x: -w,
          y: -h
        }, finalMatrix),
        tr: transformPoint({
          x: w,
          y: -h
        }, finalMatrix),
        bl: transformPoint({
          x: -w,
          y: h
        }, finalMatrix),
        br: transformPoint({
          x: w,
          y: h
        }, finalMatrix)
      };
    },
    /**
     * Sets corner and controls position coordinates based on current angle, width and height, left and top.
     * oCoords are used to find the corners
     * aCoords are used to quickly find an object on the canvas
     * lineCoords are used to quickly find object during pointer events.
     * See {@link https://github.com/fabricjs/fabric.js/wiki/When-to-call-setCoords} and {@link http://fabricjs.com/fabric-gotchas}
     *
     * @param {Boolean} [skipCorners] skip calculation of oCoords.
     * @return {fabric.Object} thisArg
     * @chainable
     */
    setCoords: function setCoords(skipCorners) {
      this.aCoords = this.calcACoords();
      // in case we are in a group, for how the inner group target check works,
      // lineCoords are exactly aCoords. Since the vpt gets absorbed by the normalized pointer.
      this.lineCoords = this.group ? this.aCoords : this.calcLineCoords();
      if (skipCorners) {
        return this;
      }
      // set coordinates of the draggable boxes in the corners used to scale/rotate the image
      this.oCoords = this.calcOCoords();
      this._setCornerCoords && this._setCornerCoords();
      return this;
    },
    /**
     * calculate rotation matrix of an object
     * @return {Array} rotation matrix for the object
     */
    _calcRotateMatrix: function _calcRotateMatrix() {
      return util.calcRotateMatrix(this);
    },
    /**
     * calculate the translation matrix for an object transform
     * @return {Array} rotation matrix for the object
     */
    _calcTranslateMatrix: function _calcTranslateMatrix() {
      var center = this.getCenterPoint();
      return [1, 0, 0, 1, center.x, center.y];
    },
    transformMatrixKey: function transformMatrixKey(skipGroup) {
      var sep = '_',
        prefix = '';
      if (!skipGroup && this.group) {
        prefix = this.group.transformMatrixKey(skipGroup) + sep;
      }
      ;
      return prefix + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY + sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY + sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;
    },
    /**
     * calculate transform matrix that represents the current transformations from the
     * object's properties.
     * @param {Boolean} [skipGroup] return transform matrix for object not counting parent transformations
     * There are some situation in which this is useful to avoid the fake rotation.
     * @return {Array} transform matrix for the object
     */
    calcTransformMatrix: function calcTransformMatrix(skipGroup) {
      var matrix = this.calcOwnMatrix();
      if (skipGroup || !this.group) {
        return matrix;
      }
      var key = this.transformMatrixKey(skipGroup),
        cache = this.matrixCache || (this.matrixCache = {});
      if (cache.key === key) {
        return cache.value;
      }
      if (this.group) {
        matrix = multiplyMatrices(this.group.calcTransformMatrix(false), matrix);
      }
      cache.key = key;
      cache.value = matrix;
      return matrix;
    },
    /**
     * calculate transform matrix that represents the current transformations from the
     * object's properties, this matrix does not include the group transformation
     * @return {Array} transform matrix for the object
     */
    calcOwnMatrix: function calcOwnMatrix() {
      var key = this.transformMatrixKey(true),
        cache = this.ownMatrixCache || (this.ownMatrixCache = {});
      if (cache.key === key) {
        return cache.value;
      }
      var tMatrix = this._calcTranslateMatrix(),
        options = {
          angle: this.angle,
          translateX: tMatrix[4],
          translateY: tMatrix[5],
          scaleX: this.scaleX,
          scaleY: this.scaleY,
          skewX: this.skewX,
          skewY: this.skewY,
          flipX: this.flipX,
          flipY: this.flipY
        };
      cache.key = key;
      cache.value = util.composeMatrix(options);
      return cache.value;
    },
    /*
     * Calculate object dimensions from its properties
     * @private
     * @return {Object} .x width dimension
     * @return {Object} .y height dimension
     */
    _getNonTransformedDimensions: function _getNonTransformedDimensions() {
      var strokeWidth = this.strokeWidth,
        w = this.width + strokeWidth,
        h = this.height + strokeWidth;
      return {
        x: w,
        y: h
      };
    },
    /*
     * Calculate object bounding box dimensions from its properties scale, skew.
     * @param {Number} skewX, a value to override current skewX
     * @param {Number} skewY, a value to override current skewY
     * @private
     * @return {Object} .x width dimension
     * @return {Object} .y height dimension
     */
    _getTransformedDimensions: function _getTransformedDimensions(skewX, skewY) {
      if (typeof skewX === 'undefined') {
        skewX = this.skewX;
      }
      if (typeof skewY === 'undefined') {
        skewY = this.skewY;
      }
      var dimensions,
        dimX,
        dimY,
        noSkew = skewX === 0 && skewY === 0;
      if (this.strokeUniform) {
        dimX = this.width;
        dimY = this.height;
      } else {
        dimensions = this._getNonTransformedDimensions();
        dimX = dimensions.x;
        dimY = dimensions.y;
      }
      if (noSkew) {
        return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);
      }
      var bbox = util.sizeAfterTransform(dimX, dimY, {
        scaleX: this.scaleX,
        scaleY: this.scaleY,
        skewX: skewX,
        skewY: skewY
      });
      return this._finalizeDimensions(bbox.x, bbox.y);
    },
    /*
     * Calculate object bounding box dimensions from its properties scale, skew.
     * @param Number width width of the bbox
     * @param Number height height of the bbox
     * @private
     * @return {Object} .x finalized width dimension
     * @return {Object} .y finalized height dimension
     */
    _finalizeDimensions: function _finalizeDimensions(width, height) {
      return this.strokeUniform ? {
        x: width + this.strokeWidth,
        y: height + this.strokeWidth
      } : {
        x: width,
        y: height
      };
    },
    /*
     * Calculate object dimensions for controls box, including padding and canvas zoom.
     * and active selection
     * private
     */
    _calculateCurrentDimensions: function _calculateCurrentDimensions() {
      var vpt = this.getViewportTransform(),
        dim = this._getTransformedDimensions(),
        p = transformPoint(dim, vpt, true);
      return p.scalarAdd(2 * this.padding);
    }
  });
})();
fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */{
  /**
   * Moves an object to the bottom of the stack of drawn objects
   * @return {fabric.Object} thisArg
   * @chainable
   */
  sendToBack: function sendToBack() {
    if (this.group) {
      fabric.StaticCanvas.prototype.sendToBack.call(this.group, this);
    } else if (this.canvas) {
      this.canvas.sendToBack(this);
    }
    return this;
  },
  /**
   * Moves an object to the top of the stack of drawn objects
   * @return {fabric.Object} thisArg
   * @chainable
   */
  bringToFront: function bringToFront() {
    if (this.group) {
      fabric.StaticCanvas.prototype.bringToFront.call(this.group, this);
    } else if (this.canvas) {
      this.canvas.bringToFront(this);
    }
    return this;
  },
  /**
   * Moves an object down in stack of drawn objects
   * @param {Boolean} [intersecting] If `true`, send object behind next lower intersecting object
   * @return {fabric.Object} thisArg
   * @chainable
   */
  sendBackwards: function sendBackwards(intersecting) {
    if (this.group) {
      fabric.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);
    } else if (this.canvas) {
      this.canvas.sendBackwards(this, intersecting);
    }
    return this;
  },
  /**
   * Moves an object up in stack of drawn objects
   * @param {Boolean} [intersecting] If `true`, send object in front of next upper intersecting object
   * @return {fabric.Object} thisArg
   * @chainable
   */
  bringForward: function bringForward(intersecting) {
    if (this.group) {
      fabric.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);
    } else if (this.canvas) {
      this.canvas.bringForward(this, intersecting);
    }
    return this;
  },
  /**
   * Moves an object to specified level in stack of drawn objects
   * @param {Number} index New position of object
   * @return {fabric.Object} thisArg
   * @chainable
   */
  moveTo: function moveTo(index) {
    if (this.group && this.group.type !== 'activeSelection') {
      fabric.StaticCanvas.prototype.moveTo.call(this.group, this, index);
    } else if (this.canvas) {
      this.canvas.moveTo(this, index);
    }
    return this;
  }
});

/* _TO_SVG_START_ */
(function () {
  function getSvgColorString(prop, value) {
    if (!value) {
      return prop + ': none; ';
    } else if (value.toLive) {
      return prop + ': url(#SVGID_' + value.id + '); ';
    } else {
      var color = new fabric.Color(value),
        str = prop + ': ' + color.toRgb() + '; ',
        opacity = color.getAlpha();
      if (opacity !== 1) {
        //change the color in rgb + opacity
        str += prop + '-opacity: ' + opacity.toString() + '; ';
      }
      return str;
    }
  }
  var toFixed = fabric.util.toFixed;
  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */{
    /**
     * Returns styles-string for svg-export
     * @param {Boolean} skipShadow a boolean to skip shadow filter output
     * @return {String}
     */
    getSvgStyles: function getSvgStyles(skipShadow) {
      var fillRule = this.fillRule ? this.fillRule : 'nonzero',
        strokeWidth = this.strokeWidth ? this.strokeWidth : '0',
        strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(' ') : 'none',
        strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : '0',
        strokeLineCap = this.strokeLineCap ? this.strokeLineCap : 'butt',
        strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : 'miter',
        strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : '4',
        opacity = typeof this.opacity !== 'undefined' ? this.opacity : '1',
        visibility = this.visible ? '' : ' visibility: hidden;',
        filter = skipShadow ? '' : this.getSvgFilter(),
        fill = getSvgColorString('fill', this.fill),
        stroke = getSvgColorString('stroke', this.stroke);
      return [stroke, 'stroke-width: ', strokeWidth, '; ', 'stroke-dasharray: ', strokeDashArray, '; ', 'stroke-linecap: ', strokeLineCap, '; ', 'stroke-dashoffset: ', strokeDashOffset, '; ', 'stroke-linejoin: ', strokeLineJoin, '; ', 'stroke-miterlimit: ', strokeMiterLimit, '; ', fill, 'fill-rule: ', fillRule, '; ', 'opacity: ', opacity, ';', filter, visibility].join('');
    },
    /**
     * Returns styles-string for svg-export
     * @param {Object} style the object from which to retrieve style properties
     * @param {Boolean} useWhiteSpace a boolean to include an additional attribute in the style.
     * @return {String}
     */
    getSvgSpanStyles: function getSvgSpanStyles(style, useWhiteSpace) {
      var term = '; ';
      var fontFamily = style.fontFamily ? 'font-family: ' + (style.fontFamily.indexOf('\'') === -1 && style.fontFamily.indexOf('"') === -1 ? '\'' + style.fontFamily + '\'' : style.fontFamily) + term : '';
      var strokeWidth = style.strokeWidth ? 'stroke-width: ' + style.strokeWidth + term : '',
        fontFamily = fontFamily,
        fontSize = style.fontSize ? 'font-size: ' + style.fontSize + 'px' + term : '',
        fontStyle = style.fontStyle ? 'font-style: ' + style.fontStyle + term : '',
        fontWeight = style.fontWeight ? 'font-weight: ' + style.fontWeight + term : '',
        fill = style.fill ? getSvgColorString('fill', style.fill) : '',
        stroke = style.stroke ? getSvgColorString('stroke', style.stroke) : '',
        textDecoration = this.getSvgTextDecoration(style),
        deltaY = style.deltaY ? 'baseline-shift: ' + -style.deltaY + '; ' : '';
      if (textDecoration) {
        textDecoration = 'text-decoration: ' + textDecoration + term;
      }
      return [stroke, strokeWidth, fontFamily, fontSize, fontStyle, fontWeight, textDecoration, fill, deltaY, useWhiteSpace ? 'white-space: pre; ' : ''].join('');
    },
    /**
     * Returns text-decoration property for svg-export
     * @param {Object} style the object from which to retrieve style properties
     * @return {String}
     */
    getSvgTextDecoration: function getSvgTextDecoration(style) {
      return ['overline', 'underline', 'line-through'].filter(function (decoration) {
        return style[decoration.replace('-', '')];
      }).join(' ');
    },
    /**
     * Returns filter for svg shadow
     * @return {String}
     */
    getSvgFilter: function getSvgFilter() {
      return this.shadow ? 'filter: url(#SVGID_' + this.shadow.id + ');' : '';
    },
    /**
     * Returns id attribute for svg output
     * @return {String}
     */
    getSvgCommons: function getSvgCommons() {
      return [this.id ? 'id="' + this.id + '" ' : '', this.clipPath ? 'clip-path="url(#' + this.clipPath.clipPathId + ')" ' : ''].join('');
    },
    /**
     * Returns transform-string for svg-export
     * @param {Boolean} use the full transform or the single object one.
     * @return {String}
     */
    getSvgTransform: function getSvgTransform(full, additionalTransform) {
      var transform = full ? this.calcTransformMatrix() : this.calcOwnMatrix(),
        svgTransform = 'transform="' + fabric.util.matrixToSVG(transform);
      return svgTransform + (additionalTransform || '') + '" ';
    },
    _setSVGBg: function _setSVGBg(textBgRects) {
      if (this.backgroundColor) {
        var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
        textBgRects.push('\t\t<rect ', this._getFillAttributes(this.backgroundColor), ' x="', toFixed(-this.width / 2, NUM_FRACTION_DIGITS), '" y="', toFixed(-this.height / 2, NUM_FRACTION_DIGITS), '" width="', toFixed(this.width, NUM_FRACTION_DIGITS), '" height="', toFixed(this.height, NUM_FRACTION_DIGITS), '"></rect>\n');
      }
    },
    /**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
    toSVG: function toSVG(reviver) {
      return this._createBaseSVGMarkup(this._toSVG(reviver), {
        reviver: reviver
      });
    },
    /**
     * Returns svg clipPath representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
    toClipPathSVG: function toClipPathSVG(reviver) {
      return '\t' + this._createBaseClipPathSVGMarkup(this._toSVG(reviver), {
        reviver: reviver
      });
    },
    /**
     * @private
     */
    _createBaseClipPathSVGMarkup: function _createBaseClipPathSVGMarkup(objectMarkup, options) {
      options = options || {};
      var reviver = options.reviver,
        additionalTransform = options.additionalTransform || '',
        commonPieces = [this.getSvgTransform(true, additionalTransform), this.getSvgCommons()].join(''),
        // insert commons in the markup, style and svgCommons
        index = objectMarkup.indexOf('COMMON_PARTS');
      objectMarkup[index] = commonPieces;
      return reviver ? reviver(objectMarkup.join('')) : objectMarkup.join('');
    },
    /**
     * @private
     */
    _createBaseSVGMarkup: function _createBaseSVGMarkup(objectMarkup, options) {
      options = options || {};
      var noStyle = options.noStyle,
        reviver = options.reviver,
        styleInfo = noStyle ? '' : 'style="' + this.getSvgStyles() + '" ',
        shadowInfo = options.withShadow ? 'style="' + this.getSvgFilter() + '" ' : '',
        clipPath = this.clipPath,
        vectorEffect = this.strokeUniform ? 'vector-effect="non-scaling-stroke" ' : '',
        absoluteClipPath = clipPath && clipPath.absolutePositioned,
        stroke = this.stroke,
        fill = this.fill,
        shadow = this.shadow,
        commonPieces,
        markup = [],
        clipPathMarkup,
        // insert commons in the markup, style and svgCommons
        index = objectMarkup.indexOf('COMMON_PARTS'),
        additionalTransform = options.additionalTransform;
      if (clipPath) {
        clipPath.clipPathId = 'CLIPPATH_' + fabric.Object.__uid++;
        clipPathMarkup = '<clipPath id="' + clipPath.clipPathId + '" >\n' + clipPath.toClipPathSVG(reviver) + '</clipPath>\n';
      }
      if (absoluteClipPath) {
        markup.push('<g ', shadowInfo, this.getSvgCommons(), ' >\n');
      }
      markup.push('<g ', this.getSvgTransform(false), !absoluteClipPath ? shadowInfo + this.getSvgCommons() : '', ' >\n');
      commonPieces = [styleInfo, vectorEffect, noStyle ? '' : this.addPaintOrder(), ' ', additionalTransform ? 'transform="' + additionalTransform + '" ' : ''].join('');
      objectMarkup[index] = commonPieces;
      if (fill && fill.toLive) {
        markup.push(fill.toSVG(this));
      }
      if (stroke && stroke.toLive) {
        markup.push(stroke.toSVG(this));
      }
      if (shadow) {
        markup.push(shadow.toSVG(this));
      }
      if (clipPath) {
        markup.push(clipPathMarkup);
      }
      markup.push(objectMarkup.join(''));
      markup.push('</g>\n');
      absoluteClipPath && markup.push('</g>\n');
      return reviver ? reviver(markup.join('')) : markup.join('');
    },
    addPaintOrder: function addPaintOrder() {
      return this.paintFirst !== 'fill' ? ' paint-order="' + this.paintFirst + '" ' : '';
    }
  });
})();
/* _TO_SVG_END_ */

(function () {
  var extend = fabric.util.object.extend,
    originalSet = 'stateProperties';

  /*
    Depends on `stateProperties`
  */
  function saveProps(origin, destination, props) {
    var tmpObj = {},
      deep = true;
    props.forEach(function (prop) {
      tmpObj[prop] = origin[prop];
    });
    extend(origin[destination], tmpObj, deep);
  }
  function _isEqual(origValue, currentValue, firstPass) {
    if (origValue === currentValue) {
      // if the objects are identical, return
      return true;
    } else if (Array.isArray(origValue)) {
      if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {
        return false;
      }
      for (var i = 0, len = origValue.length; i < len; i++) {
        if (!_isEqual(origValue[i], currentValue[i])) {
          return false;
        }
      }
      return true;
    } else if (origValue && _typeof(origValue) === 'object') {
      var keys = Object.keys(origValue),
        key;
      if (!currentValue || _typeof(currentValue) !== 'object' || !firstPass && keys.length !== Object.keys(currentValue).length) {
        return false;
      }
      for (var i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        // since clipPath is in the statefull cache list and the clipPath objects
        // would be iterated as an object, this would lead to possible infinite recursion
        // we do not want to compare those.
        if (key === 'canvas' || key === 'group') {
          continue;
        }
        if (!_isEqual(origValue[key], currentValue[key])) {
          return false;
        }
      }
      return true;
    }
  }
  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */{
    /**
     * Returns true if object state (one of its state properties) was changed
     * @param {String} [propertySet] optional name for the set of property we want to save
     * @return {Boolean} true if instance' state has changed since `{@link fabric.Object#saveState}` was called
     */
    hasStateChanged: function hasStateChanged(propertySet) {
      propertySet = propertySet || originalSet;
      var dashedPropertySet = '_' + propertySet;
      if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {
        return true;
      }
      return !_isEqual(this[dashedPropertySet], this, true);
    },
    /**
     * Saves state of an object
     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
     * @return {fabric.Object} thisArg
     */
    saveState: function saveState(options) {
      var propertySet = options && options.propertySet || originalSet,
        destination = '_' + propertySet;
      if (!this[destination]) {
        return this.setupState(options);
      }
      saveProps(this, destination, this[propertySet]);
      if (options && options.stateProperties) {
        saveProps(this, destination, options.stateProperties);
      }
      return this;
    },
    /**
     * Setups state of an object
     * @param {Object} [options] Object with additional `stateProperties` array to include when saving state
     * @return {fabric.Object} thisArg
     */
    setupState: function setupState(options) {
      options = options || {};
      var propertySet = options.propertySet || originalSet;
      options.propertySet = propertySet;
      this['_' + propertySet] = {};
      this.saveState(options);
      return this;
    }
  });
})();
(function () {
  var degreesToRadians = fabric.util.degreesToRadians;
  fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */{
    /**
     * Determines which corner has been clicked
     * @private
     * @param {Object} pointer The pointer indicating the mouse position
     * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found
     */
    _findTargetCorner: function _findTargetCorner(pointer, forTouch) {
      // objects in group, anykind, are not self modificable,
      // must not return an hovered corner.
      if (!this.hasControls || this.group || !this.canvas || this.canvas._activeObject !== this) {
        return false;
      }
      var ex = pointer.x,
        ey = pointer.y,
        xPoints,
        lines,
        keys = Object.keys(this.oCoords),
        j = keys.length - 1,
        i;
      this.__corner = 0;

      // cycle in reverse order so we pick first the one on top
      for (; j >= 0; j--) {
        i = keys[j];
        if (!this.isControlVisible(i)) {
          continue;
        }
        lines = this._getImageLines(forTouch ? this.oCoords[i].touchCorner : this.oCoords[i].corner);
        // // debugging
        //
        // this.canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);
        // this.canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);
        //
        // this.canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);
        // this.canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);
        //
        // this.canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);
        // this.canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);
        //
        // this.canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);
        // this.canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);

        xPoints = this._findCrossPoints({
          x: ex,
          y: ey
        }, lines);
        if (xPoints !== 0 && xPoints % 2 === 1) {
          this.__corner = i;
          return i;
        }
      }
      return false;
    },
    /**
     * Calls a function for each control. The function gets called,
     * with the control, the object that is calling the iterator and the control's key
     * @param {Function} fn function to iterate over the controls over
     */
    forEachControl: function forEachControl(fn) {
      for (var i in this.controls) {
        fn(this.controls[i], i, this);
      }
      ;
    },
    /**
     * Sets the coordinates of the draggable boxes in the corners of
     * the image used to scale/rotate it.
     * note: if we would switch to ROUND corner area, all of this would disappear.
     * everything would resolve to a single point and a pythagorean theorem for the distance
     * @private
     */
    _setCornerCoords: function _setCornerCoords() {
      var coords = this.oCoords;
      for (var control in coords) {
        var controlObject = this.controls[control];
        coords[control].corner = controlObject.calcCornerCoords(this.angle, this.cornerSize, coords[control].x, coords[control].y, false);
        coords[control].touchCorner = controlObject.calcCornerCoords(this.angle, this.touchCornerSize, coords[control].x, coords[control].y, true);
      }
    },
    /**
     * Draws a colored layer behind the object, inside its selection borders.
     * Requires public options: padding, selectionBackgroundColor
     * this function is called when the context is transformed
     * has checks to be skipped when the object is on a staticCanvas
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @return {fabric.Object} thisArg
     * @chainable
     */
    drawSelectionBackground: function drawSelectionBackground(ctx) {
      if (!this.selectionBackgroundColor || this.canvas && !this.canvas.interactive || this.canvas && this.canvas._activeObject !== this) {
        return this;
      }
      ctx.save();
      var center = this.getCenterPoint(),
        wh = this._calculateCurrentDimensions(),
        vpt = this.canvas.viewportTransform;
      ctx.translate(center.x, center.y);
      ctx.scale(1 / vpt[0], 1 / vpt[3]);
      ctx.rotate(degreesToRadians(this.angle));
      ctx.fillStyle = this.selectionBackgroundColor;
      ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);
      ctx.restore();
      return this;
    },
    /**
     * Draws borders of an object's bounding box.
     * Requires public properties: width, height
     * Requires public options: padding, borderColor
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @param {Object} styleOverride object to override the object style
     * @return {fabric.Object} thisArg
     * @chainable
     */
    drawBorders: function drawBorders(ctx, styleOverride) {
      styleOverride = styleOverride || {};
      var wh = this._calculateCurrentDimensions(),
        strokeWidth = this.borderScaleFactor,
        width = wh.x + strokeWidth,
        height = wh.y + strokeWidth,
        hasControls = typeof styleOverride.hasControls !== 'undefined' ? styleOverride.hasControls : this.hasControls,
        shouldStroke = false;
      ctx.save();
      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;
      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);
      ctx.strokeRect(-width / 2, -height / 2, width, height);
      if (hasControls) {
        ctx.beginPath();
        this.forEachControl(function (control, key, fabricObject) {
          // in this moment, the ctx is centered on the object.
          // width and height of the above function are the size of the bbox.
          if (control.withConnection && control.getVisibility(fabricObject, key)) {
            // reset movement for each control
            shouldStroke = true;
            ctx.moveTo(control.x * width, control.y * height);
            ctx.lineTo(control.x * width + control.offsetX, control.y * height + control.offsetY);
          }
        });
        if (shouldStroke) {
          ctx.stroke();
        }
      }
      ctx.restore();
      return this;
    },
    /**
     * Draws borders of an object's bounding box when it is inside a group.
     * Requires public properties: width, height
     * Requires public options: padding, borderColor
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @param {object} options object representing current object parameters
     * @param {Object} styleOverride object to override the object style
     * @return {fabric.Object} thisArg
     * @chainable
     */
    drawBordersInGroup: function drawBordersInGroup(ctx, options, styleOverride) {
      styleOverride = styleOverride || {};
      var bbox = fabric.util.sizeAfterTransform(this.width, this.height, options),
        strokeWidth = this.strokeWidth,
        strokeUniform = this.strokeUniform,
        borderScaleFactor = this.borderScaleFactor,
        width = bbox.x + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleX) + borderScaleFactor,
        height = bbox.y + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleY) + borderScaleFactor;
      ctx.save();
      this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);
      ctx.strokeStyle = styleOverride.borderColor || this.borderColor;
      ctx.strokeRect(-width / 2, -height / 2, width, height);
      ctx.restore();
      return this;
    },
    /**
     * Draws corners of an object's bounding box.
     * Requires public properties: width, height
     * Requires public options: cornerSize, padding
     * @param {CanvasRenderingContext2D} ctx Context to draw on
     * @param {Object} styleOverride object to override the object style
     * @return {fabric.Object} thisArg
     * @chainable
     */
    drawControls: function drawControls(ctx, styleOverride) {
      styleOverride = styleOverride || {};
      ctx.save();
      var retinaScaling = this.canvas.getRetinaScaling(),
        matrix,
        p;
      ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);
      ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;
      if (!this.transparentCorners) {
        ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;
      }
      this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray);
      this.setCoords();
      if (this.group) {
        // fabricJS does not really support drawing controls inside groups,
        // this piece of code here helps having at least the control in places.
        // If an application needs to show some objects as selected because of some UI state
        // can still call Object._renderControls() on any object they desire, independently of groups.
        // using no padding, circular controls and hiding the rotating cursor is higly suggested,
        matrix = this.group.calcTransformMatrix();
      }
      this.forEachControl(function (control, key, fabricObject) {
        p = fabricObject.oCoords[key];
        if (control.getVisibility(fabricObject, key)) {
          if (matrix) {
            p = fabric.util.transformPoint(p, matrix);
          }
          control.render(ctx, p.x, p.y, styleOverride, fabricObject);
        }
      });
      ctx.restore();
      return this;
    },
    /**
     * Returns true if the specified control is visible, false otherwise.
     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
     * @returns {Boolean} true if the specified control is visible, false otherwise
     */
    isControlVisible: function isControlVisible(controlKey) {
      return this.controls[controlKey] && this.controls[controlKey].getVisibility(this, controlKey);
    },
    /**
     * Sets the visibility of the specified control.
     * @param {String} controlKey The key of the control. Possible values are 'tl', 'tr', 'br', 'bl', 'ml', 'mt', 'mr', 'mb', 'mtr'.
     * @param {Boolean} visible true to set the specified control visible, false otherwise
     * @return {fabric.Object} thisArg
     * @chainable
     */
    setControlVisible: function setControlVisible(controlKey, visible) {
      if (!this._controlsVisibility) {
        this._controlsVisibility = {};
      }
      this._controlsVisibility[controlKey] = visible;
      return this;
    },
    /**
     * Sets the visibility state of object controls.
     * @param {Object} [options] Options object
     * @param {Boolean} [options.bl] true to enable the bottom-left control, false to disable it
     * @param {Boolean} [options.br] true to enable the bottom-right control, false to disable it
     * @param {Boolean} [options.mb] true to enable the middle-bottom control, false to disable it
     * @param {Boolean} [options.ml] true to enable the middle-left control, false to disable it
     * @param {Boolean} [options.mr] true to enable the middle-right control, false to disable it
     * @param {Boolean} [options.mt] true to enable the middle-top control, false to disable it
     * @param {Boolean} [options.tl] true to enable the top-left control, false to disable it
     * @param {Boolean} [options.tr] true to enable the top-right control, false to disable it
     * @param {Boolean} [options.mtr] true to enable the middle-top-rotate control, false to disable it
     * @return {fabric.Object} thisArg
     * @chainable
     */
    setControlsVisibility: function setControlsVisibility(options) {
      options || (options = {});
      for (var p in options) {
        this.setControlVisible(p, options[p]);
      }
      return this;
    },
    /**
     * This callback function is called every time _discardActiveObject or _setActiveObject
     * try to to deselect this object. If the function returns true, the process is cancelled
     * @param {Object} [options] options sent from the upper functions
     * @param {Event} [options.e] event if the process is generated by an event
     */
    onDeselect: function onDeselect() {
      // implemented by sub-classes, as needed.
    },
    /**
     * This callback function is called every time _discardActiveObject or _setActiveObject
     * try to to select this object. If the function returns true, the process is cancelled
     * @param {Object} [options] options sent from the upper functions
     * @param {Event} [options.e] event if the process is generated by an event
     */
    onSelect: function onSelect() {
      // implemented by sub-classes, as needed.
    }
  });
})();
fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */{
  /**
   * Animation duration (in ms) for fx* methods
   * @type Number
   * @default
   */
  FX_DURATION: 500,
  /**
   * Centers object horizontally with animation.
   * @param {fabric.Object} object Object to center
   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.AnimationContext} context
   */
  fxCenterObjectH: function fxCenterObjectH(object, callbacks) {
    callbacks = callbacks || {};
    var empty = function empty() {},
      _onComplete = callbacks.onComplete || empty,
      _onChange = callbacks.onChange || empty,
      _this = this;
    return fabric.util.animate({
      target: this,
      startValue: object.left,
      endValue: this.getCenterPoint().x,
      duration: this.FX_DURATION,
      onChange: function onChange(value) {
        object.set('left', value);
        _this.requestRenderAll();
        _onChange();
      },
      onComplete: function onComplete() {
        object.setCoords();
        _onComplete();
      }
    });
  },
  /**
   * Centers object vertically with animation.
   * @param {fabric.Object} object Object to center
   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.AnimationContext} context
   */
  fxCenterObjectV: function fxCenterObjectV(object, callbacks) {
    callbacks = callbacks || {};
    var empty = function empty() {},
      _onComplete2 = callbacks.onComplete || empty,
      _onChange2 = callbacks.onChange || empty,
      _this = this;
    return fabric.util.animate({
      target: this,
      startValue: object.top,
      endValue: this.getCenterPoint().y,
      duration: this.FX_DURATION,
      onChange: function onChange(value) {
        object.set('top', value);
        _this.requestRenderAll();
        _onChange2();
      },
      onComplete: function onComplete() {
        object.setCoords();
        _onComplete2();
      }
    });
  },
  /**
   * Same as `fabric.Canvas#remove` but animated
   * @param {fabric.Object} object Object to remove
   * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.AnimationContext} context
   */
  fxRemove: function fxRemove(object, callbacks) {
    callbacks = callbacks || {};
    var empty = function empty() {},
      _onComplete3 = callbacks.onComplete || empty,
      _onChange3 = callbacks.onChange || empty,
      _this = this;
    return fabric.util.animate({
      target: this,
      startValue: object.opacity,
      endValue: 0,
      duration: this.FX_DURATION,
      onChange: function onChange(value) {
        object.set('opacity', value);
        _this.requestRenderAll();
        _onChange3();
      },
      onComplete: function onComplete() {
        _this.remove(object);
        _onComplete3();
      }
    });
  }
});
fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */{
  /**
   * Animates object's properties
   * @param {String|Object} property Property to animate (if string) or properties to animate (if object)
   * @param {Number|Object} value Value to animate property to (if string was given first) or options object
   * @return {fabric.Object} thisArg
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#animation}
   * @return {fabric.AnimationContext | fabric.AnimationContext[]} animation context (or an array if passed multiple properties)
   *
   * As object — multiple properties
   *
   * object.animate({ left: ..., top: ... });
   * object.animate({ left: ..., top: ... }, { duration: ... });
   *
   * As string — one property
   *
   * object.animate('left', ...);
   * object.animate('left', { duration: ... });
   *
   */
  animate: function animate() {
    if (arguments[0] && _typeof(arguments[0]) === 'object') {
      var propsToAnimate = [],
        prop,
        skipCallbacks,
        out = [];
      for (prop in arguments[0]) {
        propsToAnimate.push(prop);
      }
      for (var i = 0, len = propsToAnimate.length; i < len; i++) {
        prop = propsToAnimate[i];
        skipCallbacks = i !== len - 1;
        out.push(this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks));
      }
      return out;
    } else {
      return this._animate.apply(this, arguments);
    }
  },
  /**
   * @private
   * @param {String} property Property to animate
   * @param {String} to Value to animate to
   * @param {Object} [options] Options object
   * @param {Boolean} [skipCallbacks] When true, callbacks like onchange and oncomplete are not invoked
   */
  _animate: function _animate(property, to, options, skipCallbacks) {
    var _this = this,
      propPair;
    to = to.toString();
    if (!options) {
      options = {};
    } else {
      options = fabric.util.object.clone(options);
    }
    if (~property.indexOf('.')) {
      propPair = property.split('.');
    }
    var propIsColor = _this.colorProperties.indexOf(property) > -1 || propPair && _this.colorProperties.indexOf(propPair[1]) > -1;
    var currentValue = propPair ? this.get(propPair[0])[propPair[1]] : this.get(property);
    if (!('from' in options)) {
      options.from = currentValue;
    }
    if (!propIsColor) {
      if (~to.indexOf('=')) {
        to = currentValue + parseFloat(to.replace('=', ''));
      } else {
        to = parseFloat(to);
      }
    }
    var _options = {
      target: this,
      startValue: options.from,
      endValue: to,
      byValue: options.by,
      easing: options.easing,
      duration: options.duration,
      abort: options.abort && function (value, valueProgress, timeProgress) {
        return options.abort.call(_this, value, valueProgress, timeProgress);
      },
      onChange: function onChange(value, valueProgress, timeProgress) {
        if (propPair) {
          _this[propPair[0]][propPair[1]] = value;
        } else {
          _this.set(property, value);
        }
        if (skipCallbacks) {
          return;
        }
        options.onChange && options.onChange(value, valueProgress, timeProgress);
      },
      onComplete: function onComplete(value, valueProgress, timeProgress) {
        if (skipCallbacks) {
          return;
        }
        _this.setCoords();
        options.onComplete && options.onComplete(value, valueProgress, timeProgress);
      }
    };
    if (propIsColor) {
      return fabric.util.animateColor(_options.startValue, _options.endValue, _options.duration, _options);
    } else {
      return fabric.util.animate(_options);
    }
  }
});
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    extend = fabric.util.object.extend,
    clone = fabric.util.object.clone,
    coordProps = {
      x1: 1,
      x2: 1,
      y1: 1,
      y2: 1
    };
  if (fabric.Line) {
    fabric.warn('fabric.Line is already defined');
    return;
  }

  /**
   * Line class
   * @class fabric.Line
   * @extends fabric.Object
   * @see {@link fabric.Line#initialize} for constructor definition
   */
  fabric.Line = fabric.util.createClass(fabric.Object, /** @lends fabric.Line.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'line',
    /**
     * x value or first line edge
     * @type Number
     * @default
     */
    x1: 0,
    /**
     * y value or first line edge
     * @type Number
     * @default
     */
    y1: 0,
    /**
     * x value or second line edge
     * @type Number
     * @default
     */
    x2: 0,
    /**
     * y value or second line edge
     * @type Number
     * @default
     */
    y2: 0,
    cacheProperties: fabric.Object.prototype.cacheProperties.concat('x1', 'x2', 'y1', 'y2'),
    /**
     * Constructor
     * @param {Array} [points] Array of points
     * @param {Object} [options] Options object
     * @return {fabric.Line} thisArg
     */
    initialize: function initialize(points, options) {
      if (!points) {
        points = [0, 0, 0, 0];
      }
      this.callSuper('initialize', options);
      this.set('x1', points[0]);
      this.set('y1', points[1]);
      this.set('x2', points[2]);
      this.set('y2', points[3]);
      this._setWidthHeight(options);
    },
    /**
     * @private
     * @param {Object} [options] Options
     */
    _setWidthHeight: function _setWidthHeight(options) {
      options || (options = {});
      this.width = Math.abs(this.x2 - this.x1);
      this.height = Math.abs(this.y2 - this.y1);
      this.left = 'left' in options ? options.left : this._getLeftToOriginX();
      this.top = 'top' in options ? options.top : this._getTopToOriginY();
    },
    /**
     * @private
     * @param {String} key
     * @param {*} value
     */
    _set: function _set(key, value) {
      this.callSuper('_set', key, value);
      if (typeof coordProps[key] !== 'undefined') {
        this._setWidthHeight();
      }
      return this;
    },
    /**
     * @private
     * @return {Number} leftToOriginX Distance from left edge of canvas to originX of Line.
     */
    _getLeftToOriginX: makeEdgeToOriginGetter({
      // property names
      origin: 'originX',
      axis1: 'x1',
      axis2: 'x2',
      dimension: 'width'
    }, {
      // possible values of origin
      nearest: 'left',
      center: 'center',
      farthest: 'right'
    }),
    /**
     * @private
     * @return {Number} topToOriginY Distance from top edge of canvas to originY of Line.
     */
    _getTopToOriginY: makeEdgeToOriginGetter({
      // property names
      origin: 'originY',
      axis1: 'y1',
      axis2: 'y2',
      dimension: 'height'
    }, {
      // possible values of origin
      nearest: 'top',
      center: 'center',
      farthest: 'bottom'
    }),
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _render: function _render(ctx) {
      ctx.beginPath();
      var p = this.calcLinePoints();
      ctx.moveTo(p.x1, p.y1);
      ctx.lineTo(p.x2, p.y2);
      ctx.lineWidth = this.strokeWidth;

      // TODO: test this
      // make sure setting "fill" changes color of a line
      // (by copying fillStyle to strokeStyle, since line is stroked, not filled)
      var origStrokeStyle = ctx.strokeStyle;
      ctx.strokeStyle = this.stroke || ctx.fillStyle;
      this.stroke && this._renderStroke(ctx);
      ctx.strokeStyle = origStrokeStyle;
    },
    /**
     * This function is an helper for svg import. it returns the center of the object in the svg
     * untransformed coordinates
     * @private
     * @return {Object} center point from element coordinates
     */
    _findCenterFromElement: function _findCenterFromElement() {
      return {
        x: (this.x1 + this.x2) / 2,
        y: (this.y1 + this.y2) / 2
      };
    },
    /**
     * Returns object representation of an instance
     * @method toObject
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      return extend(this.callSuper('toObject', propertiesToInclude), this.calcLinePoints());
    },
    /*
     * Calculate object dimensions from its properties
     * @private
     */
    _getNonTransformedDimensions: function _getNonTransformedDimensions() {
      var dim = this.callSuper('_getNonTransformedDimensions');
      if (this.strokeLineCap === 'butt') {
        if (this.width === 0) {
          dim.y -= this.strokeWidth;
        }
        if (this.height === 0) {
          dim.x -= this.strokeWidth;
        }
      }
      return dim;
    },
    /**
     * Recalculates line points given width and height
     * @private
     */
    calcLinePoints: function calcLinePoints() {
      var xMult = this.x1 <= this.x2 ? -1 : 1,
        yMult = this.y1 <= this.y2 ? -1 : 1,
        x1 = xMult * this.width * 0.5,
        y1 = yMult * this.height * 0.5,
        x2 = xMult * this.width * -0.5,
        y2 = yMult * this.height * -0.5;
      return {
        x1: x1,
        x2: x2,
        y1: y1,
        y2: y2
      };
    },
    /* _TO_SVG_START_ */
    /**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
    _toSVG: function _toSVG() {
      var p = this.calcLinePoints();
      return ['<line ', 'COMMON_PARTS', 'x1="', p.x1, '" y1="', p.y1, '" x2="', p.x2, '" y2="', p.y2, '" />\n'];
    }
    /* _TO_SVG_END_ */
  });

  /* _FROM_SVG_START_ */
  /**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Line.fromElement})
   * @static
   * @memberOf fabric.Line
   * @see http://www.w3.org/TR/SVG/shapes.html#LineElement
   */
  fabric.Line.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x1 y1 x2 y2'.split(' '));

  /**
   * Returns fabric.Line instance from an SVG element
   * @static
   * @memberOf fabric.Line
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @param {Function} [callback] callback function invoked after parsing
   */
  fabric.Line.fromElement = function (element, callback, options) {
    options = options || {};
    var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES),
      points = [parsedAttributes.x1 || 0, parsedAttributes.y1 || 0, parsedAttributes.x2 || 0, parsedAttributes.y2 || 0];
    callback(new fabric.Line(points, extend(parsedAttributes, options)));
  };
  /* _FROM_SVG_END_ */

  /**
   * Returns fabric.Line instance from an object representation
   * @static
   * @memberOf fabric.Line
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   */
  fabric.Line.fromObject = function (object, callback) {
    function _callback(instance) {
      delete instance.points;
      callback && callback(instance);
    }
    ;
    var options = clone(object, true);
    options.points = [object.x1, object.y1, object.x2, object.y2];
    fabric.Object._fromObject('Line', options, _callback, 'points');
  };

  /**
   * Produces a function that calculates distance from canvas edge to Line origin.
   */
  function makeEdgeToOriginGetter(propertyNames, originValues) {
    var origin = propertyNames.origin,
      axis1 = propertyNames.axis1,
      axis2 = propertyNames.axis2,
      dimension = propertyNames.dimension,
      nearest = originValues.nearest,
      center = originValues.center,
      farthest = originValues.farthest;
    return function () {
      switch (this.get(origin)) {
        case nearest:
          return Math.min(this.get(axis1), this.get(axis2));
        case center:
          return Math.min(this.get(axis1), this.get(axis2)) + 0.5 * this.get(dimension);
        case farthest:
          return Math.max(this.get(axis1), this.get(axis2));
      }
    };
  }
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    degreesToRadians = fabric.util.degreesToRadians;
  if (fabric.Circle) {
    fabric.warn('fabric.Circle is already defined.');
    return;
  }

  /**
   * Circle class
   * @class fabric.Circle
   * @extends fabric.Object
   * @see {@link fabric.Circle#initialize} for constructor definition
   */
  fabric.Circle = fabric.util.createClass(fabric.Object, /** @lends fabric.Circle.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'circle',
    /**
     * Radius of this circle
     * @type Number
     * @default
     */
    radius: 0,
    /**
     * degrees of start of the circle.
     * probably will change to degrees in next major version
     * @type Number 0 - 359
     * @default 0
     */
    startAngle: 0,
    /**
     * End angle of the circle
     * probably will change to degrees in next major version
     * @type Number 1 - 360
     * @default 360
     */
    endAngle: 360,
    cacheProperties: fabric.Object.prototype.cacheProperties.concat('radius', 'startAngle', 'endAngle'),
    /**
     * @private
     * @param {String} key
     * @param {*} value
     * @return {fabric.Circle} thisArg
     */
    _set: function _set(key, value) {
      this.callSuper('_set', key, value);
      if (key === 'radius') {
        this.setRadius(value);
      }
      return this;
    },
    /**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      return this.callSuper('toObject', ['radius', 'startAngle', 'endAngle'].concat(propertiesToInclude));
    },
    /* _TO_SVG_START_ */

    /**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
    _toSVG: function _toSVG() {
      var svgString,
        x = 0,
        y = 0,
        angle = (this.endAngle - this.startAngle) % 360;
      if (angle === 0) {
        svgString = ['<circle ', 'COMMON_PARTS', 'cx="' + x + '" cy="' + y + '" ', 'r="', this.radius, '" />\n'];
      } else {
        var start = degreesToRadians(this.startAngle),
          end = degreesToRadians(this.endAngle),
          radius = this.radius,
          startX = fabric.util.cos(start) * radius,
          startY = fabric.util.sin(start) * radius,
          endX = fabric.util.cos(end) * radius,
          endY = fabric.util.sin(end) * radius,
          largeFlag = angle > 180 ? '1' : '0';
        svgString = ['<path d="M ' + startX + ' ' + startY, ' A ' + radius + ' ' + radius, ' 0 ', +largeFlag + ' 1', ' ' + endX + ' ' + endY, '" ', 'COMMON_PARTS', ' />\n'];
      }
      return svgString;
    },
    /* _TO_SVG_END_ */

    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render on
     */
    _render: function _render(ctx) {
      ctx.beginPath();
      ctx.arc(0, 0, this.radius, degreesToRadians(this.startAngle), degreesToRadians(this.endAngle), false);
      this._renderPaintInOrder(ctx);
    },
    /**
     * Returns horizontal radius of an object (according to how an object is scaled)
     * @return {Number}
     */
    getRadiusX: function getRadiusX() {
      return this.get('radius') * this.get('scaleX');
    },
    /**
     * Returns vertical radius of an object (according to how an object is scaled)
     * @return {Number}
     */
    getRadiusY: function getRadiusY() {
      return this.get('radius') * this.get('scaleY');
    },
    /**
     * Sets radius of an object (and updates width accordingly)
     * @return {fabric.Circle} thisArg
     */
    setRadius: function setRadius(value) {
      this.radius = value;
      return this.set('width', value * 2).set('height', value * 2);
    }
  });

  /* _FROM_SVG_START_ */
  /**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})
   * @static
   * @memberOf fabric.Circle
   * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement
   */
  fabric.Circle.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy r'.split(' '));

  /**
   * Returns {@link fabric.Circle} instance from an SVG element
   * @static
   * @memberOf fabric.Circle
   * @param {SVGElement} element Element to parse
   * @param {Function} [callback] Options callback invoked after parsing is finished
   * @param {Object} [options] Options object
   * @throws {Error} If value of `r` attribute is missing or invalid
   */
  fabric.Circle.fromElement = function (element, callback) {
    var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);
    if (!isValidRadius(parsedAttributes)) {
      throw new Error('value of `r` attribute is required and can not be negative');
    }
    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;
    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;
    callback(new fabric.Circle(parsedAttributes));
  };

  /**
   * @private
   */
  function isValidRadius(attributes) {
    return 'radius' in attributes && attributes.radius >= 0;
  }
  /* _FROM_SVG_END_ */

  /**
   * Returns {@link fabric.Circle} instance from an object representation
   * @static
   * @memberOf fabric.Circle
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   * @return {void}
   */
  fabric.Circle.fromObject = function (object, callback) {
    fabric.Object._fromObject('Circle', object, callback);
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {});
  if (fabric.Triangle) {
    fabric.warn('fabric.Triangle is already defined');
    return;
  }

  /**
   * Triangle class
   * @class fabric.Triangle
   * @extends fabric.Object
   * @return {fabric.Triangle} thisArg
   * @see {@link fabric.Triangle#initialize} for constructor definition
   */
  fabric.Triangle = fabric.util.createClass(fabric.Object, /** @lends fabric.Triangle.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'triangle',
    /**
     * Width is set to 100 to compensate the old initialize code that was setting it to 100
     * @type Number
     * @default
     */
    width: 100,
    /**
     * Height is set to 100 to compensate the old initialize code that was setting it to 100
     * @type Number
     * @default
     */
    height: 100,
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _render: function _render(ctx) {
      var widthBy2 = this.width / 2,
        heightBy2 = this.height / 2;
      ctx.beginPath();
      ctx.moveTo(-widthBy2, heightBy2);
      ctx.lineTo(0, -heightBy2);
      ctx.lineTo(widthBy2, heightBy2);
      ctx.closePath();
      this._renderPaintInOrder(ctx);
    },
    /* _TO_SVG_START_ */
    /**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
    _toSVG: function _toSVG() {
      var widthBy2 = this.width / 2,
        heightBy2 = this.height / 2,
        points = [-widthBy2 + ' ' + heightBy2, '0 ' + -heightBy2, widthBy2 + ' ' + heightBy2].join(',');
      return ['<polygon ', 'COMMON_PARTS', 'points="', points, '" />'];
    }
    /* _TO_SVG_END_ */
  });

  /**
   * Returns {@link fabric.Triangle} instance from an object representation
   * @static
   * @memberOf fabric.Triangle
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   */
  fabric.Triangle.fromObject = function (object, callback) {
    return fabric.Object._fromObject('Triangle', object, callback);
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    piBy2 = Math.PI * 2;
  if (fabric.Ellipse) {
    fabric.warn('fabric.Ellipse is already defined.');
    return;
  }

  /**
   * Ellipse class
   * @class fabric.Ellipse
   * @extends fabric.Object
   * @return {fabric.Ellipse} thisArg
   * @see {@link fabric.Ellipse#initialize} for constructor definition
   */
  fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @lends fabric.Ellipse.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'ellipse',
    /**
     * Horizontal radius
     * @type Number
     * @default
     */
    rx: 0,
    /**
     * Vertical radius
     * @type Number
     * @default
     */
    ry: 0,
    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),
    /**
     * Constructor
     * @param {Object} [options] Options object
     * @return {fabric.Ellipse} thisArg
     */
    initialize: function initialize(options) {
      this.callSuper('initialize', options);
      this.set('rx', options && options.rx || 0);
      this.set('ry', options && options.ry || 0);
    },
    /**
     * @private
     * @param {String} key
     * @param {*} value
     * @return {fabric.Ellipse} thisArg
     */
    _set: function _set(key, value) {
      this.callSuper('_set', key, value);
      switch (key) {
        case 'rx':
          this.rx = value;
          this.set('width', value * 2);
          break;
        case 'ry':
          this.ry = value;
          this.set('height', value * 2);
          break;
      }
      return this;
    },
    /**
     * Returns horizontal radius of an object (according to how an object is scaled)
     * @return {Number}
     */
    getRx: function getRx() {
      return this.get('rx') * this.get('scaleX');
    },
    /**
     * Returns Vertical radius of an object (according to how an object is scaled)
     * @return {Number}
     */
    getRy: function getRy() {
      return this.get('ry') * this.get('scaleY');
    },
    /**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));
    },
    /* _TO_SVG_START_ */
    /**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
    _toSVG: function _toSVG() {
      return ['<ellipse ', 'COMMON_PARTS', 'cx="0" cy="0" ', 'rx="', this.rx, '" ry="', this.ry, '" />\n'];
    },
    /* _TO_SVG_END_ */

    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render on
     */
    _render: function _render(ctx) {
      ctx.beginPath();
      ctx.save();
      ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);
      ctx.arc(0, 0, this.rx, 0, piBy2, false);
      ctx.restore();
      this._renderPaintInOrder(ctx);
    }
  });

  /* _FROM_SVG_START_ */
  /**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})
   * @static
   * @memberOf fabric.Ellipse
   * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement
   */
  fabric.Ellipse.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('cx cy rx ry'.split(' '));

  /**
   * Returns {@link fabric.Ellipse} instance from an SVG element
   * @static
   * @memberOf fabric.Ellipse
   * @param {SVGElement} element Element to parse
   * @param {Function} [callback] Options callback invoked after parsing is finished
   * @return {fabric.Ellipse}
   */
  fabric.Ellipse.fromElement = function (element, callback) {
    var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);
    parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;
    parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;
    callback(new fabric.Ellipse(parsedAttributes));
  };
  /* _FROM_SVG_END_ */

  /**
   * Returns {@link fabric.Ellipse} instance from an object representation
   * @static
   * @memberOf fabric.Ellipse
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as first argument
   * @return {void}
   */
  fabric.Ellipse.fromObject = function (object, callback) {
    fabric.Object._fromObject('Ellipse', object, callback);
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    extend = fabric.util.object.extend;
  if (fabric.Rect) {
    fabric.warn('fabric.Rect is already defined');
    return;
  }

  /**
   * Rectangle class
   * @class fabric.Rect
   * @extends fabric.Object
   * @return {fabric.Rect} thisArg
   * @see {@link fabric.Rect#initialize} for constructor definition
   */
  fabric.Rect = fabric.util.createClass(fabric.Object, /** @lends fabric.Rect.prototype */{
    /**
     * List of properties to consider when checking if state of an object is changed ({@link fabric.Object#hasStateChanged})
     * as well as for history (undo/redo) purposes
     * @type Array
     */
    stateProperties: fabric.Object.prototype.stateProperties.concat('rx', 'ry'),
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'rect',
    /**
     * Horizontal border radius
     * @type Number
     * @default
     */
    rx: 0,
    /**
     * Vertical border radius
     * @type Number
     * @default
     */
    ry: 0,
    cacheProperties: fabric.Object.prototype.cacheProperties.concat('rx', 'ry'),
    /**
     * Constructor
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */
    initialize: function initialize(options) {
      this.callSuper('initialize', options);
      this._initRxRy();
    },
    /**
     * Initializes rx/ry attributes
     * @private
     */
    _initRxRy: function _initRxRy() {
      if (this.rx && !this.ry) {
        this.ry = this.rx;
      } else if (this.ry && !this.rx) {
        this.rx = this.ry;
      }
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _render: function _render(ctx) {
      // 1x1 case (used in spray brush) optimization was removed because
      // with caching and higher zoom level this makes more damage than help

      var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0,
        ry = this.ry ? Math.min(this.ry, this.height / 2) : 0,
        w = this.width,
        h = this.height,
        x = -this.width / 2,
        y = -this.height / 2,
        isRounded = rx !== 0 || ry !== 0,
        /* "magic number" for bezier approximations of arcs (http://itc.ktu.lt/itc354/Riskus354.pdf) */
        k = 1 - 0.5522847498;
      ctx.beginPath();
      ctx.moveTo(x + rx, y);
      ctx.lineTo(x + w - rx, y);
      isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);
      ctx.lineTo(x + w, y + h - ry);
      isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);
      ctx.lineTo(x + rx, y + h);
      isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);
      ctx.lineTo(x, y + ry);
      isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);
      ctx.closePath();
      this._renderPaintInOrder(ctx);
    },
    /**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      return this.callSuper('toObject', ['rx', 'ry'].concat(propertiesToInclude));
    },
    /* _TO_SVG_START_ */
    /**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
    _toSVG: function _toSVG() {
      var x = -this.width / 2,
        y = -this.height / 2;
      return ['<rect ', 'COMMON_PARTS', 'x="', x, '" y="', y, '" rx="', this.rx, '" ry="', this.ry, '" width="', this.width, '" height="', this.height, '" />\n'];
    }
    /* _TO_SVG_END_ */
  });

  /* _FROM_SVG_START_ */
  /**
   * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)
   * @static
   * @memberOf fabric.Rect
   * @see: http://www.w3.org/TR/SVG/shapes.html#RectElement
   */
  fabric.Rect.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y rx ry width height'.split(' '));

  /**
   * Returns {@link fabric.Rect} instance from an SVG element
   * @static
   * @memberOf fabric.Rect
   * @param {SVGElement} element Element to parse
   * @param {Function} callback callback function invoked after parsing
   * @param {Object} [options] Options object
   */
  fabric.Rect.fromElement = function (element, callback, options) {
    if (!element) {
      return callback(null);
    }
    options = options || {};
    var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);
    parsedAttributes.left = parsedAttributes.left || 0;
    parsedAttributes.top = parsedAttributes.top || 0;
    parsedAttributes.height = parsedAttributes.height || 0;
    parsedAttributes.width = parsedAttributes.width || 0;
    var rect = new fabric.Rect(extend(options ? fabric.util.object.clone(options) : {}, parsedAttributes));
    rect.visible = rect.visible && rect.width > 0 && rect.height > 0;
    callback(rect);
  };
  /* _FROM_SVG_END_ */

  /**
   * Returns {@link fabric.Rect} instance from an object representation
   * @static
   * @memberOf fabric.Rect
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Rect instance is created
   */
  fabric.Rect.fromObject = function (object, callback) {
    return fabric.Object._fromObject('Rect', object, callback);
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    extend = fabric.util.object.extend,
    min = fabric.util.array.min,
    max = fabric.util.array.max,
    toFixed = fabric.util.toFixed,
    projectStrokeOnPoints = fabric.util.projectStrokeOnPoints;
  if (fabric.Polyline) {
    fabric.warn('fabric.Polyline is already defined');
    return;
  }

  /**
   * Polyline class
   * @class fabric.Polyline
   * @extends fabric.Object
   * @see {@link fabric.Polyline#initialize} for constructor definition
   */
  fabric.Polyline = fabric.util.createClass(fabric.Object, /** @lends fabric.Polyline.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'polyline',
    /**
     * Points array
     * @type Array
     * @default
     */
    points: null,
    /**
     * WARNING: Feature in progress
     * Calculate the exact bounding box taking in account strokeWidth on acute angles
     * this will be turned to true by default on fabric 6.0
     * maybe will be left in as an optimization since calculations may be slow
     * @deprecated
     * @type Boolean
     * @default false
     */
    exactBoundingBox: false,
    cacheProperties: fabric.Object.prototype.cacheProperties.concat('points'),
    /**
     * Constructor
     * @param {Array} points Array of points (where each point is an object with x and y)
     * @param {Object} [options] Options object
     * @return {fabric.Polyline} thisArg
     * @example
     * var poly = new fabric.Polyline([
     *     { x: 10, y: 10 },
     *     { x: 50, y: 30 },
     *     { x: 40, y: 70 },
     *     { x: 60, y: 50 },
     *     { x: 100, y: 150 },
     *     { x: 40, y: 100 }
     *   ], {
     *   stroke: 'red',
     *   left: 100,
     *   top: 100
     * });
     */
    initialize: function initialize(points, options) {
      options = options || {};
      this.points = points || [];
      this.callSuper('initialize', options);
      this._setPositionDimensions(options);
    },
    /**
     * @private
     */
    _projectStrokeOnPoints: function _projectStrokeOnPoints() {
      return projectStrokeOnPoints(this.points, this, true);
    },
    _setPositionDimensions: function _setPositionDimensions(options) {
      var calcDim = this._calcDimensions(options),
        correctLeftTop,
        correctSize = this.exactBoundingBox ? this.strokeWidth : 0;
      this.width = calcDim.width - correctSize;
      this.height = calcDim.height - correctSize;
      if (!options.fromSVG) {
        correctLeftTop = this.translateToGivenOrigin({
          // this looks bad, but is one way to keep it optional for now.
          x: calcDim.left - this.strokeWidth / 2 + correctSize / 2,
          y: calcDim.top - this.strokeWidth / 2 + correctSize / 2
        }, 'left', 'top', this.originX, this.originY);
      }
      if (typeof options.left === 'undefined') {
        this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;
      }
      if (typeof options.top === 'undefined') {
        this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;
      }
      this.pathOffset = {
        x: calcDim.left + this.width / 2 + correctSize / 2,
        y: calcDim.top + this.height / 2 + correctSize / 2
      };
    },
    /**
     * Calculate the polygon min and max point from points array,
     * returning an object with left, top, width, height to measure the
     * polygon size
     * @return {Object} object.left X coordinate of the polygon leftmost point
     * @return {Object} object.top Y coordinate of the polygon topmost point
     * @return {Object} object.width distance between X coordinates of the polygon leftmost and rightmost point
     * @return {Object} object.height distance between Y coordinates of the polygon topmost and bottommost point
     * @private
     */
    _calcDimensions: function _calcDimensions() {
      var points = this.exactBoundingBox ? this._projectStrokeOnPoints() : this.points,
        minX = min(points, 'x') || 0,
        minY = min(points, 'y') || 0,
        maxX = max(points, 'x') || 0,
        maxY = max(points, 'y') || 0,
        width = maxX - minX,
        height = maxY - minY;
      return {
        left: minX,
        top: minY,
        width: width,
        height: height
      };
    },
    /**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      return extend(this.callSuper('toObject', propertiesToInclude), {
        points: this.points.concat()
      });
    },
    /* _TO_SVG_START_ */
    /**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
    _toSVG: function _toSVG() {
      var points = [],
        diffX = this.pathOffset.x,
        diffY = this.pathOffset.y,
        NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
      for (var i = 0, len = this.points.length; i < len; i++) {
        points.push(toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ',', toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), ' ');
      }
      return ['<' + this.type + ' ', 'COMMON_PARTS', 'points="', points.join(''), '" />\n'];
    },
    /* _TO_SVG_END_ */

    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    commonRender: function commonRender(ctx) {
      var point,
        len = this.points.length,
        x = this.pathOffset.x,
        y = this.pathOffset.y;
      if (!len || isNaN(this.points[len - 1].y)) {
        // do not draw if no points or odd points
        // NaN comes from parseFloat of a empty string in parser
        return false;
      }
      ctx.beginPath();
      ctx.moveTo(this.points[0].x - x, this.points[0].y - y);
      for (var i = 0; i < len; i++) {
        point = this.points[i];
        ctx.lineTo(point.x - x, point.y - y);
      }
      return true;
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _render: function _render(ctx) {
      if (!this.commonRender(ctx)) {
        return;
      }
      this._renderPaintInOrder(ctx);
    },
    /**
     * Returns complexity of an instance
     * @return {Number} complexity of this instance
     */
    complexity: function complexity() {
      return this.get('points').length;
    }
  });

  /* _FROM_SVG_START_ */
  /**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Polyline.fromElement})
   * @static
   * @memberOf fabric.Polyline
   * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement
   */
  fabric.Polyline.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();

  /**
   * Returns fabric.Polyline instance from an SVG element
   * @static
   * @memberOf fabric.Polyline
   * @param {SVGElement} element Element to parser
   * @param {Function} callback callback function invoked after parsing
   * @param {Object} [options] Options object
   */
  fabric.Polyline.fromElementGenerator = function (_class) {
    return function (element, callback, options) {
      if (!element) {
        return callback(null);
      }
      options || (options = {});
      var points = fabric.parsePointsAttribute(element.getAttribute('points')),
        parsedAttributes = fabric.parseAttributes(element, fabric[_class].ATTRIBUTE_NAMES);
      parsedAttributes.fromSVG = true;
      callback(new fabric[_class](points, extend(parsedAttributes, options)));
    };
  };
  fabric.Polyline.fromElement = fabric.Polyline.fromElementGenerator('Polyline');

  /* _FROM_SVG_END_ */

  /**
   * Returns fabric.Polyline instance from an object representation
   * @static
   * @memberOf fabric.Polyline
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
   */
  fabric.Polyline.fromObject = function (object, callback) {
    return fabric.Object._fromObject('Polyline', object, callback, 'points');
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    projectStrokeOnPoints = fabric.util.projectStrokeOnPoints;
  if (fabric.Polygon) {
    fabric.warn('fabric.Polygon is already defined');
    return;
  }

  /**
   * Polygon class
   * @class fabric.Polygon
   * @extends fabric.Polyline
   * @see {@link fabric.Polygon#initialize} for constructor definition
   */
  fabric.Polygon = fabric.util.createClass(fabric.Polyline, /** @lends fabric.Polygon.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'polygon',
    /**
     * @private
     */
    _projectStrokeOnPoints: function _projectStrokeOnPoints() {
      return projectStrokeOnPoints(this.points, this);
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _render: function _render(ctx) {
      if (!this.commonRender(ctx)) {
        return;
      }
      ctx.closePath();
      this._renderPaintInOrder(ctx);
    }
  });

  /* _FROM_SVG_START_ */
  /**
   * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)
   * @static
   * @memberOf fabric.Polygon
   * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement
   */
  fabric.Polygon.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat();

  /**
   * Returns {@link fabric.Polygon} instance from an SVG element
   * @static
   * @memberOf fabric.Polygon
   * @param {SVGElement} element Element to parse
   * @param {Function} callback callback function invoked after parsing
   * @param {Object} [options] Options object
   */
  fabric.Polygon.fromElement = fabric.Polyline.fromElementGenerator('Polygon');
  /* _FROM_SVG_END_ */

  /**
   * Returns fabric.Polygon instance from an object representation
   * @static
   * @memberOf fabric.Polygon
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
   * @return {void}
   */
  fabric.Polygon.fromObject = function (object, callback) {
    fabric.Object._fromObject('Polygon', object, callback, 'points');
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    min = fabric.util.array.min,
    max = fabric.util.array.max,
    extend = fabric.util.object.extend,
    clone = fabric.util.object.clone,
    toFixed = fabric.util.toFixed;
  if (fabric.Path) {
    fabric.warn('fabric.Path is already defined');
    return;
  }

  /**
   * Path class
   * @class fabric.Path
   * @extends fabric.Object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#path_and_pathgroup}
   * @see {@link fabric.Path#initialize} for constructor definition
   */
  fabric.Path = fabric.util.createClass(fabric.Object, /** @lends fabric.Path.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'path',
    /**
     * Array of path points
     * @type Array
     * @default
     */
    path: null,
    cacheProperties: fabric.Object.prototype.cacheProperties.concat('path', 'fillRule'),
    stateProperties: fabric.Object.prototype.stateProperties.concat('path'),
    /**
     * Constructor
     * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
     * @param {Object} [options] Options object
     * @return {fabric.Path} thisArg
     */
    initialize: function initialize(path, options) {
      options = clone(options || {});
      delete options.path;
      this.callSuper('initialize', options);
      this._setPath(path || [], options);
    },
    /**
    * @private
    * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
    * @param {Object} [options] Options object
    */
    _setPath: function _setPath(path, options) {
      this.path = fabric.util.makePathSimpler(Array.isArray(path) ? path : fabric.util.parsePath(path));
      fabric.Polyline.prototype._setPositionDimensions.call(this, options || {});
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render path on
     */
    _renderPathCommands: function _renderPathCommands(ctx) {
      var current,
        // current instruction
        subpathStartX = 0,
        subpathStartY = 0,
        x = 0,
        // current x
        y = 0,
        // current y
        controlX = 0,
        // current control point x
        controlY = 0,
        // current control point y
        l = -this.pathOffset.x,
        t = -this.pathOffset.y;
      ctx.beginPath();
      for (var i = 0, len = this.path.length; i < len; ++i) {
        current = this.path[i];
        switch (current[0]) {
          // first letter

          case 'L':
            // lineto, absolute
            x = current[1];
            y = current[2];
            ctx.lineTo(x + l, y + t);
            break;
          case 'M':
            // moveTo, absolute
            x = current[1];
            y = current[2];
            subpathStartX = x;
            subpathStartY = y;
            ctx.moveTo(x + l, y + t);
            break;
          case 'C':
            // bezierCurveTo, absolute
            x = current[5];
            y = current[6];
            controlX = current[3];
            controlY = current[4];
            ctx.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);
            break;
          case 'Q':
            // quadraticCurveTo, absolute
            ctx.quadraticCurveTo(current[1] + l, current[2] + t, current[3] + l, current[4] + t);
            x = current[3];
            y = current[4];
            controlX = current[1];
            controlY = current[2];
            break;
          case 'z':
          case 'Z':
            x = subpathStartX;
            y = subpathStartY;
            ctx.closePath();
            break;
        }
      }
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx context to render path on
     */
    _render: function _render(ctx) {
      this._renderPathCommands(ctx);
      this._renderPaintInOrder(ctx);
    },
    /**
     * Returns string representation of an instance
     * @return {String} string representation of an instance
     */
    toString: function toString() {
      return '#<fabric.Path (' + this.complexity() + '): { "top": ' + this.top + ', "left": ' + this.left + ' }>';
    },
    /**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      return extend(this.callSuper('toObject', propertiesToInclude), {
        path: this.path.map(function (item) {
          return item.slice();
        })
      });
    },
    /**
     * Returns dataless object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toDatalessObject: function toDatalessObject(propertiesToInclude) {
      var o = this.toObject(['sourcePath'].concat(propertiesToInclude));
      if (o.sourcePath) {
        delete o.path;
      }
      return o;
    },
    /* _TO_SVG_START_ */
    /**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
    _toSVG: function _toSVG() {
      var path = fabric.util.joinPath(this.path);
      return ['<path ', 'COMMON_PARTS', 'd="', path, '" stroke-linecap="round" ', '/>\n'];
    },
    _getOffsetTransform: function _getOffsetTransform() {
      var digits = fabric.Object.NUM_FRACTION_DIGITS;
      return ' translate(' + toFixed(-this.pathOffset.x, digits) + ', ' + toFixed(-this.pathOffset.y, digits) + ')';
    },
    /**
     * Returns svg clipPath representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
    toClipPathSVG: function toClipPathSVG(reviver) {
      var additionalTransform = this._getOffsetTransform();
      return '\t' + this._createBaseClipPathSVGMarkup(this._toSVG(), {
        reviver: reviver,
        additionalTransform: additionalTransform
      });
    },
    /**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
    toSVG: function toSVG(reviver) {
      var additionalTransform = this._getOffsetTransform();
      return this._createBaseSVGMarkup(this._toSVG(), {
        reviver: reviver,
        additionalTransform: additionalTransform
      });
    },
    /* _TO_SVG_END_ */

    /**
     * Returns number representation of an instance complexity
     * @return {Number} complexity of this instance
     */
    complexity: function complexity() {
      return this.path.length;
    },
    /**
     * @private
     */
    _calcDimensions: function _calcDimensions() {
      var aX = [],
        aY = [],
        current,
        // current instruction
        subpathStartX = 0,
        subpathStartY = 0,
        x = 0,
        // current x
        y = 0,
        // current y
        bounds;
      for (var i = 0, len = this.path.length; i < len; ++i) {
        current = this.path[i];
        switch (current[0]) {
          // first letter

          case 'L':
            // lineto, absolute
            x = current[1];
            y = current[2];
            bounds = [];
            break;
          case 'M':
            // moveTo, absolute
            x = current[1];
            y = current[2];
            subpathStartX = x;
            subpathStartY = y;
            bounds = [];
            break;
          case 'C':
            // bezierCurveTo, absolute
            bounds = fabric.util.getBoundsOfCurve(x, y, current[1], current[2], current[3], current[4], current[5], current[6]);
            x = current[5];
            y = current[6];
            break;
          case 'Q':
            // quadraticCurveTo, absolute
            bounds = fabric.util.getBoundsOfCurve(x, y, current[1], current[2], current[1], current[2], current[3], current[4]);
            x = current[3];
            y = current[4];
            break;
          case 'z':
          case 'Z':
            x = subpathStartX;
            y = subpathStartY;
            break;
        }
        bounds.forEach(function (point) {
          aX.push(point.x);
          aY.push(point.y);
        });
        aX.push(x);
        aY.push(y);
      }
      var minX = min(aX) || 0,
        minY = min(aY) || 0,
        maxX = max(aX) || 0,
        maxY = max(aY) || 0,
        deltaX = maxX - minX,
        deltaY = maxY - minY;
      return {
        left: minX,
        top: minY,
        width: deltaX,
        height: deltaY
      };
    }
  });

  /**
   * Creates an instance of fabric.Path from an object
   * @static
   * @memberOf fabric.Path
   * @param {Object} object
   * @param {Function} [callback] Callback to invoke when an fabric.Path instance is created
   */
  fabric.Path.fromObject = function (object, callback) {
    if (typeof object.sourcePath === 'string') {
      var pathUrl = object.sourcePath;
      fabric.loadSVGFromURL(pathUrl, function (elements) {
        var path = elements[0];
        path.setOptions(object);
        if (object.clipPath) {
          fabric.util.enlivenObjects([object.clipPath], function (elivenedObjects) {
            path.clipPath = elivenedObjects[0];
            callback && callback(path);
          });
        } else {
          callback && callback(path);
        }
      });
    } else {
      fabric.Object._fromObject('Path', object, callback, 'path');
    }
  };

  /* _FROM_SVG_START_ */
  /**
   * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)
   * @static
   * @memberOf fabric.Path
   * @see http://www.w3.org/TR/SVG/paths.html#PathElement
   */
  fabric.Path.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat(['d']);

  /**
   * Creates an instance of fabric.Path from an SVG <path> element
   * @static
   * @memberOf fabric.Path
   * @param {SVGElement} element to parse
   * @param {Function} callback Callback to invoke when an fabric.Path instance is created
   * @param {Object} [options] Options object
   * @param {Function} [callback] Options callback invoked after parsing is finished
   */
  fabric.Path.fromElement = function (element, callback, options) {
    var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);
    parsedAttributes.fromSVG = true;
    callback(new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options)));
  };
  /* _FROM_SVG_END_ */
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    min = fabric.util.array.min,
    max = fabric.util.array.max;
  if (fabric.Group) {
    return;
  }

  /**
   * Group class
   * @class fabric.Group
   * @extends fabric.Object
   * @mixes fabric.Collection
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}
   * @see {@link fabric.Group#initialize} for constructor definition
   */
  fabric.Group = fabric.util.createClass(fabric.Object, fabric.Collection, /** @lends fabric.Group.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'group',
    /**
     * Width of stroke
     * @type Number
     * @default
     */
    strokeWidth: 0,
    /**
     * Indicates if click, mouseover, mouseout events & hoverCursor should also check for subtargets
     * @type Boolean
     * @default
     */
    subTargetCheck: false,
    /**
     * Groups are container, do not render anything on theyr own, ence no cache properties
     * @type Array
     * @default
     */
    cacheProperties: [],
    /**
     * setOnGroup is a method used for TextBox that is no more used since 2.0.0 The behavior is still
     * available setting this boolean to true.
     * @type Boolean
     * @since 2.0.0
     * @default
     */
    useSetOnGroup: false,
    /**
     * Constructor
     * @param {Object} objects Group objects
     * @param {Object} [options] Options object
     * @param {Boolean} [isAlreadyGrouped] if true, objects have been grouped already.
     * @return {Object} thisArg
     */
    initialize: function initialize(objects, options, isAlreadyGrouped) {
      options = options || {};
      this._objects = [];
      // if objects enclosed in a group have been grouped already,
      // we cannot change properties of objects.
      // Thus we need to set options to group without objects,
      isAlreadyGrouped && this.callSuper('initialize', options);
      this._objects = objects || [];
      for (var i = this._objects.length; i--;) {
        this._objects[i].group = this;
      }
      if (!isAlreadyGrouped) {
        var center = options && options.centerPoint;
        // we want to set origins before calculating the bounding box.
        // so that the topleft can be set with that in mind.
        // if specific top and left are passed, are overwritten later
        // with the callSuper('initialize', options)
        if (options.originX !== undefined) {
          this.originX = options.originX;
        }
        if (options.originY !== undefined) {
          this.originY = options.originY;
        }
        // if coming from svg i do not want to calc bounds.
        // i assume width and height are passed along options
        center || this._calcBounds();
        this._updateObjectsCoords(center);
        delete options.centerPoint;
        this.callSuper('initialize', options);
      } else {
        this._updateObjectsACoords();
      }
      this.setCoords();
    },
    /**
     * @private
     */
    _updateObjectsACoords: function _updateObjectsACoords() {
      var skipControls = true;
      for (var i = this._objects.length; i--;) {
        this._objects[i].setCoords(skipControls);
      }
    },
    /**
     * @private
     * @param {Boolean} [skipCoordsChange] if true, coordinates of objects enclosed in a group do not change
     */
    _updateObjectsCoords: function _updateObjectsCoords(center) {
      var center = center || this.getCenterPoint();
      for (var i = this._objects.length; i--;) {
        this._updateObjectCoords(this._objects[i], center);
      }
    },
    /**
     * @private
     * @param {Object} object
     * @param {fabric.Point} center, current center of group.
     */
    _updateObjectCoords: function _updateObjectCoords(object, center) {
      var objectLeft = object.left,
        objectTop = object.top,
        skipControls = true;
      object.set({
        left: objectLeft - center.x,
        top: objectTop - center.y
      });
      object.group = this;
      object.setCoords(skipControls);
    },
    /**
     * Returns string represenation of a group
     * @return {String}
     */
    toString: function toString() {
      return '#<fabric.Group: (' + this.complexity() + ')>';
    },
    /**
     * Adds an object to a group; Then recalculates group's dimension, position.
     * @param {Object} object
     * @return {fabric.Group} thisArg
     * @chainable
     */
    addWithUpdate: function addWithUpdate(object) {
      var nested = !!this.group;
      this._restoreObjectsState();
      fabric.util.resetObjectTransform(this);
      if (object) {
        if (nested) {
          // if this group is inside another group, we need to pre transform the object
          fabric.util.removeTransformFromObject(object, this.group.calcTransformMatrix());
        }
        this._objects.push(object);
        object.group = this;
        object._set('canvas', this.canvas);
      }
      this._calcBounds();
      this._updateObjectsCoords();
      this.dirty = true;
      if (nested) {
        this.group.addWithUpdate();
      } else {
        this.setCoords();
      }
      return this;
    },
    /**
     * Removes an object from a group; Then recalculates group's dimension, position.
     * @param {Object} object
     * @return {fabric.Group} thisArg
     * @chainable
     */
    removeWithUpdate: function removeWithUpdate(object) {
      this._restoreObjectsState();
      fabric.util.resetObjectTransform(this);
      this.remove(object);
      this._calcBounds();
      this._updateObjectsCoords();
      this.setCoords();
      this.dirty = true;
      return this;
    },
    /**
     * @private
     */
    _onObjectAdded: function _onObjectAdded(object) {
      this.dirty = true;
      object.group = this;
      object._set('canvas', this.canvas);
    },
    /**
     * @private
     */
    _onObjectRemoved: function _onObjectRemoved(object) {
      this.dirty = true;
      delete object.group;
    },
    /**
     * @private
     */
    _set: function _set(key, value) {
      var i = this._objects.length;
      if (this.useSetOnGroup) {
        while (i--) {
          this._objects[i].setOnGroup(key, value);
        }
      }
      if (key === 'canvas') {
        while (i--) {
          this._objects[i]._set(key, value);
        }
      }
      fabric.Object.prototype._set.call(this, key, value);
    },
    /**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      var _includeDefaultValues = this.includeDefaultValues;
      var objsToObject = this._objects.filter(function (obj) {
        return !obj.excludeFromExport;
      }).map(function (obj) {
        var originalDefaults = obj.includeDefaultValues;
        obj.includeDefaultValues = _includeDefaultValues;
        var _obj = obj.toObject(propertiesToInclude);
        obj.includeDefaultValues = originalDefaults;
        return _obj;
      });
      var obj = fabric.Object.prototype.toObject.call(this, propertiesToInclude);
      obj.objects = objsToObject;
      return obj;
    },
    /**
     * Returns object representation of an instance, in dataless mode.
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toDatalessObject: function toDatalessObject(propertiesToInclude) {
      var objsToObject,
        sourcePath = this.sourcePath;
      if (sourcePath) {
        objsToObject = sourcePath;
      } else {
        var _includeDefaultValues = this.includeDefaultValues;
        objsToObject = this._objects.map(function (obj) {
          var originalDefaults = obj.includeDefaultValues;
          obj.includeDefaultValues = _includeDefaultValues;
          var _obj = obj.toDatalessObject(propertiesToInclude);
          obj.includeDefaultValues = originalDefaults;
          return _obj;
        });
      }
      var obj = fabric.Object.prototype.toDatalessObject.call(this, propertiesToInclude);
      obj.objects = objsToObject;
      return obj;
    },
    /**
     * Renders instance on a given context
     * @param {CanvasRenderingContext2D} ctx context to render instance on
     */
    render: function render(ctx) {
      this._transformDone = true;
      this.callSuper('render', ctx);
      this._transformDone = false;
    },
    /**
     * Decide if the object should cache or not. Create its own cache level
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group is already cached.
     * @return {Boolean}
     */
    shouldCache: function shouldCache() {
      var ownCache = fabric.Object.prototype.shouldCache.call(this);
      if (ownCache) {
        for (var i = 0, len = this._objects.length; i < len; i++) {
          if (this._objects[i].willDrawShadow()) {
            this.ownCaching = false;
            return false;
          }
        }
      }
      return ownCache;
    },
    /**
     * Check if this object or a child object will cast a shadow
     * @return {Boolean}
     */
    willDrawShadow: function willDrawShadow() {
      if (fabric.Object.prototype.willDrawShadow.call(this)) {
        return true;
      }
      for (var i = 0, len = this._objects.length; i < len; i++) {
        if (this._objects[i].willDrawShadow()) {
          return true;
        }
      }
      return false;
    },
    /**
     * Check if this group or its parent group are caching, recursively up
     * @return {Boolean}
     */
    isOnACache: function isOnACache() {
      return this.ownCaching || this.group && this.group.isOnACache();
    },
    /**
     * Execute the drawing operation for an object on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    drawObject: function drawObject(ctx) {
      for (var i = 0, len = this._objects.length; i < len; i++) {
        this._objects[i].render(ctx);
      }
      this._drawClipPath(ctx, this.clipPath);
    },
    /**
     * Check if cache is dirty
     */
    isCacheDirty: function isCacheDirty(skipCanvas) {
      if (this.callSuper('isCacheDirty', skipCanvas)) {
        return true;
      }
      if (!this.statefullCache) {
        return false;
      }
      for (var i = 0, len = this._objects.length; i < len; i++) {
        if (this._objects[i].isCacheDirty(true)) {
          if (this._cacheCanvas) {
            // if this group has not a cache canvas there is nothing to clean
            var x = this.cacheWidth / this.zoomX,
              y = this.cacheHeight / this.zoomY;
            this._cacheContext.clearRect(-x / 2, -y / 2, x, y);
          }
          return true;
        }
      }
      return false;
    },
    /**
     * Restores original state of each of group objects (original state is that which was before group was created).
     * if the nested boolean is true, the original state will be restored just for the
     * first group and not for all the group chain
     * @private
     * @param {Boolean} nested tell the function to restore object state up to the parent group and not more
     * @return {fabric.Group} thisArg
     * @chainable
     */
    _restoreObjectsState: function _restoreObjectsState() {
      var groupMatrix = this.calcOwnMatrix();
      this._objects.forEach(function (object) {
        // instead of using _this = this;
        fabric.util.addTransformToObject(object, groupMatrix);
        delete object.group;
        object.setCoords();
      });
      return this;
    },
    /**
     * Destroys a group (restoring state of its objects)
     * @return {fabric.Group} thisArg
     * @chainable
     */
    destroy: function destroy() {
      // when group is destroyed objects needs to get a repaint to be eventually
      // displayed on canvas.
      this._objects.forEach(function (object) {
        object.set('dirty', true);
      });
      return this._restoreObjectsState();
    },
    dispose: function dispose() {
      this.callSuper('dispose');
      this.forEachObject(function (object) {
        object.dispose && object.dispose();
      });
      this._objects = [];
    },
    /**
     * make a group an active selection, remove the group from canvas
     * the group has to be on canvas for this to work.
     * @return {fabric.ActiveSelection} thisArg
     * @chainable
     */
    toActiveSelection: function toActiveSelection() {
      if (!this.canvas) {
        return;
      }
      var objects = this._objects,
        canvas = this.canvas;
      this._objects = [];
      var options = this.toObject();
      delete options.objects;
      var activeSelection = new fabric.ActiveSelection([]);
      activeSelection.set(options);
      activeSelection.type = 'activeSelection';
      canvas.remove(this);
      objects.forEach(function (object) {
        object.group = activeSelection;
        object.dirty = true;
        canvas.add(object);
      });
      activeSelection.canvas = canvas;
      activeSelection._objects = objects;
      canvas._activeObject = activeSelection;
      activeSelection.setCoords();
      return activeSelection;
    },
    /**
     * Destroys a group (restoring state of its objects)
     * @return {fabric.Group} thisArg
     * @chainable
     */
    ungroupOnCanvas: function ungroupOnCanvas() {
      return this._restoreObjectsState();
    },
    /**
     * Sets coordinates of all objects inside group
     * @return {fabric.Group} thisArg
     * @chainable
     */
    setObjectsCoords: function setObjectsCoords() {
      var skipControls = true;
      this.forEachObject(function (object) {
        object.setCoords(skipControls);
      });
      return this;
    },
    /**
     * @private
     */
    _calcBounds: function _calcBounds(onlyWidthHeight) {
      var aX = [],
        aY = [],
        o,
        prop,
        coords,
        props = ['tr', 'br', 'bl', 'tl'],
        i = 0,
        iLen = this._objects.length,
        j,
        jLen = props.length;
      for (; i < iLen; ++i) {
        o = this._objects[i];
        coords = o.calcACoords();
        for (j = 0; j < jLen; j++) {
          prop = props[j];
          aX.push(coords[prop].x);
          aY.push(coords[prop].y);
        }
        o.aCoords = coords;
      }
      this._getBounds(aX, aY, onlyWidthHeight);
    },
    /**
     * @private
     */
    _getBounds: function _getBounds(aX, aY, onlyWidthHeight) {
      var minXY = new fabric.Point(min(aX), min(aY)),
        maxXY = new fabric.Point(max(aX), max(aY)),
        top = minXY.y || 0,
        left = minXY.x || 0,
        width = maxXY.x - minXY.x || 0,
        height = maxXY.y - minXY.y || 0;
      this.width = width;
      this.height = height;
      if (!onlyWidthHeight) {
        // the bounding box always finds the topleft most corner.
        // whatever is the group origin, we set up here the left/top position.
        this.setPositionByOrigin({
          x: left,
          y: top
        }, 'left', 'top');
      }
    },
    /* _TO_SVG_START_ */
    /**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
    _toSVG: function _toSVG(reviver) {
      var svgString = ['<g ', 'COMMON_PARTS', ' >\n'];
      for (var i = 0, len = this._objects.length; i < len; i++) {
        svgString.push('\t\t', this._objects[i].toSVG(reviver));
      }
      svgString.push('</g>\n');
      return svgString;
    },
    /**
     * Returns styles-string for svg-export, specific version for group
     * @return {String}
     */
    getSvgStyles: function getSvgStyles() {
      var opacity = typeof this.opacity !== 'undefined' && this.opacity !== 1 ? 'opacity: ' + this.opacity + ';' : '',
        visibility = this.visible ? '' : ' visibility: hidden;';
      return [opacity, this.getSvgFilter(), visibility].join('');
    },
    /**
     * Returns svg clipPath representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
    toClipPathSVG: function toClipPathSVG(reviver) {
      var svgString = [];
      for (var i = 0, len = this._objects.length; i < len; i++) {
        svgString.push('\t', this._objects[i].toClipPathSVG(reviver));
      }
      return this._createBaseClipPathSVGMarkup(svgString, {
        reviver: reviver
      });
    }
    /* _TO_SVG_END_ */
  });

  /**
   * Returns {@link fabric.Group} instance from an object representation
   * @static
   * @memberOf fabric.Group
   * @param {Object} object Object to create a group from
   * @param {Function} [callback] Callback to invoke when an group instance is created
   */
  fabric.Group.fromObject = function (object, callback) {
    var objects = object.objects,
      options = fabric.util.object.clone(object, true);
    delete options.objects;
    if (typeof objects === 'string') {
      // it has to be an url or something went wrong.
      fabric.loadSVGFromURL(objects, function (elements) {
        var group = fabric.util.groupSVGElements(elements, object, objects);
        var clipPath = options.clipPath;
        delete options.clipPath;
        group.set(options);
        if (clipPath) {
          fabric.util.enlivenObjects([clipPath], function (elivenedObjects) {
            group.clipPath = elivenedObjects[0];
            callback && callback(group);
          });
        } else {
          callback && callback(group);
        }
      });
      return;
    }
    fabric.util.enlivenObjects(objects, function (enlivenedObjects) {
      fabric.util.enlivenObjectEnlivables(object, options, function () {
        callback && callback(new fabric.Group(enlivenedObjects, options, true));
      });
    });
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {});
  if (fabric.ActiveSelection) {
    return;
  }

  /**
   * Group class
   * @class fabric.ActiveSelection
   * @extends fabric.Group
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-3#groups}
   * @see {@link fabric.ActiveSelection#initialize} for constructor definition
   */
  fabric.ActiveSelection = fabric.util.createClass(fabric.Group, /** @lends fabric.ActiveSelection.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'activeSelection',
    /**
     * Constructor
     * @param {Object} objects ActiveSelection objects
     * @param {Object} [options] Options object
     * @return {Object} thisArg
     */
    initialize: function initialize(objects, options) {
      options = options || {};
      this._objects = objects || [];
      for (var i = this._objects.length; i--;) {
        this._objects[i].group = this;
      }
      if (options.originX) {
        this.originX = options.originX;
      }
      if (options.originY) {
        this.originY = options.originY;
      }
      this._calcBounds();
      this._updateObjectsCoords();
      fabric.Object.prototype.initialize.call(this, options);
      this.setCoords();
    },
    /**
     * Change te activeSelection to a normal group,
     * High level function that automatically adds it to canvas as
     * active object. no events fired.
     * @since 2.0.0
     * @return {fabric.Group}
     */
    toGroup: function toGroup() {
      var objects = this._objects.concat();
      this._objects = [];
      var options = fabric.Object.prototype.toObject.call(this);
      var newGroup = new fabric.Group([]);
      delete options.type;
      newGroup.set(options);
      objects.forEach(function (object) {
        object.canvas.remove(object);
        object.group = newGroup;
      });
      newGroup._objects = objects;
      if (!this.canvas) {
        return newGroup;
      }
      var canvas = this.canvas;
      canvas.add(newGroup);
      canvas._activeObject = newGroup;
      newGroup.setCoords();
      return newGroup;
    },
    /**
     * If returns true, deselection is cancelled.
     * @since 2.0.0
     * @return {Boolean} [cancel]
     */
    onDeselect: function onDeselect() {
      this.destroy();
      return false;
    },
    /**
     * Returns string representation of a group
     * @return {String}
     */
    toString: function toString() {
      return '#<fabric.ActiveSelection: (' + this.complexity() + ')>';
    },
    /**
     * Decide if the object should cache or not. Create its own cache level
     * objectCaching is a global flag, wins over everything
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group outside is cached.
     * @return {Boolean}
     */
    shouldCache: function shouldCache() {
      return false;
    },
    /**
     * Check if this group or its parent group are caching, recursively up
     * @return {Boolean}
     */
    isOnACache: function isOnACache() {
      return false;
    },
    /**
     * Renders controls and borders for the object
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} [styleOverride] properties to override the object style
     * @param {Object} [childrenOverride] properties to override the children overrides
     */
    _renderControls: function _renderControls(ctx, styleOverride, childrenOverride) {
      ctx.save();
      ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
      this.callSuper('_renderControls', ctx, styleOverride);
      childrenOverride = childrenOverride || {};
      if (typeof childrenOverride.hasControls === 'undefined') {
        childrenOverride.hasControls = false;
      }
      childrenOverride.forActiveSelection = true;
      for (var i = 0, len = this._objects.length; i < len; i++) {
        this._objects[i]._renderControls(ctx, childrenOverride);
      }
      ctx.restore();
    }
  });

  /**
   * Returns {@link fabric.ActiveSelection} instance from an object representation
   * @static
   * @memberOf fabric.ActiveSelection
   * @param {Object} object Object to create a group from
   * @param {Function} [callback] Callback to invoke when an ActiveSelection instance is created
   */
  fabric.ActiveSelection.fromObject = function (object, callback) {
    fabric.util.enlivenObjects(object.objects, function (enlivenedObjects) {
      delete object.objects;
      callback && callback(new fabric.ActiveSelection(enlivenedObjects, object, true));
    });
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var extend = fabric.util.object.extend;
  if (!global.fabric) {
    global.fabric = {};
  }
  if (global.fabric.Image) {
    fabric.warn('fabric.Image is already defined.');
    return;
  }

  /**
   * Image class
   * @class fabric.Image
   * @extends fabric.Object
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-1#images}
   * @see {@link fabric.Image#initialize} for constructor definition
   */
  fabric.Image = fabric.util.createClass(fabric.Object, /** @lends fabric.Image.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'image',
    /**
     * Width of a stroke.
     * For image quality a stroke multiple of 2 gives better results.
     * @type Number
     * @default
     */
    strokeWidth: 0,
    /**
     * When calling {@link fabric.Image.getSrc}, return value from element src with `element.getAttribute('src')`.
     * This allows for relative urls as image src.
     * @since 2.7.0
     * @type Boolean
     * @default
     */
    srcFromAttribute: false,
    /**
     * private
     * contains last value of scaleX to detect
     * if the Image got resized after the last Render
     * @type Number
     */
    _lastScaleX: 1,
    /**
     * private
     * contains last value of scaleY to detect
     * if the Image got resized after the last Render
     * @type Number
     */
    _lastScaleY: 1,
    /**
     * private
     * contains last value of scaling applied by the apply filter chain
     * @type Number
     */
    _filterScalingX: 1,
    /**
     * private
     * contains last value of scaling applied by the apply filter chain
     * @type Number
     */
    _filterScalingY: 1,
    /**
     * minimum scale factor under which any resizeFilter is triggered to resize the image
     * 0 will disable the automatic resize. 1 will trigger automatically always.
     * number bigger than 1 are not implemented yet.
     * @type Number
     */
    minimumScaleTrigger: 0.5,
    /**
     * List of properties to consider when checking if
     * state of an object is changed ({@link fabric.Object#hasStateChanged})
     * as well as for history (undo/redo) purposes
     * @type Array
     */
    stateProperties: fabric.Object.prototype.stateProperties.concat('cropX', 'cropY'),
    /**
     * List of properties to consider when checking if cache needs refresh
     * Those properties are checked by statefullCache ON ( or lazy mode if we want ) or from single
     * calls to Object.set(key, value). If the key is in this list, the object is marked as dirty
     * and refreshed at the next render
     * @type Array
     */
    cacheProperties: fabric.Object.prototype.cacheProperties.concat('cropX', 'cropY'),
    /**
     * key used to retrieve the texture representing this image
     * @since 2.0.0
     * @type String
     * @default
     */
    cacheKey: '',
    /**
     * Image crop in pixels from original image size.
     * @since 2.0.0
     * @type Number
     * @default
     */
    cropX: 0,
    /**
     * Image crop in pixels from original image size.
     * @since 2.0.0
     * @type Number
     * @default
     */
    cropY: 0,
    /**
     * Indicates whether this canvas will use image smoothing when painting this image.
     * Also influence if the cacheCanvas for this image uses imageSmoothing
     * @since 4.0.0-beta.11
     * @type Boolean
     * @default
     */
    imageSmoothing: true,
    /**
     * Constructor
     * Image can be initialized with any canvas drawable or a string.
     * The string should be a url and will be loaded as an image.
     * Canvas and Image element work out of the box, while videos require extra code to work.
     * Please check video element events for seeking.
     * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | String} element Image element
     * @param {Object} [options] Options object
     * @param {function} [callback] callback function to call after eventual filters applied.
     * @return {fabric.Image} thisArg
     */
    initialize: function initialize(element, options) {
      options || (options = {});
      this.filters = [];
      this.cacheKey = 'texture' + fabric.Object.__uid++;
      this.callSuper('initialize', options);
      this._initElement(element, options);
    },
    /**
     * Returns image element which this instance if based on
     * @return {HTMLImageElement} Image element
     */
    getElement: function getElement() {
      return this._element || {};
    },
    /**
     * Sets image element for this instance to a specified one.
     * If filters defined they are applied to new image.
     * You might need to call `canvas.renderAll` and `object.setCoords` after replacing, to render new image and update controls area.
     * @param {HTMLImageElement} element
     * @param {Object} [options] Options object
     * @return {fabric.Image} thisArg
     * @chainable
     */
    setElement: function setElement(element, options) {
      this.removeTexture(this.cacheKey);
      this.removeTexture(this.cacheKey + '_filtered');
      this._element = element;
      this._originalElement = element;
      this._initConfig(options);
      if (this.filters.length !== 0) {
        this.applyFilters();
      }
      // resizeFilters work on the already filtered copy.
      // we need to apply resizeFilters AFTER normal filters.
      // applyResizeFilters is run more often than normal filters
      // and is triggered by user interactions rather than dev code
      if (this.resizeFilter) {
        this.applyResizeFilters();
      }
      return this;
    },
    /**
     * Delete a single texture if in webgl mode
     */
    removeTexture: function removeTexture(key) {
      var backend = fabric.filterBackend;
      if (backend && backend.evictCachesForKey) {
        backend.evictCachesForKey(key);
      }
    },
    /**
     * Delete textures, reference to elements and eventually JSDOM cleanup
     */
    dispose: function dispose() {
      this.callSuper('dispose');
      this.removeTexture(this.cacheKey);
      this.removeTexture(this.cacheKey + '_filtered');
      this._cacheContext = undefined;
      ['_originalElement', '_element', '_filteredEl', '_cacheCanvas'].forEach(function (element) {
        fabric.util.cleanUpJsdomNode(this[element]);
        this[element] = undefined;
      }.bind(this));
    },
    /**
     * Get the crossOrigin value (of the corresponding image element)
     */
    getCrossOrigin: function getCrossOrigin() {
      return this._originalElement && (this._originalElement.crossOrigin || null);
    },
    /**
     * Returns original size of an image
     * @return {Object} Object with "width" and "height" properties
     */
    getOriginalSize: function getOriginalSize() {
      var element = this.getElement();
      return {
        width: element.naturalWidth || element.width,
        height: element.naturalHeight || element.height
      };
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _stroke: function _stroke(ctx) {
      if (!this.stroke || this.strokeWidth === 0) {
        return;
      }
      var w = this.width / 2,
        h = this.height / 2;
      ctx.beginPath();
      ctx.moveTo(-w, -h);
      ctx.lineTo(w, -h);
      ctx.lineTo(w, h);
      ctx.lineTo(-w, h);
      ctx.lineTo(-w, -h);
      ctx.closePath();
    },
    /**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      var filters = [];
      this.filters.forEach(function (filterObj) {
        if (filterObj) {
          filters.push(filterObj.toObject());
        }
      });
      var object = extend(this.callSuper('toObject', ['cropX', 'cropY'].concat(propertiesToInclude)), {
        src: this.getSrc(),
        crossOrigin: this.getCrossOrigin(),
        filters: filters
      });
      if (this.resizeFilter) {
        object.resizeFilter = this.resizeFilter.toObject();
      }
      return object;
    },
    /**
     * Returns true if an image has crop applied, inspecting values of cropX,cropY,width,height.
     * @return {Boolean}
     */
    hasCrop: function hasCrop() {
      return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;
    },
    /* _TO_SVG_START_ */
    /**
     * Returns svg representation of an instance
     * @return {Array} an array of strings with the specific svg representation
     * of the instance
     */
    _toSVG: function _toSVG() {
      var svgString = [],
        imageMarkup = [],
        strokeSvg,
        element = this._element,
        x = -this.width / 2,
        y = -this.height / 2,
        clipPath = '',
        imageRendering = '';
      if (!element) {
        return [];
      }
      if (this.hasCrop()) {
        var clipPathId = fabric.Object.__uid++;
        svgString.push('<clipPath id="imageCrop_' + clipPathId + '">\n', '\t<rect x="' + x + '" y="' + y + '" width="' + this.width + '" height="' + this.height + '" />\n', '</clipPath>\n');
        clipPath = ' clip-path="url(#imageCrop_' + clipPathId + ')" ';
      }
      if (!this.imageSmoothing) {
        imageRendering = '" image-rendering="optimizeSpeed';
      }
      imageMarkup.push('\t<image ', 'COMMON_PARTS', 'xlink:href="', this.getSvgSrc(true), '" x="', x - this.cropX, '" y="', y - this.cropY,
      // we're essentially moving origin of transformation from top/left corner to the center of the shape
      // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left
      // so that object's center aligns with container's left/top
      '" width="', element.width || element.naturalWidth, '" height="', element.height || element.height, imageRendering, '"', clipPath, '></image>\n');
      if (this.stroke || this.strokeDashArray) {
        var origFill = this.fill;
        this.fill = null;
        strokeSvg = ['\t<rect ', 'x="', x, '" y="', y, '" width="', this.width, '" height="', this.height, '" style="', this.getSvgStyles(), '"/>\n'];
        this.fill = origFill;
      }
      if (this.paintFirst !== 'fill') {
        svgString = svgString.concat(strokeSvg, imageMarkup);
      } else {
        svgString = svgString.concat(imageMarkup, strokeSvg);
      }
      return svgString;
    },
    /* _TO_SVG_END_ */

    /**
     * Returns source of an image
     * @param {Boolean} filtered indicates if the src is needed for svg
     * @return {String} Source of an image
     */
    getSrc: function getSrc(filtered) {
      var element = filtered ? this._element : this._originalElement;
      if (element) {
        if (element.toDataURL) {
          return element.toDataURL();
        }
        if (this.srcFromAttribute) {
          return element.getAttribute('src');
        } else {
          return element.src;
        }
      } else {
        return this.src || '';
      }
    },
    /**
     * Sets source of an image
     * @param {String} src Source string (URL)
     * @param {Function} [callback] Callback is invoked when image has been loaded (and all filters have been applied)
     * @param {Object} [options] Options object
     * @param {String} [options.crossOrigin] crossOrigin value (one of "", "anonymous", "use-credentials")
     * @see https://developer.mozilla.org/en-US/docs/HTML/CORS_settings_attributes
     * @return {fabric.Image} thisArg
     * @chainable
     */
    setSrc: function setSrc(src, callback, options) {
      fabric.util.loadImage(src, function (img, isError) {
        this.setElement(img, options);
        this._setWidthHeight();
        callback && callback(this, isError);
      }, this, options && options.crossOrigin);
      return this;
    },
    /**
     * Returns string representation of an instance
     * @return {String} String representation of an instance
     */
    toString: function toString() {
      return '#<fabric.Image: { src: "' + this.getSrc() + '" }>';
    },
    applyResizeFilters: function applyResizeFilters() {
      var filter = this.resizeFilter,
        minimumScale = this.minimumScaleTrigger,
        objectScale = this.getTotalObjectScaling(),
        scaleX = objectScale.scaleX,
        scaleY = objectScale.scaleY,
        elementToFilter = this._filteredEl || this._originalElement;
      if (this.group) {
        this.set('dirty', true);
      }
      if (!filter || scaleX > minimumScale && scaleY > minimumScale) {
        this._element = elementToFilter;
        this._filterScalingX = 1;
        this._filterScalingY = 1;
        this._lastScaleX = scaleX;
        this._lastScaleY = scaleY;
        return;
      }
      if (!fabric.filterBackend) {
        fabric.filterBackend = fabric.initFilterBackend();
      }
      var canvasEl = fabric.util.createCanvasElement(),
        cacheKey = this._filteredEl ? this.cacheKey + '_filtered' : this.cacheKey,
        sourceWidth = elementToFilter.width,
        sourceHeight = elementToFilter.height;
      canvasEl.width = sourceWidth;
      canvasEl.height = sourceHeight;
      this._element = canvasEl;
      this._lastScaleX = filter.scaleX = scaleX;
      this._lastScaleY = filter.scaleY = scaleY;
      fabric.filterBackend.applyFilters([filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);
      this._filterScalingX = canvasEl.width / this._originalElement.width;
      this._filterScalingY = canvasEl.height / this._originalElement.height;
    },
    /**
     * Applies filters assigned to this image (from "filters" array) or from filter param
     * @method applyFilters
     * @param {Array} filters to be applied
     * @param {Boolean} forResizing specify if the filter operation is a resize operation
     * @return {thisArg} return the fabric.Image object
     * @chainable
     */
    applyFilters: function applyFilters(filters) {
      filters = filters || this.filters || [];
      filters = filters.filter(function (filter) {
        return filter && !filter.isNeutralState();
      });
      this.set('dirty', true);

      // needs to clear out or WEBGL will not resize correctly
      this.removeTexture(this.cacheKey + '_filtered');
      if (filters.length === 0) {
        this._element = this._originalElement;
        this._filteredEl = null;
        this._filterScalingX = 1;
        this._filterScalingY = 1;
        return this;
      }
      var imgElement = this._originalElement,
        sourceWidth = imgElement.naturalWidth || imgElement.width,
        sourceHeight = imgElement.naturalHeight || imgElement.height;
      if (this._element === this._originalElement) {
        // if the element is the same we need to create a new element
        var canvasEl = fabric.util.createCanvasElement();
        canvasEl.width = sourceWidth;
        canvasEl.height = sourceHeight;
        this._element = canvasEl;
        this._filteredEl = canvasEl;
      } else {
        // clear the existing element to get new filter data
        // also dereference the eventual resized _element
        this._element = this._filteredEl;
        this._filteredEl.getContext('2d').clearRect(0, 0, sourceWidth, sourceHeight);
        // we also need to resize again at next renderAll, so remove saved _lastScaleX/Y
        this._lastScaleX = 1;
        this._lastScaleY = 1;
      }
      if (!fabric.filterBackend) {
        fabric.filterBackend = fabric.initFilterBackend();
      }
      fabric.filterBackend.applyFilters(filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);
      if (this._originalElement.width !== this._element.width || this._originalElement.height !== this._element.height) {
        this._filterScalingX = this._element.width / this._originalElement.width;
        this._filterScalingY = this._element.height / this._originalElement.height;
      }
      return this;
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _render: function _render(ctx) {
      fabric.util.setImageSmoothing(ctx, this.imageSmoothing);
      if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {
        this.applyResizeFilters();
      }
      this._stroke(ctx);
      this._renderPaintInOrder(ctx);
    },
    /**
     * Paint the cached copy of the object on the target context.
     * it will set the imageSmoothing for the draw operation
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    drawCacheOnCanvas: function drawCacheOnCanvas(ctx) {
      fabric.util.setImageSmoothing(ctx, this.imageSmoothing);
      fabric.Object.prototype.drawCacheOnCanvas.call(this, ctx);
    },
    /**
     * Decide if the object should cache or not. Create its own cache level
     * needsItsOwnCache should be used when the object drawing method requires
     * a cache step. None of the fabric classes requires it.
     * Generally you do not cache objects in groups because the group outside is cached.
     * This is the special image version where we would like to avoid caching where possible.
     * Essentially images do not benefit from caching. They may require caching, and in that
     * case we do it. Also caching an image usually ends in a loss of details.
     * A full performance audit should be done.
     * @return {Boolean}
     */
    shouldCache: function shouldCache() {
      return this.needsItsOwnCache();
    },
    _renderFill: function _renderFill(ctx) {
      var elementToDraw = this._element;
      if (!elementToDraw) {
        return;
      }
      var scaleX = this._filterScalingX,
        scaleY = this._filterScalingY,
        w = this.width,
        h = this.height,
        min = Math.min,
        max = Math.max,
        // crop values cannot be lesser than 0.
        cropX = max(this.cropX, 0),
        cropY = max(this.cropY, 0),
        elWidth = elementToDraw.naturalWidth || elementToDraw.width,
        elHeight = elementToDraw.naturalHeight || elementToDraw.height,
        sX = cropX * scaleX,
        sY = cropY * scaleY,
        // the width height cannot exceed element width/height, starting from the crop offset.
        sW = min(w * scaleX, elWidth - sX),
        sH = min(h * scaleY, elHeight - sY),
        x = -w / 2,
        y = -h / 2,
        maxDestW = min(w, elWidth / scaleX - cropX),
        maxDestH = min(h, elHeight / scaleY - cropY);
      elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);
    },
    /**
     * needed to check if image needs resize
     * @private
     */
    _needsResize: function _needsResize() {
      var scale = this.getTotalObjectScaling();
      return scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY;
    },
    /**
     * @private
     */
    _resetWidthHeight: function _resetWidthHeight() {
      this.set(this.getOriginalSize());
    },
    /**
     * The Image class's initialization method. This method is automatically
     * called by the constructor.
     * @private
     * @param {HTMLImageElement|String} element The element representing the image
     * @param {Object} [options] Options object
     */
    _initElement: function _initElement(element, options) {
      this.setElement(fabric.util.getById(element), options);
      fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);
    },
    /**
     * @private
     * @param {Object} [options] Options object
     */
    _initConfig: function _initConfig(options) {
      options || (options = {});
      this.setOptions(options);
      this._setWidthHeight(options);
    },
    /**
     * @private
     * @param {Array} filters to be initialized
     * @param {Function} callback Callback to invoke when all fabric.Image.filters instances are created
     */
    _initFilters: function _initFilters(filters, callback) {
      if (filters && filters.length) {
        fabric.util.enlivenObjects(filters, function (enlivenedObjects) {
          callback && callback(enlivenedObjects);
        }, 'fabric.Image.filters');
      } else {
        callback && callback();
      }
    },
    /**
     * @private
     * Set the width and the height of the image object, using the element or the
     * options.
     * @param {Object} [options] Object with width/height properties
     */
    _setWidthHeight: function _setWidthHeight(options) {
      options || (options = {});
      var el = this.getElement();
      this.width = options.width || el.naturalWidth || el.width || 0;
      this.height = options.height || el.naturalHeight || el.height || 0;
    },
    /**
     * Calculate offset for center and scale factor for the image in order to respect
     * the preserveAspectRatio attribute
     * @private
     * @return {Object}
     */
    parsePreserveAspectRatioAttribute: function parsePreserveAspectRatioAttribute() {
      var pAR = fabric.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ''),
        rWidth = this._element.width,
        rHeight = this._element.height,
        scaleX = 1,
        scaleY = 1,
        offsetLeft = 0,
        offsetTop = 0,
        cropX = 0,
        cropY = 0,
        offset,
        pWidth = this.width,
        pHeight = this.height,
        parsedAttributes = {
          width: pWidth,
          height: pHeight
        };
      if (pAR && (pAR.alignX !== 'none' || pAR.alignY !== 'none')) {
        if (pAR.meetOrSlice === 'meet') {
          scaleX = scaleY = fabric.util.findScaleToFit(this._element, parsedAttributes);
          offset = (pWidth - rWidth * scaleX) / 2;
          if (pAR.alignX === 'Min') {
            offsetLeft = -offset;
          }
          if (pAR.alignX === 'Max') {
            offsetLeft = offset;
          }
          offset = (pHeight - rHeight * scaleY) / 2;
          if (pAR.alignY === 'Min') {
            offsetTop = -offset;
          }
          if (pAR.alignY === 'Max') {
            offsetTop = offset;
          }
        }
        if (pAR.meetOrSlice === 'slice') {
          scaleX = scaleY = fabric.util.findScaleToCover(this._element, parsedAttributes);
          offset = rWidth - pWidth / scaleX;
          if (pAR.alignX === 'Mid') {
            cropX = offset / 2;
          }
          if (pAR.alignX === 'Max') {
            cropX = offset;
          }
          offset = rHeight - pHeight / scaleY;
          if (pAR.alignY === 'Mid') {
            cropY = offset / 2;
          }
          if (pAR.alignY === 'Max') {
            cropY = offset;
          }
          rWidth = pWidth / scaleX;
          rHeight = pHeight / scaleY;
        }
      } else {
        scaleX = pWidth / rWidth;
        scaleY = pHeight / rHeight;
      }
      return {
        width: rWidth,
        height: rHeight,
        scaleX: scaleX,
        scaleY: scaleY,
        offsetLeft: offsetLeft,
        offsetTop: offsetTop,
        cropX: cropX,
        cropY: cropY
      };
    }
  });

  /**
   * Default CSS class name for canvas
   * @static
   * @type String
   * @default
   */
  fabric.Image.CSS_CANVAS = 'canvas-img';

  /**
   * Alias for getSrc
   * @static
   */
  fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;

  /**
   * Creates an instance of fabric.Image from its object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} callback Callback to invoke when an image instance is created
   */
  fabric.Image.fromObject = function (_object, callback) {
    var object = fabric.util.object.clone(_object);
    fabric.util.loadImage(object.src, function (img, isError) {
      if (isError) {
        callback && callback(null, true);
        return;
      }
      fabric.Image.prototype._initFilters.call(object, object.filters, function (filters) {
        object.filters = filters || [];
        fabric.Image.prototype._initFilters.call(object, [object.resizeFilter], function (resizeFilters) {
          object.resizeFilter = resizeFilters[0];
          fabric.util.enlivenObjectEnlivables(object, object, function () {
            var image = new fabric.Image(img, object);
            callback(image, false);
          });
        });
      });
    }, null, object.crossOrigin);
  };

  /**
   * Creates an instance of fabric.Image from an URL string
   * @static
   * @param {String} url URL to create an image from
   * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument). Second argument is a boolean indicating if an error occurred or not.
   * @param {Object} [imgOptions] Options object
   */
  fabric.Image.fromURL = function (url, callback, imgOptions) {
    fabric.util.loadImage(url, function (img, isError) {
      callback && callback(new fabric.Image(img, imgOptions), isError);
    }, null, imgOptions && imgOptions.crossOrigin);
  };

  /* _FROM_SVG_START_ */
  /**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})
   * @static
   * @see {@link http://www.w3.org/TR/SVG/struct.html#ImageElement}
   */
  fabric.Image.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y width height preserveAspectRatio xlink:href crossOrigin image-rendering'.split(' '));

  /**
   * Returns {@link fabric.Image} instance from an SVG element
   * @static
   * @param {SVGElement} element Element to parse
   * @param {Object} [options] Options object
   * @param {Function} callback Callback to execute when fabric.Image object is created
   * @return {fabric.Image} Instance of fabric.Image
   */
  fabric.Image.fromElement = function (element, callback, options) {
    var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);
    fabric.Image.fromURL(parsedAttributes['xlink:href'], callback, extend(options ? fabric.util.object.clone(options) : {}, parsedAttributes));
  };
  /* _FROM_SVG_END_ */
})(typeof exports !== 'undefined' ? exports : this);
fabric.util.object.extend(fabric.Object.prototype, /** @lends fabric.Object.prototype */{
  /**
   * @private
   * @return {Number} angle value
   */
  _getAngleValueForStraighten: function _getAngleValueForStraighten() {
    var angle = this.angle % 360;
    if (angle > 0) {
      return Math.round((angle - 1) / 90) * 90;
    }
    return Math.round(angle / 90) * 90;
  },
  /**
   * Straightens an object (rotating it from current angle to one of 0, 90, 180, 270, etc. depending on which is closer)
   * @return {fabric.Object} thisArg
   * @chainable
   */
  straighten: function straighten() {
    return this.rotate(this._getAngleValueForStraighten());
  },
  /**
   * Same as {@link fabric.Object.prototype.straighten} but with animation
   * @param {Object} callbacks Object with callback functions
   * @param {Function} [callbacks.onComplete] Invoked on completion
   * @param {Function} [callbacks.onChange] Invoked on every step of animation
   * @return {fabric.Object} thisArg
   */
  fxStraighten: function fxStraighten(callbacks) {
    callbacks = callbacks || {};
    var empty = function empty() {},
      _onComplete4 = callbacks.onComplete || empty,
      _onChange4 = callbacks.onChange || empty,
      _this = this;
    return fabric.util.animate({
      target: this,
      startValue: this.get('angle'),
      endValue: this._getAngleValueForStraighten(),
      duration: this.FX_DURATION,
      onChange: function onChange(value) {
        _this.rotate(value);
        _onChange4();
      },
      onComplete: function onComplete() {
        _this.setCoords();
        _onComplete4();
      }
    });
  }
});
fabric.util.object.extend(fabric.StaticCanvas.prototype, /** @lends fabric.StaticCanvas.prototype */{
  /**
   * Straightens object, then rerenders canvas
   * @param {fabric.Object} object Object to straighten
   * @return {fabric.Canvas} thisArg
   * @chainable
   */
  straightenObject: function straightenObject(object) {
    object.straighten();
    this.requestRenderAll();
    return this;
  },
  /**
   * Same as {@link fabric.Canvas.prototype.straightenObject}, but animated
   * @param {fabric.Object} object Object to straighten
   * @return {fabric.Canvas} thisArg
   */
  fxStraightenObject: function fxStraightenObject(object) {
    return object.fxStraighten({
      onChange: this.requestRenderAllBound
    });
  }
});
(function () {
  'use strict';

  /**
   * Tests if webgl supports certain precision
   * @param {WebGL} Canvas WebGL context to test on
   * @param {String} Precision to test can be any of following: 'lowp', 'mediump', 'highp'
   * @returns {Boolean} Whether the user's browser WebGL supports given precision.
   */
  function testPrecision(gl, precision) {
    var fragmentSource = 'precision ' + precision + ' float;\nvoid main(){}';
    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fragmentSource);
    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
      return false;
    }
    return true;
  }

  /**
   * Indicate whether this filtering backend is supported by the user's browser.
   * @param {Number} tileSize check if the tileSize is supported
   * @returns {Boolean} Whether the user's browser supports WebGL.
   */
  fabric.isWebglSupported = function (tileSize) {
    if (fabric.isLikelyNode) {
      return false;
    }
    tileSize = tileSize || fabric.WebglFilterBackend.prototype.tileSize;
    var canvas = document.createElement('canvas');
    var gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    var isSupported = false;
    // eslint-disable-next-line
    if (gl) {
      fabric.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
      isSupported = fabric.maxTextureSize >= tileSize;
      var precisions = ['highp', 'mediump', 'lowp'];
      for (var i = 0; i < 3; i++) {
        if (testPrecision(gl, precisions[i])) {
          fabric.webGlPrecision = precisions[i];
          break;
        }
        ;
      }
    }
    this.isSupported = isSupported;
    return isSupported;
  };
  fabric.WebglFilterBackend = WebglFilterBackend;

  /**
   * WebGL filter backend.
   */
  function WebglFilterBackend(options) {
    if (options && options.tileSize) {
      this.tileSize = options.tileSize;
    }
    this.setupGLContext(this.tileSize, this.tileSize);
    this.captureGPUInfo();
  }
  ;
  WebglFilterBackend.prototype = /** @lends fabric.WebglFilterBackend.prototype */{
    tileSize: 2048,
    /**
     * Experimental. This object is a sort of repository of help layers used to avoid
     * of recreating them during frequent filtering. If you are previewing a filter with
     * a slider you probably do not want to create help layers every filter step.
     * in this object there will be appended some canvases, created once, resized sometimes
     * cleared never. Clearing is left to the developer.
     **/
    resources: {},
    /**
     * Setup a WebGL context suitable for filtering, and bind any needed event handlers.
     */
    setupGLContext: function setupGLContext(width, height) {
      this.dispose();
      this.createWebGLCanvas(width, height);
      // eslint-disable-next-line
      this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);
      this.chooseFastestCopyGLTo2DMethod(width, height);
    },
    /**
     * Pick a method to copy data from GL context to 2d canvas.  In some browsers using
     * putImageData is faster than drawImage for that specific operation.
     */
    chooseFastestCopyGLTo2DMethod: function chooseFastestCopyGLTo2DMethod(width, height) {
      var canMeasurePerf = typeof window.performance !== 'undefined',
        canUseImageData;
      try {
        new ImageData(1, 1);
        canUseImageData = true;
      } catch (e) {
        canUseImageData = false;
      }
      // eslint-disable-next-line no-undef
      var canUseArrayBuffer = typeof ArrayBuffer !== 'undefined';
      // eslint-disable-next-line no-undef
      var canUseUint8Clamped = typeof Uint8ClampedArray !== 'undefined';
      if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {
        return;
      }
      var targetCanvas = fabric.util.createCanvasElement();
      // eslint-disable-next-line no-undef
      var imageBuffer = new ArrayBuffer(width * height * 4);
      if (fabric.forceGLPutImageData) {
        this.imageBuffer = imageBuffer;
        this.copyGLTo2D = copyGLTo2DPutImageData;
        return;
      }
      var testContext = {
        imageBuffer: imageBuffer,
        destinationWidth: width,
        destinationHeight: height,
        targetCanvas: targetCanvas
      };
      var startTime, drawImageTime, putImageDataTime;
      targetCanvas.width = width;
      targetCanvas.height = height;
      startTime = window.performance.now();
      copyGLTo2DDrawImage.call(testContext, this.gl, testContext);
      drawImageTime = window.performance.now() - startTime;
      startTime = window.performance.now();
      copyGLTo2DPutImageData.call(testContext, this.gl, testContext);
      putImageDataTime = window.performance.now() - startTime;
      if (drawImageTime > putImageDataTime) {
        this.imageBuffer = imageBuffer;
        this.copyGLTo2D = copyGLTo2DPutImageData;
      } else {
        this.copyGLTo2D = copyGLTo2DDrawImage;
      }
    },
    /**
     * Create a canvas element and associated WebGL context and attaches them as
     * class properties to the GLFilterBackend class.
     */
    createWebGLCanvas: function createWebGLCanvas(width, height) {
      var canvas = fabric.util.createCanvasElement();
      canvas.width = width;
      canvas.height = height;
      var glOptions = {
          alpha: true,
          premultipliedAlpha: false,
          depth: false,
          stencil: false,
          antialias: false
        },
        gl = canvas.getContext('webgl', glOptions);
      if (!gl) {
        gl = canvas.getContext('experimental-webgl', glOptions);
      }
      if (!gl) {
        return;
      }
      gl.clearColor(0, 0, 0, 0);
      // this canvas can fire webglcontextlost and webglcontextrestored
      this.canvas = canvas;
      this.gl = gl;
    },
    /**
     * Attempts to apply the requested filters to the source provided, drawing the filtered output
     * to the provided target canvas.
     *
     * @param {Array} filters The filters to apply.
     * @param {HTMLImageElement|HTMLCanvasElement} source The source to be filtered.
     * @param {Number} width The width of the source input.
     * @param {Number} height The height of the source input.
     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
     * @param {String|undefined} cacheKey A key used to cache resources related to the source. If
     * omitted, caching will be skipped.
     */
    applyFilters: function applyFilters(filters, source, width, height, targetCanvas, cacheKey) {
      var gl = this.gl;
      var cachedTexture;
      if (cacheKey) {
        cachedTexture = this.getCachedTexture(cacheKey, source);
      }
      var pipelineState = {
        originalWidth: source.width || source.originalWidth,
        originalHeight: source.height || source.originalHeight,
        sourceWidth: width,
        sourceHeight: height,
        destinationWidth: width,
        destinationHeight: height,
        context: gl,
        sourceTexture: this.createTexture(gl, width, height, !cachedTexture && source),
        targetTexture: this.createTexture(gl, width, height),
        originalTexture: cachedTexture || this.createTexture(gl, width, height, !cachedTexture && source),
        passes: filters.length,
        webgl: true,
        aPosition: this.aPosition,
        programCache: this.programCache,
        pass: 0,
        filterBackend: this,
        targetCanvas: targetCanvas
      };
      var tempFbo = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);
      filters.forEach(function (filter) {
        filter && filter.applyTo(pipelineState);
      });
      resizeCanvasIfNeeded(pipelineState);
      this.copyGLTo2D(gl, pipelineState);
      gl.bindTexture(gl.TEXTURE_2D, null);
      gl.deleteTexture(pipelineState.sourceTexture);
      gl.deleteTexture(pipelineState.targetTexture);
      gl.deleteFramebuffer(tempFbo);
      targetCanvas.getContext('2d').setTransform(1, 0, 0, 1, 0, 0);
      return pipelineState;
    },
    /**
     * Detach event listeners, remove references, and clean up caches.
     */
    dispose: function dispose() {
      if (this.canvas) {
        this.canvas = null;
        this.gl = null;
      }
      this.clearWebGLCaches();
    },
    /**
     * Wipe out WebGL-related caches.
     */
    clearWebGLCaches: function clearWebGLCaches() {
      this.programCache = {};
      this.textureCache = {};
    },
    /**
     * Create a WebGL texture object.
     *
     * Accepts specific dimensions to initialize the texture to or a source image.
     *
     * @param {WebGLRenderingContext} gl The GL context to use for creating the texture.
     * @param {Number} width The width to initialize the texture at.
     * @param {Number} height The height to initialize the texture.
     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source for the texture data.
     * @param {Number} filterType gl.NEAREST or gl.LINEAR usually, webgl numeri constants
     * @returns {WebGLTexture}
     */
    createTexture: function createTexture(gl, width, height, textureImageSource, filterType) {
      var texture = gl.createTexture();
      gl.bindTexture(gl.TEXTURE_2D, texture);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, filterType || gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, filterType || gl.NEAREST);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      if (textureImageSource) {
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);
      } else {
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
      }
      return texture;
    },
    /**
     * Can be optionally used to get a texture from the cache array
     *
     * If an existing texture is not found, a new texture is created and cached.
     *
     * @param {String} uniqueId A cache key to use to find an existing texture.
     * @param {HTMLImageElement|HTMLCanvasElement} textureImageSource A source to use to create the
     * texture cache entry if one does not already exist.
     */
    getCachedTexture: function getCachedTexture(uniqueId, textureImageSource) {
      if (this.textureCache[uniqueId]) {
        return this.textureCache[uniqueId];
      } else {
        var texture = this.createTexture(this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);
        this.textureCache[uniqueId] = texture;
        return texture;
      }
    },
    /**
     * Clear out cached resources related to a source image that has been
     * filtered previously.
     *
     * @param {String} cacheKey The cache key provided when the source image was filtered.
     */
    evictCachesForKey: function evictCachesForKey(cacheKey) {
      if (this.textureCache[cacheKey]) {
        this.gl.deleteTexture(this.textureCache[cacheKey]);
        delete this.textureCache[cacheKey];
      }
    },
    copyGLTo2D: copyGLTo2DDrawImage,
    /**
     * Attempt to extract GPU information strings from a WebGL context.
     *
     * Useful information when debugging or blacklisting specific GPUs.
     *
     * @returns {Object} A GPU info object with renderer and vendor strings.
     */
    captureGPUInfo: function captureGPUInfo() {
      if (this.gpuInfo) {
        return this.gpuInfo;
      }
      var gl = this.gl,
        gpuInfo = {
          renderer: '',
          vendor: ''
        };
      if (!gl) {
        return gpuInfo;
      }
      var ext = gl.getExtension('WEBGL_debug_renderer_info');
      if (ext) {
        var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);
        var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);
        if (renderer) {
          gpuInfo.renderer = renderer.toLowerCase();
        }
        if (vendor) {
          gpuInfo.vendor = vendor.toLowerCase();
        }
      }
      this.gpuInfo = gpuInfo;
      return gpuInfo;
    }
  };
})();
function resizeCanvasIfNeeded(pipelineState) {
  var targetCanvas = pipelineState.targetCanvas,
    width = targetCanvas.width,
    height = targetCanvas.height,
    dWidth = pipelineState.destinationWidth,
    dHeight = pipelineState.destinationHeight;
  if (width !== dWidth || height !== dHeight) {
    targetCanvas.width = dWidth;
    targetCanvas.height = dHeight;
  }
}

/**
 * Copy an input WebGL canvas on to an output 2D canvas.
 *
 * The WebGL canvas is assumed to be upside down, with the top-left pixel of the
 * desired output image appearing in the bottom-left corner of the WebGL canvas.
 *
 * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.
 * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.
 * @param {Object} pipelineState The 2D target canvas to copy on to.
 */
function copyGLTo2DDrawImage(gl, pipelineState) {
  var glCanvas = gl.canvas,
    targetCanvas = pipelineState.targetCanvas,
    ctx = targetCanvas.getContext('2d');
  ctx.translate(0, targetCanvas.height); // move it down again
  ctx.scale(1, -1); // vertical flip
  // where is my image on the big glcanvas?
  var sourceY = glCanvas.height - targetCanvas.height;
  ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0, targetCanvas.width, targetCanvas.height);
}

/**
 * Copy an input WebGL canvas on to an output 2D canvas using 2d canvas' putImageData
 * API. Measurably faster than using ctx.drawImage in Firefox (version 54 on OSX Sierra).
 *
 * @param {WebGLRenderingContext} sourceContext The WebGL context to copy from.
 * @param {HTMLCanvasElement} targetCanvas The 2D target canvas to copy on to.
 * @param {Object} pipelineState The 2D target canvas to copy on to.
 */
function copyGLTo2DPutImageData(gl, pipelineState) {
  var targetCanvas = pipelineState.targetCanvas,
    ctx = targetCanvas.getContext('2d'),
    dWidth = pipelineState.destinationWidth,
    dHeight = pipelineState.destinationHeight,
    numBytes = dWidth * dHeight * 4;

  // eslint-disable-next-line no-undef
  var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);
  // eslint-disable-next-line no-undef
  var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);
  gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);
  var imgData = new ImageData(u8Clamped, dWidth, dHeight);
  ctx.putImageData(imgData, 0, 0);
}
(function () {
  'use strict';

  var noop = function noop() {};
  fabric.Canvas2dFilterBackend = Canvas2dFilterBackend;

  /**
   * Canvas 2D filter backend.
   */
  function Canvas2dFilterBackend() {}
  ;
  Canvas2dFilterBackend.prototype = /** @lends fabric.Canvas2dFilterBackend.prototype */{
    evictCachesForKey: noop,
    dispose: noop,
    clearWebGLCaches: noop,
    /**
     * Experimental. This object is a sort of repository of help layers used to avoid
     * of recreating them during frequent filtering. If you are previewing a filter with
     * a slider you probably do not want to create help layers every filter step.
     * in this object there will be appended some canvases, created once, resized sometimes
     * cleared never. Clearing is left to the developer.
     **/
    resources: {},
    /**
     * Apply a set of filters against a source image and draw the filtered output
     * to the provided destination canvas.
     *
     * @param {EnhancedFilter} filters The filter to apply.
     * @param {HTMLImageElement|HTMLCanvasElement} sourceElement The source to be filtered.
     * @param {Number} sourceWidth The width of the source input.
     * @param {Number} sourceHeight The height of the source input.
     * @param {HTMLCanvasElement} targetCanvas The destination for filtered output to be drawn.
     */
    applyFilters: function applyFilters(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {
      var ctx = targetCanvas.getContext('2d');
      ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);
      var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
      var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
      var pipelineState = {
        sourceWidth: sourceWidth,
        sourceHeight: sourceHeight,
        imageData: imageData,
        originalEl: sourceElement,
        originalImageData: originalImageData,
        canvasEl: targetCanvas,
        ctx: ctx,
        filterBackend: this
      };
      filters.forEach(function (filter) {
        filter.applyTo(pipelineState);
      });
      if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {
        targetCanvas.width = pipelineState.imageData.width;
        targetCanvas.height = pipelineState.imageData.height;
      }
      ctx.putImageData(pipelineState.imageData, 0, 0);
      return pipelineState;
    }
  };
})();

/**
 * @namespace fabric.Image.filters
 * @memberOf fabric.Image
 * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#image_filters}
 * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
 */
fabric.Image = fabric.Image || {};
fabric.Image.filters = fabric.Image.filters || {};

/**
 * Root filter class from which all filter classes inherit from
 * @class fabric.Image.filters.BaseFilter
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.BaseFilter = fabric.util.createClass( /** @lends fabric.Image.filters.BaseFilter.prototype */{
  /**
   * Filter type
   * @param {String} type
   * @default
   */
  type: 'BaseFilter',
  /**
   * Array of attributes to send with buffers. do not modify
   * @private
   */

  vertexSource: 'attribute vec2 aPosition;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vTexCoord = aPosition;\n' + 'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n' + '}',
  fragmentSource: 'precision highp float;\n' + 'varying vec2 vTexCoord;\n' + 'uniform sampler2D uTexture;\n' + 'void main() {\n' + 'gl_FragColor = texture2D(uTexture, vTexCoord);\n' + '}',
  /**
   * Constructor
   * @param {Object} [options] Options object
   */
  initialize: function initialize(options) {
    if (options) {
      this.setOptions(options);
    }
  },
  /**
   * Sets filter's properties from options
   * @param {Object} [options] Options object
   */
  setOptions: function setOptions(options) {
    for (var prop in options) {
      this[prop] = options[prop];
    }
  },
  /**
   * Compile this filter's shader program.
   *
   * @param {WebGLRenderingContext} gl The GL canvas context to use for shader compilation.
   * @param {String} fragmentSource fragmentShader source for compilation
   * @param {String} vertexSource vertexShader source for compilation
   */
  createProgram: function createProgram(gl, fragmentSource, vertexSource) {
    fragmentSource = fragmentSource || this.fragmentSource;
    vertexSource = vertexSource || this.vertexSource;
    if (fabric.webGlPrecision !== 'highp') {
      fragmentSource = fragmentSource.replace(/precision highp float/g, 'precision ' + fabric.webGlPrecision + ' float');
    }
    var vertexShader = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vertexShader, vertexSource);
    gl.compileShader(vertexShader);
    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
      throw new Error(
      // eslint-disable-next-line prefer-template
      'Vertex shader compile error for ' + this.type + ': ' + gl.getShaderInfoLog(vertexShader));
    }
    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fragmentShader, fragmentSource);
    gl.compileShader(fragmentShader);
    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
      throw new Error(
      // eslint-disable-next-line prefer-template
      'Fragment shader compile error for ' + this.type + ': ' + gl.getShaderInfoLog(fragmentShader));
    }
    var program = gl.createProgram();
    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader);
    gl.linkProgram(program);
    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
      throw new Error(
      // eslint-disable-next-line prefer-template
      'Shader link error for "${this.type}" ' + gl.getProgramInfoLog(program));
    }
    var attributeLocations = this.getAttributeLocations(gl, program);
    var uniformLocations = this.getUniformLocations(gl, program) || {};
    uniformLocations.uStepW = gl.getUniformLocation(program, 'uStepW');
    uniformLocations.uStepH = gl.getUniformLocation(program, 'uStepH');
    return {
      program: program,
      attributeLocations: attributeLocations,
      uniformLocations: uniformLocations
    };
  },
  /**
   * Return a map of attribute names to WebGLAttributeLocation objects.
   *
   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
   * @param {WebGLShaderProgram} program The shader program from which to take attribute locations.
   * @returns {Object} A map of attribute names to attribute locations.
   */
  getAttributeLocations: function getAttributeLocations(gl, program) {
    return {
      aPosition: gl.getAttribLocation(program, 'aPosition')
    };
  },
  /**
   * Return a map of uniform names to WebGLUniformLocation objects.
   *
   * Intended to be overridden by subclasses.
   *
   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
   * @param {WebGLShaderProgram} program The shader program from which to take uniform locations.
   * @returns {Object} A map of uniform names to uniform locations.
   */
  getUniformLocations: function getUniformLocations( /* gl, program */
  ) {
    // in case i do not need any special uniform i need to return an empty object
    return {};
  },
  /**
   * Send attribute data from this filter to its shader program on the GPU.
   *
   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
   * @param {Object} attributeLocations A map of shader attribute names to their locations.
   */
  sendAttributeData: function sendAttributeData(gl, attributeLocations, aPositionData) {
    var attributeLocation = attributeLocations.aPosition;
    var buffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
    gl.enableVertexAttribArray(attributeLocation);
    gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);
    gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);
  },
  _setupFrameBuffer: function _setupFrameBuffer(options) {
    var gl = options.context,
      width,
      height;
    if (options.passes > 1) {
      width = options.destinationWidth;
      height = options.destinationHeight;
      if (options.sourceWidth !== width || options.sourceHeight !== height) {
        gl.deleteTexture(options.targetTexture);
        options.targetTexture = options.filterBackend.createTexture(gl, width, height);
      }
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, options.targetTexture, 0);
    } else {
      // draw last filter on canvas and not to framebuffer.
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      gl.finish();
    }
  },
  _swapTextures: function _swapTextures(options) {
    options.passes--;
    options.pass++;
    var temp = options.targetTexture;
    options.targetTexture = options.sourceTexture;
    options.sourceTexture = temp;
  },
  /**
   * Generic isNeutral implementation for one parameter based filters.
   * Used only in image applyFilters to discard filters that will not have an effect
   * on the image
   * Other filters may need their own version ( ColorMatrix, HueRotation, gamma, ComposedFilter )
   * @param {Object} options
   **/
  isNeutralState: function isNeutralState( /* options */
  ) {
    var main = this.mainParameter,
      _class = fabric.Image.filters[this.type].prototype;
    if (main) {
      if (Array.isArray(_class[main])) {
        for (var i = _class[main].length; i--;) {
          if (this[main][i] !== _class[main][i]) {
            return false;
          }
        }
        return true;
      } else {
        return _class[main] === this[main];
      }
    } else {
      return false;
    }
  },
  /**
   * Apply this filter to the input image data provided.
   *
   * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
   *
   * @param {Object} options
   * @param {Number} options.passes The number of filters remaining to be executed
   * @param {Boolean} options.webgl Whether to use webgl to render the filter.
   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
   * @param {WebGLRenderingContext} options.context The GL context used for rendering.
   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
   */
  applyTo: function applyTo(options) {
    if (options.webgl) {
      this._setupFrameBuffer(options);
      this.applyToWebGL(options);
      this._swapTextures(options);
    } else {
      this.applyTo2d(options);
    }
  },
  /**
   * Retrieves the cached shader.
   * @param {Object} options
   * @param {WebGLRenderingContext} options.context The GL context used for rendering.
   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
   */
  retrieveShader: function retrieveShader(options) {
    if (!options.programCache.hasOwnProperty(this.type)) {
      options.programCache[this.type] = this.createProgram(options.context);
    }
    return options.programCache[this.type];
  },
  /**
   * Apply this filter using webgl.
   *
   * @param {Object} options
   * @param {Number} options.passes The number of filters remaining to be executed
   * @param {Boolean} options.webgl Whether to use webgl to render the filter.
   * @param {WebGLTexture} options.originalTexture The texture of the original input image.
   * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
   * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
   * @param {WebGLRenderingContext} options.context The GL context used for rendering.
   * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
   */
  applyToWebGL: function applyToWebGL(options) {
    var gl = options.context;
    var shader = this.retrieveShader(options);
    if (options.pass === 0 && options.originalTexture) {
      gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);
    } else {
      gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);
    }
    gl.useProgram(shader.program);
    this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);
    gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);
    gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);
    this.sendUniformData(gl, shader.uniformLocations);
    gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
  },
  bindAdditionalTexture: function bindAdditionalTexture(gl, texture, textureUnit) {
    gl.activeTexture(textureUnit);
    gl.bindTexture(gl.TEXTURE_2D, texture);
    // reset active texture to 0 as usual
    gl.activeTexture(gl.TEXTURE0);
  },
  unbindAdditionalTexture: function unbindAdditionalTexture(gl, textureUnit) {
    gl.activeTexture(textureUnit);
    gl.bindTexture(gl.TEXTURE_2D, null);
    gl.activeTexture(gl.TEXTURE0);
  },
  getMainParameter: function getMainParameter() {
    return this[this.mainParameter];
  },
  setMainParameter: function setMainParameter(value) {
    this[this.mainParameter] = value;
  },
  /**
   * Send uniform data from this filter to its shader program on the GPU.
   *
   * Intended to be overridden by subclasses.
   *
   * @param {WebGLRenderingContext} gl The canvas context used to compile the shader program.
   * @param {Object} uniformLocations A map of shader uniform names to their locations.
   */
  sendUniformData: function sendUniformData( /* gl, uniformLocations */
  ) {
    // Intentionally left blank.  Override me in subclasses.
  },
  /**
   * If needed by a 2d filter, this functions can create an helper canvas to be used
   * remember that options.targetCanvas is available for use till end of chain.
   */
  createHelpLayer: function createHelpLayer(options) {
    if (!options.helpLayer) {
      var helpLayer = document.createElement('canvas');
      helpLayer.width = options.sourceWidth;
      helpLayer.height = options.sourceHeight;
      options.helpLayer = helpLayer;
    }
  },
  /**
   * Returns object representation of an instance
   * @return {Object} Object representation of an instance
   */
  toObject: function toObject() {
    var object = {
        type: this.type
      },
      mainP = this.mainParameter;
    if (mainP) {
      object[mainP] = this[mainP];
    }
    return object;
  },
  /**
   * Returns a JSON representation of an instance
   * @return {Object} JSON
   */
  toJSON: function toJSON() {
    // delegate, not alias
    return this.toObject();
  }
});
fabric.Image.filters.BaseFilter.fromObject = function (object, callback) {
  var filter = new fabric.Image.filters[object.type](object);
  callback && callback(filter);
  return filter;
};
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Color Matrix filter class
   * @class fabric.Image.filters.ColorMatrix
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.ColorMatrix#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @see {@Link http://www.webwasp.co.uk/tutorials/219/Color_Matrix_Filter.php}
   * @see {@Link http://phoboslab.org/log/2013/11/fast-image-filters-with-webgl}
   * @example <caption>Kodachrome filter</caption>
   * var filter = new fabric.Image.filters.ColorMatrix({
   *  matrix: [
       1.1285582396593525, -0.3967382283601348, -0.03992559172921793, 0, 63.72958762196502,
       -0.16404339962244616, 1.0835251566291304, -0.05498805115633132, 0, 24.732407896706203,
       -0.16786010706155763, -0.5603416277695248, 1.6014850761964943, 0, 35.62982807460946,
       0, 0, 0, 1, 0
      ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */
  filters.ColorMatrix = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.ColorMatrix.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'ColorMatrix',
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'varying vec2 vTexCoord;\n' + 'uniform mat4 uColorMatrix;\n' + 'uniform vec4 uConstants;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'color *= uColorMatrix;\n' + 'color += uConstants;\n' + 'gl_FragColor = color;\n' + '}',
    /**
     * Colormatrix for pixels.
     * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
     * outside the -1, 1 range.
     * 0.0039215686 is the part of 1 that get translated to 1 in 2d
     * @param {Array} matrix array of 20 numbers.
     * @default
     */
    matrix: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0],
    mainParameter: 'matrix',
    /**
     * Lock the colormatrix on the color part, skipping alpha, mainly for non webgl scenario
     * to save some calculation
     * @type Boolean
     * @default true
     */
    colorsOnly: true,
    /**
     * Constructor
     * @param {Object} [options] Options object
     */
    initialize: function initialize(options) {
      this.callSuper('initialize', options);
      // create a new array instead mutating the prototype with push
      this.matrix = this.matrix.slice(0);
    },
    /**
     * Apply the ColorMatrix operation to a Uint8Array representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8Array to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        data = imageData.data,
        iLen = data.length,
        m = this.matrix,
        r,
        g,
        b,
        a,
        i,
        colorsOnly = this.colorsOnly;
      for (i = 0; i < iLen; i += 4) {
        r = data[i];
        g = data[i + 1];
        b = data[i + 2];
        if (colorsOnly) {
          data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;
          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;
          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;
        } else {
          a = data[i + 3];
          data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;
          data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;
          data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;
          data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;
        }
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uColorMatrix: gl.getUniformLocation(program, 'uColorMatrix'),
        uConstants: gl.getUniformLocation(program, 'uConstants')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      var m = this.matrix,
        matrix = [m[0], m[1], m[2], m[3], m[5], m[6], m[7], m[8], m[10], m[11], m[12], m[13], m[15], m[16], m[17], m[18]],
        constants = [m[4], m[9], m[14], m[19]];
      gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);
      gl.uniform4fv(uniformLocations.uConstants, constants);
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] function to invoke after filter creation
   * @return {fabric.Image.filters.ColorMatrix} Instance of fabric.Image.filters.ColorMatrix
   */
  fabric.Image.filters.ColorMatrix.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Brightness filter class
   * @class fabric.Image.filters.Brightness
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Brightness#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Brightness({
   *   brightness: 0.05
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */
  filters.Brightness = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Brightness.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Brightness',
    /**
     * Fragment source for the brightness program
     */
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uBrightness;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'color.rgb += uBrightness;\n' + 'gl_FragColor = color;\n' + '}',
    /**
     * Brightness value, from -1 to 1.
     * translated to -255 to 255 for 2d
     * 0.0039215686 is the part of 1 that get translated to 1 in 2d
     * @param {Number} brightness
     * @default
     */
    brightness: 0,
    /**
     * Describe the property that is the filter parameter
     * @param {String} m
     * @default
     */
    mainParameter: 'brightness',
    /**
    * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
    *
    * @param {Object} options
    * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
    */
    applyTo2d: function applyTo2d(options) {
      if (this.brightness === 0) {
        return;
      }
      var imageData = options.imageData,
        data = imageData.data,
        i,
        len = data.length,
        brightness = Math.round(this.brightness * 255);
      for (i = 0; i < len; i += 4) {
        data[i] = data[i] + brightness;
        data[i + 1] = data[i + 1] + brightness;
        data[i + 2] = data[i + 2] + brightness;
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uBrightness: gl.getUniformLocation(program, 'uBrightness')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform1f(uniformLocations.uBrightness, this.brightness);
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Brightness} Instance of fabric.Image.filters.Brightness
   */
  fabric.Image.filters.Brightness.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    extend = fabric.util.object.extend,
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Adapted from <a href="http://www.html5rocks.com/en/tutorials/canvas/imagefilters/">html5rocks article</a>
   * @class fabric.Image.filters.Convolute
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Convolute#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example <caption>Sharpen filter</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   matrix: [ 0, -1,  0,
   *            -1,  5, -1,
   *             0, -1,  0 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   * @example <caption>Blur filter</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   matrix: [ 1/9, 1/9, 1/9,
   *             1/9, 1/9, 1/9,
   *             1/9, 1/9, 1/9 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   * @example <caption>Emboss filter</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   matrix: [ 1,   1,  1,
   *             1, 0.7, -1,
   *            -1,  -1, -1 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   * @example <caption>Emboss filter with opaqueness</caption>
   * var filter = new fabric.Image.filters.Convolute({
   *   opaque: true,
   *   matrix: [ 1,   1,  1,
   *             1, 0.7, -1,
   *            -1,  -1, -1 ]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */
  filters.Convolute = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Convolute.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Convolute',
    /*
     * Opaque value (true/false)
     */
    opaque: false,
    /*
     * matrix for the filter, max 9x9
     */
    matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],
    /**
     * Fragment source for the brightness program
     */
    fragmentSource: {
      Convolute_3_1: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uMatrix[9];\n' + 'uniform float uStepW;\n' + 'uniform float uStepH;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = vec4(0, 0, 0, 0);\n' + 'for (float h = 0.0; h < 3.0; h+=1.0) {\n' + 'for (float w = 0.0; w < 3.0; w+=1.0) {\n' + 'vec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\n' + 'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n' + '}\n' + '}\n' + 'gl_FragColor = color;\n' + '}',
      Convolute_3_0: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uMatrix[9];\n' + 'uniform float uStepW;\n' + 'uniform float uStepH;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = vec4(0, 0, 0, 1);\n' + 'for (float h = 0.0; h < 3.0; h+=1.0) {\n' + 'for (float w = 0.0; w < 3.0; w+=1.0) {\n' + 'vec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\n' + 'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n' + '}\n' + '}\n' + 'float alpha = texture2D(uTexture, vTexCoord).a;\n' + 'gl_FragColor = color;\n' + 'gl_FragColor.a = alpha;\n' + '}',
      Convolute_5_1: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uMatrix[25];\n' + 'uniform float uStepW;\n' + 'uniform float uStepH;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = vec4(0, 0, 0, 0);\n' + 'for (float h = 0.0; h < 5.0; h+=1.0) {\n' + 'for (float w = 0.0; w < 5.0; w+=1.0) {\n' + 'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n' + 'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n' + '}\n' + '}\n' + 'gl_FragColor = color;\n' + '}',
      Convolute_5_0: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uMatrix[25];\n' + 'uniform float uStepW;\n' + 'uniform float uStepH;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = vec4(0, 0, 0, 1);\n' + 'for (float h = 0.0; h < 5.0; h+=1.0) {\n' + 'for (float w = 0.0; w < 5.0; w+=1.0) {\n' + 'vec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\n' + 'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n' + '}\n' + '}\n' + 'float alpha = texture2D(uTexture, vTexCoord).a;\n' + 'gl_FragColor = color;\n' + 'gl_FragColor.a = alpha;\n' + '}',
      Convolute_7_1: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uMatrix[49];\n' + 'uniform float uStepW;\n' + 'uniform float uStepH;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = vec4(0, 0, 0, 0);\n' + 'for (float h = 0.0; h < 7.0; h+=1.0) {\n' + 'for (float w = 0.0; w < 7.0; w+=1.0) {\n' + 'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n' + 'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n' + '}\n' + '}\n' + 'gl_FragColor = color;\n' + '}',
      Convolute_7_0: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uMatrix[49];\n' + 'uniform float uStepW;\n' + 'uniform float uStepH;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = vec4(0, 0, 0, 1);\n' + 'for (float h = 0.0; h < 7.0; h+=1.0) {\n' + 'for (float w = 0.0; w < 7.0; w+=1.0) {\n' + 'vec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\n' + 'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n' + '}\n' + '}\n' + 'float alpha = texture2D(uTexture, vTexCoord).a;\n' + 'gl_FragColor = color;\n' + 'gl_FragColor.a = alpha;\n' + '}',
      Convolute_9_1: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uMatrix[81];\n' + 'uniform float uStepW;\n' + 'uniform float uStepH;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = vec4(0, 0, 0, 0);\n' + 'for (float h = 0.0; h < 9.0; h+=1.0) {\n' + 'for (float w = 0.0; w < 9.0; w+=1.0) {\n' + 'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n' + 'color += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n' + '}\n' + '}\n' + 'gl_FragColor = color;\n' + '}',
      Convolute_9_0: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uMatrix[81];\n' + 'uniform float uStepW;\n' + 'uniform float uStepH;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = vec4(0, 0, 0, 1);\n' + 'for (float h = 0.0; h < 9.0; h+=1.0) {\n' + 'for (float w = 0.0; w < 9.0; w+=1.0) {\n' + 'vec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\n' + 'color.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n' + '}\n' + '}\n' + 'float alpha = texture2D(uTexture, vTexCoord).a;\n' + 'gl_FragColor = color;\n' + 'gl_FragColor.a = alpha;\n' + '}'
    },
    /**
     * Constructor
     * @memberOf fabric.Image.filters.Convolute.prototype
     * @param {Object} [options] Options object
     * @param {Boolean} [options.opaque=false] Opaque value (true/false)
     * @param {Array} [options.matrix] Filter matrix
     */

    /**
    * Retrieves the cached shader.
    * @param {Object} options
    * @param {WebGLRenderingContext} options.context The GL context used for rendering.
    * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
    */
    retrieveShader: function retrieveShader(options) {
      var size = Math.sqrt(this.matrix.length);
      var cacheKey = this.type + '_' + size + '_' + (this.opaque ? 1 : 0);
      var shaderSource = this.fragmentSource[cacheKey];
      if (!options.programCache.hasOwnProperty(cacheKey)) {
        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
      }
      return options.programCache[cacheKey];
    },
    /**
     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        data = imageData.data,
        weights = this.matrix,
        side = Math.round(Math.sqrt(weights.length)),
        halfSide = Math.floor(side / 2),
        sw = imageData.width,
        sh = imageData.height,
        output = options.ctx.createImageData(sw, sh),
        dst = output.data,
        // go through the destination image pixels
        alphaFac = this.opaque ? 1 : 0,
        r,
        g,
        b,
        a,
        dstOff,
        scx,
        scy,
        srcOff,
        wt,
        x,
        y,
        cx,
        cy;
      for (y = 0; y < sh; y++) {
        for (x = 0; x < sw; x++) {
          dstOff = (y * sw + x) * 4;
          // calculate the weighed sum of the source image pixels that
          // fall under the convolution matrix
          r = 0;
          g = 0;
          b = 0;
          a = 0;
          for (cy = 0; cy < side; cy++) {
            for (cx = 0; cx < side; cx++) {
              scy = y + cy - halfSide;
              scx = x + cx - halfSide;

              // eslint-disable-next-line max-depth
              if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {
                continue;
              }
              srcOff = (scy * sw + scx) * 4;
              wt = weights[cy * side + cx];
              r += data[srcOff] * wt;
              g += data[srcOff + 1] * wt;
              b += data[srcOff + 2] * wt;
              // eslint-disable-next-line max-depth
              if (!alphaFac) {
                a += data[srcOff + 3] * wt;
              }
            }
          }
          dst[dstOff] = r;
          dst[dstOff + 1] = g;
          dst[dstOff + 2] = b;
          if (!alphaFac) {
            dst[dstOff + 3] = a;
          } else {
            dst[dstOff + 3] = data[dstOff + 3];
          }
        }
      }
      options.imageData = output;
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uMatrix: gl.getUniformLocation(program, 'uMatrix'),
        uOpaque: gl.getUniformLocation(program, 'uOpaque'),
        uHalfSize: gl.getUniformLocation(program, 'uHalfSize'),
        uSize: gl.getUniformLocation(program, 'uSize')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform1fv(uniformLocations.uMatrix, this.matrix);
    },
    /**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject() {
      return extend(this.callSuper('toObject'), {
        opaque: this.opaque,
        matrix: this.matrix
      });
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Convolute} Instance of fabric.Image.filters.Convolute
   */
  fabric.Image.filters.Convolute.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Grayscale image filter class
   * @class fabric.Image.filters.Grayscale
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Grayscale();
   * object.filters.push(filter);
   * object.applyFilters();
   */
  filters.Grayscale = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Grayscale.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Grayscale',
    fragmentSource: {
      average: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'float average = (color.r + color.b + color.g) / 3.0;\n' + 'gl_FragColor = vec4(average, average, average, color.a);\n' + '}',
      lightness: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform int uMode;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 col = texture2D(uTexture, vTexCoord);\n' + 'float average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\n' + 'gl_FragColor = vec4(average, average, average, col.a);\n' + '}',
      luminosity: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform int uMode;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 col = texture2D(uTexture, vTexCoord);\n' + 'float average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\n' + 'gl_FragColor = vec4(average, average, average, col.a);\n' + '}'
    },
    /**
     * Grayscale mode, between 'average', 'lightness', 'luminosity'
     * @param {String} type
     * @default
     */
    mode: 'average',
    mainParameter: 'mode',
    /**
     * Apply the Grayscale operation to a Uint8Array representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8Array to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        data = imageData.data,
        i,
        len = data.length,
        value,
        mode = this.mode;
      for (i = 0; i < len; i += 4) {
        if (mode === 'average') {
          value = (data[i] + data[i + 1] + data[i + 2]) / 3;
        } else if (mode === 'lightness') {
          value = (Math.min(data[i], data[i + 1], data[i + 2]) + Math.max(data[i], data[i + 1], data[i + 2])) / 2;
        } else if (mode === 'luminosity') {
          value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];
        }
        data[i] = value;
        data[i + 1] = value;
        data[i + 2] = value;
      }
    },
    /**
     * Retrieves the cached shader.
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
    retrieveShader: function retrieveShader(options) {
      var cacheKey = this.type + '_' + this.mode;
      if (!options.programCache.hasOwnProperty(cacheKey)) {
        var shaderSource = this.fragmentSource[this.mode];
        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
      }
      return options.programCache[cacheKey];
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uMode: gl.getUniformLocation(program, 'uMode')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      // default average mode.
      var mode = 1;
      gl.uniform1i(uniformLocations.uMode, mode);
    },
    /**
     * Grayscale filter isNeutralState implementation
     * The filter is never neutral
     * on the image
     **/
    isNeutralState: function isNeutralState() {
      return false;
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Grayscale} Instance of fabric.Image.filters.Grayscale
   */
  fabric.Image.filters.Grayscale.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Invert filter class
   * @class fabric.Image.filters.Invert
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Invert();
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */
  filters.Invert = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Invert.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Invert',
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform int uInvert;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'if (uInvert == 1) {\n' + 'gl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n' + '} else {\n' + 'gl_FragColor = color;\n' + '}\n' + '}',
    /**
     * Filter invert. if false, does nothing
     * @param {Boolean} invert
     * @default
     */
    invert: true,
    mainParameter: 'invert',
    /**
     * Apply the Invert operation to a Uint8Array representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8Array to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        data = imageData.data,
        i,
        len = data.length;
      for (i = 0; i < len; i += 4) {
        data[i] = 255 - data[i];
        data[i + 1] = 255 - data[i + 1];
        data[i + 2] = 255 - data[i + 2];
      }
    },
    /**
     * Invert filter isNeutralState implementation
     * Used only in image applyFilters to discard filters that will not have an effect
     * on the image
     * @param {Object} options
     **/
    isNeutralState: function isNeutralState() {
      return !this.invert;
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uInvert: gl.getUniformLocation(program, 'uInvert')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform1i(uniformLocations.uInvert, this.invert);
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Invert} Instance of fabric.Image.filters.Invert
   */
  fabric.Image.filters.Invert.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    extend = fabric.util.object.extend,
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Noise filter class
   * @class fabric.Image.filters.Noise
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Noise#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Noise({
   *   noise: 700
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */
  filters.Noise = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Noise.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Noise',
    /**
     * Fragment source for the noise program
     */
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uStepH;\n' + 'uniform float uNoise;\n' + 'uniform float uSeed;\n' + 'varying vec2 vTexCoord;\n' + 'float rand(vec2 co, float seed, float vScale) {\n' + 'return fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n' + '}\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'color.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\n' + 'gl_FragColor = color;\n' + '}',
    /**
     * Describe the property that is the filter parameter
     * @param {String} m
     * @default
     */
    mainParameter: 'noise',
    /**
     * Noise value, from
     * @param {Number} noise
     * @default
     */
    noise: 0,
    /**
     * Apply the Brightness operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      if (this.noise === 0) {
        return;
      }
      var imageData = options.imageData,
        data = imageData.data,
        i,
        len = data.length,
        noise = this.noise,
        rand;
      for (i = 0, len = data.length; i < len; i += 4) {
        rand = (0.5 - Math.random()) * noise;
        data[i] += rand;
        data[i + 1] += rand;
        data[i + 2] += rand;
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uNoise: gl.getUniformLocation(program, 'uNoise'),
        uSeed: gl.getUniformLocation(program, 'uSeed')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform1f(uniformLocations.uNoise, this.noise / 255);
      gl.uniform1f(uniformLocations.uSeed, Math.random());
    },
    /**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject() {
      return extend(this.callSuper('toObject'), {
        noise: this.noise
      });
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Noise} Instance of fabric.Image.filters.Noise
   */
  fabric.Image.filters.Noise.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Pixelate filter class
   * @class fabric.Image.filters.Pixelate
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Pixelate#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Pixelate({
   *   blocksize: 8
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */
  filters.Pixelate = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Pixelate.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Pixelate',
    blocksize: 4,
    mainParameter: 'blocksize',
    /**
     * Fragment source for the Pixelate program
     */
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uBlocksize;\n' + 'uniform float uStepW;\n' + 'uniform float uStepH;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'float blockW = uBlocksize * uStepW;\n' + 'float blockH = uBlocksize * uStepW;\n' + 'int posX = int(vTexCoord.x / blockW);\n' + 'int posY = int(vTexCoord.y / blockH);\n' + 'float fposX = float(posX);\n' + 'float fposY = float(posY);\n' + 'vec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\n' + 'vec4 color = texture2D(uTexture, squareCoords);\n' + 'gl_FragColor = color;\n' + '}',
    /**
     * Apply the Pixelate operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        data = imageData.data,
        iLen = imageData.height,
        jLen = imageData.width,
        index,
        i,
        j,
        r,
        g,
        b,
        a,
        _i,
        _j,
        _iLen,
        _jLen;
      for (i = 0; i < iLen; i += this.blocksize) {
        for (j = 0; j < jLen; j += this.blocksize) {
          index = i * 4 * jLen + j * 4;
          r = data[index];
          g = data[index + 1];
          b = data[index + 2];
          a = data[index + 3];
          _iLen = Math.min(i + this.blocksize, iLen);
          _jLen = Math.min(j + this.blocksize, jLen);
          for (_i = i; _i < _iLen; _i++) {
            for (_j = j; _j < _jLen; _j++) {
              index = _i * 4 * jLen + _j * 4;
              data[index] = r;
              data[index + 1] = g;
              data[index + 2] = b;
              data[index + 3] = a;
            }
          }
        }
      }
    },
    /**
     * Indicate when the filter is not gonna apply changes to the image
     **/
    isNeutralState: function isNeutralState() {
      return this.blocksize === 1;
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uBlocksize: gl.getUniformLocation(program, 'uBlocksize'),
        uStepW: gl.getUniformLocation(program, 'uStepW'),
        uStepH: gl.getUniformLocation(program, 'uStepH')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Pixelate} Instance of fabric.Image.filters.Pixelate
   */
  fabric.Image.filters.Pixelate.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    extend = fabric.util.object.extend,
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Remove white filter class
   * @class fabric.Image.filters.RemoveColor
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.RemoveColor#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.RemoveColor({
   *   threshold: 0.2,
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */
  filters.RemoveColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.RemoveColor.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'RemoveColor',
    /**
     * Color to remove, in any format understood by fabric.Color.
     * @param {String} type
     * @default
     */
    color: '#FFFFFF',
    /**
     * Fragment source for the brightness program
     */
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform vec4 uLow;\n' + 'uniform vec4 uHigh;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'gl_FragColor = texture2D(uTexture, vTexCoord);\n' + 'if(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\n' + 'gl_FragColor.a = 0.0;\n' + '}\n' + '}',
    /**
     * distance to actual color, as value up or down from each r,g,b
     * between 0 and 1
     **/
    distance: 0.02,
    /**
     * For color to remove inside distance, use alpha channel for a smoother deletion
     * NOT IMPLEMENTED YET
     **/
    useAlpha: false,
    /**
     * Constructor
     * @memberOf fabric.Image.filters.RemoveWhite.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.color=#RRGGBB] Threshold value
     * @param {Number} [options.distance=10] Distance value
     */

    /**
     * Applies filter to canvas element
     * @param {Object} canvasEl Canvas element to apply filter to
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        data = imageData.data,
        i,
        distance = this.distance * 255,
        r,
        g,
        b,
        source = new fabric.Color(this.color).getSource(),
        lowC = [source[0] - distance, source[1] - distance, source[2] - distance],
        highC = [source[0] + distance, source[1] + distance, source[2] + distance];
      for (i = 0; i < data.length; i += 4) {
        r = data[i];
        g = data[i + 1];
        b = data[i + 2];
        if (r > lowC[0] && g > lowC[1] && b > lowC[2] && r < highC[0] && g < highC[1] && b < highC[2]) {
          data[i + 3] = 0;
        }
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uLow: gl.getUniformLocation(program, 'uLow'),
        uHigh: gl.getUniformLocation(program, 'uHigh')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      var source = new fabric.Color(this.color).getSource(),
        distance = parseFloat(this.distance),
        lowC = [0 + source[0] / 255 - distance, 0 + source[1] / 255 - distance, 0 + source[2] / 255 - distance, 1],
        highC = [source[0] / 255 + distance, source[1] / 255 + distance, source[2] / 255 + distance, 1];
      gl.uniform4fv(uniformLocations.uLow, lowC);
      gl.uniform4fv(uniformLocations.uHigh, highC);
    },
    /**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject() {
      return extend(this.callSuper('toObject'), {
        color: this.color,
        distance: this.distance
      });
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.RemoveColor} Instance of fabric.Image.filters.RemoveWhite
   */
  fabric.Image.filters.RemoveColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;
  var matrices = {
    Brownie: [0.59970, 0.34553, -0.27082, 0, 0.186, -0.03770, 0.86095, 0.15059, 0, -0.1449, 0.24113, -0.07441, 0.44972, 0, -0.02965, 0, 0, 0, 1, 0],
    Vintage: [0.62793, 0.32021, -0.03965, 0, 0.03784, 0.02578, 0.64411, 0.03259, 0, 0.02926, 0.04660, -0.08512, 0.52416, 0, 0.02023, 0, 0, 0, 1, 0],
    Kodachrome: [1.12855, -0.39673, -0.03992, 0, 0.24991, -0.16404, 1.08352, -0.05498, 0, 0.09698, -0.16786, -0.56034, 1.60148, 0, 0.13972, 0, 0, 0, 1, 0],
    Technicolor: [1.91252, -0.85453, -0.09155, 0, 0.04624, -0.30878, 1.76589, -0.10601, 0, -0.27589, -0.23110, -0.75018, 1.84759, 0, 0.12137, 0, 0, 0, 1, 0],
    Polaroid: [1.438, -0.062, -0.062, 0, 0, -0.122, 1.378, -0.122, 0, 0, -0.016, -0.016, 1.483, 0, 0, 0, 0, 0, 1, 0],
    Sepia: [0.393, 0.769, 0.189, 0, 0, 0.349, 0.686, 0.168, 0, 0, 0.272, 0.534, 0.131, 0, 0, 0, 0, 0, 1, 0],
    BlackWhite: [1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 1.5, 1.5, 1.5, 0, -1, 0, 0, 0, 1, 0]
  };
  for (var key in matrices) {
    filters[key] = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.Sepia.prototype */{
      /**
       * Filter type
       * @param {String} type
       * @default
       */
      type: key,
      /**
       * Colormatrix for the effect
       * array of 20 floats. Numbers in positions 4, 9, 14, 19 loose meaning
       * outside the -1, 1 range.
       * @param {Array} matrix array of 20 numbers.
       * @default
       */
      matrix: matrices[key],
      /**
       * Lock the matrix export for this kind of static, parameter less filters.
       */
      mainParameter: false,
      /**
       * Lock the colormatrix on the color part, skipping alpha
       */
      colorsOnly: true
    });
    fabric.Image.filters[key].fromObject = fabric.Image.filters.BaseFilter.fromObject;
  }
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric,
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Color Blend filter class
   * @class fabric.Image.filter.BlendColor
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @example
   * var filter = new fabric.Image.filters.BlendColor({
   *  color: '#000',
   *  mode: 'multiply'
   * });
   *
   * var filter = new fabric.Image.filters.BlendImage({
   *  image: fabricImageObject,
   *  mode: 'multiply',
   *  alpha: 0.5
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */

  filters.BlendColor = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blend.prototype */{
    type: 'BlendColor',
    /**
     * Color to make the blend operation with. default to a reddish color since black or white
     * gives always strong result.
     * @type String
     * @default
     **/
    color: '#F95C63',
    /**
     * Blend mode for the filter: one of multiply, add, diff, screen, subtract,
     * darken, lighten, overlay, exclusion, tint.
     * @type String
     * @default
     **/
    mode: 'multiply',
    /**
     * alpha value. represent the strength of the blend color operation.
     * @type Number
     * @default
     **/
    alpha: 1,
    /**
     * Fragment source for the Multiply program
     */
    fragmentSource: {
      multiply: 'gl_FragColor.rgb *= uColor.rgb;\n',
      screen: 'gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n',
      add: 'gl_FragColor.rgb += uColor.rgb;\n',
      diff: 'gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n',
      subtract: 'gl_FragColor.rgb -= uColor.rgb;\n',
      lighten: 'gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n',
      darken: 'gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n',
      exclusion: 'gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n',
      overlay: 'if (uColor.r < 0.5) {\n' + 'gl_FragColor.r *= 2.0 * uColor.r;\n' + '} else {\n' + 'gl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n' + '}\n' + 'if (uColor.g < 0.5) {\n' + 'gl_FragColor.g *= 2.0 * uColor.g;\n' + '} else {\n' + 'gl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n' + '}\n' + 'if (uColor.b < 0.5) {\n' + 'gl_FragColor.b *= 2.0 * uColor.b;\n' + '} else {\n' + 'gl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n' + '}\n',
      tint: 'gl_FragColor.rgb *= (1.0 - uColor.a);\n' + 'gl_FragColor.rgb += uColor.rgb;\n'
    },
    /**
     * build the fragment source for the filters, joining the common part with
     * the specific one.
     * @param {String} mode the mode of the filter, a key of this.fragmentSource
     * @return {String} the source to be compiled
     * @private
     */
    buildSource: function buildSource(mode) {
      return 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform vec4 uColor;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'gl_FragColor = color;\n' + 'if (color.a > 0.0) {\n' + this.fragmentSource[mode] + '}\n' + '}';
    },
    /**
     * Retrieves the cached shader.
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
    retrieveShader: function retrieveShader(options) {
      var cacheKey = this.type + '_' + this.mode,
        shaderSource;
      if (!options.programCache.hasOwnProperty(cacheKey)) {
        shaderSource = this.buildSource(this.mode);
        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
      }
      return options.programCache[cacheKey];
    },
    /**
     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        data = imageData.data,
        iLen = data.length,
        tr,
        tg,
        tb,
        r,
        g,
        b,
        source,
        alpha1 = 1 - this.alpha;
      source = new fabric.Color(this.color).getSource();
      tr = source[0] * this.alpha;
      tg = source[1] * this.alpha;
      tb = source[2] * this.alpha;
      for (var i = 0; i < iLen; i += 4) {
        r = data[i];
        g = data[i + 1];
        b = data[i + 2];
        switch (this.mode) {
          case 'multiply':
            data[i] = r * tr / 255;
            data[i + 1] = g * tg / 255;
            data[i + 2] = b * tb / 255;
            break;
          case 'screen':
            data[i] = 255 - (255 - r) * (255 - tr) / 255;
            data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;
            data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;
            break;
          case 'add':
            data[i] = r + tr;
            data[i + 1] = g + tg;
            data[i + 2] = b + tb;
            break;
          case 'diff':
          case 'difference':
            data[i] = Math.abs(r - tr);
            data[i + 1] = Math.abs(g - tg);
            data[i + 2] = Math.abs(b - tb);
            break;
          case 'subtract':
            data[i] = r - tr;
            data[i + 1] = g - tg;
            data[i + 2] = b - tb;
            break;
          case 'darken':
            data[i] = Math.min(r, tr);
            data[i + 1] = Math.min(g, tg);
            data[i + 2] = Math.min(b, tb);
            break;
          case 'lighten':
            data[i] = Math.max(r, tr);
            data[i + 1] = Math.max(g, tg);
            data[i + 2] = Math.max(b, tb);
            break;
          case 'overlay':
            data[i] = tr < 128 ? 2 * r * tr / 255 : 255 - 2 * (255 - r) * (255 - tr) / 255;
            data[i + 1] = tg < 128 ? 2 * g * tg / 255 : 255 - 2 * (255 - g) * (255 - tg) / 255;
            data[i + 2] = tb < 128 ? 2 * b * tb / 255 : 255 - 2 * (255 - b) * (255 - tb) / 255;
            break;
          case 'exclusion':
            data[i] = tr + r - 2 * tr * r / 255;
            data[i + 1] = tg + g - 2 * tg * g / 255;
            data[i + 2] = tb + b - 2 * tb * b / 255;
            break;
          case 'tint':
            data[i] = tr + r * alpha1;
            data[i + 1] = tg + g * alpha1;
            data[i + 2] = tb + b * alpha1;
        }
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uColor: gl.getUniformLocation(program, 'uColor')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      var source = new fabric.Color(this.color).getSource();
      source[0] = this.alpha * source[0] / 255;
      source[1] = this.alpha * source[1] / 255;
      source[2] = this.alpha * source[2] / 255;
      source[3] = this.alpha;
      gl.uniform4fv(uniformLocations.uColor, source);
    },
    /**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject() {
      return {
        type: this.type,
        color: this.color,
        mode: this.mode,
        alpha: this.alpha
      };
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.BlendColor} Instance of fabric.Image.filters.BlendColor
   */
  fabric.Image.filters.BlendColor.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric,
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Image Blend filter class
   * @class fabric.Image.filter.BlendImage
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @example
   * var filter = new fabric.Image.filters.BlendColor({
   *  color: '#000',
   *  mode: 'multiply'
   * });
   *
   * var filter = new fabric.Image.filters.BlendImage({
   *  image: fabricImageObject,
   *  mode: 'multiply',
   *  alpha: 0.5
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */

  filters.BlendImage = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.BlendImage.prototype */{
    type: 'BlendImage',
    /**
     * Color to make the blend operation with. default to a reddish color since black or white
     * gives always strong result.
     **/
    image: null,
    /**
     * Blend mode for the filter (one of "multiply", "mask")
     * @type String
     * @default
     **/
    mode: 'multiply',
    /**
     * alpha value. represent the strength of the blend image operation.
     * not implemented.
     **/
    alpha: 1,
    vertexSource: 'attribute vec2 aPosition;\n' + 'varying vec2 vTexCoord;\n' + 'varying vec2 vTexCoord2;\n' + 'uniform mat3 uTransformMatrix;\n' + 'void main() {\n' + 'vTexCoord = aPosition;\n' + 'vTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\n' + 'gl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n' + '}',
    /**
     * Fragment source for the Multiply program
     */
    fragmentSource: {
      multiply: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform sampler2D uImage;\n' + 'uniform vec4 uColor;\n' + 'varying vec2 vTexCoord;\n' + 'varying vec2 vTexCoord2;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'vec4 color2 = texture2D(uImage, vTexCoord2);\n' + 'color.rgba *= color2.rgba;\n' + 'gl_FragColor = color;\n' + '}',
      mask: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform sampler2D uImage;\n' + 'uniform vec4 uColor;\n' + 'varying vec2 vTexCoord;\n' + 'varying vec2 vTexCoord2;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'vec4 color2 = texture2D(uImage, vTexCoord2);\n' + 'color.a = color2.a;\n' + 'gl_FragColor = color;\n' + '}'
    },
    /**
     * Retrieves the cached shader.
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
    retrieveShader: function retrieveShader(options) {
      var cacheKey = this.type + '_' + this.mode;
      var shaderSource = this.fragmentSource[this.mode];
      if (!options.programCache.hasOwnProperty(cacheKey)) {
        options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
      }
      return options.programCache[cacheKey];
    },
    applyToWebGL: function applyToWebGL(options) {
      // load texture to blend.
      var gl = options.context,
        texture = this.createTexture(options.filterBackend, this.image);
      this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);
      this.callSuper('applyToWebGL', options);
      this.unbindAdditionalTexture(gl, gl.TEXTURE1);
    },
    createTexture: function createTexture(backend, image) {
      return backend.getCachedTexture(image.cacheKey, image._element);
    },
    /**
     * Calculate a transformMatrix to adapt the image to blend over
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
    calculateMatrix: function calculateMatrix() {
      var image = this.image,
        width = image._element.width,
        height = image._element.height;
      return [1 / image.scaleX, 0, 0, 0, 1 / image.scaleY, 0, -image.left / width, -image.top / height, 1];
    },
    /**
     * Apply the Blend operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        resources = options.filterBackend.resources,
        data = imageData.data,
        iLen = data.length,
        width = imageData.width,
        height = imageData.height,
        tr,
        tg,
        tb,
        ta,
        r,
        g,
        b,
        a,
        canvas1,
        context,
        image = this.image,
        blendData;
      if (!resources.blendImage) {
        resources.blendImage = fabric.util.createCanvasElement();
      }
      canvas1 = resources.blendImage;
      context = canvas1.getContext('2d');
      if (canvas1.width !== width || canvas1.height !== height) {
        canvas1.width = width;
        canvas1.height = height;
      } else {
        context.clearRect(0, 0, width, height);
      }
      context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);
      context.drawImage(image._element, 0, 0, width, height);
      blendData = context.getImageData(0, 0, width, height).data;
      for (var i = 0; i < iLen; i += 4) {
        r = data[i];
        g = data[i + 1];
        b = data[i + 2];
        a = data[i + 3];
        tr = blendData[i];
        tg = blendData[i + 1];
        tb = blendData[i + 2];
        ta = blendData[i + 3];
        switch (this.mode) {
          case 'multiply':
            data[i] = r * tr / 255;
            data[i + 1] = g * tg / 255;
            data[i + 2] = b * tb / 255;
            data[i + 3] = a * ta / 255;
            break;
          case 'mask':
            data[i + 3] = ta;
            break;
        }
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uTransformMatrix: gl.getUniformLocation(program, 'uTransformMatrix'),
        uImage: gl.getUniformLocation(program, 'uImage')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      var matrix = this.calculateMatrix();
      gl.uniform1i(uniformLocations.uImage, 1); // texture unit 1.
      gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);
    },
    /**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject() {
      return {
        type: this.type,
        image: this.image && this.image.toObject(),
        mode: this.mode,
        alpha: this.alpha
      };
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} callback to be invoked after filter creation
   * @return {fabric.Image.filters.BlendImage} Instance of fabric.Image.filters.BlendImage
   */
  fabric.Image.filters.BlendImage.fromObject = function (object, callback) {
    fabric.Image.fromObject(object.image, function (image) {
      var options = fabric.util.object.clone(object);
      options.image = image;
      callback(new fabric.Image.filters.BlendImage(options));
    });
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    pow = Math.pow,
    floor = Math.floor,
    sqrt = Math.sqrt,
    abs = Math.abs,
    round = Math.round,
    sin = Math.sin,
    ceil = Math.ceil,
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Resize image filter class
   * @class fabric.Image.filters.Resize
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Resize();
   * object.filters.push(filter);
   * object.applyFilters(canvas.renderAll.bind(canvas));
   */
  filters.Resize = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Resize.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Resize',
    /**
     * Resize type
     * for webgl resizeType is just lanczos, for canvas2d can be:
     * bilinear, hermite, sliceHack, lanczos.
     * @param {String} resizeType
     * @default
     */
    resizeType: 'hermite',
    /**
     * Scale factor for resizing, x axis
     * @param {Number} scaleX
     * @default
     */
    scaleX: 1,
    /**
     * Scale factor for resizing, y axis
     * @param {Number} scaleY
     * @default
     */
    scaleY: 1,
    /**
     * LanczosLobes parameter for lanczos filter, valid for resizeType lanczos
     * @param {Number} lanczosLobes
     * @default
     */
    lanczosLobes: 3,
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uDelta: gl.getUniformLocation(program, 'uDelta'),
        uTaps: gl.getUniformLocation(program, 'uTaps')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);
      gl.uniform1fv(uniformLocations.uTaps, this.taps);
    },
    /**
     * Retrieves the cached shader.
     * @param {Object} options
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
    retrieveShader: function retrieveShader(options) {
      var filterWindow = this.getFilterWindow(),
        cacheKey = this.type + '_' + filterWindow;
      if (!options.programCache.hasOwnProperty(cacheKey)) {
        var fragmentShader = this.generateShader(filterWindow);
        options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);
      }
      return options.programCache[cacheKey];
    },
    getFilterWindow: function getFilterWindow() {
      var scale = this.tempScale;
      return Math.ceil(this.lanczosLobes / scale);
    },
    getTaps: function getTaps() {
      var lobeFunction = this.lanczosCreate(this.lanczosLobes),
        scale = this.tempScale,
        filterWindow = this.getFilterWindow(),
        taps = new Array(filterWindow);
      for (var i = 1; i <= filterWindow; i++) {
        taps[i - 1] = lobeFunction(i * scale);
      }
      return taps;
    },
    /**
     * Generate vertex and shader sources from the necessary steps numbers
     * @param {Number} filterWindow
     */
    generateShader: function generateShader(filterWindow) {
      var offsets = new Array(filterWindow),
        fragmentShader = this.fragmentSourceTOP,
        filterWindow;
      for (var i = 1; i <= filterWindow; i++) {
        offsets[i - 1] = i + '.0 * uDelta';
      }
      fragmentShader += 'uniform float uTaps[' + filterWindow + '];\n';
      fragmentShader += 'void main() {\n';
      fragmentShader += '  vec4 color = texture2D(uTexture, vTexCoord);\n';
      fragmentShader += '  float sum = 1.0;\n';
      offsets.forEach(function (offset, i) {
        fragmentShader += '  color += texture2D(uTexture, vTexCoord + ' + offset + ') * uTaps[' + i + '];\n';
        fragmentShader += '  color += texture2D(uTexture, vTexCoord - ' + offset + ') * uTaps[' + i + '];\n';
        fragmentShader += '  sum += 2.0 * uTaps[' + i + '];\n';
      });
      fragmentShader += '  gl_FragColor = color / sum;\n';
      fragmentShader += '}';
      return fragmentShader;
    },
    fragmentSourceTOP: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform vec2 uDelta;\n' + 'varying vec2 vTexCoord;\n',
    /**
     * Apply the resize filter to the image
     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
     *
     * @param {Object} options
     * @param {Number} options.passes The number of filters remaining to be executed
     * @param {Boolean} options.webgl Whether to use webgl to render the filter.
     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
    applyTo: function applyTo(options) {
      if (options.webgl) {
        options.passes++;
        this.width = options.sourceWidth;
        this.horizontal = true;
        this.dW = Math.round(this.width * this.scaleX);
        this.dH = options.sourceHeight;
        this.tempScale = this.dW / this.width;
        this.taps = this.getTaps();
        options.destinationWidth = this.dW;
        this._setupFrameBuffer(options);
        this.applyToWebGL(options);
        this._swapTextures(options);
        options.sourceWidth = options.destinationWidth;
        this.height = options.sourceHeight;
        this.horizontal = false;
        this.dH = Math.round(this.height * this.scaleY);
        this.tempScale = this.dH / this.height;
        this.taps = this.getTaps();
        options.destinationHeight = this.dH;
        this._setupFrameBuffer(options);
        this.applyToWebGL(options);
        this._swapTextures(options);
        options.sourceHeight = options.destinationHeight;
      } else {
        this.applyTo2d(options);
      }
    },
    isNeutralState: function isNeutralState() {
      return this.scaleX === 1 && this.scaleY === 1;
    },
    lanczosCreate: function lanczosCreate(lobes) {
      return function (x) {
        if (x >= lobes || x <= -lobes) {
          return 0.0;
        }
        if (x < 1.19209290E-07 && x > -1.19209290E-07) {
          return 1.0;
        }
        x *= Math.PI;
        var xx = x / lobes;
        return sin(x) / x * sin(xx) / xx;
      };
    },
    /**
     * Applies filter to canvas element
     * @memberOf fabric.Image.filters.Resize.prototype
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} scaleX
     * @param {Number} scaleY
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        scaleX = this.scaleX,
        scaleY = this.scaleY;
      this.rcpScaleX = 1 / scaleX;
      this.rcpScaleY = 1 / scaleY;
      var oW = imageData.width,
        oH = imageData.height,
        dW = round(oW * scaleX),
        dH = round(oH * scaleY),
        newData;
      if (this.resizeType === 'sliceHack') {
        newData = this.sliceByTwo(options, oW, oH, dW, dH);
      } else if (this.resizeType === 'hermite') {
        newData = this.hermiteFastResize(options, oW, oH, dW, dH);
      } else if (this.resizeType === 'bilinear') {
        newData = this.bilinearFiltering(options, oW, oH, dW, dH);
      } else if (this.resizeType === 'lanczos') {
        newData = this.lanczosResize(options, oW, oH, dW, dH);
      }
      options.imageData = newData;
    },
    /**
     * Filter sliceByTwo
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */
    sliceByTwo: function sliceByTwo(options, oW, oH, dW, dH) {
      var imageData = options.imageData,
        mult = 0.5,
        doneW = false,
        doneH = false,
        stepW = oW * mult,
        stepH = oH * mult,
        resources = fabric.filterBackend.resources,
        tmpCanvas,
        ctx,
        sX = 0,
        sY = 0,
        dX = oW,
        dY = 0;
      if (!resources.sliceByTwo) {
        resources.sliceByTwo = document.createElement('canvas');
      }
      tmpCanvas = resources.sliceByTwo;
      if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {
        tmpCanvas.width = oW * 1.5;
        tmpCanvas.height = oH;
      }
      ctx = tmpCanvas.getContext('2d');
      ctx.clearRect(0, 0, oW * 1.5, oH);
      ctx.putImageData(imageData, 0, 0);
      dW = floor(dW);
      dH = floor(dH);
      while (!doneW || !doneH) {
        oW = stepW;
        oH = stepH;
        if (dW < floor(stepW * mult)) {
          stepW = floor(stepW * mult);
        } else {
          stepW = dW;
          doneW = true;
        }
        if (dH < floor(stepH * mult)) {
          stepH = floor(stepH * mult);
        } else {
          stepH = dH;
          doneH = true;
        }
        ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);
        sX = dX;
        sY = dY;
        dY += stepH;
      }
      return ctx.getImageData(sX, sY, dW, dH);
    },
    /**
     * Filter lanczosResize
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */
    lanczosResize: function lanczosResize(options, oW, oH, dW, dH) {
      function process(u) {
        var v, i, weight, idx, a, red, green, blue, alpha, fX, fY;
        center.x = (u + 0.5) * ratioX;
        icenter.x = floor(center.x);
        for (v = 0; v < dH; v++) {
          center.y = (v + 0.5) * ratioY;
          icenter.y = floor(center.y);
          a = 0;
          red = 0;
          green = 0;
          blue = 0;
          alpha = 0;
          for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {
            if (i < 0 || i >= oW) {
              continue;
            }
            fX = floor(1000 * abs(i - center.x));
            if (!cacheLanc[fX]) {
              cacheLanc[fX] = {};
            }
            for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {
              if (j < 0 || j >= oH) {
                continue;
              }
              fY = floor(1000 * abs(j - center.y));
              if (!cacheLanc[fX][fY]) {
                cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1000);
              }
              weight = cacheLanc[fX][fY];
              if (weight > 0) {
                idx = (j * oW + i) * 4;
                a += weight;
                red += weight * srcData[idx];
                green += weight * srcData[idx + 1];
                blue += weight * srcData[idx + 2];
                alpha += weight * srcData[idx + 3];
              }
            }
          }
          idx = (v * dW + u) * 4;
          destData[idx] = red / a;
          destData[idx + 1] = green / a;
          destData[idx + 2] = blue / a;
          destData[idx + 3] = alpha / a;
        }
        if (++u < dW) {
          return process(u);
        } else {
          return destImg;
        }
      }
      var srcData = options.imageData.data,
        destImg = options.ctx.createImageData(dW, dH),
        destData = destImg.data,
        lanczos = this.lanczosCreate(this.lanczosLobes),
        ratioX = this.rcpScaleX,
        ratioY = this.rcpScaleY,
        rcpRatioX = 2 / this.rcpScaleX,
        rcpRatioY = 2 / this.rcpScaleY,
        range2X = ceil(ratioX * this.lanczosLobes / 2),
        range2Y = ceil(ratioY * this.lanczosLobes / 2),
        cacheLanc = {},
        center = {},
        icenter = {};
      return process(0);
    },
    /**
     * bilinearFiltering
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */
    bilinearFiltering: function bilinearFiltering(options, oW, oH, dW, dH) {
      var a,
        b,
        c,
        d,
        x,
        y,
        i,
        j,
        xDiff,
        yDiff,
        chnl,
        color,
        offset = 0,
        origPix,
        ratioX = this.rcpScaleX,
        ratioY = this.rcpScaleY,
        w4 = 4 * (oW - 1),
        img = options.imageData,
        pixels = img.data,
        destImage = options.ctx.createImageData(dW, dH),
        destPixels = destImage.data;
      for (i = 0; i < dH; i++) {
        for (j = 0; j < dW; j++) {
          x = floor(ratioX * j);
          y = floor(ratioY * i);
          xDiff = ratioX * j - x;
          yDiff = ratioY * i - y;
          origPix = 4 * (y * oW + x);
          for (chnl = 0; chnl < 4; chnl++) {
            a = pixels[origPix + chnl];
            b = pixels[origPix + 4 + chnl];
            c = pixels[origPix + w4 + chnl];
            d = pixels[origPix + w4 + 4 + chnl];
            color = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) + c * yDiff * (1 - xDiff) + d * xDiff * yDiff;
            destPixels[offset++] = color;
          }
        }
      }
      return destImage;
    },
    /**
     * hermiteFastResize
     * @param {Object} canvasEl Canvas element to apply filter to
     * @param {Number} oW Original Width
     * @param {Number} oH Original Height
     * @param {Number} dW Destination Width
     * @param {Number} dH Destination Height
     * @returns {ImageData}
     */
    hermiteFastResize: function hermiteFastResize(options, oW, oH, dW, dH) {
      var ratioW = this.rcpScaleX,
        ratioH = this.rcpScaleY,
        ratioWHalf = ceil(ratioW / 2),
        ratioHHalf = ceil(ratioH / 2),
        img = options.imageData,
        data = img.data,
        img2 = options.ctx.createImageData(dW, dH),
        data2 = img2.data;
      for (var j = 0; j < dH; j++) {
        for (var i = 0; i < dW; i++) {
          var x2 = (i + j * dW) * 4,
            weight = 0,
            weights = 0,
            weightsAlpha = 0,
            gxR = 0,
            gxG = 0,
            gxB = 0,
            gxA = 0,
            centerY = (j + 0.5) * ratioH;
          for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {
            var dy = abs(centerY - (yy + 0.5)) / ratioHHalf,
              centerX = (i + 0.5) * ratioW,
              w0 = dy * dy;
            for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {
              var dx = abs(centerX - (xx + 0.5)) / ratioWHalf,
                w = sqrt(w0 + dx * dx);
              /* eslint-disable max-depth */
              if (w > 1 && w < -1) {
                continue;
              }
              //hermite filter
              weight = 2 * w * w * w - 3 * w * w + 1;
              if (weight > 0) {
                dx = 4 * (xx + yy * oW);
                //alpha
                gxA += weight * data[dx + 3];
                weightsAlpha += weight;
                //colors
                if (data[dx + 3] < 255) {
                  weight = weight * data[dx + 3] / 250;
                }
                gxR += weight * data[dx];
                gxG += weight * data[dx + 1];
                gxB += weight * data[dx + 2];
                weights += weight;
              }
              /* eslint-enable max-depth */
            }
          }

          data2[x2] = gxR / weights;
          data2[x2 + 1] = gxG / weights;
          data2[x2 + 2] = gxB / weights;
          data2[x2 + 3] = gxA / weightsAlpha;
        }
      }
      return img2;
    },
    /**
     * Returns object representation of an instance
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject() {
      return {
        type: this.type,
        scaleX: this.scaleX,
        scaleY: this.scaleY,
        resizeType: this.resizeType,
        lanczosLobes: this.lanczosLobes
      };
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Resize} Instance of fabric.Image.filters.Resize
   */
  fabric.Image.filters.Resize.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Contrast filter class
   * @class fabric.Image.filters.Contrast
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Contrast#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Contrast({
   *   contrast: 0.25
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */
  filters.Contrast = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Contrast.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Contrast',
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uContrast;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'float contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\n' + 'color.rgb = contrastF * (color.rgb - 0.5) + 0.5;\n' + 'gl_FragColor = color;\n' + '}',
    /**
     * contrast value, range from -1 to 1.
     * @param {Number} contrast
     * @default 0
     */
    contrast: 0,
    mainParameter: 'contrast',
    /**
     * Constructor
     * @memberOf fabric.Image.filters.Contrast.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.contrast=0] Value to contrast the image up (-1...1)
     */

    /**
      * Apply the Contrast operation to a Uint8Array representing the pixels of an image.
      *
      * @param {Object} options
      * @param {ImageData} options.imageData The Uint8Array to be filtered.
      */
    applyTo2d: function applyTo2d(options) {
      if (this.contrast === 0) {
        return;
      }
      var imageData = options.imageData,
        i,
        len,
        data = imageData.data,
        len = data.length,
        contrast = Math.floor(this.contrast * 255),
        contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));
      for (i = 0; i < len; i += 4) {
        data[i] = contrastF * (data[i] - 128) + 128;
        data[i + 1] = contrastF * (data[i + 1] - 128) + 128;
        data[i + 2] = contrastF * (data[i + 2] - 128) + 128;
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uContrast: gl.getUniformLocation(program, 'uContrast')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform1f(uniformLocations.uContrast, this.contrast);
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Contrast} Instance of fabric.Image.filters.Contrast
   */
  fabric.Image.filters.Contrast.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Saturate filter class
   * @class fabric.Image.filters.Saturation
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Saturation#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Saturation({
   *   saturation: 1
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */
  filters.Saturation = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Saturation.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Saturation',
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uSaturation;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'float rgMax = max(color.r, color.g);\n' + 'float rgbMax = max(rgMax, color.b);\n' + 'color.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\n' + 'color.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\n' + 'color.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\n' + 'gl_FragColor = color;\n' + '}',
    /**
     * Saturation value, from -1 to 1.
     * Increases/decreases the color saturation.
     * A value of 0 has no effect.
     * 
     * @param {Number} saturation
     * @default
     */
    saturation: 0,
    mainParameter: 'saturation',
    /**
     * Constructor
     * @memberOf fabric.Image.filters.Saturate.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.saturate=0] Value to saturate the image (-1...1)
     */

    /**
     * Apply the Saturation operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      if (this.saturation === 0) {
        return;
      }
      var imageData = options.imageData,
        data = imageData.data,
        len = data.length,
        adjust = -this.saturation,
        i,
        max;
      for (i = 0; i < len; i += 4) {
        max = Math.max(data[i], data[i + 1], data[i + 2]);
        data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;
        data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;
        data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uSaturation: gl.getUniformLocation(program, 'uSaturation')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform1f(uniformLocations.uSaturation, -this.saturation);
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Saturation} Instance of fabric.Image.filters.Saturate
   */
  fabric.Image.filters.Saturation.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Vibrance filter class
   * @class fabric.Image.filters.Vibrance
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Vibrance#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Vibrance({
   *   vibrance: 1
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */
  filters.Vibrance = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Vibrance.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Vibrance',
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform float uVibrance;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'float max = max(color.r, max(color.g, color.b));\n' + 'float avg = (color.r + color.g + color.b) / 3.0;\n' + 'float amt = (abs(max - avg) * 2.0) * uVibrance;\n' + 'color.r += max != color.r ? (max - color.r) * amt : 0.00;\n' + 'color.g += max != color.g ? (max - color.g) * amt : 0.00;\n' + 'color.b += max != color.b ? (max - color.b) * amt : 0.00;\n' + 'gl_FragColor = color;\n' + '}',
    /**
     * Vibrance value, from -1 to 1.
     * Increases/decreases the saturation of more muted colors with less effect on saturated colors.
     * A value of 0 has no effect.
     * 
     * @param {Number} vibrance
     * @default
     */
    vibrance: 0,
    mainParameter: 'vibrance',
    /**
     * Constructor
     * @memberOf fabric.Image.filters.Vibrance.prototype
     * @param {Object} [options] Options object
     * @param {Number} [options.vibrance=0] Vibrance value for the image (between -1 and 1)
     */

    /**
     * Apply the Vibrance operation to a Uint8ClampedArray representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8ClampedArray to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      if (this.vibrance === 0) {
        return;
      }
      var imageData = options.imageData,
        data = imageData.data,
        len = data.length,
        adjust = -this.vibrance,
        i,
        max,
        avg,
        amt;
      for (i = 0; i < len; i += 4) {
        max = Math.max(data[i], data[i + 1], data[i + 2]);
        avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
        amt = Math.abs(max - avg) * 2 / 255 * adjust;
        data[i] += max !== data[i] ? (max - data[i]) * amt : 0;
        data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * amt : 0;
        data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * amt : 0;
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uVibrance: gl.getUniformLocation(program, 'uVibrance')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Vibrance} Instance of fabric.Image.filters.Vibrance
   */
  fabric.Image.filters.Vibrance.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Blur filter class
   * @class fabric.Image.filters.Blur
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Blur#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Blur({
   *   blur: 0.5
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   * canvas.renderAll();
   */
  filters.Blur = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Blur.prototype */{
    type: 'Blur',
    /*
    'gl_FragColor = vec4(0.0);',
    'gl_FragColor += texture2D(texture, vTexCoord + -7 * uDelta)*0.0044299121055113265;',
    'gl_FragColor += texture2D(texture, vTexCoord + -6 * uDelta)*0.00895781211794;',
    'gl_FragColor += texture2D(texture, vTexCoord + -5 * uDelta)*0.0215963866053;',
    'gl_FragColor += texture2D(texture, vTexCoord + -4 * uDelta)*0.0443683338718;',
    'gl_FragColor += texture2D(texture, vTexCoord + -3 * uDelta)*0.0776744219933;',
    'gl_FragColor += texture2D(texture, vTexCoord + -2 * uDelta)*0.115876621105;',
    'gl_FragColor += texture2D(texture, vTexCoord + -1 * uDelta)*0.147308056121;',
    'gl_FragColor += texture2D(texture, vTexCoord              )*0.159576912161;',
    'gl_FragColor += texture2D(texture, vTexCoord + 1 * uDelta)*0.147308056121;',
    'gl_FragColor += texture2D(texture, vTexCoord + 2 * uDelta)*0.115876621105;',
    'gl_FragColor += texture2D(texture, vTexCoord + 3 * uDelta)*0.0776744219933;',
    'gl_FragColor += texture2D(texture, vTexCoord + 4 * uDelta)*0.0443683338718;',
    'gl_FragColor += texture2D(texture, vTexCoord + 5 * uDelta)*0.0215963866053;',
    'gl_FragColor += texture2D(texture, vTexCoord + 6 * uDelta)*0.00895781211794;',
    'gl_FragColor += texture2D(texture, vTexCoord + 7 * uDelta)*0.0044299121055113265;',
    */

    /* eslint-disable max-len */
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform vec2 uDelta;\n' + 'varying vec2 vTexCoord;\n' + 'const float nSamples = 15.0;\n' + 'vec3 v3offset = vec3(12.9898, 78.233, 151.7182);\n' + 'float random(vec3 scale) {\n' + /* use the fragment position for a different seed per-pixel */
    'return fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n' + '}\n' + 'void main() {\n' + 'vec4 color = vec4(0.0);\n' + 'float total = 0.0;\n' + 'float offset = random(v3offset);\n' + 'for (float t = -nSamples; t <= nSamples; t++) {\n' + 'float percent = (t + offset - 0.5) / nSamples;\n' + 'float weight = 1.0 - abs(percent);\n' + 'color += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\n' + 'total += weight;\n' + '}\n' + 'gl_FragColor = color / total;\n' + '}',
    /* eslint-enable max-len */

    /**
     * blur value, in percentage of image dimensions.
     * specific to keep the image blur constant at different resolutions
     * range between 0 and 1.
     * @type Number
     * @default
     */
    blur: 0,
    mainParameter: 'blur',
    applyTo: function applyTo(options) {
      if (options.webgl) {
        // this aspectRatio is used to give the same blur to vertical and horizontal
        this.aspectRatio = options.sourceWidth / options.sourceHeight;
        options.passes++;
        this._setupFrameBuffer(options);
        this.horizontal = true;
        this.applyToWebGL(options);
        this._swapTextures(options);
        this._setupFrameBuffer(options);
        this.horizontal = false;
        this.applyToWebGL(options);
        this._swapTextures(options);
      } else {
        this.applyTo2d(options);
      }
    },
    applyTo2d: function applyTo2d(options) {
      // paint canvasEl with current image data.
      //options.ctx.putImageData(options.imageData, 0, 0);
      options.imageData = this.simpleBlur(options);
    },
    simpleBlur: function simpleBlur(options) {
      var resources = options.filterBackend.resources,
        canvas1,
        canvas2,
        width = options.imageData.width,
        height = options.imageData.height;
      if (!resources.blurLayer1) {
        resources.blurLayer1 = fabric.util.createCanvasElement();
        resources.blurLayer2 = fabric.util.createCanvasElement();
      }
      canvas1 = resources.blurLayer1;
      canvas2 = resources.blurLayer2;
      if (canvas1.width !== width || canvas1.height !== height) {
        canvas2.width = canvas1.width = width;
        canvas2.height = canvas1.height = height;
      }
      var ctx1 = canvas1.getContext('2d'),
        ctx2 = canvas2.getContext('2d'),
        nSamples = 15,
        random,
        percent,
        j,
        i,
        blur = this.blur * 0.06 * 0.5;

      // load first canvas
      ctx1.putImageData(options.imageData, 0, 0);
      ctx2.clearRect(0, 0, width, height);
      for (i = -nSamples; i <= nSamples; i++) {
        random = (Math.random() - 0.5) / 4;
        percent = i / nSamples;
        j = blur * percent * width + random;
        ctx2.globalAlpha = 1 - Math.abs(percent);
        ctx2.drawImage(canvas1, j, random);
        ctx1.drawImage(canvas2, 0, 0);
        ctx2.globalAlpha = 1;
        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
      }
      for (i = -nSamples; i <= nSamples; i++) {
        random = (Math.random() - 0.5) / 4;
        percent = i / nSamples;
        j = blur * percent * height + random;
        ctx2.globalAlpha = 1 - Math.abs(percent);
        ctx2.drawImage(canvas1, random, j);
        ctx1.drawImage(canvas2, 0, 0);
        ctx2.globalAlpha = 1;
        ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
      }
      options.ctx.drawImage(canvas1, 0, 0);
      var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);
      ctx1.globalAlpha = 1;
      ctx1.clearRect(0, 0, canvas1.width, canvas1.height);
      return newImageData;
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        delta: gl.getUniformLocation(program, 'uDelta')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      var delta = this.chooseRightDelta();
      gl.uniform2fv(uniformLocations.delta, delta);
    },
    /**
     * choose right value of image percentage to blur with
     * @returns {Array} a numeric array with delta values
     */
    chooseRightDelta: function chooseRightDelta() {
      var blurScale = 1,
        delta = [0, 0],
        blur;
      if (this.horizontal) {
        if (this.aspectRatio > 1) {
          // image is wide, i want to shrink radius horizontal
          blurScale = 1 / this.aspectRatio;
        }
      } else {
        if (this.aspectRatio < 1) {
          // image is tall, i want to shrink radius vertical
          blurScale = this.aspectRatio;
        }
      }
      blur = blurScale * this.blur * 0.12;
      if (this.horizontal) {
        delta[0] = blur;
      } else {
        delta[1] = blur;
      }
      return delta;
    }
  });

  /**
   * Deserialize a JSON definition of a BlurFilter into a concrete instance.
   */
  filters.Blur.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * Gamma filter class
   * @class fabric.Image.filters.Gamma
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.Gamma#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.Gamma({
   *   gamma: [1, 0.5, 2.1]
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */
  filters.Gamma = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Gamma.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'Gamma',
    fragmentSource: 'precision highp float;\n' + 'uniform sampler2D uTexture;\n' + 'uniform vec3 uGamma;\n' + 'varying vec2 vTexCoord;\n' + 'void main() {\n' + 'vec4 color = texture2D(uTexture, vTexCoord);\n' + 'vec3 correction = (1.0 / uGamma);\n' + 'color.r = pow(color.r, correction.r);\n' + 'color.g = pow(color.g, correction.g);\n' + 'color.b = pow(color.b, correction.b);\n' + 'gl_FragColor = color;\n' + 'gl_FragColor.rgb *= color.a;\n' + '}',
    /**
     * Gamma array value, from 0.01 to 2.2.
     * @param {Array} gamma
     * @default
     */
    gamma: [1, 1, 1],
    /**
     * Describe the property that is the filter parameter
     * @param {String} m
     * @default
     */
    mainParameter: 'gamma',
    /**
     * Constructor
     * @param {Object} [options] Options object
     */
    initialize: function initialize(options) {
      this.gamma = [1, 1, 1];
      filters.BaseFilter.prototype.initialize.call(this, options);
    },
    /**
     * Apply the Gamma operation to a Uint8Array representing the pixels of an image.
     *
     * @param {Object} options
     * @param {ImageData} options.imageData The Uint8Array to be filtered.
     */
    applyTo2d: function applyTo2d(options) {
      var imageData = options.imageData,
        data = imageData.data,
        gamma = this.gamma,
        len = data.length,
        rInv = 1 / gamma[0],
        gInv = 1 / gamma[1],
        bInv = 1 / gamma[2],
        i;
      if (!this.rVals) {
        // eslint-disable-next-line
        this.rVals = new Uint8Array(256);
        // eslint-disable-next-line
        this.gVals = new Uint8Array(256);
        // eslint-disable-next-line
        this.bVals = new Uint8Array(256);
      }

      // This is an optimization - pre-compute a look-up table for each color channel
      // instead of performing these pow calls for each pixel in the image.
      for (i = 0, len = 256; i < len; i++) {
        this.rVals[i] = Math.pow(i / 255, rInv) * 255;
        this.gVals[i] = Math.pow(i / 255, gInv) * 255;
        this.bVals[i] = Math.pow(i / 255, bInv) * 255;
      }
      for (i = 0, len = data.length; i < len; i += 4) {
        data[i] = this.rVals[data[i]];
        data[i + 1] = this.gVals[data[i + 1]];
        data[i + 2] = this.bVals[data[i + 2]];
      }
    },
    /**
     * Return WebGL uniform locations for this filter's shader.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {WebGLShaderProgram} program This filter's compiled shader program.
     */
    getUniformLocations: function getUniformLocations(gl, program) {
      return {
        uGamma: gl.getUniformLocation(program, 'uGamma')
      };
    },
    /**
     * Send data from this filter to its shader program's uniforms.
     *
     * @param {WebGLRenderingContext} gl The GL canvas context used to compile this filter's shader.
     * @param {Object} uniformLocations A map of string uniform names to WebGLUniformLocation objects
     */
    sendUniformData: function sendUniformData(gl, uniformLocations) {
      gl.uniform3fv(uniformLocations.uGamma, this.gamma);
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.Gamma} Instance of fabric.Image.filters.Gamma
   */
  fabric.Image.filters.Gamma.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * A container class that knows how to apply a sequence of filters to an input image.
   */
  filters.Composed = createClass(filters.BaseFilter, /** @lends fabric.Image.filters.Composed.prototype */{
    type: 'Composed',
    /**
     * A non sparse array of filters to apply
     */
    subFilters: [],
    /**
     * Constructor
     * @param {Object} [options] Options object
     */
    initialize: function initialize(options) {
      this.callSuper('initialize', options);
      // create a new array instead mutating the prototype with push
      this.subFilters = this.subFilters.slice(0);
    },
    /**
     * Apply this container's filters to the input image provided.
     *
     * @param {Object} options
     * @param {Number} options.passes The number of filters remaining to be applied.
     */
    applyTo: function applyTo(options) {
      options.passes += this.subFilters.length - 1;
      this.subFilters.forEach(function (filter) {
        filter.applyTo(options);
      });
    },
    /**
     * Serialize this filter into JSON.
     *
     * @returns {Object} A JSON representation of this filter.
     */
    toObject: function toObject() {
      return fabric.util.object.extend(this.callSuper('toObject'), {
        subFilters: this.subFilters.map(function (filter) {
          return filter.toObject();
        })
      });
    },
    isNeutralState: function isNeutralState() {
      return !this.subFilters.some(function (filter) {
        return !filter.isNeutralState();
      });
    }
  });

  /**
   * Deserialize a JSON definition of a ComposedFilter into a concrete instance.
   */
  fabric.Image.filters.Composed.fromObject = function (object, callback) {
    var filters = object.subFilters || [],
      subFilters = filters.map(function (filter) {
        return new fabric.Image.filters[filter.type](filter);
      }),
      instance = new fabric.Image.filters.Composed({
        subFilters: subFilters
      });
    callback && callback(instance);
    return instance;
  };
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    filters = fabric.Image.filters,
    createClass = fabric.util.createClass;

  /**
   * HueRotation filter class
   * @class fabric.Image.filters.HueRotation
   * @memberOf fabric.Image.filters
   * @extends fabric.Image.filters.BaseFilter
   * @see {@link fabric.Image.filters.HueRotation#initialize} for constructor definition
   * @see {@link http://fabricjs.com/image-filters|ImageFilters demo}
   * @example
   * var filter = new fabric.Image.filters.HueRotation({
   *   rotation: -0.5
   * });
   * object.filters.push(filter);
   * object.applyFilters();
   */
  filters.HueRotation = createClass(filters.ColorMatrix, /** @lends fabric.Image.filters.HueRotation.prototype */{
    /**
     * Filter type
     * @param {String} type
     * @default
     */
    type: 'HueRotation',
    /**
     * HueRotation value, from -1 to 1.
     * the unit is radians
     * @param {Number} myParameter
     * @default
     */
    rotation: 0,
    /**
     * Describe the property that is the filter parameter
     * @param {String} m
     * @default
     */
    mainParameter: 'rotation',
    calculateMatrix: function calculateMatrix() {
      var rad = this.rotation * Math.PI,
        cos = fabric.util.cos(rad),
        sin = fabric.util.sin(rad),
        aThird = 1 / 3,
        aThirdSqtSin = Math.sqrt(aThird) * sin,
        OneMinusCos = 1 - cos;
      this.matrix = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0];
      this.matrix[0] = cos + OneMinusCos / 3;
      this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;
      this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;
      this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;
      this.matrix[6] = cos + aThird * OneMinusCos;
      this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;
      this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;
      this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;
      this.matrix[12] = cos + aThird * OneMinusCos;
    },
    /**
     * HueRotation isNeutralState implementation
     * Used only in image applyFilters to discard filters that will not have an effect
     * on the image
     * @param {Object} options
     **/
    isNeutralState: function isNeutralState(options) {
      this.calculateMatrix();
      return filters.BaseFilter.prototype.isNeutralState.call(this, options);
    },
    /**
     * Apply this filter to the input image data provided.
     *
     * Determines whether to use WebGL or Canvas2D based on the options.webgl flag.
     *
     * @param {Object} options
     * @param {Number} options.passes The number of filters remaining to be executed
     * @param {Boolean} options.webgl Whether to use webgl to render the filter.
     * @param {WebGLTexture} options.sourceTexture The texture setup as the source to be filtered.
     * @param {WebGLTexture} options.targetTexture The texture where filtered output should be drawn.
     * @param {WebGLRenderingContext} options.context The GL context used for rendering.
     * @param {Object} options.programCache A map of compiled shader programs, keyed by filter type.
     */
    applyTo: function applyTo(options) {
      this.calculateMatrix();
      filters.BaseFilter.prototype.applyTo.call(this, options);
    }
  });

  /**
   * Returns filter instance from an object representation
   * @static
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] to be invoked after filter creation
   * @return {fabric.Image.filters.HueRotation} Instance of fabric.Image.filters.HueRotation
   */
  fabric.Image.filters.HueRotation.fromObject = fabric.Image.filters.BaseFilter.fromObject;
})(typeof exports !== 'undefined' ? exports : this);
(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {}),
    clone = fabric.util.object.clone;
  if (fabric.Text) {
    fabric.warn('fabric.Text is already defined');
    return;
  }
  var additionalProps = ('fontFamily fontWeight fontSize text underline overline linethrough' + ' textAlign fontStyle lineHeight textBackgroundColor charSpacing styles' + ' direction path pathStartOffset pathSide pathAlign').split(' ');

  /**
   * Text class
   * @class fabric.Text
   * @extends fabric.Object
   * @return {fabric.Text} thisArg
   * @tutorial {@link http://fabricjs.com/fabric-intro-part-2#text}
   * @see {@link fabric.Text#initialize} for constructor definition
   */
  fabric.Text = fabric.util.createClass(fabric.Object, /** @lends fabric.Text.prototype */{
    /**
     * Properties which when set cause object to change dimensions
     * @type Array
     * @private
     */
    _dimensionAffectingProps: ['fontSize', 'fontWeight', 'fontFamily', 'fontStyle', 'lineHeight', 'text', 'charSpacing', 'textAlign', 'styles', 'path', 'pathStartOffset', 'pathSide', 'pathAlign'],
    /**
     * @private
     */
    _reNewline: /\r?\n/,
    /**
     * Use this regular expression to filter for whitespaces that is not a new line.
     * Mostly used when text is 'justify' aligned.
     * @private
     */
    _reSpacesAndTabs: /[ \t\r]/g,
    /**
     * Use this regular expression to filter for whitespace that is not a new line.
     * Mostly used when text is 'justify' aligned.
     * @private
     */
    _reSpaceAndTab: /[ \t\r]/,
    /**
     * Use this regular expression to filter consecutive groups of non spaces.
     * Mostly used when text is 'justify' aligned.
     * @private
     */
    _reWords: /\S+/g,
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'text',
    /**
     * Font size (in pixels)
     * @type Number
     * @default
     */
    fontSize: 40,
    /**
     * Font weight (e.g. bold, normal, 400, 600, 800)
     * @type {(Number|String)}
     * @default
     */
    fontWeight: 'normal',
    /**
     * Font family
     * @type String
     * @default
     */
    fontFamily: 'Times New Roman',
    /**
     * Text decoration underline.
     * @type Boolean
     * @default
     */
    underline: false,
    /**
     * Text decoration overline.
     * @type Boolean
     * @default
     */
    overline: false,
    /**
     * Text decoration linethrough.
     * @type Boolean
     * @default
     */
    linethrough: false,
    /**
     * Text alignment. Possible values: "left", "center", "right", "justify",
     * "justify-left", "justify-center" or "justify-right".
     * @type String
     * @default
     */
    textAlign: 'left',
    /**
     * Font style . Possible values: "", "normal", "italic" or "oblique".
     * @type String
     * @default
     */
    fontStyle: 'normal',
    /**
     * Line height
     * @type Number
     * @default
     */
    lineHeight: 1.16,
    /**
     * Superscript schema object (minimum overlap)
     * @type {Object}
     * @default
     */
    superscript: {
      size: 0.60,
      // fontSize factor
      baseline: -0.35 // baseline-shift factor (upwards)
    },

    /**
     * Subscript schema object (minimum overlap)
     * @type {Object}
     * @default
     */
    subscript: {
      size: 0.60,
      // fontSize factor
      baseline: 0.11 // baseline-shift factor (downwards)
    },

    /**
     * Background color of text lines
     * @type String
     * @default
     */
    textBackgroundColor: '',
    /**
     * List of properties to consider when checking if
     * state of an object is changed ({@link fabric.Object#hasStateChanged})
     * as well as for history (undo/redo) purposes
     * @type Array
     */
    stateProperties: fabric.Object.prototype.stateProperties.concat(additionalProps),
    /**
     * List of properties to consider when checking if cache needs refresh
     * @type Array
     */
    cacheProperties: fabric.Object.prototype.cacheProperties.concat(additionalProps),
    /**
     * When defined, an object is rendered via stroke and this property specifies its color.
     * <b>Backwards incompatibility note:</b> This property was named "strokeStyle" until v1.1.6
     * @type String
     * @default
     */
    stroke: null,
    /**
     * Shadow object representing shadow of this shape.
     * <b>Backwards incompatibility note:</b> This property was named "textShadow" (String) until v1.2.11
     * @type fabric.Shadow
     * @default
     */
    shadow: null,
    /**
     * fabric.Path that the text should follow.
     * since 4.6.0 the path will be drawn automatically.
     * if you want to make the path visible, give it a stroke and strokeWidth or fill value
     * if you want it to be hidden, assign visible = false to the path.
     * This feature is in BETA, and SVG import/export is not yet supported.
     * @type fabric.Path
     * @example
     * var textPath = new fabric.Text('Text on a path', {
     *     top: 150,
     *     left: 150,
     *     textAlign: 'center',
     *     charSpacing: -50,
     *     path: new fabric.Path('M 0 0 C 50 -100 150 -100 200 0', {
     *         strokeWidth: 1,
     *         visible: false
     *     }),
     *     pathSide: 'left',
     *     pathStartOffset: 0
     * });
     * @default
     */
    path: null,
    /**
     * Offset amount for text path starting position
     * Only used when text has a path
     * @type Number
     * @default
     */
    pathStartOffset: 0,
    /**
     * Which side of the path the text should be drawn on.
     * Only used when text has a path
     * @type {String} 'left|right'
     * @default
     */
    pathSide: 'left',
    /**
     * How text is aligned to the path. This property determines
     * the perpendicular position of each character relative to the path.
     * (one of "baseline", "center", "ascender", "descender")
     * This feature is in BETA, and its behavior may change
     * @type String
     * @default
     */
    pathAlign: 'baseline',
    /**
     * @private
     */
    _fontSizeFraction: 0.222,
    /**
     * @private
     */
    offsets: {
      underline: 0.10,
      linethrough: -0.315,
      overline: -0.88
    },
    /**
     * Text Line proportion to font Size (in pixels)
     * @type Number
     * @default
     */
    _fontSizeMult: 1.13,
    /**
     * additional space between characters
     * expressed in thousands of em unit
     * @type Number
     * @default
     */
    charSpacing: 0,
    /**
     * Object containing character styles - top-level properties -> line numbers,
     * 2nd-level properties - character numbers
     * @type Object
     * @default
     */
    styles: null,
    /**
     * Reference to a context to measure text char or couple of chars
     * the cacheContext of the canvas will be used or a freshly created one if the object is not on canvas
     * once created it will be referenced on fabric._measuringContext to avoid creating a canvas for every
     * text object created.
     * @type {CanvasRenderingContext2D}
     * @default
     */
    _measuringContext: null,
    /**
     * Baseline shift, styles only, keep at 0 for the main text object
     * @type {Number}
     * @default
     */
    deltaY: 0,
    /**
     * WARNING: EXPERIMENTAL. NOT SUPPORTED YET
     * determine the direction of the text.
     * This has to be set manually together with textAlign and originX for proper
     * experience.
     * some interesting link for the future
     * https://www.w3.org/International/questions/qa-bidi-unicode-controls
     * @since 4.5.0
     * @type {String} 'ltr|rtl'
     * @default
     */
    direction: 'ltr',
    /**
     * Array of properties that define a style unit (of 'styles').
     * @type {Array}
     * @default
     */
    _styleProperties: ['stroke', 'strokeWidth', 'fill', 'fontFamily', 'fontSize', 'fontWeight', 'fontStyle', 'underline', 'overline', 'linethrough', 'deltaY', 'textBackgroundColor'],
    /**
     * contains characters bounding boxes
     */
    __charBounds: [],
    /**
     * use this size when measuring text. To avoid IE11 rounding errors
     * @type {Number}
     * @default
     * @readonly
     * @private
     */
    CACHE_FONT_SIZE: 400,
    /**
     * contains the min text width to avoid getting 0
     * @type {Number}
     * @default
     */
    MIN_TEXT_WIDTH: 2,
    /**
     * Constructor
     * @param {String} text Text string
     * @param {Object} [options] Options object
     * @return {fabric.Text} thisArg
     */
    initialize: function initialize(text, options) {
      this.styles = options ? options.styles || {} : {};
      this.text = text;
      this.__skipDimension = true;
      this.callSuper('initialize', options);
      if (this.path) {
        this.setPathInfo();
      }
      this.__skipDimension = false;
      this.initDimensions();
      this.setCoords();
      this.setupState({
        propertySet: '_dimensionAffectingProps'
      });
    },
    /**
     * If text has a path, it will add the extra information needed
     * for path and text calculations
     * @return {fabric.Text} thisArg
     */
    setPathInfo: function setPathInfo() {
      var path = this.path;
      if (path) {
        path.segmentsInfo = fabric.util.getPathSegmentsInfo(path.path);
      }
    },
    /**
     * Return a context for measurement of text string.
     * if created it gets stored for reuse
     * this is for internal use, please do not use it
     * @private
     * @param {String} text Text string
     * @param {Object} [options] Options object
     * @return {fabric.Text} thisArg
     */
    getMeasuringContext: function getMeasuringContext() {
      // if we did not return we have to measure something.
      if (!fabric._measuringContext) {
        fabric._measuringContext = this.canvas && this.canvas.contextCache || fabric.util.createCanvasElement().getContext('2d');
      }
      return fabric._measuringContext;
    },
    /**
     * @private
     * Divides text into lines of text and lines of graphemes.
     */
    _splitText: function _splitText() {
      var newLines = this._splitTextIntoLines(this.text);
      this.textLines = newLines.lines;
      this._textLines = newLines.graphemeLines;
      this._unwrappedTextLines = newLines._unwrappedLines;
      this._text = newLines.graphemeText;
      return newLines;
    },
    /**
     * Initialize or update text dimensions.
     * Updates this.width and this.height with the proper values.
     * Does not return dimensions.
     */
    initDimensions: function initDimensions() {
      if (this.__skipDimension) {
        return;
      }
      this._splitText();
      this._clearCache();
      if (this.path) {
        this.width = this.path.width;
        this.height = this.path.height;
      } else {
        this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;
        this.height = this.calcTextHeight();
      }
      if (this.textAlign.indexOf('justify') !== -1) {
        // once text is measured we need to make space fatter to make justified text.
        this.enlargeSpaces();
      }
      this.saveState({
        propertySet: '_dimensionAffectingProps'
      });
    },
    /**
     * Enlarge space boxes and shift the others
     */
    enlargeSpaces: function enlargeSpaces() {
      var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line, charBound, spaces;
      for (var i = 0, len = this._textLines.length; i < len; i++) {
        if (this.textAlign !== 'justify' && (i === len - 1 || this.isEndOfWrapping(i))) {
          continue;
        }
        accumulatedSpace = 0;
        line = this._textLines[i];
        currentLineWidth = this.getLineWidth(i);
        if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {
          numberOfSpaces = spaces.length;
          diffSpace = (this.width - currentLineWidth) / numberOfSpaces;
          for (var j = 0, jlen = line.length; j <= jlen; j++) {
            charBound = this.__charBounds[i][j];
            if (this._reSpaceAndTab.test(line[j])) {
              charBound.width += diffSpace;
              charBound.kernedWidth += diffSpace;
              charBound.left += accumulatedSpace;
              accumulatedSpace += diffSpace;
            } else {
              charBound.left += accumulatedSpace;
            }
          }
        }
      }
    },
    /**
     * Detect if the text line is ended with an hard break
     * text and itext do not have wrapping, return false
     * @return {Boolean}
     */
    isEndOfWrapping: function isEndOfWrapping(lineIndex) {
      return lineIndex === this._textLines.length - 1;
    },
    /**
     * Detect if a line has a linebreak and so we need to account for it when moving
     * and counting style.
     * It return always for text and Itext.
     * @return Number
     */
    missingNewlineOffset: function missingNewlineOffset() {
      return 1;
    },
    /**
     * Returns string representation of an instance
     * @return {String} String representation of text object
     */
    toString: function toString() {
      return '#<fabric.Text (' + this.complexity() + '): { "text": "' + this.text + '", "fontFamily": "' + this.fontFamily + '" }>';
    },
    /**
     * Return the dimension and the zoom level needed to create a cache canvas
     * big enough to host the object to be cached.
     * @private
     * @param {Object} dim.x width of object to be cached
     * @param {Object} dim.y height of object to be cached
     * @return {Object}.width width of canvas
     * @return {Object}.height height of canvas
     * @return {Object}.zoomX zoomX zoom value to unscale the canvas before drawing cache
     * @return {Object}.zoomY zoomY zoom value to unscale the canvas before drawing cache
     */
    _getCacheCanvasDimensions: function _getCacheCanvasDimensions() {
      var dims = this.callSuper('_getCacheCanvasDimensions');
      var fontSize = this.fontSize;
      dims.width += fontSize * dims.zoomX;
      dims.height += fontSize * dims.zoomY;
      return dims;
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _render: function _render(ctx) {
      var path = this.path;
      path && !path.isNotVisible() && path._render(ctx);
      this._setTextStyles(ctx);
      this._renderTextLinesBackground(ctx);
      this._renderTextDecoration(ctx, 'underline');
      this._renderText(ctx);
      this._renderTextDecoration(ctx, 'overline');
      this._renderTextDecoration(ctx, 'linethrough');
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderText: function _renderText(ctx) {
      if (this.paintFirst === 'stroke') {
        this._renderTextStroke(ctx);
        this._renderTextFill(ctx);
      } else {
        this._renderTextFill(ctx);
        this._renderTextStroke(ctx);
      }
    },
    /**
     * Set the font parameter of the context with the object properties or with charStyle
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Object} [charStyle] object with font style properties
     * @param {String} [charStyle.fontFamily] Font Family
     * @param {Number} [charStyle.fontSize] Font size in pixels. ( without px suffix )
     * @param {String} [charStyle.fontWeight] Font weight
     * @param {String} [charStyle.fontStyle] Font style (italic|normal)
     */
    _setTextStyles: function _setTextStyles(ctx, charStyle, forMeasuring) {
      ctx.textBaseline = 'alphabetical';
      if (this.path) {
        switch (this.pathAlign) {
          case 'center':
            ctx.textBaseline = 'middle';
            break;
          case 'ascender':
            ctx.textBaseline = 'top';
            break;
          case 'descender':
            ctx.textBaseline = 'bottom';
            break;
        }
      }
      ctx.font = this._getFontDeclaration(charStyle, forMeasuring);
    },
    /**
     * calculate and return the text Width measuring each line.
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @return {Number} Maximum width of fabric.Text object
     */
    calcTextWidth: function calcTextWidth() {
      var maxWidth = this.getLineWidth(0);
      for (var i = 1, len = this._textLines.length; i < len; i++) {
        var currentLineWidth = this.getLineWidth(i);
        if (currentLineWidth > maxWidth) {
          maxWidth = currentLineWidth;
        }
      }
      return maxWidth;
    },
    /**
     * @private
     * @param {String} method Method name ("fillText" or "strokeText")
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} line Text to render
     * @param {Number} left Left position of text
     * @param {Number} top Top position of text
     * @param {Number} lineIndex Index of a line in a text
     */
    _renderTextLine: function _renderTextLine(method, ctx, line, left, top, lineIndex) {
      this._renderChars(method, ctx, line, left, top, lineIndex);
    },
    /**
     * Renders the text background for lines, taking care of style
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderTextLinesBackground: function _renderTextLinesBackground(ctx) {
      if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor')) {
        return;
      }
      var heightOfLine,
        lineLeftOffset,
        originalFill = ctx.fillStyle,
        line,
        lastColor,
        leftOffset = this._getLeftOffset(),
        lineTopOffset = this._getTopOffset(),
        boxStart = 0,
        boxWidth = 0,
        charBox,
        currentColor,
        path = this.path,
        drawStart;
      for (var i = 0, len = this._textLines.length; i < len; i++) {
        heightOfLine = this.getHeightOfLine(i);
        if (!this.textBackgroundColor && !this.styleHas('textBackgroundColor', i)) {
          lineTopOffset += heightOfLine;
          continue;
        }
        line = this._textLines[i];
        lineLeftOffset = this._getLineLeftOffset(i);
        boxWidth = 0;
        boxStart = 0;
        lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');
        for (var j = 0, jlen = line.length; j < jlen; j++) {
          charBox = this.__charBounds[i][j];
          currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');
          if (path) {
            ctx.save();
            ctx.translate(charBox.renderLeft, charBox.renderTop);
            ctx.rotate(charBox.angle);
            ctx.fillStyle = currentColor;
            currentColor && ctx.fillRect(-charBox.width / 2, -heightOfLine / this.lineHeight * (1 - this._fontSizeFraction), charBox.width, heightOfLine / this.lineHeight);
            ctx.restore();
          } else if (currentColor !== lastColor) {
            drawStart = leftOffset + lineLeftOffset + boxStart;
            if (this.direction === 'rtl') {
              drawStart = this.width - drawStart - boxWidth;
            }
            ctx.fillStyle = lastColor;
            lastColor && ctx.fillRect(drawStart, lineTopOffset, boxWidth, heightOfLine / this.lineHeight);
            boxStart = charBox.left;
            boxWidth = charBox.width;
            lastColor = currentColor;
          } else {
            boxWidth += charBox.kernedWidth;
          }
        }
        if (currentColor && !path) {
          drawStart = leftOffset + lineLeftOffset + boxStart;
          if (this.direction === 'rtl') {
            drawStart = this.width - drawStart - boxWidth;
          }
          ctx.fillStyle = currentColor;
          ctx.fillRect(drawStart, lineTopOffset, boxWidth, heightOfLine / this.lineHeight);
        }
        lineTopOffset += heightOfLine;
      }
      ctx.fillStyle = originalFill;
      // if there is text background color no
      // other shadows should be casted
      this._removeShadow(ctx);
    },
    /**
     * @private
     * @param {Object} decl style declaration for cache
     * @param {String} decl.fontFamily fontFamily
     * @param {String} decl.fontStyle fontStyle
     * @param {String} decl.fontWeight fontWeight
     * @return {Object} reference to cache
     */
    getFontCache: function getFontCache(decl) {
      var fontFamily = decl.fontFamily.toLowerCase();
      if (!fabric.charWidthsCache[fontFamily]) {
        fabric.charWidthsCache[fontFamily] = {};
      }
      var cache = fabric.charWidthsCache[fontFamily],
        cacheProp = decl.fontStyle.toLowerCase() + '_' + (decl.fontWeight + '').toLowerCase();
      if (!cache[cacheProp]) {
        cache[cacheProp] = {};
      }
      return cache[cacheProp];
    },
    /**
     * measure and return the width of a single character.
     * possibly overridden to accommodate different measure logic or
     * to hook some external lib for character measurement
     * @private
     * @param {String} _char, char to be measured
     * @param {Object} charStyle style of char to be measured
     * @param {String} [previousChar] previous char
     * @param {Object} [prevCharStyle] style of previous char
     */
    _measureChar: function _measureChar(_char, charStyle, previousChar, prevCharStyle) {
      // first i try to return from cache
      var fontCache = this.getFontCache(charStyle),
        fontDeclaration = this._getFontDeclaration(charStyle),
        previousFontDeclaration = this._getFontDeclaration(prevCharStyle),
        couple = previousChar + _char,
        stylesAreEqual = fontDeclaration === previousFontDeclaration,
        width,
        coupleWidth,
        previousWidth,
        fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE,
        kernedWidth;
      if (previousChar && fontCache[previousChar] !== undefined) {
        previousWidth = fontCache[previousChar];
      }
      if (fontCache[_char] !== undefined) {
        kernedWidth = width = fontCache[_char];
      }
      if (stylesAreEqual && fontCache[couple] !== undefined) {
        coupleWidth = fontCache[couple];
        kernedWidth = coupleWidth - previousWidth;
      }
      if (width === undefined || previousWidth === undefined || coupleWidth === undefined) {
        var ctx = this.getMeasuringContext();
        // send a TRUE to specify measuring font size CACHE_FONT_SIZE
        this._setTextStyles(ctx, charStyle, true);
      }
      if (width === undefined) {
        kernedWidth = width = ctx.measureText(_char).width;
        fontCache[_char] = width;
      }
      if (previousWidth === undefined && stylesAreEqual && previousChar) {
        previousWidth = ctx.measureText(previousChar).width;
        fontCache[previousChar] = previousWidth;
      }
      if (stylesAreEqual && coupleWidth === undefined) {
        // we can measure the kerning couple and subtract the width of the previous character
        coupleWidth = ctx.measureText(couple).width;
        fontCache[couple] = coupleWidth;
        kernedWidth = coupleWidth - previousWidth;
      }
      return {
        width: width * fontMultiplier,
        kernedWidth: kernedWidth * fontMultiplier
      };
    },
    /**
     * Computes height of character at given position
     * @param {Number} line the line index number
     * @param {Number} _char the character index number
     * @return {Number} fontSize of the character
     */
    getHeightOfChar: function getHeightOfChar(line, _char) {
      return this.getValueOfPropertyAt(line, _char, 'fontSize');
    },
    /**
     * measure a text line measuring all characters.
     * @param {Number} lineIndex line number
     * @return {Number} Line width
     */
    measureLine: function measureLine(lineIndex) {
      var lineInfo = this._measureLine(lineIndex);
      if (this.charSpacing !== 0) {
        lineInfo.width -= this._getWidthOfCharSpacing();
      }
      if (lineInfo.width < 0) {
        lineInfo.width = 0;
      }
      return lineInfo;
    },
    /**
     * measure every grapheme of a line, populating __charBounds
     * @param {Number} lineIndex
     * @return {Object} object.width total width of characters
     * @return {Object} object.widthOfSpaces length of chars that match this._reSpacesAndTabs
     */
    _measureLine: function _measureLine(lineIndex) {
      var width = 0,
        i,
        grapheme,
        line = this._textLines[lineIndex],
        prevGrapheme,
        graphemeInfo,
        numOfSpaces = 0,
        lineBounds = new Array(line.length),
        positionInPath = 0,
        startingPoint,
        totalPathLength,
        path = this.path,
        reverse = this.pathSide === 'right';
      this.__charBounds[lineIndex] = lineBounds;
      for (i = 0; i < line.length; i++) {
        grapheme = line[i];
        graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);
        lineBounds[i] = graphemeInfo;
        width += graphemeInfo.kernedWidth;
        prevGrapheme = grapheme;
      }
      // this latest bound box represent the last character of the line
      // to simplify cursor handling in interactive mode.
      lineBounds[i] = {
        left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,
        width: 0,
        kernedWidth: 0,
        height: this.fontSize
      };
      if (path) {
        totalPathLength = path.segmentsInfo[path.segmentsInfo.length - 1].length;
        startingPoint = fabric.util.getPointOnPath(path.path, 0, path.segmentsInfo);
        startingPoint.x += path.pathOffset.x;
        startingPoint.y += path.pathOffset.y;
        switch (this.textAlign) {
          case 'left':
            positionInPath = reverse ? totalPathLength - width : 0;
            break;
          case 'center':
            positionInPath = (totalPathLength - width) / 2;
            break;
          case 'right':
            positionInPath = reverse ? 0 : totalPathLength - width;
            break;
          //todo - add support for justify
        }

        positionInPath += this.pathStartOffset * (reverse ? -1 : 1);
        for (i = reverse ? line.length - 1 : 0; reverse ? i >= 0 : i < line.length; reverse ? i-- : i++) {
          graphemeInfo = lineBounds[i];
          if (positionInPath > totalPathLength) {
            positionInPath %= totalPathLength;
          } else if (positionInPath < 0) {
            positionInPath += totalPathLength;
          }
          // it would probably much faster to send all the grapheme position for a line
          // and calculate path position/angle at once.
          this._setGraphemeOnPath(positionInPath, graphemeInfo, startingPoint);
          positionInPath += graphemeInfo.kernedWidth;
        }
      }
      return {
        width: width,
        numOfSpaces: numOfSpaces
      };
    },
    /**
     * Calculate the angle  and the left,top position of the char that follow a path.
     * It appends it to graphemeInfo to be reused later at rendering
     * @private
     * @param {Number} positionInPath to be measured
     * @param {Object} graphemeInfo current grapheme box information
     * @param {Object} startingPoint position of the point
     */
    _setGraphemeOnPath: function _setGraphemeOnPath(positionInPath, graphemeInfo, startingPoint) {
      var centerPosition = positionInPath + graphemeInfo.kernedWidth / 2,
        path = this.path;

      // we are at currentPositionOnPath. we want to know what point on the path is.
      var info = fabric.util.getPointOnPath(path.path, centerPosition, path.segmentsInfo);
      graphemeInfo.renderLeft = info.x - startingPoint.x;
      graphemeInfo.renderTop = info.y - startingPoint.y;
      graphemeInfo.angle = info.angle + (this.pathSide === 'right' ? Math.PI : 0);
    },
    /**
     * Measure and return the info of a single grapheme.
     * needs the the info of previous graphemes already filled
     * @private
     * @param {String} grapheme to be measured
     * @param {Number} lineIndex index of the line where the char is
     * @param {Number} charIndex position in the line
     * @param {String} [prevGrapheme] character preceding the one to be measured
     */
    _getGraphemeBox: function _getGraphemeBox(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {
      var style = this.getCompleteStyleDeclaration(lineIndex, charIndex),
        prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : {},
        info = this._measureChar(grapheme, style, prevGrapheme, prevStyle),
        kernedWidth = info.kernedWidth,
        width = info.width,
        charSpacing;
      if (this.charSpacing !== 0) {
        charSpacing = this._getWidthOfCharSpacing();
        width += charSpacing;
        kernedWidth += charSpacing;
      }
      var box = {
        width: width,
        left: 0,
        height: style.fontSize,
        kernedWidth: kernedWidth,
        deltaY: style.deltaY
      };
      if (charIndex > 0 && !skipLeft) {
        var previousBox = this.__charBounds[lineIndex][charIndex - 1];
        box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;
      }
      return box;
    },
    /**
     * Calculate height of line at 'lineIndex'
     * @param {Number} lineIndex index of line to calculate
     * @return {Number}
     */
    getHeightOfLine: function getHeightOfLine(lineIndex) {
      if (this.__lineHeights[lineIndex]) {
        return this.__lineHeights[lineIndex];
      }
      var line = this._textLines[lineIndex],
        // char 0 is measured before the line cycle because it nneds to char
        // emptylines
        maxHeight = this.getHeightOfChar(lineIndex, 0);
      for (var i = 1, len = line.length; i < len; i++) {
        maxHeight = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight);
      }
      return this.__lineHeights[lineIndex] = maxHeight * this.lineHeight * this._fontSizeMult;
    },
    /**
     * Calculate text box height
     */
    calcTextHeight: function calcTextHeight() {
      var lineHeight,
        height = 0;
      for (var i = 0, len = this._textLines.length; i < len; i++) {
        lineHeight = this.getHeightOfLine(i);
        height += i === len - 1 ? lineHeight / this.lineHeight : lineHeight;
      }
      return height;
    },
    /**
     * @private
     * @return {Number} Left offset
     */
    _getLeftOffset: function _getLeftOffset() {
      return this.direction === 'ltr' ? -this.width / 2 : this.width / 2;
    },
    /**
     * @private
     * @return {Number} Top offset
     */
    _getTopOffset: function _getTopOffset() {
      return -this.height / 2;
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {String} method Method name ("fillText" or "strokeText")
     */
    _renderTextCommon: function _renderTextCommon(ctx, method) {
      ctx.save();
      var lineHeights = 0,
        left = this._getLeftOffset(),
        top = this._getTopOffset();
      for (var i = 0, len = this._textLines.length; i < len; i++) {
        var heightOfLine = this.getHeightOfLine(i),
          maxHeight = heightOfLine / this.lineHeight,
          leftOffset = this._getLineLeftOffset(i);
        this._renderTextLine(method, ctx, this._textLines[i], left + leftOffset, top + lineHeights + maxHeight, i);
        lineHeights += heightOfLine;
      }
      ctx.restore();
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderTextFill: function _renderTextFill(ctx) {
      if (!this.fill && !this.styleHas('fill')) {
        return;
      }
      this._renderTextCommon(ctx, 'fillText');
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderTextStroke: function _renderTextStroke(ctx) {
      if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {
        return;
      }
      if (this.shadow && !this.shadow.affectStroke) {
        this._removeShadow(ctx);
      }
      ctx.save();
      this._setLineDash(ctx, this.strokeDashArray);
      ctx.beginPath();
      this._renderTextCommon(ctx, 'strokeText');
      ctx.closePath();
      ctx.restore();
    },
    /**
     * @private
     * @param {String} method fillText or strokeText.
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Array} line Content of the line, splitted in an array by grapheme
     * @param {Number} left
     * @param {Number} top
     * @param {Number} lineIndex
     */
    _renderChars: function _renderChars(method, ctx, line, left, top, lineIndex) {
      // set proper line offset
      var lineHeight = this.getHeightOfLine(lineIndex),
        isJustify = this.textAlign.indexOf('justify') !== -1,
        actualStyle,
        nextStyle,
        charsToRender = '',
        charBox,
        boxWidth = 0,
        timeToRender,
        path = this.path,
        shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex) && !path,
        isLtr = this.direction === 'ltr',
        sign = this.direction === 'ltr' ? 1 : -1,
        drawingLeft,
        currentDirection = ctx.canvas.getAttribute('dir');
      ctx.save();
      if (currentDirection !== this.direction) {
        ctx.canvas.setAttribute('dir', isLtr ? 'ltr' : 'rtl');
        ctx.direction = isLtr ? 'ltr' : 'rtl';
        ctx.textAlign = isLtr ? 'left' : 'right';
      }
      top -= lineHeight * this._fontSizeFraction / this.lineHeight;
      if (shortCut) {
        // render all the line in one pass without checking
        // drawingLeft = isLtr ? left : left - this.getLineWidth(lineIndex);
        this._renderChar(method, ctx, lineIndex, 0, line.join(''), left, top, lineHeight);
        ctx.restore();
        return;
      }
      for (var i = 0, len = line.length - 1; i <= len; i++) {
        timeToRender = i === len || this.charSpacing || path;
        charsToRender += line[i];
        charBox = this.__charBounds[lineIndex][i];
        if (boxWidth === 0) {
          left += sign * (charBox.kernedWidth - charBox.width);
          boxWidth += charBox.width;
        } else {
          boxWidth += charBox.kernedWidth;
        }
        if (isJustify && !timeToRender) {
          if (this._reSpaceAndTab.test(line[i])) {
            timeToRender = true;
          }
        }
        if (!timeToRender) {
          // if we have charSpacing, we render char by char
          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);
          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);
          timeToRender = fabric.util.hasStyleChanged(actualStyle, nextStyle, false);
        }
        if (timeToRender) {
          if (path) {
            ctx.save();
            ctx.translate(charBox.renderLeft, charBox.renderTop);
            ctx.rotate(charBox.angle);
            this._renderChar(method, ctx, lineIndex, i, charsToRender, -boxWidth / 2, 0, lineHeight);
            ctx.restore();
          } else {
            drawingLeft = left;
            this._renderChar(method, ctx, lineIndex, i, charsToRender, drawingLeft, top, lineHeight);
          }
          charsToRender = '';
          actualStyle = nextStyle;
          left += sign * boxWidth;
          boxWidth = 0;
        }
      }
      ctx.restore();
    },
    /**
     * This function try to patch the missing gradientTransform on canvas gradients.
     * transforming a context to transform the gradient, is going to transform the stroke too.
     * we want to transform the gradient but not the stroke operation, so we create
     * a transformed gradient on a pattern and then we use the pattern instead of the gradient.
     * this method has drawbacks: is slow, is in low resolution, needs a patch for when the size
     * is limited.
     * @private
     * @param {fabric.Gradient} filler a fabric gradient instance
     * @return {CanvasPattern} a pattern to use as fill/stroke style
     */
    _applyPatternGradientTransformText: function _applyPatternGradientTransformText(filler) {
      var pCanvas = fabric.util.createCanvasElement(),
        pCtx,
        // TODO: verify compatibility with strokeUniform
        width = this.width + this.strokeWidth,
        height = this.height + this.strokeWidth;
      pCanvas.width = width;
      pCanvas.height = height;
      pCtx = pCanvas.getContext('2d');
      pCtx.beginPath();
      pCtx.moveTo(0, 0);
      pCtx.lineTo(width, 0);
      pCtx.lineTo(width, height);
      pCtx.lineTo(0, height);
      pCtx.closePath();
      pCtx.translate(width / 2, height / 2);
      pCtx.fillStyle = filler.toLive(pCtx);
      this._applyPatternGradientTransform(pCtx, filler);
      pCtx.fill();
      return pCtx.createPattern(pCanvas, 'no-repeat');
    },
    handleFiller: function handleFiller(ctx, property, filler) {
      var offsetX, offsetY;
      if (filler.toLive) {
        if (filler.gradientUnits === 'percentage' || filler.gradientTransform || filler.patternTransform) {
          // need to transform gradient in a pattern.
          // this is a slow process. If you are hitting this codepath, and the object
          // is not using caching, you should consider switching it on.
          // we need a canvas as big as the current object caching canvas.
          offsetX = -this.width / 2;
          offsetY = -this.height / 2;
          ctx.translate(offsetX, offsetY);
          ctx[property] = this._applyPatternGradientTransformText(filler);
          return {
            offsetX: offsetX,
            offsetY: offsetY
          };
        } else {
          // is a simple gradient or pattern
          ctx[property] = filler.toLive(ctx, this);
          return this._applyPatternGradientTransform(ctx, filler);
        }
      } else {
        // is a color
        ctx[property] = filler;
      }
      return {
        offsetX: 0,
        offsetY: 0
      };
    },
    _setStrokeStyles: function _setStrokeStyles(ctx, decl) {
      ctx.lineWidth = decl.strokeWidth;
      ctx.lineCap = this.strokeLineCap;
      ctx.lineDashOffset = this.strokeDashOffset;
      ctx.lineJoin = this.strokeLineJoin;
      ctx.miterLimit = this.strokeMiterLimit;
      return this.handleFiller(ctx, 'strokeStyle', decl.stroke);
    },
    _setFillStyles: function _setFillStyles(ctx, decl) {
      return this.handleFiller(ctx, 'fillStyle', decl.fill);
    },
    /**
     * @private
     * @param {String} method
     * @param {CanvasRenderingContext2D} ctx Context to render on
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {String} _char
     * @param {Number} left Left coordinate
     * @param {Number} top Top coordinate
     * @param {Number} lineHeight Height of the line
     */
    _renderChar: function _renderChar(method, ctx, lineIndex, charIndex, _char, left, top) {
      var decl = this._getStyleDeclaration(lineIndex, charIndex),
        fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex),
        shouldFill = method === 'fillText' && fullDecl.fill,
        shouldStroke = method === 'strokeText' && fullDecl.stroke && fullDecl.strokeWidth,
        fillOffsets,
        strokeOffsets;
      if (!shouldStroke && !shouldFill) {
        return;
      }
      ctx.save();
      shouldFill && (fillOffsets = this._setFillStyles(ctx, fullDecl));
      shouldStroke && (strokeOffsets = this._setStrokeStyles(ctx, fullDecl));
      ctx.font = this._getFontDeclaration(fullDecl);
      if (decl && decl.textBackgroundColor) {
        this._removeShadow(ctx);
      }
      if (decl && decl.deltaY) {
        top += decl.deltaY;
      }
      shouldFill && ctx.fillText(_char, left - fillOffsets.offsetX, top - fillOffsets.offsetY);
      shouldStroke && ctx.strokeText(_char, left - strokeOffsets.offsetX, top - strokeOffsets.offsetY);
      ctx.restore();
    },
    /**
     * Turns the character into a 'superior figure' (i.e. 'superscript')
     * @param {Number} start selection start
     * @param {Number} end selection end
     * @returns {fabric.Text} thisArg
     * @chainable
     */
    setSuperscript: function setSuperscript(start, end) {
      return this._setScript(start, end, this.superscript);
    },
    /**
     * Turns the character into an 'inferior figure' (i.e. 'subscript')
     * @param {Number} start selection start
     * @param {Number} end selection end
     * @returns {fabric.Text} thisArg
     * @chainable
     */
    setSubscript: function setSubscript(start, end) {
      return this._setScript(start, end, this.subscript);
    },
    /**
     * Applies 'schema' at given position
     * @private
     * @param {Number} start selection start
     * @param {Number} end selection end
     * @param {Number} schema
     * @returns {fabric.Text} thisArg
     * @chainable
     */
    _setScript: function _setScript(start, end, schema) {
      var loc = this.get2DCursorLocation(start, true),
        fontSize = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'fontSize'),
        dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, 'deltaY'),
        style = {
          fontSize: fontSize * schema.size,
          deltaY: dy + fontSize * schema.baseline
        };
      this.setSelectionStyles(style, start, end);
      return this;
    },
    /**
     * @private
     * @param {Number} lineIndex index text line
     * @return {Number} Line left offset
     */
    _getLineLeftOffset: function _getLineLeftOffset(lineIndex) {
      var lineWidth = this.getLineWidth(lineIndex),
        lineDiff = this.width - lineWidth,
        textAlign = this.textAlign,
        direction = this.direction,
        isEndOfWrapping,
        leftOffset = 0,
        isEndOfWrapping = this.isEndOfWrapping(lineIndex);
      if (textAlign === 'justify' || textAlign === 'justify-center' && !isEndOfWrapping || textAlign === 'justify-right' && !isEndOfWrapping || textAlign === 'justify-left' && !isEndOfWrapping) {
        return 0;
      }
      if (textAlign === 'center') {
        leftOffset = lineDiff / 2;
      }
      if (textAlign === 'right') {
        leftOffset = lineDiff;
      }
      if (textAlign === 'justify-center') {
        leftOffset = lineDiff / 2;
      }
      if (textAlign === 'justify-right') {
        leftOffset = lineDiff;
      }
      if (direction === 'rtl') {
        leftOffset -= lineDiff;
      }
      return leftOffset;
    },
    /**
     * @private
     */
    _clearCache: function _clearCache() {
      this.__lineWidths = [];
      this.__lineHeights = [];
      this.__charBounds = [];
    },
    /**
     * @private
     */
    _shouldClearDimensionCache: function _shouldClearDimensionCache() {
      var shouldClear = this._forceClearCache;
      shouldClear || (shouldClear = this.hasStateChanged('_dimensionAffectingProps'));
      if (shouldClear) {
        this.dirty = true;
        this._forceClearCache = false;
      }
      return shouldClear;
    },
    /**
     * Measure a single line given its index. Used to calculate the initial
     * text bounding box. The values are calculated and stored in __lineWidths cache.
     * @private
     * @param {Number} lineIndex line number
     * @return {Number} Line width
     */
    getLineWidth: function getLineWidth(lineIndex) {
      if (this.__lineWidths[lineIndex] !== undefined) {
        return this.__lineWidths[lineIndex];
      }
      var lineInfo = this.measureLine(lineIndex);
      var width = lineInfo.width;
      this.__lineWidths[lineIndex] = width;
      return width;
    },
    _getWidthOfCharSpacing: function _getWidthOfCharSpacing() {
      if (this.charSpacing !== 0) {
        return this.fontSize * this.charSpacing / 1000;
      }
      return 0;
    },
    /**
     * Retrieves the value of property at given character position
     * @param {Number} lineIndex the line number
     * @param {Number} charIndex the character number
     * @param {String} property the property name
     * @returns the value of 'property'
     */
    getValueOfPropertyAt: function getValueOfPropertyAt(lineIndex, charIndex, property) {
      var charStyle = this._getStyleDeclaration(lineIndex, charIndex);
      if (charStyle && typeof charStyle[property] !== 'undefined') {
        return charStyle[property];
      }
      return this[property];
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _renderTextDecoration: function _renderTextDecoration(ctx, type) {
      if (!this[type] && !this.styleHas(type)) {
        return;
      }
      var heightOfLine,
        size,
        _size,
        lineLeftOffset,
        dy,
        _dy,
        line,
        lastDecoration,
        leftOffset = this._getLeftOffset(),
        topOffset = this._getTopOffset(),
        top,
        boxStart,
        boxWidth,
        charBox,
        currentDecoration,
        maxHeight,
        currentFill,
        lastFill,
        path = this.path,
        charSpacing = this._getWidthOfCharSpacing(),
        offsetY = this.offsets[type];
      for (var i = 0, len = this._textLines.length; i < len; i++) {
        heightOfLine = this.getHeightOfLine(i);
        if (!this[type] && !this.styleHas(type, i)) {
          topOffset += heightOfLine;
          continue;
        }
        line = this._textLines[i];
        maxHeight = heightOfLine / this.lineHeight;
        lineLeftOffset = this._getLineLeftOffset(i);
        boxStart = 0;
        boxWidth = 0;
        lastDecoration = this.getValueOfPropertyAt(i, 0, type);
        lastFill = this.getValueOfPropertyAt(i, 0, 'fill');
        top = topOffset + maxHeight * (1 - this._fontSizeFraction);
        size = this.getHeightOfChar(i, 0);
        dy = this.getValueOfPropertyAt(i, 0, 'deltaY');
        for (var j = 0, jlen = line.length; j < jlen; j++) {
          charBox = this.__charBounds[i][j];
          currentDecoration = this.getValueOfPropertyAt(i, j, type);
          currentFill = this.getValueOfPropertyAt(i, j, 'fill');
          _size = this.getHeightOfChar(i, j);
          _dy = this.getValueOfPropertyAt(i, j, 'deltaY');
          if (path && currentDecoration && currentFill) {
            ctx.save();
            ctx.fillStyle = lastFill;
            ctx.translate(charBox.renderLeft, charBox.renderTop);
            ctx.rotate(charBox.angle);
            ctx.fillRect(-charBox.kernedWidth / 2, offsetY * _size + _dy, charBox.kernedWidth, this.fontSize / 15);
            ctx.restore();
          } else if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) && boxWidth > 0) {
            var drawStart = leftOffset + lineLeftOffset + boxStart;
            if (this.direction === 'rtl') {
              drawStart = this.width - drawStart - boxWidth;
            }
            if (lastDecoration && lastFill) {
              ctx.fillStyle = lastFill;
              ctx.fillRect(drawStart, top + offsetY * size + dy, boxWidth, this.fontSize / 15);
            }
            boxStart = charBox.left;
            boxWidth = charBox.width;
            lastDecoration = currentDecoration;
            lastFill = currentFill;
            size = _size;
            dy = _dy;
          } else {
            boxWidth += charBox.kernedWidth;
          }
        }
        var drawStart = leftOffset + lineLeftOffset + boxStart;
        if (this.direction === 'rtl') {
          drawStart = this.width - drawStart - boxWidth;
        }
        ctx.fillStyle = currentFill;
        currentDecoration && currentFill && ctx.fillRect(drawStart, top + offsetY * size + dy, boxWidth - charSpacing, this.fontSize / 15);
        topOffset += heightOfLine;
      }
      // if there is text background color no
      // other shadows should be casted
      this._removeShadow(ctx);
    },
    /**
     * return font declaration string for canvas context
     * @param {Object} [styleObject] object
     * @returns {String} font declaration formatted for canvas context.
     */
    _getFontDeclaration: function _getFontDeclaration(styleObject, forMeasuring) {
      var style = styleObject || this,
        family = this.fontFamily,
        fontIsGeneric = fabric.Text.genericFonts.indexOf(family.toLowerCase()) > -1;
      var fontFamily = family === undefined || family.indexOf('\'') > -1 || family.indexOf(',') > -1 || family.indexOf('"') > -1 || fontIsGeneric ? style.fontFamily : '"' + style.fontFamily + '"';
      return [
      // node-canvas needs "weight style", while browsers need "style weight"
      // verify if this can be fixed in JSDOM
      fabric.isLikelyNode ? style.fontWeight : style.fontStyle, fabric.isLikelyNode ? style.fontStyle : style.fontWeight, forMeasuring ? this.CACHE_FONT_SIZE + 'px' : style.fontSize + 'px', fontFamily].join(' ');
    },
    /**
     * Renders text instance on a specified context
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    render: function render(ctx) {
      // do not render if object is not visible
      if (!this.visible) {
        return;
      }
      if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
        return;
      }
      if (this._shouldClearDimensionCache()) {
        this.initDimensions();
      }
      this.callSuper('render', ctx);
    },
    /**
     * Returns the text as an array of lines.
     * @param {String} text text to split
     * @returns {Array} Lines in the text
     */
    _splitTextIntoLines: function _splitTextIntoLines(text) {
      var lines = text.split(this._reNewline),
        newLines = new Array(lines.length),
        newLine = ['\n'],
        newText = [];
      for (var i = 0; i < lines.length; i++) {
        newLines[i] = fabric.util.string.graphemeSplit(lines[i]);
        newText = newText.concat(newLines[i], newLine);
      }
      newText.pop();
      return {
        _unwrappedLines: newLines,
        lines: lines,
        graphemeText: newText,
        graphemeLines: newLines
      };
    },
    /**
     * Returns object representation of an instance
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} Object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      var allProperties = additionalProps.concat(propertiesToInclude);
      var obj = this.callSuper('toObject', allProperties);
      obj.styles = fabric.util.stylesToArray(this.styles, this.text);
      if (obj.path) {
        obj.path = this.path.toObject();
      }
      return obj;
    },
    /**
     * Sets property to a given value. When changing position/dimension -related properties (left, top, scale, angle, etc.) `set` does not update position of object's borders/controls. If you need to update those, call `setCoords()`.
     * @param {String|Object} key Property name or object (if object, iterate over the object properties)
     * @param {Object|Function} value Property value (if function, the value is passed into it and its return value is used as a new one)
     * @return {fabric.Object} thisArg
     * @chainable
     */
    set: function set(key, value) {
      this.callSuper('set', key, value);
      var needsDims = false;
      var isAddingPath = false;
      if (_typeof(key) === 'object') {
        for (var _key in key) {
          if (_key === 'path') {
            this.setPathInfo();
          }
          needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;
          isAddingPath = isAddingPath || _key === 'path';
        }
      } else {
        needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;
        isAddingPath = key === 'path';
      }
      if (isAddingPath) {
        this.setPathInfo();
      }
      if (needsDims) {
        this.initDimensions();
        this.setCoords();
      }
      return this;
    },
    /**
     * Returns complexity of an instance
     * @return {Number} complexity
     */
    complexity: function complexity() {
      return 1;
    }
  });

  /* _FROM_SVG_START_ */
  /**
   * List of attribute names to account for when parsing SVG element (used by {@link fabric.Text.fromElement})
   * @static
   * @memberOf fabric.Text
   * @see: http://www.w3.org/TR/SVG/text.html#TextElement
   */
  fabric.Text.ATTRIBUTE_NAMES = fabric.SHARED_ATTRIBUTES.concat('x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor'.split(' '));

  /**
   * Default SVG font size
   * @static
   * @memberOf fabric.Text
   */
  fabric.Text.DEFAULT_SVG_FONT_SIZE = 16;

  /**
   * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)
   * @static
   * @memberOf fabric.Text
   * @param {SVGElement} element Element to parse
   * @param {Function} callback callback function invoked after parsing
   * @param {Object} [options] Options object
   */
  fabric.Text.fromElement = function (element, callback, options) {
    if (!element) {
      return callback(null);
    }
    var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES),
      parsedAnchor = parsedAttributes.textAnchor || 'left';
    options = fabric.util.object.extend(options ? clone(options) : {}, parsedAttributes);
    options.top = options.top || 0;
    options.left = options.left || 0;
    if (parsedAttributes.textDecoration) {
      var textDecoration = parsedAttributes.textDecoration;
      if (textDecoration.indexOf('underline') !== -1) {
        options.underline = true;
      }
      if (textDecoration.indexOf('overline') !== -1) {
        options.overline = true;
      }
      if (textDecoration.indexOf('line-through') !== -1) {
        options.linethrough = true;
      }
      delete options.textDecoration;
    }
    if ('dx' in parsedAttributes) {
      options.left += parsedAttributes.dx;
    }
    if ('dy' in parsedAttributes) {
      options.top += parsedAttributes.dy;
    }
    if (!('fontSize' in options)) {
      options.fontSize = fabric.Text.DEFAULT_SVG_FONT_SIZE;
    }
    var textContent = '';

    // The XML is not properly parsed in IE9 so a workaround to get
    // textContent is through firstChild.data. Another workaround would be
    // to convert XML loaded from a file to be converted using DOMParser (same way loadSVGFromString() does)
    if (!('textContent' in element)) {
      if ('firstChild' in element && element.firstChild !== null) {
        if ('data' in element.firstChild && element.firstChild.data !== null) {
          textContent = element.firstChild.data;
        }
      }
    } else {
      textContent = element.textContent;
    }
    textContent = textContent.replace(/^\s+|\s+$|\n+/g, '').replace(/\s+/g, ' ');
    var originalStrokeWidth = options.strokeWidth;
    options.strokeWidth = 0;
    var text = new fabric.Text(textContent, options),
      textHeightScaleFactor = text.getScaledHeight() / text.height,
      lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height,
      scaledDiff = lineHeightDiff * textHeightScaleFactor,
      textHeight = text.getScaledHeight() + scaledDiff,
      offX = 0;
    /*
      Adjust positioning:
        x/y attributes in SVG correspond to the bottom-left corner of text bounding box
        fabric output by default at top, left.
    */
    if (parsedAnchor === 'center') {
      offX = text.getScaledWidth() / 2;
    }
    if (parsedAnchor === 'right') {
      offX = text.getScaledWidth();
    }
    text.set({
      left: text.left - offX,
      top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,
      strokeWidth: typeof originalStrokeWidth !== 'undefined' ? originalStrokeWidth : 1
    });
    callback(text);
  };
  /* _FROM_SVG_END_ */

  /**
   * Returns fabric.Text instance from an object representation
   * @static
   * @memberOf fabric.Text
   * @param {Object} object plain js Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Text instance is created
   */
  fabric.Text.fromObject = function (object, callback) {
    var objectCopy = clone(object),
      path = object.path;
    delete objectCopy.path;
    return fabric.Object._fromObject('Text', objectCopy, function (textInstance) {
      textInstance.styles = fabric.util.stylesFromArray(object.styles, object.text);
      if (path) {
        fabric.Object._fromObject('Path', path, function (pathInstance) {
          textInstance.set('path', pathInstance);
          callback(textInstance);
        }, 'path');
      } else {
        callback(textInstance);
      }
    }, 'text');
  };
  fabric.Text.genericFonts = ['sans-serif', 'serif', 'cursive', 'fantasy', 'monospace'];
  fabric.util.createAccessors && fabric.util.createAccessors(fabric.Text);
})(typeof exports !== 'undefined' ? exports : this);
(function () {
  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */{
    /**
     * Returns true if object has no styling or no styling in a line
     * @param {Number} lineIndex , lineIndex is on wrapped lines.
     * @return {Boolean}
     */
    isEmptyStyles: function isEmptyStyles(lineIndex) {
      if (!this.styles) {
        return true;
      }
      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {
        return true;
      }
      var obj = typeof lineIndex === 'undefined' ? this.styles : {
        line: this.styles[lineIndex]
      };
      for (var p1 in obj) {
        for (var p2 in obj[p1]) {
          // eslint-disable-next-line no-unused-vars
          for (var p3 in obj[p1][p2]) {
            return false;
          }
        }
      }
      return true;
    },
    /**
     * Returns true if object has a style property or has it ina specified line
     * This function is used to detect if a text will use a particular property or not.
     * @param {String} property to check for
     * @param {Number} lineIndex to check the style on
     * @return {Boolean}
     */
    styleHas: function styleHas(property, lineIndex) {
      if (!this.styles || !property || property === '') {
        return false;
      }
      if (typeof lineIndex !== 'undefined' && !this.styles[lineIndex]) {
        return false;
      }
      var obj = typeof lineIndex === 'undefined' ? this.styles : {
        0: this.styles[lineIndex]
      };
      // eslint-disable-next-line
      for (var p1 in obj) {
        // eslint-disable-next-line
        for (var p2 in obj[p1]) {
          if (typeof obj[p1][p2][property] !== 'undefined') {
            return true;
          }
        }
      }
      return false;
    },
    /**
     * Check if characters in a text have a value for a property
     * whose value matches the textbox's value for that property.  If so,
     * the character-level property is deleted.  If the character
     * has no other properties, then it is also deleted.  Finally,
     * if the line containing that character has no other characters
     * then it also is deleted.
     *
     * @param {string} property The property to compare between characters and text.
     */
    cleanStyle: function cleanStyle(property) {
      if (!this.styles || !property || property === '') {
        return false;
      }
      var obj = this.styles,
        stylesCount = 0,
        letterCount,
        stylePropertyValue,
        allStyleObjectPropertiesMatch = true,
        graphemeCount = 0,
        styleObject;
      // eslint-disable-next-line
      for (var p1 in obj) {
        letterCount = 0;
        // eslint-disable-next-line
        for (var p2 in obj[p1]) {
          var styleObject = obj[p1][p2],
            stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);
          stylesCount++;
          if (stylePropertyHasBeenSet) {
            if (!stylePropertyValue) {
              stylePropertyValue = styleObject[property];
            } else if (styleObject[property] !== stylePropertyValue) {
              allStyleObjectPropertiesMatch = false;
            }
            if (styleObject[property] === this[property]) {
              delete styleObject[property];
            }
          } else {
            allStyleObjectPropertiesMatch = false;
          }
          if (Object.keys(styleObject).length !== 0) {
            letterCount++;
          } else {
            delete obj[p1][p2];
          }
        }
        if (letterCount === 0) {
          delete obj[p1];
        }
      }
      // if every grapheme has the same style set then
      // delete those styles and set it on the parent
      for (var i = 0; i < this._textLines.length; i++) {
        graphemeCount += this._textLines[i].length;
      }
      if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {
        this[property] = stylePropertyValue;
        this.removeStyle(property);
      }
    },
    /**
     * Remove a style property or properties from all individual character styles
     * in a text object.  Deletes the character style object if it contains no other style
     * props.  Deletes a line style object if it contains no other character styles.
     *
     * @param {String} props The property to remove from character styles.
     */
    removeStyle: function removeStyle(property) {
      if (!this.styles || !property || property === '') {
        return;
      }
      var obj = this.styles,
        line,
        lineNum,
        charNum;
      for (lineNum in obj) {
        line = obj[lineNum];
        for (charNum in line) {
          delete line[charNum][property];
          if (Object.keys(line[charNum]).length === 0) {
            delete line[charNum];
          }
        }
        if (Object.keys(line).length === 0) {
          delete obj[lineNum];
        }
      }
    },
    /**
     * @private
     */
    _extendStyles: function _extendStyles(index, styles) {
      var loc = this.get2DCursorLocation(index);
      if (!this._getLineStyle(loc.lineIndex)) {
        this._setLineStyle(loc.lineIndex);
      }
      if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {
        this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});
      }
      fabric.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles);
    },
    /**
     * Returns 2d representation (lineIndex and charIndex) of cursor (or selection start)
     * @param {Number} [selectionStart] Optional index. When not given, current selectionStart is used.
     * @param {Boolean} [skipWrapping] consider the location for unwrapped lines. useful to manage styles.
     */
    get2DCursorLocation: function get2DCursorLocation(selectionStart, skipWrapping) {
      if (typeof selectionStart === 'undefined') {
        selectionStart = this.selectionStart;
      }
      var lines = skipWrapping ? this._unwrappedTextLines : this._textLines,
        len = lines.length;
      for (var i = 0; i < len; i++) {
        if (selectionStart <= lines[i].length) {
          return {
            lineIndex: i,
            charIndex: selectionStart
          };
        }
        selectionStart -= lines[i].length + this.missingNewlineOffset(i);
      }
      return {
        lineIndex: i - 1,
        charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart
      };
    },
    /**
     * Gets style of a current selection/cursor (at the start position)
     * if startIndex or endIndex are not provided, selectionStart or selectionEnd will be used.
     * @param {Number} [startIndex] Start index to get styles at
     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
     * @param {Boolean} [complete] get full style or not
     * @return {Array} styles an array with one, zero or more Style objects
     */
    getSelectionStyles: function getSelectionStyles(startIndex, endIndex, complete) {
      if (typeof startIndex === 'undefined') {
        startIndex = this.selectionStart || 0;
      }
      if (typeof endIndex === 'undefined') {
        endIndex = this.selectionEnd || startIndex;
      }
      var styles = [];
      for (var i = startIndex; i < endIndex; i++) {
        styles.push(this.getStyleAtPosition(i, complete));
      }
      return styles;
    },
    /**
     * Gets style of a current selection/cursor position
     * @param {Number} position  to get styles at
     * @param {Boolean} [complete] full style if true
     * @return {Object} style Style object at a specified index
     * @private
     */
    getStyleAtPosition: function getStyleAtPosition(position, complete) {
      var loc = this.get2DCursorLocation(position),
        style = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) : this._getStyleDeclaration(loc.lineIndex, loc.charIndex);
      return style || {};
    },
    /**
     * Sets style of a current selection, if no selection exist, do not set anything.
     * @param {Object} [styles] Styles object
     * @param {Number} [startIndex] Start index to get styles at
     * @param {Number} [endIndex] End index to get styles at, if not specified selectionEnd or startIndex + 1
     * @return {fabric.IText} thisArg
     * @chainable
     */
    setSelectionStyles: function setSelectionStyles(styles, startIndex, endIndex) {
      if (typeof startIndex === 'undefined') {
        startIndex = this.selectionStart || 0;
      }
      if (typeof endIndex === 'undefined') {
        endIndex = this.selectionEnd || startIndex;
      }
      for (var i = startIndex; i < endIndex; i++) {
        this._extendStyles(i, styles);
      }
      /* not included in _extendStyles to avoid clearing cache more than once */
      this._forceClearCache = true;
      return this;
    },
    /**
     * get the reference, not a clone, of the style object for a given character
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @return {Object} style object
     */
    _getStyleDeclaration: function _getStyleDeclaration(lineIndex, charIndex) {
      var lineStyle = this.styles && this.styles[lineIndex];
      if (!lineStyle) {
        return null;
      }
      return lineStyle[charIndex];
    },
    /**
     * return a new object that contains all the style property for a character
     * the object returned is newly created
     * @param {Number} lineIndex of the line where the character is
     * @param {Number} charIndex position of the character on the line
     * @return {Object} style object
     */
    getCompleteStyleDeclaration: function getCompleteStyleDeclaration(lineIndex, charIndex) {
      var style = this._getStyleDeclaration(lineIndex, charIndex) || {},
        styleObject = {},
        prop;
      for (var i = 0; i < this._styleProperties.length; i++) {
        prop = this._styleProperties[i];
        styleObject[prop] = typeof style[prop] === 'undefined' ? this[prop] : style[prop];
      }
      return styleObject;
    },
    /**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Object} style
     * @private
     */
    _setStyleDeclaration: function _setStyleDeclaration(lineIndex, charIndex, style) {
      this.styles[lineIndex][charIndex] = style;
    },
    /**
     *
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @private
     */
    _deleteStyleDeclaration: function _deleteStyleDeclaration(lineIndex, charIndex) {
      delete this.styles[lineIndex][charIndex];
    },
    /**
     * @param {Number} lineIndex
     * @return {Boolean} if the line exists or not
     * @private
     */
    _getLineStyle: function _getLineStyle(lineIndex) {
      return !!this.styles[lineIndex];
    },
    /**
     * Set the line style to an empty object so that is initialized
     * @param {Number} lineIndex
     * @private
     */
    _setLineStyle: function _setLineStyle(lineIndex) {
      this.styles[lineIndex] = {};
    },
    /**
     * @param {Number} lineIndex
     * @private
     */
    _deleteLineStyle: function _deleteLineStyle(lineIndex) {
      delete this.styles[lineIndex];
    }
  });
})();
(function () {
  function parseDecoration(object) {
    if (object.textDecoration) {
      object.textDecoration.indexOf('underline') > -1 && (object.underline = true);
      object.textDecoration.indexOf('line-through') > -1 && (object.linethrough = true);
      object.textDecoration.indexOf('overline') > -1 && (object.overline = true);
      delete object.textDecoration;
    }
  }

  /**
   * IText class (introduced in <b>v1.4</b>) Events are also fired with "text:"
   * prefix when observing canvas.
   * @class fabric.IText
   * @extends fabric.Text
   * @mixes fabric.Observable
   *
   * @fires changed
   * @fires selection:changed
   * @fires editing:entered
   * @fires editing:exited
   *
   * @return {fabric.IText} thisArg
   * @see {@link fabric.IText#initialize} for constructor definition
   *
   * <p>Supported key combinations:</p>
   * <pre>
   *   Move cursor:                    left, right, up, down
   *   Select character:               shift + left, shift + right
   *   Select text vertically:         shift + up, shift + down
   *   Move cursor by word:            alt + left, alt + right
   *   Select words:                   shift + alt + left, shift + alt + right
   *   Move cursor to line start/end:  cmd + left, cmd + right or home, end
   *   Select till start/end of line:  cmd + shift + left, cmd + shift + right or shift + home, shift + end
   *   Jump to start/end of text:      cmd + up, cmd + down
   *   Select till start/end of text:  cmd + shift + up, cmd + shift + down or shift + pgUp, shift + pgDown
   *   Delete character:               backspace
   *   Delete word:                    alt + backspace
   *   Delete line:                    cmd + backspace
   *   Forward delete:                 delete
   *   Copy text:                      ctrl/cmd + c
   *   Paste text:                     ctrl/cmd + v
   *   Cut text:                       ctrl/cmd + x
   *   Select entire text:             ctrl/cmd + a
   *   Quit editing                    tab or esc
   * </pre>
   *
   * <p>Supported mouse/touch combination</p>
   * <pre>
   *   Position cursor:                click/touch
   *   Create selection:               click/touch & drag
   *   Create selection:               click & shift + click
   *   Select word:                    double click
   *   Select line:                    triple click
   * </pre>
   */
  fabric.IText = fabric.util.createClass(fabric.Text, fabric.Observable, /** @lends fabric.IText.prototype */{
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'i-text',
    /**
     * Index where text selection starts (or where cursor is when there is no selection)
     * @type Number
     * @default
     */
    selectionStart: 0,
    /**
     * Index where text selection ends
     * @type Number
     * @default
     */
    selectionEnd: 0,
    /**
     * Color of text selection
     * @type String
     * @default
     */
    selectionColor: 'rgba(17,119,255,0.3)',
    /**
     * Indicates whether text is in editing mode
     * @type Boolean
     * @default
     */
    isEditing: false,
    /**
     * Indicates whether a text can be edited
     * @type Boolean
     * @default
     */
    editable: true,
    /**
     * Border color of text object while it's in editing mode
     * @type String
     * @default
     */
    editingBorderColor: 'rgba(102,153,255,0.25)',
    /**
     * Width of cursor (in px)
     * @type Number
     * @default
     */
    cursorWidth: 2,
    /**
     * Color of text cursor color in editing mode.
     * if not set (default) will take color from the text.
     * if set to a color value that fabric can understand, it will
     * be used instead of the color of the text at the current position.
     * @type String
     * @default
     */
    cursorColor: '',
    /**
     * Delay between cursor blink (in ms)
     * @type Number
     * @default
     */
    cursorDelay: 1000,
    /**
     * Duration of cursor fadein (in ms)
     * @type Number
     * @default
     */
    cursorDuration: 600,
    /**
     * Indicates whether internal text char widths can be cached
     * @type Boolean
     * @default
     */
    caching: true,
    /**
     * DOM container to append the hiddenTextarea.
     * An alternative to attaching to the document.body.
     * Useful to reduce laggish redraw of the full document.body tree and
     * also with modals event capturing that won't let the textarea take focus.
     * @type HTMLElement
     * @default
     */
    hiddenTextareaContainer: null,
    /**
     * @private
     */
    _reSpace: /\s|\n/,
    /**
     * @private
     */
    _currentCursorOpacity: 0,
    /**
     * @private
     */
    _selectionDirection: null,
    /**
     * @private
     */
    _abortCursorAnimation: false,
    /**
     * @private
     */
    __widthOfSpace: [],
    /**
     * Helps determining when the text is in composition, so that the cursor
     * rendering is altered.
     */
    inCompositionMode: false,
    /**
     * Constructor
     * @param {String} text Text string
     * @param {Object} [options] Options object
     * @return {fabric.IText} thisArg
     */
    initialize: function initialize(text, options) {
      this.callSuper('initialize', text, options);
      this.initBehavior();
    },
    /**
     * Sets selection start (left boundary of a selection)
     * @param {Number} index Index to set selection start to
     */
    setSelectionStart: function setSelectionStart(index) {
      index = Math.max(index, 0);
      this._updateAndFire('selectionStart', index);
    },
    /**
     * Sets selection end (right boundary of a selection)
     * @param {Number} index Index to set selection end to
     */
    setSelectionEnd: function setSelectionEnd(index) {
      index = Math.min(index, this.text.length);
      this._updateAndFire('selectionEnd', index);
    },
    /**
     * @private
     * @param {String} property 'selectionStart' or 'selectionEnd'
     * @param {Number} index new position of property
     */
    _updateAndFire: function _updateAndFire(property, index) {
      if (this[property] !== index) {
        this._fireSelectionChanged();
        this[property] = index;
      }
      this._updateTextarea();
    },
    /**
     * Fires the even of selection changed
     * @private
     */
    _fireSelectionChanged: function _fireSelectionChanged() {
      this.fire('selection:changed');
      this.canvas && this.canvas.fire('text:selection:changed', {
        target: this
      });
    },
    /**
     * Initialize text dimensions. Render all text on given context
     * or on a offscreen canvas to get the text width with measureText.
     * Updates this.width and this.height with the proper values.
     * Does not return dimensions.
     * @private
     */
    initDimensions: function initDimensions() {
      this.isEditing && this.initDelayedCursor();
      this.clearContextTop();
      this.callSuper('initDimensions');
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    render: function render(ctx) {
      this.clearContextTop();
      this.callSuper('render', ctx);
      // clear the cursorOffsetCache, so we ensure to calculate once per renderCursor
      // the correct position but not at every cursor animation.
      this.cursorOffsetCache = {};
      this.renderCursorOrSelection();
    },
    /**
     * @private
     * @param {CanvasRenderingContext2D} ctx Context to render on
     */
    _render: function _render(ctx) {
      this.callSuper('_render', ctx);
    },
    /**
     * Prepare and clean the contextTop
     */
    clearContextTop: function clearContextTop(skipRestore) {
      if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
        return;
      }
      var ctx = this.canvas.contextTop,
        v = this.canvas.viewportTransform;
      ctx.save();
      ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
      this.transform(ctx);
      this._clearTextArea(ctx);
      skipRestore || ctx.restore();
    },
    /**
     * Renders cursor or selection (depending on what exists)
     * it does on the contextTop. If contextTop is not available, do nothing.
     */
    renderCursorOrSelection: function renderCursorOrSelection() {
      if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
        return;
      }
      var boundaries = this._getCursorBoundaries(),
        ctx = this.canvas.contextTop;
      this.clearContextTop(true);
      if (this.selectionStart === this.selectionEnd) {
        this.renderCursor(boundaries, ctx);
      } else {
        this.renderSelection(boundaries, ctx);
      }
      ctx.restore();
    },
    _clearTextArea: function _clearTextArea(ctx) {
      // we add 4 pixel, to be sure to do not leave any pixel out
      var width = this.width + 4,
        height = this.height + 4;
      ctx.clearRect(-width / 2, -height / 2, width, height);
    },
    /**
     * Returns cursor boundaries (left, top, leftOffset, topOffset)
     * @private
     * @param {Array} chars Array of characters
     * @param {String} typeOfBoundaries
     */
    _getCursorBoundaries: function _getCursorBoundaries(position) {
      // left/top are left/top of entire text box
      // leftOffset/topOffset are offset from that left/top point of a text box

      if (typeof position === 'undefined') {
        position = this.selectionStart;
      }
      var left = this._getLeftOffset(),
        top = this._getTopOffset(),
        offsets = this._getCursorBoundariesOffsets(position);
      return {
        left: left,
        top: top,
        leftOffset: offsets.left,
        topOffset: offsets.top
      };
    },
    /**
     * @private
     */
    _getCursorBoundariesOffsets: function _getCursorBoundariesOffsets(position) {
      if (this.cursorOffsetCache && 'top' in this.cursorOffsetCache) {
        return this.cursorOffsetCache;
      }
      var lineLeftOffset,
        lineIndex,
        charIndex,
        topOffset = 0,
        leftOffset = 0,
        boundaries,
        cursorPosition = this.get2DCursorLocation(position);
      charIndex = cursorPosition.charIndex;
      lineIndex = cursorPosition.lineIndex;
      for (var i = 0; i < lineIndex; i++) {
        topOffset += this.getHeightOfLine(i);
      }
      lineLeftOffset = this._getLineLeftOffset(lineIndex);
      var bound = this.__charBounds[lineIndex][charIndex];
      bound && (leftOffset = bound.left);
      if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {
        leftOffset -= this._getWidthOfCharSpacing();
      }
      boundaries = {
        top: topOffset,
        left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0)
      };
      if (this.direction === 'rtl') {
        boundaries.left *= -1;
      }
      this.cursorOffsetCache = boundaries;
      return this.cursorOffsetCache;
    },
    /**
     * Renders cursor
     * @param {Object} boundaries
     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
     */
    renderCursor: function renderCursor(boundaries, ctx) {
      var cursorLocation = this.get2DCursorLocation(),
        lineIndex = cursorLocation.lineIndex,
        charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0,
        charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize'),
        multiplier = this.scaleX * this.canvas.getZoom(),
        cursorWidth = this.cursorWidth / multiplier,
        topOffset = boundaries.topOffset,
        dy = this.getValueOfPropertyAt(lineIndex, charIndex, 'deltaY');
      topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight - charHeight * (1 - this._fontSizeFraction);
      if (this.inCompositionMode) {
        this.renderSelection(boundaries, ctx);
      }
      ctx.fillStyle = this.cursorColor || this.getValueOfPropertyAt(lineIndex, charIndex, 'fill');
      ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;
      ctx.fillRect(boundaries.left + boundaries.leftOffset - cursorWidth / 2, topOffset + boundaries.top + dy, cursorWidth, charHeight);
    },
    /**
     * Renders text selection
     * @param {Object} boundaries Object with left/top/leftOffset/topOffset
     * @param {CanvasRenderingContext2D} ctx transformed context to draw on
     */
    renderSelection: function renderSelection(boundaries, ctx) {
      var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart,
        selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd,
        isJustify = this.textAlign.indexOf('justify') !== -1,
        start = this.get2DCursorLocation(selectionStart),
        end = this.get2DCursorLocation(selectionEnd),
        startLine = start.lineIndex,
        endLine = end.lineIndex,
        startChar = start.charIndex < 0 ? 0 : start.charIndex,
        endChar = end.charIndex < 0 ? 0 : end.charIndex;
      for (var i = startLine; i <= endLine; i++) {
        var lineOffset = this._getLineLeftOffset(i) || 0,
          lineHeight = this.getHeightOfLine(i),
          realLineHeight = 0,
          boxStart = 0,
          boxEnd = 0;
        if (i === startLine) {
          boxStart = this.__charBounds[startLine][startChar].left;
        }
        if (i >= startLine && i < endLine) {
          boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5; // WTF is this 5?
        } else if (i === endLine) {
          if (endChar === 0) {
            boxEnd = this.__charBounds[endLine][endChar].left;
          } else {
            var charSpacing = this._getWidthOfCharSpacing();
            boxEnd = this.__charBounds[endLine][endChar - 1].left + this.__charBounds[endLine][endChar - 1].width - charSpacing;
          }
        }
        realLineHeight = lineHeight;
        if (this.lineHeight < 1 || i === endLine && this.lineHeight > 1) {
          lineHeight /= this.lineHeight;
        }
        var drawStart = boundaries.left + lineOffset + boxStart,
          drawWidth = boxEnd - boxStart,
          drawHeight = lineHeight,
          extraTop = 0;
        if (this.inCompositionMode) {
          ctx.fillStyle = this.compositionColor || 'black';
          drawHeight = 1;
          extraTop = lineHeight;
        } else {
          ctx.fillStyle = this.selectionColor;
        }
        if (this.direction === 'rtl') {
          drawStart = this.width - drawStart - drawWidth;
        }
        ctx.fillRect(drawStart, boundaries.top + boundaries.topOffset + extraTop, drawWidth, drawHeight);
        boundaries.topOffset += realLineHeight;
      }
    },
    /**
     * High level function to know the height of the cursor.
     * the currentChar is the one that precedes the cursor
     * Returns fontSize of char at the current cursor
     * Unused from the library, is for the end user
     * @return {Number} Character font size
     */
    getCurrentCharFontSize: function getCurrentCharFontSize() {
      var cp = this._getCurrentCharIndex();
      return this.getValueOfPropertyAt(cp.l, cp.c, 'fontSize');
    },
    /**
     * High level function to know the color of the cursor.
     * the currentChar is the one that precedes the cursor
     * Returns color (fill) of char at the current cursor
     * if the text object has a pattern or gradient for filler, it will return that.
     * Unused by the library, is for the end user
     * @return {String | fabric.Gradient | fabric.Pattern} Character color (fill)
     */
    getCurrentCharColor: function getCurrentCharColor() {
      var cp = this._getCurrentCharIndex();
      return this.getValueOfPropertyAt(cp.l, cp.c, 'fill');
    },
    /**
     * Returns the cursor position for the getCurrent.. functions
     * @private
     */
    _getCurrentCharIndex: function _getCurrentCharIndex() {
      var cursorPosition = this.get2DCursorLocation(this.selectionStart, true),
        charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;
      return {
        l: cursorPosition.lineIndex,
        c: charIndex
      };
    }
  });

  /**
   * Returns fabric.IText instance from an object representation
   * @static
   * @memberOf fabric.IText
   * @param {Object} object Object to create an instance from
   * @param {function} [callback] invoked with new instance as argument
   */
  fabric.IText.fromObject = function (object, callback) {
    var styles = fabric.util.stylesFromArray(object.styles, object.text);
    //copy object to prevent mutation
    var objCopy = Object.assign({}, object, {
      styles: styles
    });
    parseDecoration(objCopy);
    if (objCopy.styles) {
      for (var i in objCopy.styles) {
        for (var j in objCopy.styles[i]) {
          parseDecoration(objCopy.styles[i][j]);
        }
      }
    }
    fabric.Object._fromObject('IText', objCopy, callback, 'text');
  };
})();
(function () {
  var clone = fabric.util.object.clone;
  fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */{
    /**
     * Initializes all the interactive behavior of IText
     */
    initBehavior: function initBehavior() {
      this.initAddedHandler();
      this.initRemovedHandler();
      this.initCursorSelectionHandlers();
      this.initDoubleClickSimulation();
      this.mouseMoveHandler = this.mouseMoveHandler.bind(this);
    },
    onDeselect: function onDeselect() {
      this.isEditing && this.exitEditing();
      this.selected = false;
    },
    /**
     * Initializes "added" event handler
     */
    initAddedHandler: function initAddedHandler() {
      var _this = this;
      this.on('added', function () {
        var canvas = _this.canvas;
        if (canvas) {
          if (!canvas._hasITextHandlers) {
            canvas._hasITextHandlers = true;
            _this._initCanvasHandlers(canvas);
          }
          canvas._iTextInstances = canvas._iTextInstances || [];
          canvas._iTextInstances.push(_this);
        }
      });
    },
    initRemovedHandler: function initRemovedHandler() {
      var _this = this;
      this.on('removed', function () {
        var canvas = _this.canvas;
        if (canvas) {
          canvas._iTextInstances = canvas._iTextInstances || [];
          fabric.util.removeFromArray(canvas._iTextInstances, _this);
          if (canvas._iTextInstances.length === 0) {
            canvas._hasITextHandlers = false;
            _this._removeCanvasHandlers(canvas);
          }
        }
      });
    },
    /**
     * register canvas event to manage exiting on other instances
     * @private
     */
    _initCanvasHandlers: function _initCanvasHandlers(canvas) {
      canvas._mouseUpITextHandler = function () {
        if (canvas._iTextInstances) {
          canvas._iTextInstances.forEach(function (obj) {
            obj.__isMousedown = false;
          });
        }
      };
      canvas.on('mouse:up', canvas._mouseUpITextHandler);
    },
    /**
     * remove canvas event to manage exiting on other instances
     * @private
     */
    _removeCanvasHandlers: function _removeCanvasHandlers(canvas) {
      canvas.off('mouse:up', canvas._mouseUpITextHandler);
    },
    /**
     * @private
     */
    _tick: function _tick() {
      this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, '_onTickComplete');
    },
    /**
     * @private
     */
    _animateCursor: function _animateCursor(obj, targetOpacity, duration, completeMethod) {
      var tickState;
      tickState = {
        isAborted: false,
        abort: function abort() {
          this.isAborted = true;
        }
      };
      obj.animate('_currentCursorOpacity', targetOpacity, {
        duration: duration,
        onComplete: function onComplete() {
          if (!tickState.isAborted) {
            obj[completeMethod]();
          }
        },
        onChange: function onChange() {
          // we do not want to animate a selection, only cursor
          if (obj.canvas && obj.selectionStart === obj.selectionEnd) {
            obj.renderCursorOrSelection();
          }
        },
        abort: function abort() {
          return tickState.isAborted;
        }
      });
      return tickState;
    },
    /**
     * @private
     */
    _onTickComplete: function _onTickComplete() {
      var _this = this;
      if (this._cursorTimeout1) {
        clearTimeout(this._cursorTimeout1);
      }
      this._cursorTimeout1 = setTimeout(function () {
        _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, '_tick');
      }, 100);
    },
    /**
     * Initializes delayed cursor
     */
    initDelayedCursor: function initDelayedCursor(restart) {
      var _this = this,
        delay = restart ? 0 : this.cursorDelay;
      this.abortCursorAnimation();
      this._currentCursorOpacity = 1;
      this._cursorTimeout2 = setTimeout(function () {
        _this._tick();
      }, delay);
    },
    /**
     * Aborts cursor animation and clears all timeouts
     */
    abortCursorAnimation: function abortCursorAnimation() {
      var shouldClear = this._currentTickState || this._currentTickCompleteState,
        canvas = this.canvas;
      this._currentTickState && this._currentTickState.abort();
      this._currentTickCompleteState && this._currentTickCompleteState.abort();
      clearTimeout(this._cursorTimeout1);
      clearTimeout(this._cursorTimeout2);
      this._currentCursorOpacity = 0;
      // to clear just itext area we need to transform the context
      // it may not be worth it
      if (shouldClear && canvas) {
        canvas.clearContext(canvas.contextTop || canvas.contextContainer);
      }
    },
    /**
     * Selects entire text
     * @return {fabric.IText} thisArg
     * @chainable
     */
    selectAll: function selectAll() {
      this.selectionStart = 0;
      this.selectionEnd = this._text.length;
      this._fireSelectionChanged();
      this._updateTextarea();
      return this;
    },
    /**
     * Returns selected text
     * @return {String}
     */
    getSelectedText: function getSelectedText() {
      return this._text.slice(this.selectionStart, this.selectionEnd).join('');
    },
    /**
     * Find new selection index representing start of current word according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */
    findWordBoundaryLeft: function findWordBoundaryLeft(startFrom) {
      var offset = 0,
        index = startFrom - 1;

      // remove space before cursor first
      if (this._reSpace.test(this._text[index])) {
        while (this._reSpace.test(this._text[index])) {
          offset++;
          index--;
        }
      }
      while (/\S/.test(this._text[index]) && index > -1) {
        offset++;
        index--;
      }
      return startFrom - offset;
    },
    /**
     * Find new selection index representing end of current word according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */
    findWordBoundaryRight: function findWordBoundaryRight(startFrom) {
      var offset = 0,
        index = startFrom;

      // remove space after cursor first
      if (this._reSpace.test(this._text[index])) {
        while (this._reSpace.test(this._text[index])) {
          offset++;
          index++;
        }
      }
      while (/\S/.test(this._text[index]) && index < this._text.length) {
        offset++;
        index++;
      }
      return startFrom + offset;
    },
    /**
     * Find new selection index representing start of current line according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */
    findLineBoundaryLeft: function findLineBoundaryLeft(startFrom) {
      var offset = 0,
        index = startFrom - 1;
      while (!/\n/.test(this._text[index]) && index > -1) {
        offset++;
        index--;
      }
      return startFrom - offset;
    },
    /**
     * Find new selection index representing end of current line according to current selection index
     * @param {Number} startFrom Current selection index
     * @return {Number} New selection index
     */
    findLineBoundaryRight: function findLineBoundaryRight(startFrom) {
      var offset = 0,
        index = startFrom;
      while (!/\n/.test(this._text[index]) && index < this._text.length) {
        offset++;
        index++;
      }
      return startFrom + offset;
    },
    /**
     * Finds index corresponding to beginning or end of a word
     * @param {Number} selectionStart Index of a character
     * @param {Number} direction 1 or -1
     * @return {Number} Index of the beginning or end of a word
     */
    searchWordBoundary: function searchWordBoundary(selectionStart, direction) {
      var text = this._text,
        index = this._reSpace.test(text[selectionStart]) ? selectionStart - 1 : selectionStart,
        _char = text[index],
        // wrong
        reNonWord = fabric.reNonWord;
      while (!reNonWord.test(_char) && index > 0 && index < text.length) {
        index += direction;
        _char = text[index];
      }
      if (reNonWord.test(_char)) {
        index += direction === 1 ? 0 : 1;
      }
      return index;
    },
    /**
     * Selects a word based on the index
     * @param {Number} selectionStart Index of a character
     */
    selectWord: function selectWord(selectionStart) {
      selectionStart = selectionStart || this.selectionStart;
      var newSelectionStart = this.searchWordBoundary(selectionStart, -1),
        /* search backwards */
        newSelectionEnd = this.searchWordBoundary(selectionStart, 1); /* search forward */

      this.selectionStart = newSelectionStart;
      this.selectionEnd = newSelectionEnd;
      this._fireSelectionChanged();
      this._updateTextarea();
      this.renderCursorOrSelection();
    },
    /**
     * Selects a line based on the index
     * @param {Number} selectionStart Index of a character
     * @return {fabric.IText} thisArg
     * @chainable
     */
    selectLine: function selectLine(selectionStart) {
      selectionStart = selectionStart || this.selectionStart;
      var newSelectionStart = this.findLineBoundaryLeft(selectionStart),
        newSelectionEnd = this.findLineBoundaryRight(selectionStart);
      this.selectionStart = newSelectionStart;
      this.selectionEnd = newSelectionEnd;
      this._fireSelectionChanged();
      this._updateTextarea();
      return this;
    },
    /**
     * Enters editing state
     * @return {fabric.IText} thisArg
     * @chainable
     */
    enterEditing: function enterEditing(e) {
      if (this.isEditing || !this.editable) {
        return;
      }
      if (this.canvas) {
        this.canvas.calcOffset();
        this.exitEditingOnOthers(this.canvas);
      }
      this.isEditing = true;
      this.initHiddenTextarea(e);
      this.hiddenTextarea.focus();
      this.hiddenTextarea.value = this.text;
      this._updateTextarea();
      this._saveEditingProps();
      this._setEditingProps();
      this._textBeforeEdit = this.text;
      this._tick();
      this.fire('editing:entered');
      this._fireSelectionChanged();
      if (!this.canvas) {
        return this;
      }
      this.canvas.fire('text:editing:entered', {
        target: this
      });
      this.initMouseMoveHandler();
      this.canvas.requestRenderAll();
      return this;
    },
    exitEditingOnOthers: function exitEditingOnOthers(canvas) {
      if (canvas._iTextInstances) {
        canvas._iTextInstances.forEach(function (obj) {
          obj.selected = false;
          if (obj.isEditing) {
            obj.exitEditing();
          }
        });
      }
    },
    /**
     * Initializes "mousemove" event handler
     */
    initMouseMoveHandler: function initMouseMoveHandler() {
      this.canvas.on('mouse:move', this.mouseMoveHandler);
    },
    /**
     * @private
     */
    mouseMoveHandler: function mouseMoveHandler(options) {
      if (!this.__isMousedown || !this.isEditing) {
        return;
      }

      // regain focus
      document.activeElement !== this.hiddenTextarea && this.hiddenTextarea.focus();
      var newSelectionStart = this.getSelectionStartFromPointer(options.e),
        currentStart = this.selectionStart,
        currentEnd = this.selectionEnd;
      if ((newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd) && (currentStart === newSelectionStart || currentEnd === newSelectionStart)) {
        return;
      }
      if (newSelectionStart > this.__selectionStartOnMouseDown) {
        this.selectionStart = this.__selectionStartOnMouseDown;
        this.selectionEnd = newSelectionStart;
      } else {
        this.selectionStart = newSelectionStart;
        this.selectionEnd = this.__selectionStartOnMouseDown;
      }
      if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {
        this.restartCursorIfNeeded();
        this._fireSelectionChanged();
        this._updateTextarea();
        this.renderCursorOrSelection();
      }
    },
    /**
     * @private
     */
    _setEditingProps: function _setEditingProps() {
      this.hoverCursor = 'text';
      if (this.canvas) {
        this.canvas.defaultCursor = this.canvas.moveCursor = 'text';
      }
      this.borderColor = this.editingBorderColor;
      this.hasControls = this.selectable = false;
      this.lockMovementX = this.lockMovementY = true;
    },
    /**
     * convert from textarea to grapheme indexes
     */
    fromStringToGraphemeSelection: function fromStringToGraphemeSelection(start, end, text) {
      var smallerTextStart = text.slice(0, start),
        graphemeStart = fabric.util.string.graphemeSplit(smallerTextStart).length;
      if (start === end) {
        return {
          selectionStart: graphemeStart,
          selectionEnd: graphemeStart
        };
      }
      var smallerTextEnd = text.slice(start, end),
        graphemeEnd = fabric.util.string.graphemeSplit(smallerTextEnd).length;
      return {
        selectionStart: graphemeStart,
        selectionEnd: graphemeStart + graphemeEnd
      };
    },
    /**
     * convert from fabric to textarea values
     */
    fromGraphemeToStringSelection: function fromGraphemeToStringSelection(start, end, _text) {
      var smallerTextStart = _text.slice(0, start),
        graphemeStart = smallerTextStart.join('').length;
      if (start === end) {
        return {
          selectionStart: graphemeStart,
          selectionEnd: graphemeStart
        };
      }
      var smallerTextEnd = _text.slice(start, end),
        graphemeEnd = smallerTextEnd.join('').length;
      return {
        selectionStart: graphemeStart,
        selectionEnd: graphemeStart + graphemeEnd
      };
    },
    /**
     * @private
     */
    _updateTextarea: function _updateTextarea() {
      this.cursorOffsetCache = {};
      if (!this.hiddenTextarea) {
        return;
      }
      if (!this.inCompositionMode) {
        var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);
        this.hiddenTextarea.selectionStart = newSelection.selectionStart;
        this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;
      }
      this.updateTextareaPosition();
    },
    /**
     * @private
     */
    updateFromTextArea: function updateFromTextArea() {
      if (!this.hiddenTextarea) {
        return;
      }
      this.cursorOffsetCache = {};
      this.text = this.hiddenTextarea.value;
      if (this._shouldClearDimensionCache()) {
        this.initDimensions();
        this.setCoords();
      }
      var newSelection = this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);
      this.selectionEnd = this.selectionStart = newSelection.selectionEnd;
      if (!this.inCompositionMode) {
        this.selectionStart = newSelection.selectionStart;
      }
      this.updateTextareaPosition();
    },
    /**
     * @private
     */
    updateTextareaPosition: function updateTextareaPosition() {
      if (this.selectionStart === this.selectionEnd) {
        var style = this._calcTextareaPosition();
        this.hiddenTextarea.style.left = style.left;
        this.hiddenTextarea.style.top = style.top;
      }
    },
    /**
     * @private
     * @return {Object} style contains style for hiddenTextarea
     */
    _calcTextareaPosition: function _calcTextareaPosition() {
      if (!this.canvas) {
        return {
          x: 1,
          y: 1
        };
      }
      var desiredPosition = this.inCompositionMode ? this.compositionStart : this.selectionStart,
        boundaries = this._getCursorBoundaries(desiredPosition),
        cursorLocation = this.get2DCursorLocation(desiredPosition),
        lineIndex = cursorLocation.lineIndex,
        charIndex = cursorLocation.charIndex,
        charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, 'fontSize') * this.lineHeight,
        leftOffset = boundaries.leftOffset,
        m = this.calcTransformMatrix(),
        p = {
          x: boundaries.left + leftOffset,
          y: boundaries.top + boundaries.topOffset + charHeight
        },
        retinaScaling = this.canvas.getRetinaScaling(),
        upperCanvas = this.canvas.upperCanvasEl,
        upperCanvasWidth = upperCanvas.width / retinaScaling,
        upperCanvasHeight = upperCanvas.height / retinaScaling,
        maxWidth = upperCanvasWidth - charHeight,
        maxHeight = upperCanvasHeight - charHeight,
        scaleX = upperCanvas.clientWidth / upperCanvasWidth,
        scaleY = upperCanvas.clientHeight / upperCanvasHeight;
      p = fabric.util.transformPoint(p, m);
      p = fabric.util.transformPoint(p, this.canvas.viewportTransform);
      p.x *= scaleX;
      p.y *= scaleY;
      if (p.x < 0) {
        p.x = 0;
      }
      if (p.x > maxWidth) {
        p.x = maxWidth;
      }
      if (p.y < 0) {
        p.y = 0;
      }
      if (p.y > maxHeight) {
        p.y = maxHeight;
      }

      // add canvas offset on document
      p.x += this.canvas._offset.left;
      p.y += this.canvas._offset.top;
      return {
        left: p.x + 'px',
        top: p.y + 'px',
        fontSize: charHeight + 'px',
        charHeight: charHeight
      };
    },
    /**
     * @private
     */
    _saveEditingProps: function _saveEditingProps() {
      this._savedProps = {
        hasControls: this.hasControls,
        borderColor: this.borderColor,
        lockMovementX: this.lockMovementX,
        lockMovementY: this.lockMovementY,
        hoverCursor: this.hoverCursor,
        selectable: this.selectable,
        defaultCursor: this.canvas && this.canvas.defaultCursor,
        moveCursor: this.canvas && this.canvas.moveCursor
      };
    },
    /**
     * @private
     */
    _restoreEditingProps: function _restoreEditingProps() {
      if (!this._savedProps) {
        return;
      }
      this.hoverCursor = this._savedProps.hoverCursor;
      this.hasControls = this._savedProps.hasControls;
      this.borderColor = this._savedProps.borderColor;
      this.selectable = this._savedProps.selectable;
      this.lockMovementX = this._savedProps.lockMovementX;
      this.lockMovementY = this._savedProps.lockMovementY;
      if (this.canvas) {
        this.canvas.defaultCursor = this._savedProps.defaultCursor;
        this.canvas.moveCursor = this._savedProps.moveCursor;
      }
    },
    /**
     * Exits from editing state
     * @return {fabric.IText} thisArg
     * @chainable
     */
    exitEditing: function exitEditing() {
      var isTextChanged = this._textBeforeEdit !== this.text;
      var hiddenTextarea = this.hiddenTextarea;
      this.selected = false;
      this.isEditing = false;
      this.selectionEnd = this.selectionStart;
      if (hiddenTextarea) {
        hiddenTextarea.blur && hiddenTextarea.blur();
        hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
      }
      this.hiddenTextarea = null;
      this.abortCursorAnimation();
      this._restoreEditingProps();
      this._currentCursorOpacity = 0;
      if (this._shouldClearDimensionCache()) {
        this.initDimensions();
        this.setCoords();
      }
      this.fire('editing:exited');
      isTextChanged && this.fire('modified');
      if (this.canvas) {
        this.canvas.off('mouse:move', this.mouseMoveHandler);
        this.canvas.fire('text:editing:exited', {
          target: this
        });
        isTextChanged && this.canvas.fire('object:modified', {
          target: this
        });
      }
      return this;
    },
    /**
     * @private
     */
    _removeExtraneousStyles: function _removeExtraneousStyles() {
      for (var prop in this.styles) {
        if (!this._textLines[prop]) {
          delete this.styles[prop];
        }
      }
    },
    /**
     * remove and reflow a style block from start to end.
     * @param {Number} start linear start position for removal (included in removal)
     * @param {Number} end linear end position for removal ( excluded from removal )
     */
    removeStyleFromTo: function removeStyleFromTo(start, end) {
      var cursorStart = this.get2DCursorLocation(start, true),
        cursorEnd = this.get2DCursorLocation(end, true),
        lineStart = cursorStart.lineIndex,
        charStart = cursorStart.charIndex,
        lineEnd = cursorEnd.lineIndex,
        charEnd = cursorEnd.charIndex,
        i,
        styleObj;
      if (lineStart !== lineEnd) {
        // step1 remove the trailing of lineStart
        if (this.styles[lineStart]) {
          for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {
            delete this.styles[lineStart][i];
          }
        }
        // step2 move the trailing of lineEnd to lineStart if needed
        if (this.styles[lineEnd]) {
          for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {
            styleObj = this.styles[lineEnd][i];
            if (styleObj) {
              this.styles[lineStart] || (this.styles[lineStart] = {});
              this.styles[lineStart][charStart + i - charEnd] = styleObj;
            }
          }
        }
        // step3 detects lines will be completely removed.
        for (i = lineStart + 1; i <= lineEnd; i++) {
          delete this.styles[i];
        }
        // step4 shift remaining lines.
        this.shiftLineStyles(lineEnd, lineStart - lineEnd);
      } else {
        // remove and shift left on the same line
        if (this.styles[lineStart]) {
          styleObj = this.styles[lineStart];
          var diff = charEnd - charStart,
            numericChar,
            _char;
          for (i = charStart; i < charEnd; i++) {
            delete styleObj[i];
          }
          for (_char in this.styles[lineStart]) {
            numericChar = parseInt(_char, 10);
            if (numericChar >= charEnd) {
              styleObj[numericChar - diff] = styleObj[_char];
              delete styleObj[_char];
            }
          }
        }
      }
    },
    /**
     * Shifts line styles up or down
     * @param {Number} lineIndex Index of a line
     * @param {Number} offset Can any number?
     */
    shiftLineStyles: function shiftLineStyles(lineIndex, offset) {
      // shift all line styles by offset upward or downward
      // do not clone deep. we need new array, not new style objects
      var clonedStyles = clone(this.styles);
      for (var line in this.styles) {
        var numericLine = parseInt(line, 10);
        if (numericLine > lineIndex) {
          this.styles[numericLine + offset] = clonedStyles[numericLine];
          if (!clonedStyles[numericLine - offset]) {
            delete this.styles[numericLine];
          }
        }
      }
    },
    restartCursorIfNeeded: function restartCursorIfNeeded() {
      if (!this._currentTickState || this._currentTickState.isAborted || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted) {
        this.initDelayedCursor();
      }
    },
    /**
     * Handle insertion of more consecutive style lines for when one or more
     * newlines gets added to the text. Since current style needs to be shifted
     * first we shift the current style of the number lines needed, then we add
     * new lines from the last to the first.
     * @param {Number} lineIndex Index of a line
     * @param {Number} charIndex Index of a char
     * @param {Number} qty number of lines to add
     * @param {Array} copiedStyle Array of objects styles
     */
    insertNewlineStyleObject: function insertNewlineStyleObject(lineIndex, charIndex, qty, copiedStyle) {
      var currentCharStyle,
        newLineStyles = {},
        somethingAdded = false,
        isEndOfLine = this._unwrappedTextLines[lineIndex].length === charIndex;
      qty || (qty = 1);
      this.shiftLineStyles(lineIndex, qty);
      if (this.styles[lineIndex]) {
        currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];
      }
      // we clone styles of all chars
      // after cursor onto the current line
      for (var index in this.styles[lineIndex]) {
        var numIndex = parseInt(index, 10);
        if (numIndex >= charIndex) {
          somethingAdded = true;
          newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];
          // remove lines from the previous line since they're on a new line now
          if (!(isEndOfLine && charIndex === 0)) {
            delete this.styles[lineIndex][index];
          }
        }
      }
      var styleCarriedOver = false;
      if (somethingAdded && !isEndOfLine) {
        // if is end of line, the extra style we copied
        // is probably not something we want
        this.styles[lineIndex + qty] = newLineStyles;
        styleCarriedOver = true;
      }
      if (styleCarriedOver) {
        // skip the last line of since we already prepared it.
        qty--;
      }
      // for the all the lines or all the other lines
      // we clone current char style onto the next (otherwise empty) line
      while (qty > 0) {
        if (copiedStyle && copiedStyle[qty - 1]) {
          this.styles[lineIndex + qty] = {
            0: clone(copiedStyle[qty - 1])
          };
        } else if (currentCharStyle) {
          this.styles[lineIndex + qty] = {
            0: clone(currentCharStyle)
          };
        } else {
          delete this.styles[lineIndex + qty];
        }
        qty--;
      }
      this._forceClearCache = true;
    },
    /**
     * Inserts style object for a given line/char index
     * @param {Number} lineIndex Index of a line
     * @param {Number} charIndex Index of a char
     * @param {Number} quantity number Style object to insert, if given
     * @param {Array} copiedStyle array of style objects
     */
    insertCharStyleObject: function insertCharStyleObject(lineIndex, charIndex, quantity, copiedStyle) {
      if (!this.styles) {
        this.styles = {};
      }
      var currentLineStyles = this.styles[lineIndex],
        currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};
      quantity || (quantity = 1);
      // shift all char styles by quantity forward
      // 0,1,2,3 -> (charIndex=2) -> 0,1,3,4 -> (insert 2) -> 0,1,2,3,4
      for (var index in currentLineStylesCloned) {
        var numericIndex = parseInt(index, 10);
        if (numericIndex >= charIndex) {
          currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];
          // only delete the style if there was nothing moved there
          if (!currentLineStylesCloned[numericIndex - quantity]) {
            delete currentLineStyles[numericIndex];
          }
        }
      }
      this._forceClearCache = true;
      if (copiedStyle) {
        while (quantity--) {
          if (!Object.keys(copiedStyle[quantity]).length) {
            continue;
          }
          if (!this.styles[lineIndex]) {
            this.styles[lineIndex] = {};
          }
          this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);
        }
        return;
      }
      if (!currentLineStyles) {
        return;
      }
      var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];
      while (newStyle && quantity--) {
        this.styles[lineIndex][charIndex + quantity] = clone(newStyle);
      }
    },
    /**
     * Inserts style object(s)
     * @param {Array} insertedText Characters at the location where style is inserted
     * @param {Number} start cursor index for inserting style
     * @param {Array} [copiedStyle] array of style objects to insert.
     */
    insertNewStyleBlock: function insertNewStyleBlock(insertedText, start, copiedStyle) {
      var cursorLoc = this.get2DCursorLocation(start, true),
        addedLines = [0],
        linesLength = 0;
      // get an array of how many char per lines are being added.
      for (var i = 0; i < insertedText.length; i++) {
        if (insertedText[i] === '\n') {
          linesLength++;
          addedLines[linesLength] = 0;
        } else {
          addedLines[linesLength]++;
        }
      }
      // for the first line copy the style from the current char position.
      if (addedLines[0] > 0) {
        this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);
        copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);
      }
      linesLength && this.insertNewlineStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLength);
      for (var i = 1; i < linesLength; i++) {
        if (addedLines[i] > 0) {
          this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);
        } else if (copiedStyle) {
          // this test is required in order to close #6841
          // when a pasted buffer begins with a newline then
          // this.styles[cursorLoc.lineIndex + i] and copiedStyle[0]
          // may be undefined for some reason
          if (this.styles[cursorLoc.lineIndex + i] && copiedStyle[0]) {
            this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];
          }
        }
        copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);
      }
      // we use i outside the loop to get it like linesLength
      if (addedLines[i] > 0) {
        this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);
      }
    },
    /**
     * Set the selectionStart and selectionEnd according to the new position of cursor
     * mimic the key - mouse navigation when shift is pressed.
     */
    setSelectionStartEndWithShift: function setSelectionStartEndWithShift(start, end, newSelection) {
      if (newSelection <= start) {
        if (end === start) {
          this._selectionDirection = 'left';
        } else if (this._selectionDirection === 'right') {
          this._selectionDirection = 'left';
          this.selectionEnd = start;
        }
        this.selectionStart = newSelection;
      } else if (newSelection > start && newSelection < end) {
        if (this._selectionDirection === 'right') {
          this.selectionEnd = newSelection;
        } else {
          this.selectionStart = newSelection;
        }
      } else {
        // newSelection is > selection start and end
        if (end === start) {
          this._selectionDirection = 'right';
        } else if (this._selectionDirection === 'left') {
          this._selectionDirection = 'right';
          this.selectionStart = end;
        }
        this.selectionEnd = newSelection;
      }
    },
    setSelectionInBoundaries: function setSelectionInBoundaries() {
      var length = this.text.length;
      if (this.selectionStart > length) {
        this.selectionStart = length;
      } else if (this.selectionStart < 0) {
        this.selectionStart = 0;
      }
      if (this.selectionEnd > length) {
        this.selectionEnd = length;
      } else if (this.selectionEnd < 0) {
        this.selectionEnd = 0;
      }
    }
  });
})();
fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */{
  /**
   * Initializes "dbclick" event handler
   */
  initDoubleClickSimulation: function initDoubleClickSimulation() {
    // for double click
    this.__lastClickTime = +new Date();

    // for triple click
    this.__lastLastClickTime = +new Date();
    this.__lastPointer = {};
    this.on('mousedown', this.onMouseDown);
  },
  /**
   * Default event handler to simulate triple click
   * @private
   */
  onMouseDown: function onMouseDown(options) {
    if (!this.canvas) {
      return;
    }
    this.__newClickTime = +new Date();
    var newPointer = options.pointer;
    if (this.isTripleClick(newPointer)) {
      this.fire('tripleclick', options);
      this._stopEvent(options.e);
    }
    this.__lastLastClickTime = this.__lastClickTime;
    this.__lastClickTime = this.__newClickTime;
    this.__lastPointer = newPointer;
    this.__lastIsEditing = this.isEditing;
    this.__lastSelected = this.selected;
  },
  isTripleClick: function isTripleClick(newPointer) {
    return this.__newClickTime - this.__lastClickTime < 500 && this.__lastClickTime - this.__lastLastClickTime < 500 && this.__lastPointer.x === newPointer.x && this.__lastPointer.y === newPointer.y;
  },
  /**
   * @private
   */
  _stopEvent: function _stopEvent(e) {
    e.preventDefault && e.preventDefault();
    e.stopPropagation && e.stopPropagation();
  },
  /**
   * Initializes event handlers related to cursor or selection
   */
  initCursorSelectionHandlers: function initCursorSelectionHandlers() {
    this.initMousedownHandler();
    this.initMouseupHandler();
    this.initClicks();
  },
  /**
   * Default handler for double click, select a word
   */
  doubleClickHandler: function doubleClickHandler(options) {
    if (!this.isEditing) {
      return;
    }
    this.selectWord(this.getSelectionStartFromPointer(options.e));
  },
  /**
   * Default handler for triple click, select a line
   */
  tripleClickHandler: function tripleClickHandler(options) {
    if (!this.isEditing) {
      return;
    }
    this.selectLine(this.getSelectionStartFromPointer(options.e));
  },
  /**
   * Initializes double and triple click event handlers
   */
  initClicks: function initClicks() {
    this.on('mousedblclick', this.doubleClickHandler);
    this.on('tripleclick', this.tripleClickHandler);
  },
  /**
   * Default event handler for the basic functionalities needed on _mouseDown
   * can be overridden to do something different.
   * Scope of this implementation is: find the click position, set selectionStart
   * find selectionEnd, initialize the drawing of either cursor or selection area
   * initializing a mousedDown on a text area will cancel fabricjs knowledge of
   * current compositionMode. It will be set to false.
   */
  _mouseDownHandler: function _mouseDownHandler(options) {
    if (!this.canvas || !this.editable || options.e.button && options.e.button !== 1) {
      return;
    }
    this.__isMousedown = true;
    if (this.selected) {
      this.inCompositionMode = false;
      this.setCursorByClick(options.e);
    }
    if (this.isEditing) {
      this.__selectionStartOnMouseDown = this.selectionStart;
      if (this.selectionStart === this.selectionEnd) {
        this.abortCursorAnimation();
      }
      this.renderCursorOrSelection();
    }
  },
  /**
   * Default event handler for the basic functionalities needed on mousedown:before
   * can be overridden to do something different.
   * Scope of this implementation is: verify the object is already selected when mousing down
   */
  _mouseDownHandlerBefore: function _mouseDownHandlerBefore(options) {
    if (!this.canvas || !this.editable || options.e.button && options.e.button !== 1) {
      return;
    }
    // we want to avoid that an object that was selected and then becomes unselectable,
    // may trigger editing mode in some way.
    this.selected = this === this.canvas._activeObject;
  },
  /**
   * Initializes "mousedown" event handler
   */
  initMousedownHandler: function initMousedownHandler() {
    this.on('mousedown', this._mouseDownHandler);
    this.on('mousedown:before', this._mouseDownHandlerBefore);
  },
  /**
   * Initializes "mouseup" event handler
   */
  initMouseupHandler: function initMouseupHandler() {
    this.on('mouseup', this.mouseUpHandler);
  },
  /**
   * standard handler for mouse up, overridable
   * @private
   */
  mouseUpHandler: function mouseUpHandler(options) {
    this.__isMousedown = false;
    if (!this.editable || this.group || options.transform && options.transform.actionPerformed || options.e.button && options.e.button !== 1) {
      return;
    }
    if (this.canvas) {
      var currentActive = this.canvas._activeObject;
      if (currentActive && currentActive !== this) {
        // avoid running this logic when there is an active object
        // this because is possible with shift click and fast clicks,
        // to rapidly deselect and reselect this object and trigger an enterEdit
        return;
      }
    }
    if (this.__lastSelected && !this.__corner) {
      this.selected = false;
      this.__lastSelected = false;
      this.enterEditing(options.e);
      if (this.selectionStart === this.selectionEnd) {
        this.initDelayedCursor(true);
      } else {
        this.renderCursorOrSelection();
      }
    } else {
      this.selected = true;
    }
  },
  /**
   * Changes cursor location in a text depending on passed pointer (x/y) object
   * @param {Event} e Event object
   */
  setCursorByClick: function setCursorByClick(e) {
    var newSelection = this.getSelectionStartFromPointer(e),
      start = this.selectionStart,
      end = this.selectionEnd;
    if (e.shiftKey) {
      this.setSelectionStartEndWithShift(start, end, newSelection);
    } else {
      this.selectionStart = newSelection;
      this.selectionEnd = newSelection;
    }
    if (this.isEditing) {
      this._fireSelectionChanged();
      this._updateTextarea();
    }
  },
  /**
   * Returns index of a character corresponding to where an object was clicked
   * @param {Event} e Event object
   * @return {Number} Index of a character
   */
  getSelectionStartFromPointer: function getSelectionStartFromPointer(e) {
    var mouseOffset = this.getLocalPointer(e),
      prevWidth = 0,
      width = 0,
      height = 0,
      charIndex = 0,
      lineIndex = 0,
      lineLeftOffset,
      line;
    for (var i = 0, len = this._textLines.length; i < len; i++) {
      if (height <= mouseOffset.y) {
        height += this.getHeightOfLine(i) * this.scaleY;
        lineIndex = i;
        if (i > 0) {
          charIndex += this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);
        }
      } else {
        break;
      }
    }
    lineLeftOffset = this._getLineLeftOffset(lineIndex);
    width = lineLeftOffset * this.scaleX;
    line = this._textLines[lineIndex];
    // handling of RTL: in order to get things work correctly,
    // we assume RTL writing is mirrored compared to LTR writing.
    // so in position detection we mirror the X offset, and when is time
    // of rendering it, we mirror it again.
    if (this.direction === 'rtl') {
      mouseOffset.x = this.width * this.scaleX - mouseOffset.x + width;
    }
    for (var j = 0, jlen = line.length; j < jlen; j++) {
      prevWidth = width;
      // i removed something about flipX here, check.
      width += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;
      if (width <= mouseOffset.x) {
        charIndex++;
      } else {
        break;
      }
    }
    return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, charIndex, jlen);
  },
  /**
   * @private
   */
  _getNewSelectionStartFromOffset: function _getNewSelectionStartFromOffset(mouseOffset, prevWidth, width, index, jlen) {
    // we need Math.abs because when width is after the last char, the offset is given as 1, while is 0
    var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth,
      distanceBtwNextCharAndCursor = width - mouseOffset.x,
      offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor || distanceBtwNextCharAndCursor < 0 ? 0 : 1,
      newSelectionStart = index + offset;
    // if object is horizontally flipped, mirror cursor location from the end
    if (this.flipX) {
      newSelectionStart = jlen - newSelectionStart;
    }
    if (newSelectionStart > this._text.length) {
      newSelectionStart = this._text.length;
    }
    return newSelectionStart;
  }
});
fabric.util.object.extend(fabric.IText.prototype, /** @lends fabric.IText.prototype */{
  /**
   * Initializes hidden textarea (needed to bring up keyboard in iOS)
   */
  initHiddenTextarea: function initHiddenTextarea() {
    this.hiddenTextarea = fabric.document.createElement('textarea');
    this.hiddenTextarea.setAttribute('autocapitalize', 'off');
    this.hiddenTextarea.setAttribute('autocorrect', 'off');
    this.hiddenTextarea.setAttribute('autocomplete', 'off');
    this.hiddenTextarea.setAttribute('spellcheck', 'false');
    this.hiddenTextarea.setAttribute('data-fabric-hiddentextarea', '');
    this.hiddenTextarea.setAttribute('wrap', 'off');
    var style = this._calcTextareaPosition();
    // line-height: 1px; was removed from the style to fix this:
    // https://bugs.chromium.org/p/chromium/issues/detail?id=870966
    this.hiddenTextarea.style.cssText = 'position: absolute; top: ' + style.top + '; left: ' + style.left + '; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px;' + ' padding-top: ' + style.fontSize + ';';
    if (this.hiddenTextareaContainer) {
      this.hiddenTextareaContainer.appendChild(this.hiddenTextarea);
    } else {
      fabric.document.body.appendChild(this.hiddenTextarea);
    }
    fabric.util.addListener(this.hiddenTextarea, 'keydown', this.onKeyDown.bind(this));
    fabric.util.addListener(this.hiddenTextarea, 'keyup', this.onKeyUp.bind(this));
    fabric.util.addListener(this.hiddenTextarea, 'input', this.onInput.bind(this));
    fabric.util.addListener(this.hiddenTextarea, 'copy', this.copy.bind(this));
    fabric.util.addListener(this.hiddenTextarea, 'cut', this.copy.bind(this));
    fabric.util.addListener(this.hiddenTextarea, 'paste', this.paste.bind(this));
    fabric.util.addListener(this.hiddenTextarea, 'compositionstart', this.onCompositionStart.bind(this));
    fabric.util.addListener(this.hiddenTextarea, 'compositionupdate', this.onCompositionUpdate.bind(this));
    fabric.util.addListener(this.hiddenTextarea, 'compositionend', this.onCompositionEnd.bind(this));
    if (!this._clickHandlerInitialized && this.canvas) {
      fabric.util.addListener(this.canvas.upperCanvasEl, 'click', this.onClick.bind(this));
      this._clickHandlerInitialized = true;
    }
  },
  /**
   * For functionalities on keyDown
   * Map a special key to a function of the instance/prototype
   * If you need different behaviour for ESC or TAB or arrows, you have to change
   * this map setting the name of a function that you build on the fabric.Itext or
   * your prototype.
   * the map change will affect all Instances unless you need for only some text Instances
   * in that case you have to clone this object and assign your Instance.
   * this.keysMap = fabric.util.object.clone(this.keysMap);
   * The function must be in fabric.Itext.prototype.myFunction And will receive event as args[0]
   */
  keysMap: {
    9: 'exitEditing',
    27: 'exitEditing',
    33: 'moveCursorUp',
    34: 'moveCursorDown',
    35: 'moveCursorRight',
    36: 'moveCursorLeft',
    37: 'moveCursorLeft',
    38: 'moveCursorUp',
    39: 'moveCursorRight',
    40: 'moveCursorDown'
  },
  keysMapRtl: {
    9: 'exitEditing',
    27: 'exitEditing',
    33: 'moveCursorUp',
    34: 'moveCursorDown',
    35: 'moveCursorLeft',
    36: 'moveCursorRight',
    37: 'moveCursorRight',
    38: 'moveCursorUp',
    39: 'moveCursorLeft',
    40: 'moveCursorDown'
  },
  /**
   * For functionalities on keyUp + ctrl || cmd
   */
  ctrlKeysMapUp: {
    67: 'copy',
    88: 'cut'
  },
  /**
   * For functionalities on keyDown + ctrl || cmd
   */
  ctrlKeysMapDown: {
    65: 'selectAll'
  },
  onClick: function onClick() {
    // No need to trigger click event here, focus is enough to have the keyboard appear on Android
    this.hiddenTextarea && this.hiddenTextarea.focus();
  },
  /**
   * Handles keydown event
   * only used for arrows and combination of modifier keys.
   * @param {Event} e Event object
   */
  onKeyDown: function onKeyDown(e) {
    if (!this.isEditing) {
      return;
    }
    var keyMap = this.direction === 'rtl' ? this.keysMapRtl : this.keysMap;
    if (e.keyCode in keyMap) {
      this[keyMap[e.keyCode]](e);
    } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {
      this[this.ctrlKeysMapDown[e.keyCode]](e);
    } else {
      return;
    }
    e.stopImmediatePropagation();
    e.preventDefault();
    if (e.keyCode >= 33 && e.keyCode <= 40) {
      // if i press an arrow key just update selection
      this.inCompositionMode = false;
      this.clearContextTop();
      this.renderCursorOrSelection();
    } else {
      this.canvas && this.canvas.requestRenderAll();
    }
  },
  /**
   * Handles keyup event
   * We handle KeyUp because ie11 and edge have difficulties copy/pasting
   * if a copy/cut event fired, keyup is dismissed
   * @param {Event} e Event object
   */
  onKeyUp: function onKeyUp(e) {
    if (!this.isEditing || this._copyDone || this.inCompositionMode) {
      this._copyDone = false;
      return;
    }
    if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {
      this[this.ctrlKeysMapUp[e.keyCode]](e);
    } else {
      return;
    }
    e.stopImmediatePropagation();
    e.preventDefault();
    this.canvas && this.canvas.requestRenderAll();
  },
  /**
   * Handles onInput event
   * @param {Event} e Event object
   */
  onInput: function onInput(e) {
    var fromPaste = this.fromPaste;
    this.fromPaste = false;
    e && e.stopPropagation();
    if (!this.isEditing) {
      return;
    }
    // decisions about style changes.
    var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,
      charCount = this._text.length,
      nextCharCount = nextText.length,
      removedText,
      insertedText,
      charDiff = nextCharCount - charCount,
      selectionStart = this.selectionStart,
      selectionEnd = this.selectionEnd,
      selection = selectionStart !== selectionEnd,
      copiedStyle,
      removeFrom,
      removeTo;
    if (this.hiddenTextarea.value === '') {
      this.styles = {};
      this.updateFromTextArea();
      this.fire('changed');
      if (this.canvas) {
        this.canvas.fire('text:changed', {
          target: this
        });
        this.canvas.requestRenderAll();
      }
      return;
    }
    var textareaSelection = this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);
    var backDelete = selectionStart > textareaSelection.selectionStart;
    if (selection) {
      removedText = this._text.slice(selectionStart, selectionEnd);
      charDiff += selectionEnd - selectionStart;
    } else if (nextCharCount < charCount) {
      if (backDelete) {
        removedText = this._text.slice(selectionEnd + charDiff, selectionEnd);
      } else {
        removedText = this._text.slice(selectionStart, selectionStart - charDiff);
      }
    }
    insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);
    if (removedText && removedText.length) {
      if (insertedText.length) {
        // let's copy some style before deleting.
        // we want to copy the style before the cursor OR the style at the cursor if selection
        // is bigger than 0.
        copiedStyle = this.getSelectionStyles(selectionStart, selectionStart + 1, false);
        // now duplicate the style one for each inserted text.
        copiedStyle = insertedText.map(function () {
          // this return an array of references, but that is fine since we are
          // copying the style later.
          return copiedStyle[0];
        });
      }
      if (selection) {
        removeFrom = selectionStart;
        removeTo = selectionEnd;
      } else if (backDelete) {
        // detect differences between forwardDelete and backDelete
        removeFrom = selectionEnd - removedText.length;
        removeTo = selectionEnd;
      } else {
        removeFrom = selectionEnd;
        removeTo = selectionEnd + removedText.length;
      }
      this.removeStyleFromTo(removeFrom, removeTo);
    }
    if (insertedText.length) {
      if (fromPaste && insertedText.join('') === fabric.copiedText && !fabric.disableStyleCopyPaste) {
        copiedStyle = fabric.copiedTextStyle;
      }
      this.insertNewStyleBlock(insertedText, selectionStart, copiedStyle);
    }
    this.updateFromTextArea();
    this.fire('changed');
    if (this.canvas) {
      this.canvas.fire('text:changed', {
        target: this
      });
      this.canvas.requestRenderAll();
    }
  },
  /**
   * Composition start
   */
  onCompositionStart: function onCompositionStart() {
    this.inCompositionMode = true;
  },
  /**
   * Composition end
   */
  onCompositionEnd: function onCompositionEnd() {
    this.inCompositionMode = false;
  },
  // /**
  //  * Composition update
  //  */
  onCompositionUpdate: function onCompositionUpdate(e) {
    this.compositionStart = e.target.selectionStart;
    this.compositionEnd = e.target.selectionEnd;
    this.updateTextareaPosition();
  },
  /**
   * Copies selected text
   * @param {Event} e Event object
   */
  copy: function copy() {
    if (this.selectionStart === this.selectionEnd) {
      //do not cut-copy if no selection
      return;
    }
    fabric.copiedText = this.getSelectedText();
    if (!fabric.disableStyleCopyPaste) {
      fabric.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);
    } else {
      fabric.copiedTextStyle = null;
    }
    this._copyDone = true;
  },
  /**
   * Pastes text
   * @param {Event} e Event object
   */
  paste: function paste() {
    this.fromPaste = true;
  },
  /**
   * @private
   * @param {Event} e Event object
   * @return {Object} Clipboard data object
   */
  _getClipboardData: function _getClipboardData(e) {
    return e && e.clipboardData || fabric.window.clipboardData;
  },
  /**
   * Finds the width in pixels before the cursor on the same line
   * @private
   * @param {Number} lineIndex
   * @param {Number} charIndex
   * @return {Number} widthBeforeCursor width before cursor
   */
  _getWidthBeforeCursor: function _getWidthBeforeCursor(lineIndex, charIndex) {
    var widthBeforeCursor = this._getLineLeftOffset(lineIndex),
      bound;
    if (charIndex > 0) {
      bound = this.__charBounds[lineIndex][charIndex - 1];
      widthBeforeCursor += bound.left + bound.width;
    }
    return widthBeforeCursor;
  },
  /**
   * Gets start offset of a selection
   * @param {Event} e Event object
   * @param {Boolean} isRight
   * @return {Number}
   */
  getDownCursorOffset: function getDownCursorOffset(e, isRight) {
    var selectionProp = this._getSelectionForOffset(e, isRight),
      cursorLocation = this.get2DCursorLocation(selectionProp),
      lineIndex = cursorLocation.lineIndex;
    // if on last line, down cursor goes to end of line
    if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {
      // move to the end of a text
      return this._text.length - selectionProp;
    }
    var charIndex = cursorLocation.charIndex,
      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),
      indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor),
      textAfterCursor = this._textLines[lineIndex].slice(charIndex);
    return textAfterCursor.length + indexOnOtherLine + 1 + this.missingNewlineOffset(lineIndex);
  },
  /**
   * private
   * Helps finding if the offset should be counted from Start or End
   * @param {Event} e Event object
   * @param {Boolean} isRight
   * @return {Number}
   */
  _getSelectionForOffset: function _getSelectionForOffset(e, isRight) {
    if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {
      return this.selectionEnd;
    } else {
      return this.selectionStart;
    }
  },
  /**
   * @param {Event} e Event object
   * @param {Boolean} isRight
   * @return {Number}
   */
  getUpCursorOffset: function getUpCursorOffset(e, isRight) {
    var selectionProp = this._getSelectionForOffset(e, isRight),
      cursorLocation = this.get2DCursorLocation(selectionProp),
      lineIndex = cursorLocation.lineIndex;
    if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {
      // if on first line, up cursor goes to start of line
      return -selectionProp;
    }
    var charIndex = cursorLocation.charIndex,
      widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex),
      indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor),
      textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex),
      missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);
    // return a negative offset
    return -this._textLines[lineIndex - 1].length + indexOnOtherLine - textBeforeCursor.length + (1 - missingNewlineOffset);
  },
  /**
   * for a given width it founds the matching character.
   * @private
   */
  _getIndexOnLine: function _getIndexOnLine(lineIndex, width) {
    var line = this._textLines[lineIndex],
      lineLeftOffset = this._getLineLeftOffset(lineIndex),
      widthOfCharsOnLine = lineLeftOffset,
      indexOnLine = 0,
      charWidth,
      foundMatch;
    for (var j = 0, jlen = line.length; j < jlen; j++) {
      charWidth = this.__charBounds[lineIndex][j].width;
      widthOfCharsOnLine += charWidth;
      if (widthOfCharsOnLine > width) {
        foundMatch = true;
        var leftEdge = widthOfCharsOnLine - charWidth,
          rightEdge = widthOfCharsOnLine,
          offsetFromLeftEdge = Math.abs(leftEdge - width),
          offsetFromRightEdge = Math.abs(rightEdge - width);
        indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;
        break;
      }
    }

    // reached end
    if (!foundMatch) {
      indexOnLine = line.length - 1;
    }
    return indexOnLine;
  },
  /**
   * Moves cursor down
   * @param {Event} e Event object
   */
  moveCursorDown: function moveCursorDown(e) {
    if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
      return;
    }
    this._moveCursorUpOrDown('Down', e);
  },
  /**
   * Moves cursor up
   * @param {Event} e Event object
   */
  moveCursorUp: function moveCursorUp(e) {
    if (this.selectionStart === 0 && this.selectionEnd === 0) {
      return;
    }
    this._moveCursorUpOrDown('Up', e);
  },
  /**
   * Moves cursor up or down, fires the events
   * @param {String} direction 'Up' or 'Down'
   * @param {Event} e Event object
   */
  _moveCursorUpOrDown: function _moveCursorUpOrDown(direction, e) {
    // getUpCursorOffset
    // getDownCursorOffset
    var action = 'get' + direction + 'CursorOffset',
      offset = this[action](e, this._selectionDirection === 'right');
    if (e.shiftKey) {
      this.moveCursorWithShift(offset);
    } else {
      this.moveCursorWithoutShift(offset);
    }
    if (offset !== 0) {
      this.setSelectionInBoundaries();
      this.abortCursorAnimation();
      this._currentCursorOpacity = 1;
      this.initDelayedCursor();
      this._fireSelectionChanged();
      this._updateTextarea();
    }
  },
  /**
   * Moves cursor with shift
   * @param {Number} offset
   */
  moveCursorWithShift: function moveCursorWithShift(offset) {
    var newSelection = this._selectionDirection === 'left' ? this.selectionStart + offset : this.selectionEnd + offset;
    this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);
    return offset !== 0;
  },
  /**
   * Moves cursor up without shift
   * @param {Number} offset
   */
  moveCursorWithoutShift: function moveCursorWithoutShift(offset) {
    if (offset < 0) {
      this.selectionStart += offset;
      this.selectionEnd = this.selectionStart;
    } else {
      this.selectionEnd += offset;
      this.selectionStart = this.selectionEnd;
    }
    return offset !== 0;
  },
  /**
   * Moves cursor left
   * @param {Event} e Event object
   */
  moveCursorLeft: function moveCursorLeft(e) {
    if (this.selectionStart === 0 && this.selectionEnd === 0) {
      return;
    }
    this._moveCursorLeftOrRight('Left', e);
  },
  /**
   * @private
   * @return {Boolean} true if a change happened
   */
  _move: function _move(e, prop, direction) {
    var newValue;
    if (e.altKey) {
      newValue = this['findWordBoundary' + direction](this[prop]);
    } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {
      newValue = this['findLineBoundary' + direction](this[prop]);
    } else {
      this[prop] += direction === 'Left' ? -1 : 1;
      return true;
    }
    if (typeof newValue !== 'undefined' && this[prop] !== newValue) {
      this[prop] = newValue;
      return true;
    }
  },
  /**
   * @private
   */
  _moveLeft: function _moveLeft(e, prop) {
    return this._move(e, prop, 'Left');
  },
  /**
   * @private
   */
  _moveRight: function _moveRight(e, prop) {
    return this._move(e, prop, 'Right');
  },
  /**
   * Moves cursor left without keeping selection
   * @param {Event} e
   */
  moveCursorLeftWithoutShift: function moveCursorLeftWithoutShift(e) {
    var change = true;
    this._selectionDirection = 'left';

    // only move cursor when there is no selection,
    // otherwise we discard it, and leave cursor on same place
    if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {
      change = this._moveLeft(e, 'selectionStart');
    }
    this.selectionEnd = this.selectionStart;
    return change;
  },
  /**
   * Moves cursor left while keeping selection
   * @param {Event} e
   */
  moveCursorLeftWithShift: function moveCursorLeftWithShift(e) {
    if (this._selectionDirection === 'right' && this.selectionStart !== this.selectionEnd) {
      return this._moveLeft(e, 'selectionEnd');
    } else if (this.selectionStart !== 0) {
      this._selectionDirection = 'left';
      return this._moveLeft(e, 'selectionStart');
    }
  },
  /**
   * Moves cursor right
   * @param {Event} e Event object
   */
  moveCursorRight: function moveCursorRight(e) {
    if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
      return;
    }
    this._moveCursorLeftOrRight('Right', e);
  },
  /**
   * Moves cursor right or Left, fires event
   * @param {String} direction 'Left', 'Right'
   * @param {Event} e Event object
   */
  _moveCursorLeftOrRight: function _moveCursorLeftOrRight(direction, e) {
    var actionName = 'moveCursor' + direction + 'With';
    this._currentCursorOpacity = 1;
    if (e.shiftKey) {
      actionName += 'Shift';
    } else {
      actionName += 'outShift';
    }
    if (this[actionName](e)) {
      this.abortCursorAnimation();
      this.initDelayedCursor();
      this._fireSelectionChanged();
      this._updateTextarea();
    }
  },
  /**
   * Moves cursor right while keeping selection
   * @param {Event} e
   */
  moveCursorRightWithShift: function moveCursorRightWithShift(e) {
    if (this._selectionDirection === 'left' && this.selectionStart !== this.selectionEnd) {
      return this._moveRight(e, 'selectionStart');
    } else if (this.selectionEnd !== this._text.length) {
      this._selectionDirection = 'right';
      return this._moveRight(e, 'selectionEnd');
    }
  },
  /**
   * Moves cursor right without keeping selection
   * @param {Event} e Event object
   */
  moveCursorRightWithoutShift: function moveCursorRightWithoutShift(e) {
    var changed = true;
    this._selectionDirection = 'right';
    if (this.selectionStart === this.selectionEnd) {
      changed = this._moveRight(e, 'selectionStart');
      this.selectionEnd = this.selectionStart;
    } else {
      this.selectionStart = this.selectionEnd;
    }
    return changed;
  },
  /**
   * Removes characters from start/end
   * start/end ar per grapheme position in _text array.
   *
   * @param {Number} start
   * @param {Number} end default to start + 1
   */
  removeChars: function removeChars(start, end) {
    if (typeof end === 'undefined') {
      end = start + 1;
    }
    this.removeStyleFromTo(start, end);
    this._text.splice(start, end - start);
    this.text = this._text.join('');
    this.set('dirty', true);
    if (this._shouldClearDimensionCache()) {
      this.initDimensions();
      this.setCoords();
    }
    this._removeExtraneousStyles();
  },
  /**
   * insert characters at start position, before start position.
   * start  equal 1 it means the text get inserted between actual grapheme 0 and 1
   * if style array is provided, it must be as the same length of text in graphemes
   * if end is provided and is bigger than start, old text is replaced.
   * start/end ar per grapheme position in _text array.
   *
   * @param {String} text text to insert
   * @param {Array} style array of style objects
   * @param {Number} start
   * @param {Number} end default to start + 1
   */
  insertChars: function insertChars(text, style, start, end) {
    if (typeof end === 'undefined') {
      end = start;
    }
    if (end > start) {
      this.removeStyleFromTo(start, end);
    }
    var graphemes = fabric.util.string.graphemeSplit(text);
    this.insertNewStyleBlock(graphemes, start, style);
    this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));
    this.text = this._text.join('');
    this.set('dirty', true);
    if (this._shouldClearDimensionCache()) {
      this.initDimensions();
      this.setCoords();
    }
    this._removeExtraneousStyles();
  }
});

/* _TO_SVG_START_ */
(function () {
  var toFixed = fabric.util.toFixed,
    multipleSpacesRegex = /  +/g;
  fabric.util.object.extend(fabric.Text.prototype, /** @lends fabric.Text.prototype */{
    /**
     * Returns SVG representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
    _toSVG: function _toSVG() {
      var offsets = this._getSVGLeftTopOffsets(),
        textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);
      return this._wrapSVGTextAndBg(textAndBg);
    },
    /**
     * Returns svg representation of an instance
     * @param {Function} [reviver] Method for further parsing of svg representation.
     * @return {String} svg representation of an instance
     */
    toSVG: function toSVG(reviver) {
      return this._createBaseSVGMarkup(this._toSVG(), {
        reviver: reviver,
        noStyle: true,
        withShadow: true
      });
    },
    /**
     * @private
     */
    _getSVGLeftTopOffsets: function _getSVGLeftTopOffsets() {
      return {
        textLeft: -this.width / 2,
        textTop: -this.height / 2,
        lineTop: this.getHeightOfLine(0)
      };
    },
    /**
     * @private
     */
    _wrapSVGTextAndBg: function _wrapSVGTextAndBg(textAndBg) {
      var noShadow = true,
        textDecoration = this.getSvgTextDecoration(this);
      return [textAndBg.textBgRects.join(''), '\t\t<text xml:space="preserve" ', this.fontFamily ? 'font-family="' + this.fontFamily.replace(/"/g, '\'') + '" ' : '', this.fontSize ? 'font-size="' + this.fontSize + '" ' : '', this.fontStyle ? 'font-style="' + this.fontStyle + '" ' : '', this.fontWeight ? 'font-weight="' + this.fontWeight + '" ' : '', textDecoration ? 'text-decoration="' + textDecoration + '" ' : '', 'style="', this.getSvgStyles(noShadow), '"', this.addPaintOrder(), ' >', textAndBg.textSpans.join(''), '</text>\n'];
    },
    /**
     * @private
     * @param {Number} textTopOffset Text top offset
     * @param {Number} textLeftOffset Text left offset
     * @return {Object}
     */
    _getSVGTextAndBg: function _getSVGTextAndBg(textTopOffset, textLeftOffset) {
      var textSpans = [],
        textBgRects = [],
        height = textTopOffset,
        lineOffset;
      // bounding-box background
      this._setSVGBg(textBgRects);

      // text and text-background
      for (var i = 0, len = this._textLines.length; i < len; i++) {
        lineOffset = this._getLineLeftOffset(i);
        if (this.textBackgroundColor || this.styleHas('textBackgroundColor', i)) {
          this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height);
        }
        this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height);
        height += this.getHeightOfLine(i);
      }
      return {
        textSpans: textSpans,
        textBgRects: textBgRects
      };
    },
    /**
     * @private
     */
    _createTextCharSpan: function _createTextCharSpan(_char, styleDecl, left, top) {
      var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex),
        styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace),
        fillStyles = styleProps ? 'style="' + styleProps + '"' : '',
        dy = styleDecl.deltaY,
        dySpan = '',
        NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
      if (dy) {
        dySpan = ' dy="' + toFixed(dy, NUM_FRACTION_DIGITS) + '" ';
      }
      return ['<tspan x="', toFixed(left, NUM_FRACTION_DIGITS), '" y="', toFixed(top, NUM_FRACTION_DIGITS), '" ', dySpan, fillStyles, '>', fabric.util.string.escapeXml(_char), '</tspan>'].join('');
    },
    _setSVGTextLineText: function _setSVGTextLineText(textSpans, lineIndex, textLeftOffset, textTopOffset) {
      // set proper line offset
      var lineHeight = this.getHeightOfLine(lineIndex),
        isJustify = this.textAlign.indexOf('justify') !== -1,
        actualStyle,
        nextStyle,
        charsToRender = '',
        charBox,
        style,
        boxWidth = 0,
        line = this._textLines[lineIndex],
        timeToRender;
      textTopOffset += lineHeight * (1 - this._fontSizeFraction) / this.lineHeight;
      for (var i = 0, len = line.length - 1; i <= len; i++) {
        timeToRender = i === len || this.charSpacing;
        charsToRender += line[i];
        charBox = this.__charBounds[lineIndex][i];
        if (boxWidth === 0) {
          textLeftOffset += charBox.kernedWidth - charBox.width;
          boxWidth += charBox.width;
        } else {
          boxWidth += charBox.kernedWidth;
        }
        if (isJustify && !timeToRender) {
          if (this._reSpaceAndTab.test(line[i])) {
            timeToRender = true;
          }
        }
        if (!timeToRender) {
          // if we have charSpacing, we render char by char
          actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);
          nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);
          timeToRender = fabric.util.hasStyleChanged(actualStyle, nextStyle, true);
        }
        if (timeToRender) {
          style = this._getStyleDeclaration(lineIndex, i) || {};
          textSpans.push(this._createTextCharSpan(charsToRender, style, textLeftOffset, textTopOffset));
          charsToRender = '';
          actualStyle = nextStyle;
          textLeftOffset += boxWidth;
          boxWidth = 0;
        }
      }
    },
    _pushTextBgRect: function _pushTextBgRect(textBgRects, color, left, top, width, height) {
      var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;
      textBgRects.push('\t\t<rect ', this._getFillAttributes(color), ' x="', toFixed(left, NUM_FRACTION_DIGITS), '" y="', toFixed(top, NUM_FRACTION_DIGITS), '" width="', toFixed(width, NUM_FRACTION_DIGITS), '" height="', toFixed(height, NUM_FRACTION_DIGITS), '"></rect>\n');
    },
    _setSVGTextLineBg: function _setSVGTextLineBg(textBgRects, i, leftOffset, textTopOffset) {
      var line = this._textLines[i],
        heightOfLine = this.getHeightOfLine(i) / this.lineHeight,
        boxWidth = 0,
        boxStart = 0,
        charBox,
        currentColor,
        lastColor = this.getValueOfPropertyAt(i, 0, 'textBackgroundColor');
      for (var j = 0, jlen = line.length; j < jlen; j++) {
        charBox = this.__charBounds[i][j];
        currentColor = this.getValueOfPropertyAt(i, j, 'textBackgroundColor');
        if (currentColor !== lastColor) {
          lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart, textTopOffset, boxWidth, heightOfLine);
          boxStart = charBox.left;
          boxWidth = charBox.width;
          lastColor = currentColor;
        } else {
          boxWidth += charBox.kernedWidth;
        }
      }
      currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart, textTopOffset, boxWidth, heightOfLine);
    },
    /**
     * Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values
     * we work around it by "moving" alpha channel into opacity attribute and setting fill's alpha to 1
     *
     * @private
     * @param {*} value
     * @return {String}
     */
    _getFillAttributes: function _getFillAttributes(value) {
      var fillColor = value && typeof value === 'string' ? new fabric.Color(value) : '';
      if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {
        return 'fill="' + value + '"';
      }
      return 'opacity="' + fillColor.getAlpha() + '" fill="' + fillColor.setAlpha(1).toRgb() + '"';
    },
    /**
     * @private
     */
    _getSVGLineTopOffset: function _getSVGLineTopOffset(lineIndex) {
      var lineTopOffset = 0,
        lastHeight = 0;
      for (var j = 0; j < lineIndex; j++) {
        lineTopOffset += this.getHeightOfLine(j);
      }
      lastHeight = this.getHeightOfLine(j);
      return {
        lineTop: lineTopOffset,
        offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)
      };
    },
    /**
     * Returns styles-string for svg-export
     * @param {Boolean} skipShadow a boolean to skip shadow filter output
     * @return {String}
     */
    getSvgStyles: function getSvgStyles(skipShadow) {
      var svgStyle = fabric.Object.prototype.getSvgStyles.call(this, skipShadow);
      return svgStyle + ' white-space: pre;';
    }
  });
})();
/* _TO_SVG_END_ */

(function (global) {
  'use strict';

  var fabric = global.fabric || (global.fabric = {});

  /**
   * Textbox class, based on IText, allows the user to resize the text rectangle
   * and wraps lines automatically. Textboxes have their Y scaling locked, the
   * user can only change width. Height is adjusted automatically based on the
   * wrapping of lines.
   * @class fabric.Textbox
   * @extends fabric.IText
   * @mixes fabric.Observable
   * @return {fabric.Textbox} thisArg
   * @see {@link fabric.Textbox#initialize} for constructor definition
   */
  fabric.Textbox = fabric.util.createClass(fabric.IText, fabric.Observable, {
    /**
     * Type of an object
     * @type String
     * @default
     */
    type: 'textbox',
    /**
     * Minimum width of textbox, in pixels.
     * @type Number
     * @default
     */
    minWidth: 20,
    /**
     * Minimum calculated width of a textbox, in pixels.
     * fixed to 2 so that an empty textbox cannot go to 0
     * and is still selectable without text.
     * @type Number
     * @default
     */
    dynamicMinWidth: 2,
    /**
     * Cached array of text wrapping.
     * @type Array
     */
    __cachedLines: null,
    /**
     * Override standard Object class values
     */
    lockScalingFlip: true,
    /**
     * Override standard Object class values
     * Textbox needs this on false
     */
    noScaleCache: false,
    /**
     * Properties which when set cause object to change dimensions
     * @type Object
     * @private
     */
    _dimensionAffectingProps: fabric.Text.prototype._dimensionAffectingProps.concat('width'),
    /**
     * Use this regular expression to split strings in breakable lines
     * @private
     */
    _wordJoiners: /[ \t\r]/,
    /**
     * Use this boolean property in order to split strings that have no white space concept.
     * this is a cheap way to help with chinese/japanese
     * @type Boolean
     * @since 2.6.0
     */
    splitByGrapheme: false,
    /**
     * Unlike superclass's version of this function, Textbox does not update
     * its width.
     * @private
     * @override
     */
    initDimensions: function initDimensions() {
      if (this.__skipDimension) {
        return;
      }
      this.isEditing && this.initDelayedCursor();
      this.clearContextTop();
      this._clearCache();
      // clear dynamicMinWidth as it will be different after we re-wrap line
      this.dynamicMinWidth = 0;
      // wrap lines
      this._styleMap = this._generateStyleMap(this._splitText());
      // if after wrapping, the width is smaller than dynamicMinWidth, change the width and re-wrap
      if (this.dynamicMinWidth > this.width) {
        this._set('width', this.dynamicMinWidth);
      }
      if (this.textAlign.indexOf('justify') !== -1) {
        // once text is measured we need to make space fatter to make justified text.
        this.enlargeSpaces();
      }
      // clear cache and re-calculate height
      this.height = this.calcTextHeight();
      this.saveState({
        propertySet: '_dimensionAffectingProps'
      });
    },
    /**
     * Generate an object that translates the style object so that it is
     * broken up by visual lines (new lines and automatic wrapping).
     * The original text styles object is broken up by actual lines (new lines only),
     * which is only sufficient for Text / IText
     * @private
     */
    _generateStyleMap: function _generateStyleMap(textInfo) {
      var realLineCount = 0,
        realLineCharCount = 0,
        charCount = 0,
        map = {};
      for (var i = 0; i < textInfo.graphemeLines.length; i++) {
        if (textInfo.graphemeText[charCount] === '\n' && i > 0) {
          realLineCharCount = 0;
          charCount++;
          realLineCount++;
        } else if (!this.splitByGrapheme && this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {
          // this case deals with space's that are removed from end of lines when wrapping
          realLineCharCount++;
          charCount++;
        }
        map[i] = {
          line: realLineCount,
          offset: realLineCharCount
        };
        charCount += textInfo.graphemeLines[i].length;
        realLineCharCount += textInfo.graphemeLines[i].length;
      }
      return map;
    },
    /**
     * Returns true if object has a style property or has it on a specified line
     * @param {Number} lineIndex
     * @return {Boolean}
     */
    styleHas: function styleHas(property, lineIndex) {
      if (this._styleMap && !this.isWrapping) {
        var map = this._styleMap[lineIndex];
        if (map) {
          lineIndex = map.line;
        }
      }
      return fabric.Text.prototype.styleHas.call(this, property, lineIndex);
    },
    /**
     * Returns true if object has no styling or no styling in a line
     * @param {Number} lineIndex , lineIndex is on wrapped lines.
     * @return {Boolean}
     */
    isEmptyStyles: function isEmptyStyles(lineIndex) {
      if (!this.styles) {
        return true;
      }
      var offset = 0,
        nextLineIndex = lineIndex + 1,
        nextOffset,
        obj,
        shouldLimit = false,
        map = this._styleMap[lineIndex],
        mapNextLine = this._styleMap[lineIndex + 1];
      if (map) {
        lineIndex = map.line;
        offset = map.offset;
      }
      if (mapNextLine) {
        nextLineIndex = mapNextLine.line;
        shouldLimit = nextLineIndex === lineIndex;
        nextOffset = mapNextLine.offset;
      }
      obj = typeof lineIndex === 'undefined' ? this.styles : {
        line: this.styles[lineIndex]
      };
      for (var p1 in obj) {
        for (var p2 in obj[p1]) {
          if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {
            // eslint-disable-next-line no-unused-vars
            for (var p3 in obj[p1][p2]) {
              return false;
            }
          }
        }
      }
      return true;
    },
    /**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @private
     */
    _getStyleDeclaration: function _getStyleDeclaration(lineIndex, charIndex) {
      if (this._styleMap && !this.isWrapping) {
        var map = this._styleMap[lineIndex];
        if (!map) {
          return null;
        }
        lineIndex = map.line;
        charIndex = map.offset + charIndex;
      }
      return this.callSuper('_getStyleDeclaration', lineIndex, charIndex);
    },
    /**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @param {Object} style
     * @private
     */
    _setStyleDeclaration: function _setStyleDeclaration(lineIndex, charIndex, style) {
      var map = this._styleMap[lineIndex];
      lineIndex = map.line;
      charIndex = map.offset + charIndex;
      this.styles[lineIndex][charIndex] = style;
    },
    /**
     * @param {Number} lineIndex
     * @param {Number} charIndex
     * @private
     */
    _deleteStyleDeclaration: function _deleteStyleDeclaration(lineIndex, charIndex) {
      var map = this._styleMap[lineIndex];
      lineIndex = map.line;
      charIndex = map.offset + charIndex;
      delete this.styles[lineIndex][charIndex];
    },
    /**
     * probably broken need a fix
     * Returns the real style line that correspond to the wrapped lineIndex line
     * Used just to verify if the line does exist or not.
     * @param {Number} lineIndex
     * @returns {Boolean} if the line exists or not
     * @private
     */
    _getLineStyle: function _getLineStyle(lineIndex) {
      var map = this._styleMap[lineIndex];
      return !!this.styles[map.line];
    },
    /**
     * Set the line style to an empty object so that is initialized
     * @param {Number} lineIndex
     * @param {Object} style
     * @private
     */
    _setLineStyle: function _setLineStyle(lineIndex) {
      var map = this._styleMap[lineIndex];
      this.styles[map.line] = {};
    },
    /**
     * Wraps text using the 'width' property of Textbox. First this function
     * splits text on newlines, so we preserve newlines entered by the user.
     * Then it wraps each line using the width of the Textbox by calling
     * _wrapLine().
     * @param {Array} lines The string array of text that is split into lines
     * @param {Number} desiredWidth width you want to wrap to
     * @returns {Array} Array of lines
     */
    _wrapText: function _wrapText(lines, desiredWidth) {
      var wrapped = [],
        i;
      this.isWrapping = true;
      for (i = 0; i < lines.length; i++) {
        wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));
      }
      this.isWrapping = false;
      return wrapped;
    },
    /**
     * Helper function to measure a string of text, given its lineIndex and charIndex offset
     * it gets called when charBounds are not available yet.
     * @param {CanvasRenderingContext2D} ctx
     * @param {String} text
     * @param {number} lineIndex
     * @param {number} charOffset
     * @returns {number}
     * @private
     */
    _measureWord: function _measureWord(word, lineIndex, charOffset) {
      var width = 0,
        prevGrapheme,
        skipLeft = true;
      charOffset = charOffset || 0;
      for (var i = 0, len = word.length; i < len; i++) {
        var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);
        width += box.kernedWidth;
        prevGrapheme = word[i];
      }
      return width;
    },
    /**
     * Wraps a line of text using the width of the Textbox and a context.
     * @param {Array} line The grapheme array that represent the line
     * @param {Number} lineIndex
     * @param {Number} desiredWidth width you want to wrap the line to
     * @param {Number} reservedSpace space to remove from wrapping for custom functionalities
     * @returns {Array} Array of line(s) into which the given text is wrapped
     * to.
     */
    _wrapLine: function _wrapLine(_line, lineIndex, desiredWidth, reservedSpace) {
      var lineWidth = 0,
        splitByGrapheme = this.splitByGrapheme,
        graphemeLines = [],
        line = [],
        // spaces in different languages?
        words = splitByGrapheme ? fabric.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners),
        word = '',
        offset = 0,
        infix = splitByGrapheme ? '' : ' ',
        wordWidth = 0,
        infixWidth = 0,
        largestWordWidth = 0,
        lineJustStarted = true,
        additionalSpace = this._getWidthOfCharSpacing(),
        reservedSpace = reservedSpace || 0;
      // fix a difference between split and graphemeSplit
      if (words.length === 0) {
        words.push([]);
      }
      desiredWidth -= reservedSpace;
      for (var i = 0; i < words.length; i++) {
        // if using splitByGrapheme words are already in graphemes.
        word = splitByGrapheme ? words[i] : fabric.util.string.graphemeSplit(words[i]);
        wordWidth = this._measureWord(word, lineIndex, offset);
        offset += word.length;
        lineWidth += infixWidth + wordWidth - additionalSpace;
        if (lineWidth > desiredWidth && !lineJustStarted) {
          graphemeLines.push(line);
          line = [];
          lineWidth = wordWidth;
          lineJustStarted = true;
        } else {
          lineWidth += additionalSpace;
        }
        if (!lineJustStarted && !splitByGrapheme) {
          line.push(infix);
        }
        line = line.concat(word);
        infixWidth = splitByGrapheme ? 0 : this._measureWord([infix], lineIndex, offset);
        offset++;
        lineJustStarted = false;
        // keep track of largest word
        if (wordWidth > largestWordWidth) {
          largestWordWidth = wordWidth;
        }
      }
      i && graphemeLines.push(line);
      if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {
        this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;
      }
      return graphemeLines;
    },
    /**
     * Detect if the text line is ended with an hard break
     * text and itext do not have wrapping, return false
     * @param {Number} lineIndex text to split
     * @return {Boolean}
     */
    isEndOfWrapping: function isEndOfWrapping(lineIndex) {
      if (!this._styleMap[lineIndex + 1]) {
        // is last line, return true;
        return true;
      }
      if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {
        // this is last line before a line break, return true;
        return true;
      }
      return false;
    },
    /**
     * Detect if a line has a linebreak and so we need to account for it when moving
     * and counting style.
     * @return Number
     */
    missingNewlineOffset: function missingNewlineOffset(lineIndex) {
      if (this.splitByGrapheme) {
        return this.isEndOfWrapping(lineIndex) ? 1 : 0;
      }
      return 1;
    },
    /**
    * Gets lines of text to render in the Textbox. This function calculates
    * text wrapping on the fly every time it is called.
    * @param {String} text text to split
    * @returns {Array} Array of lines in the Textbox.
    * @override
    */
    _splitTextIntoLines: function _splitTextIntoLines(text) {
      var newText = fabric.Text.prototype._splitTextIntoLines.call(this, text),
        graphemeLines = this._wrapText(newText.lines, this.width),
        lines = new Array(graphemeLines.length);
      for (var i = 0; i < graphemeLines.length; i++) {
        lines[i] = graphemeLines[i].join('');
      }
      newText.lines = lines;
      newText.graphemeLines = graphemeLines;
      return newText;
    },
    getMinWidth: function getMinWidth() {
      return Math.max(this.minWidth, this.dynamicMinWidth);
    },
    _removeExtraneousStyles: function _removeExtraneousStyles() {
      var linesToKeep = {};
      for (var prop in this._styleMap) {
        if (this._textLines[prop]) {
          linesToKeep[this._styleMap[prop].line] = 1;
        }
      }
      for (var prop in this.styles) {
        if (!linesToKeep[prop]) {
          delete this.styles[prop];
        }
      }
    },
    /**
     * Returns object representation of an instance
     * @method toObject
     * @param {Array} [propertiesToInclude] Any properties that you might want to additionally include in the output
     * @return {Object} object representation of an instance
     */
    toObject: function toObject(propertiesToInclude) {
      return this.callSuper('toObject', ['minWidth', 'splitByGrapheme'].concat(propertiesToInclude));
    }
  });

  /**
   * Returns fabric.Textbox instance from an object representation
   * @static
   * @memberOf fabric.Textbox
   * @param {Object} object Object to create an instance from
   * @param {Function} [callback] Callback to invoke when an fabric.Textbox instance is created
   */
  fabric.Textbox.fromObject = function (object, callback) {
    var styles = fabric.util.stylesFromArray(object.styles, object.text);
    //copy object to prevent mutation
    var objCopy = Object.assign({}, object, {
      styles: styles
    });
    return fabric.Object._fromObject('Textbox', objCopy, callback, 'text');
  };
})(typeof exports !== 'undefined' ? exports : this);
(function () {
  var controlsUtils = fabric.controlsUtils,
    scaleSkewStyleHandler = controlsUtils.scaleSkewCursorStyleHandler,
    scaleStyleHandler = controlsUtils.scaleCursorStyleHandler,
    scalingEqually = controlsUtils.scalingEqually,
    scalingYOrSkewingX = controlsUtils.scalingYOrSkewingX,
    scalingXOrSkewingY = controlsUtils.scalingXOrSkewingY,
    scaleOrSkewActionName = controlsUtils.scaleOrSkewActionName,
    objectControls = fabric.Object.prototype.controls;
  objectControls.ml = new fabric.Control({
    x: -0.5,
    y: 0,
    cursorStyleHandler: scaleSkewStyleHandler,
    actionHandler: scalingXOrSkewingY,
    getActionName: scaleOrSkewActionName
  });
  objectControls.mr = new fabric.Control({
    x: 0.5,
    y: 0,
    cursorStyleHandler: scaleSkewStyleHandler,
    actionHandler: scalingXOrSkewingY,
    getActionName: scaleOrSkewActionName
  });
  objectControls.mb = new fabric.Control({
    x: 0,
    y: 0.5,
    cursorStyleHandler: scaleSkewStyleHandler,
    actionHandler: scalingYOrSkewingX,
    getActionName: scaleOrSkewActionName
  });
  objectControls.mt = new fabric.Control({
    x: 0,
    y: -0.5,
    cursorStyleHandler: scaleSkewStyleHandler,
    actionHandler: scalingYOrSkewingX,
    getActionName: scaleOrSkewActionName
  });
  objectControls.tl = new fabric.Control({
    x: -0.5,
    y: -0.5,
    cursorStyleHandler: scaleStyleHandler,
    actionHandler: scalingEqually
  });
  objectControls.tr = new fabric.Control({
    x: 0.5,
    y: -0.5,
    cursorStyleHandler: scaleStyleHandler,
    actionHandler: scalingEqually
  });
  objectControls.bl = new fabric.Control({
    x: -0.5,
    y: 0.5,
    cursorStyleHandler: scaleStyleHandler,
    actionHandler: scalingEqually
  });
  objectControls.br = new fabric.Control({
    x: 0.5,
    y: 0.5,
    cursorStyleHandler: scaleStyleHandler,
    actionHandler: scalingEqually
  });
  objectControls.mtr = new fabric.Control({
    x: 0,
    y: -0.5,
    actionHandler: controlsUtils.rotationWithSnapping,
    cursorStyleHandler: controlsUtils.rotationStyleHandler,
    offsetY: -40,
    withConnection: true,
    actionName: 'rotate'
  });
  if (fabric.Textbox) {
    // this is breaking the prototype inheritance, no time / ideas to fix it.
    // is important to document that if you want to have all objects to have a
    // specific custom control, you have to add it to Object prototype and to Textbox
    // prototype. The controls are shared as references. So changes to control `tr`
    // can still apply to all objects if needed.
    var textBoxControls = fabric.Textbox.prototype.controls = {};
    textBoxControls.mtr = objectControls.mtr;
    textBoxControls.tr = objectControls.tr;
    textBoxControls.br = objectControls.br;
    textBoxControls.tl = objectControls.tl;
    textBoxControls.bl = objectControls.bl;
    textBoxControls.mt = objectControls.mt;
    textBoxControls.mb = objectControls.mb;
    textBoxControls.mr = new fabric.Control({
      x: 0.5,
      y: 0,
      actionHandler: controlsUtils.changeWidth,
      cursorStyleHandler: scaleSkewStyleHandler,
      actionName: 'resizing'
    });
    textBoxControls.ml = new fabric.Control({
      x: -0.5,
      y: 0,
      actionHandler: controlsUtils.changeWidth,
      cursorStyleHandler: scaleSkewStyleHandler,
      actionName: 'resizing'
    });
  }
})();
},{"jsdom":"../node_modules/parcel-bundler/src/builtins/_empty.js","jsdom/lib/jsdom/living/generated/utils":"../node_modules/parcel-bundler/src/builtins/_empty.js","jsdom/lib/jsdom/utils":"../node_modules/parcel-bundler/src/builtins/_empty.js","buffer":"../node_modules/buffer/index.js","process":"../node_modules/process/browser.js"}],"../node_modules/pdfjs-dist/build/pdf.js":[function(require,module,exports) {
var define;
var Buffer = require("buffer").Buffer;
var process = require("process");
function _classStaticPrivateMethodGet(receiver, classConstructor, method) { _classCheckPrivateStaticAccess(receiver, classConstructor); return method; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) { _classCheckPrivateStaticAccess(receiver, classConstructor); _classCheckPrivateStaticFieldDescriptor(descriptor, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) { _classCheckPrivateStaticAccess(receiver, classConstructor); _classCheckPrivateStaticFieldDescriptor(descriptor, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classCheckPrivateStaticFieldDescriptor(descriptor, action) { if (descriptor === undefined) { throw new TypeError("attempted to " + action + " private static field before its declaration"); } }
function _classCheckPrivateStaticAccess(receiver, classConstructor) { if (receiver !== classConstructor) { throw new TypeError("Private static access of wrong provenance"); } }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/**
 * @licstart The following is the entire license notice for the
 * JavaScript code in this page
 *
 * Copyright 2023 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @licend The above is the entire license notice for the
 * JavaScript code in this page
 */

(function webpackUniversalModuleDefinition(root, factory) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && (typeof module === "undefined" ? "undefined" : _typeof(module)) === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define("pdfjs-dist/build/pdf", [], factory);else if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object') exports["pdfjs-dist/build/pdf"] = factory();else root["pdfjs-dist/build/pdf"] = root.pdfjsLib = factory();
})(globalThis, function () {
  return (/******/function () {
      // webpackBootstrap
      /******/
      "use strict";

      /******/
      var __webpack_modules__ = [
        /* 0 */
      , /* 1 */
      /***/function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.VerbosityLevel = exports.Util = exports.UnknownErrorException = exports.UnexpectedResponseException = exports.TextRenderingMode = exports.RenderingIntentFlag = exports.PromiseCapability = exports.PermissionFlag = exports.PasswordResponses = exports.PasswordException = exports.PageActionEventType = exports.OPS = exports.MissingPDFException = exports.MAX_IMAGE_SIZE_TO_CACHE = exports.LINE_FACTOR = exports.LINE_DESCENT_FACTOR = exports.InvalidPDFException = exports.ImageKind = exports.IDENTITY_MATRIX = exports.FormatError = exports.FeatureTest = exports.FONT_IDENTITY_MATRIX = exports.DocumentActionEventType = exports.CMapCompressionType = exports.BaseException = exports.BASELINE_FACTOR = exports.AnnotationType = exports.AnnotationReplyType = exports.AnnotationMode = exports.AnnotationFlag = exports.AnnotationFieldFlag = exports.AnnotationEditorType = exports.AnnotationEditorPrefix = exports.AnnotationEditorParamsType = exports.AnnotationBorderStyleType = exports.AnnotationActionEventType = exports.AbortException = void 0;
        exports.assert = assert;
        exports.bytesToString = bytesToString;
        exports.createValidAbsoluteUrl = createValidAbsoluteUrl;
        exports.getModificationDate = getModificationDate;
        exports.getVerbosityLevel = getVerbosityLevel;
        exports.info = info;
        exports.isArrayBuffer = isArrayBuffer;
        exports.isArrayEqual = isArrayEqual;
        exports.normalizeUnicode = normalizeUnicode;
        exports.objectFromMap = objectFromMap;
        exports.objectSize = objectSize;
        exports.setVerbosityLevel = setVerbosityLevel;
        exports.shadow = shadow;
        exports.string32 = string32;
        exports.stringToBytes = stringToBytes;
        exports.stringToPDFString = stringToPDFString;
        exports.stringToUTF8String = stringToUTF8String;
        exports.unreachable = unreachable;
        exports.utf8StringToString = utf8StringToString;
        exports.warn = warn;
        ;
        var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
        exports.IDENTITY_MATRIX = IDENTITY_MATRIX;
        var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
        exports.FONT_IDENTITY_MATRIX = FONT_IDENTITY_MATRIX;
        var MAX_IMAGE_SIZE_TO_CACHE = 10e6;
        exports.MAX_IMAGE_SIZE_TO_CACHE = MAX_IMAGE_SIZE_TO_CACHE;
        var LINE_FACTOR = 1.35;
        exports.LINE_FACTOR = LINE_FACTOR;
        var LINE_DESCENT_FACTOR = 0.35;
        exports.LINE_DESCENT_FACTOR = LINE_DESCENT_FACTOR;
        var BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;
        exports.BASELINE_FACTOR = BASELINE_FACTOR;
        var RenderingIntentFlag = {
          ANY: 0x01,
          DISPLAY: 0x02,
          PRINT: 0x04,
          SAVE: 0x08,
          ANNOTATIONS_FORMS: 0x10,
          ANNOTATIONS_STORAGE: 0x20,
          ANNOTATIONS_DISABLE: 0x40,
          OPLIST: 0x100
        };
        exports.RenderingIntentFlag = RenderingIntentFlag;
        var AnnotationMode = {
          DISABLE: 0,
          ENABLE: 1,
          ENABLE_FORMS: 2,
          ENABLE_STORAGE: 3
        };
        exports.AnnotationMode = AnnotationMode;
        var AnnotationEditorPrefix = "pdfjs_internal_editor_";
        exports.AnnotationEditorPrefix = AnnotationEditorPrefix;
        var AnnotationEditorType = {
          DISABLE: -1,
          NONE: 0,
          FREETEXT: 3,
          STAMP: 13,
          INK: 15
        };
        exports.AnnotationEditorType = AnnotationEditorType;
        var AnnotationEditorParamsType = {
          FREETEXT_SIZE: 1,
          FREETEXT_COLOR: 2,
          FREETEXT_OPACITY: 3,
          INK_COLOR: 11,
          INK_THICKNESS: 12,
          INK_OPACITY: 13
        };
        exports.AnnotationEditorParamsType = AnnotationEditorParamsType;
        var PermissionFlag = {
          PRINT: 0x04,
          MODIFY_CONTENTS: 0x08,
          COPY: 0x10,
          MODIFY_ANNOTATIONS: 0x20,
          FILL_INTERACTIVE_FORMS: 0x100,
          COPY_FOR_ACCESSIBILITY: 0x200,
          ASSEMBLE: 0x400,
          PRINT_HIGH_QUALITY: 0x800
        };
        exports.PermissionFlag = PermissionFlag;
        var TextRenderingMode = {
          FILL: 0,
          STROKE: 1,
          FILL_STROKE: 2,
          INVISIBLE: 3,
          FILL_ADD_TO_PATH: 4,
          STROKE_ADD_TO_PATH: 5,
          FILL_STROKE_ADD_TO_PATH: 6,
          ADD_TO_PATH: 7,
          FILL_STROKE_MASK: 3,
          ADD_TO_PATH_FLAG: 4
        };
        exports.TextRenderingMode = TextRenderingMode;
        var ImageKind = {
          GRAYSCALE_1BPP: 1,
          RGB_24BPP: 2,
          RGBA_32BPP: 3
        };
        exports.ImageKind = ImageKind;
        var AnnotationType = {
          TEXT: 1,
          LINK: 2,
          FREETEXT: 3,
          LINE: 4,
          SQUARE: 5,
          CIRCLE: 6,
          POLYGON: 7,
          POLYLINE: 8,
          HIGHLIGHT: 9,
          UNDERLINE: 10,
          SQUIGGLY: 11,
          STRIKEOUT: 12,
          STAMP: 13,
          CARET: 14,
          INK: 15,
          POPUP: 16,
          FILEATTACHMENT: 17,
          SOUND: 18,
          MOVIE: 19,
          WIDGET: 20,
          SCREEN: 21,
          PRINTERMARK: 22,
          TRAPNET: 23,
          WATERMARK: 24,
          THREED: 25,
          REDACT: 26
        };
        exports.AnnotationType = AnnotationType;
        var AnnotationReplyType = {
          GROUP: "Group",
          REPLY: "R"
        };
        exports.AnnotationReplyType = AnnotationReplyType;
        var AnnotationFlag = {
          INVISIBLE: 0x01,
          HIDDEN: 0x02,
          PRINT: 0x04,
          NOZOOM: 0x08,
          NOROTATE: 0x10,
          NOVIEW: 0x20,
          READONLY: 0x40,
          LOCKED: 0x80,
          TOGGLENOVIEW: 0x100,
          LOCKEDCONTENTS: 0x200
        };
        exports.AnnotationFlag = AnnotationFlag;
        var AnnotationFieldFlag = {
          READONLY: 0x0000001,
          REQUIRED: 0x0000002,
          NOEXPORT: 0x0000004,
          MULTILINE: 0x0001000,
          PASSWORD: 0x0002000,
          NOTOGGLETOOFF: 0x0004000,
          RADIO: 0x0008000,
          PUSHBUTTON: 0x0010000,
          COMBO: 0x0020000,
          EDIT: 0x0040000,
          SORT: 0x0080000,
          FILESELECT: 0x0100000,
          MULTISELECT: 0x0200000,
          DONOTSPELLCHECK: 0x0400000,
          DONOTSCROLL: 0x0800000,
          COMB: 0x1000000,
          RICHTEXT: 0x2000000,
          RADIOSINUNISON: 0x2000000,
          COMMITONSELCHANGE: 0x4000000
        };
        exports.AnnotationFieldFlag = AnnotationFieldFlag;
        var AnnotationBorderStyleType = {
          SOLID: 1,
          DASHED: 2,
          BEVELED: 3,
          INSET: 4,
          UNDERLINE: 5
        };
        exports.AnnotationBorderStyleType = AnnotationBorderStyleType;
        var AnnotationActionEventType = {
          E: "Mouse Enter",
          X: "Mouse Exit",
          D: "Mouse Down",
          U: "Mouse Up",
          Fo: "Focus",
          Bl: "Blur",
          PO: "PageOpen",
          PC: "PageClose",
          PV: "PageVisible",
          PI: "PageInvisible",
          K: "Keystroke",
          F: "Format",
          V: "Validate",
          C: "Calculate"
        };
        exports.AnnotationActionEventType = AnnotationActionEventType;
        var DocumentActionEventType = {
          WC: "WillClose",
          WS: "WillSave",
          DS: "DidSave",
          WP: "WillPrint",
          DP: "DidPrint"
        };
        exports.DocumentActionEventType = DocumentActionEventType;
        var PageActionEventType = {
          O: "PageOpen",
          C: "PageClose"
        };
        exports.PageActionEventType = PageActionEventType;
        var VerbosityLevel = {
          ERRORS: 0,
          WARNINGS: 1,
          INFOS: 5
        };
        exports.VerbosityLevel = VerbosityLevel;
        var CMapCompressionType = {
          NONE: 0,
          BINARY: 1
        };
        exports.CMapCompressionType = CMapCompressionType;
        var OPS = {
          dependency: 1,
          setLineWidth: 2,
          setLineCap: 3,
          setLineJoin: 4,
          setMiterLimit: 5,
          setDash: 6,
          setRenderingIntent: 7,
          setFlatness: 8,
          setGState: 9,
          save: 10,
          restore: 11,
          transform: 12,
          moveTo: 13,
          lineTo: 14,
          curveTo: 15,
          curveTo2: 16,
          curveTo3: 17,
          closePath: 18,
          rectangle: 19,
          stroke: 20,
          closeStroke: 21,
          fill: 22,
          eoFill: 23,
          fillStroke: 24,
          eoFillStroke: 25,
          closeFillStroke: 26,
          closeEOFillStroke: 27,
          endPath: 28,
          clip: 29,
          eoClip: 30,
          beginText: 31,
          endText: 32,
          setCharSpacing: 33,
          setWordSpacing: 34,
          setHScale: 35,
          setLeading: 36,
          setFont: 37,
          setTextRenderingMode: 38,
          setTextRise: 39,
          moveText: 40,
          setLeadingMoveText: 41,
          setTextMatrix: 42,
          nextLine: 43,
          showText: 44,
          showSpacedText: 45,
          nextLineShowText: 46,
          nextLineSetSpacingShowText: 47,
          setCharWidth: 48,
          setCharWidthAndBounds: 49,
          setStrokeColorSpace: 50,
          setFillColorSpace: 51,
          setStrokeColor: 52,
          setStrokeColorN: 53,
          setFillColor: 54,
          setFillColorN: 55,
          setStrokeGray: 56,
          setFillGray: 57,
          setStrokeRGBColor: 58,
          setFillRGBColor: 59,
          setStrokeCMYKColor: 60,
          setFillCMYKColor: 61,
          shadingFill: 62,
          beginInlineImage: 63,
          beginImageData: 64,
          endInlineImage: 65,
          paintXObject: 66,
          markPoint: 67,
          markPointProps: 68,
          beginMarkedContent: 69,
          beginMarkedContentProps: 70,
          endMarkedContent: 71,
          beginCompat: 72,
          endCompat: 73,
          paintFormXObjectBegin: 74,
          paintFormXObjectEnd: 75,
          beginGroup: 76,
          endGroup: 77,
          beginAnnotation: 80,
          endAnnotation: 81,
          paintImageMaskXObject: 83,
          paintImageMaskXObjectGroup: 84,
          paintImageXObject: 85,
          paintInlineImageXObject: 86,
          paintInlineImageXObjectGroup: 87,
          paintImageXObjectRepeat: 88,
          paintImageMaskXObjectRepeat: 89,
          paintSolidColorImageMask: 90,
          constructPath: 91
        };
        exports.OPS = OPS;
        var PasswordResponses = {
          NEED_PASSWORD: 1,
          INCORRECT_PASSWORD: 2
        };
        exports.PasswordResponses = PasswordResponses;
        var verbosity = VerbosityLevel.WARNINGS;
        function setVerbosityLevel(level) {
          if (Number.isInteger(level)) {
            verbosity = level;
          }
        }
        function getVerbosityLevel() {
          return verbosity;
        }
        function info(msg) {
          if (verbosity >= VerbosityLevel.INFOS) {
            console.log("Info: ".concat(msg));
          }
        }
        function warn(msg) {
          if (verbosity >= VerbosityLevel.WARNINGS) {
            console.log("Warning: ".concat(msg));
          }
        }
        function unreachable(msg) {
          throw new Error(msg);
        }
        function assert(cond, msg) {
          if (!cond) {
            unreachable(msg);
          }
        }
        function _isValidProtocol(url) {
          switch (url === null || url === void 0 ? void 0 : url.protocol) {
            case "http:":
            case "https:":
            case "ftp:":
            case "mailto:":
            case "tel:":
              return true;
            default:
              return false;
          }
        }
        function createValidAbsoluteUrl(url) {
          var baseUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
          if (!url) {
            return null;
          }
          try {
            if (options && typeof url === "string") {
              if (options.addDefaultProtocol && url.startsWith("www.")) {
                var dots = url.match(/\./g);
                if ((dots === null || dots === void 0 ? void 0 : dots.length) >= 2) {
                  url = "http://".concat(url);
                }
              }
              if (options.tryConvertEncoding) {
                try {
                  url = stringToUTF8String(url);
                } catch (_unused) {}
              }
            }
            var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
            if (_isValidProtocol(absoluteUrl)) {
              return absoluteUrl;
            }
          } catch (_unused2) {}
          return null;
        }
        function shadow(obj, prop, value) {
          var nonSerializable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
          Object.defineProperty(obj, prop, {
            value: value,
            enumerable: !nonSerializable,
            configurable: true,
            writable: false
          });
          return value;
        }
        var BaseException = function BaseExceptionClosure() {
          function BaseException(message, name) {
            if (this.constructor === BaseException) {
              unreachable("Cannot initialize BaseException.");
            }
            this.message = message;
            this.name = name;
          }
          BaseException.prototype = new Error();
          BaseException.constructor = BaseException;
          return BaseException;
        }();
        exports.BaseException = BaseException;
        var PasswordException = /*#__PURE__*/function (_BaseException) {
          _inherits(PasswordException, _BaseException);
          var _super = _createSuper(PasswordException);
          function PasswordException(msg, code) {
            var _this;
            _classCallCheck(this, PasswordException);
            _this = _super.call(this, msg, "PasswordException");
            _this.code = code;
            return _this;
          }
          return _createClass(PasswordException);
        }(BaseException);
        exports.PasswordException = PasswordException;
        var UnknownErrorException = /*#__PURE__*/function (_BaseException2) {
          _inherits(UnknownErrorException, _BaseException2);
          var _super2 = _createSuper(UnknownErrorException);
          function UnknownErrorException(msg, details) {
            var _this2;
            _classCallCheck(this, UnknownErrorException);
            _this2 = _super2.call(this, msg, "UnknownErrorException");
            _this2.details = details;
            return _this2;
          }
          return _createClass(UnknownErrorException);
        }(BaseException);
        exports.UnknownErrorException = UnknownErrorException;
        var InvalidPDFException = /*#__PURE__*/function (_BaseException3) {
          _inherits(InvalidPDFException, _BaseException3);
          var _super3 = _createSuper(InvalidPDFException);
          function InvalidPDFException(msg) {
            _classCallCheck(this, InvalidPDFException);
            return _super3.call(this, msg, "InvalidPDFException");
          }
          return _createClass(InvalidPDFException);
        }(BaseException);
        exports.InvalidPDFException = InvalidPDFException;
        var MissingPDFException = /*#__PURE__*/function (_BaseException4) {
          _inherits(MissingPDFException, _BaseException4);
          var _super4 = _createSuper(MissingPDFException);
          function MissingPDFException(msg) {
            _classCallCheck(this, MissingPDFException);
            return _super4.call(this, msg, "MissingPDFException");
          }
          return _createClass(MissingPDFException);
        }(BaseException);
        exports.MissingPDFException = MissingPDFException;
        var UnexpectedResponseException = /*#__PURE__*/function (_BaseException5) {
          _inherits(UnexpectedResponseException, _BaseException5);
          var _super5 = _createSuper(UnexpectedResponseException);
          function UnexpectedResponseException(msg, status) {
            var _this3;
            _classCallCheck(this, UnexpectedResponseException);
            _this3 = _super5.call(this, msg, "UnexpectedResponseException");
            _this3.status = status;
            return _this3;
          }
          return _createClass(UnexpectedResponseException);
        }(BaseException);
        exports.UnexpectedResponseException = UnexpectedResponseException;
        var FormatError = /*#__PURE__*/function (_BaseException6) {
          _inherits(FormatError, _BaseException6);
          var _super6 = _createSuper(FormatError);
          function FormatError(msg) {
            _classCallCheck(this, FormatError);
            return _super6.call(this, msg, "FormatError");
          }
          return _createClass(FormatError);
        }(BaseException);
        exports.FormatError = FormatError;
        var AbortException = /*#__PURE__*/function (_BaseException7) {
          _inherits(AbortException, _BaseException7);
          var _super7 = _createSuper(AbortException);
          function AbortException(msg) {
            _classCallCheck(this, AbortException);
            return _super7.call(this, msg, "AbortException");
          }
          return _createClass(AbortException);
        }(BaseException);
        exports.AbortException = AbortException;
        function bytesToString(bytes) {
          if (_typeof(bytes) !== "object" || (bytes === null || bytes === void 0 ? void 0 : bytes.length) === undefined) {
            unreachable("Invalid argument for bytesToString");
          }
          var length = bytes.length;
          var MAX_ARGUMENT_COUNT = 8192;
          if (length < MAX_ARGUMENT_COUNT) {
            return String.fromCharCode.apply(null, bytes);
          }
          var strBuf = [];
          for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
            var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
            var chunk = bytes.subarray(i, chunkEnd);
            strBuf.push(String.fromCharCode.apply(null, chunk));
          }
          return strBuf.join("");
        }
        function stringToBytes(str) {
          if (typeof str !== "string") {
            unreachable("Invalid argument for stringToBytes");
          }
          var length = str.length;
          var bytes = new Uint8Array(length);
          for (var i = 0; i < length; ++i) {
            bytes[i] = str.charCodeAt(i) & 0xff;
          }
          return bytes;
        }
        function string32(value) {
          return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);
        }
        function objectSize(obj) {
          return Object.keys(obj).length;
        }
        function objectFromMap(map) {
          var obj = Object.create(null);
          var _iterator = _createForOfIteratorHelper(map),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var _step$value = _slicedToArray(_step.value, 2),
                key = _step$value[0],
                value = _step$value[1];
              obj[key] = value;
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          return obj;
        }
        function isLittleEndian() {
          var buffer8 = new Uint8Array(4);
          buffer8[0] = 1;
          var view32 = new Uint32Array(buffer8.buffer, 0, 1);
          return view32[0] === 1;
        }
        function isEvalSupported() {
          try {
            new Function("");
            return true;
          } catch (_unused3) {
            return false;
          }
        }
        var FeatureTest = /*#__PURE__*/function () {
          function FeatureTest() {
            _classCallCheck(this, FeatureTest);
          }
          _createClass(FeatureTest, null, [{
            key: "isLittleEndian",
            get: function get() {
              return shadow(this, "isLittleEndian", isLittleEndian());
            }
          }, {
            key: "isEvalSupported",
            get: function get() {
              return shadow(this, "isEvalSupported", isEvalSupported());
            }
          }, {
            key: "isOffscreenCanvasSupported",
            get: function get() {
              return shadow(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas !== "undefined");
            }
          }, {
            key: "platform",
            get: function get() {
              if (typeof navigator === "undefined") {
                return shadow(this, "platform", {
                  isWin: false,
                  isMac: false
                });
              }
              return shadow(this, "platform", {
                isWin: navigator.platform.includes("Win"),
                isMac: navigator.platform.includes("Mac")
              });
            }
          }]);
          return FeatureTest;
        }();
        exports.FeatureTest = FeatureTest;
        var hexNumbers = _toConsumableArray(Array(256).keys()).map(function (n) {
          return n.toString(16).padStart(2, "0");
        });
        var Util = /*#__PURE__*/function () {
          function Util() {
            _classCallCheck(this, Util);
          }
          _createClass(Util, null, [{
            key: "makeHexColor",
            value: function makeHexColor(r, g, b) {
              return "#".concat(hexNumbers[r]).concat(hexNumbers[g]).concat(hexNumbers[b]);
            }
          }, {
            key: "scaleMinMax",
            value: function scaleMinMax(transform, minMax) {
              var temp;
              if (transform[0]) {
                if (transform[0] < 0) {
                  temp = minMax[0];
                  minMax[0] = minMax[1];
                  minMax[1] = temp;
                }
                minMax[0] *= transform[0];
                minMax[1] *= transform[0];
                if (transform[3] < 0) {
                  temp = minMax[2];
                  minMax[2] = minMax[3];
                  minMax[3] = temp;
                }
                minMax[2] *= transform[3];
                minMax[3] *= transform[3];
              } else {
                temp = minMax[0];
                minMax[0] = minMax[2];
                minMax[2] = temp;
                temp = minMax[1];
                minMax[1] = minMax[3];
                minMax[3] = temp;
                if (transform[1] < 0) {
                  temp = minMax[2];
                  minMax[2] = minMax[3];
                  minMax[3] = temp;
                }
                minMax[2] *= transform[1];
                minMax[3] *= transform[1];
                if (transform[2] < 0) {
                  temp = minMax[0];
                  minMax[0] = minMax[1];
                  minMax[1] = temp;
                }
                minMax[0] *= transform[2];
                minMax[1] *= transform[2];
              }
              minMax[0] += transform[4];
              minMax[1] += transform[4];
              minMax[2] += transform[5];
              minMax[3] += transform[5];
            }
          }, {
            key: "transform",
            value: function transform(m1, m2) {
              return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
            }
          }, {
            key: "applyTransform",
            value: function applyTransform(p, m) {
              var xt = p[0] * m[0] + p[1] * m[2] + m[4];
              var yt = p[0] * m[1] + p[1] * m[3] + m[5];
              return [xt, yt];
            }
          }, {
            key: "applyInverseTransform",
            value: function applyInverseTransform(p, m) {
              var d = m[0] * m[3] - m[1] * m[2];
              var xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
              var yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
              return [xt, yt];
            }
          }, {
            key: "getAxialAlignedBoundingBox",
            value: function getAxialAlignedBoundingBox(r, m) {
              var p1 = this.applyTransform(r, m);
              var p2 = this.applyTransform(r.slice(2, 4), m);
              var p3 = this.applyTransform([r[0], r[3]], m);
              var p4 = this.applyTransform([r[2], r[1]], m);
              return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];
            }
          }, {
            key: "inverseTransform",
            value: function inverseTransform(m) {
              var d = m[0] * m[3] - m[1] * m[2];
              return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];
            }
          }, {
            key: "singularValueDecompose2dScale",
            value: function singularValueDecompose2dScale(m) {
              var transpose = [m[0], m[2], m[1], m[3]];
              var a = m[0] * transpose[0] + m[1] * transpose[2];
              var b = m[0] * transpose[1] + m[1] * transpose[3];
              var c = m[2] * transpose[0] + m[3] * transpose[2];
              var d = m[2] * transpose[1] + m[3] * transpose[3];
              var first = (a + d) / 2;
              var second = Math.sqrt(Math.pow(a + d, 2) - 4 * (a * d - c * b)) / 2;
              var sx = first + second || 1;
              var sy = first - second || 1;
              return [Math.sqrt(sx), Math.sqrt(sy)];
            }
          }, {
            key: "normalizeRect",
            value: function normalizeRect(rect) {
              var r = rect.slice(0);
              if (rect[0] > rect[2]) {
                r[0] = rect[2];
                r[2] = rect[0];
              }
              if (rect[1] > rect[3]) {
                r[1] = rect[3];
                r[3] = rect[1];
              }
              return r;
            }
          }, {
            key: "intersect",
            value: function intersect(rect1, rect2) {
              var xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));
              var xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));
              if (xLow > xHigh) {
                return null;
              }
              var yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));
              var yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));
              if (yLow > yHigh) {
                return null;
              }
              return [xLow, yLow, xHigh, yHigh];
            }
          }, {
            key: "bezierBoundingBox",
            value: function bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {
              var tvalues = [],
                bounds = [[], []];
              var a, b, c, t, t1, t2, b2ac, sqrtb2ac;
              for (var i = 0; i < 2; ++i) {
                if (i === 0) {
                  b = 6 * x0 - 12 * x1 + 6 * x2;
                  a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
                  c = 3 * x1 - 3 * x0;
                } else {
                  b = 6 * y0 - 12 * y1 + 6 * y2;
                  a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
                  c = 3 * y1 - 3 * y0;
                }
                if (Math.abs(a) < 1e-12) {
                  if (Math.abs(b) < 1e-12) {
                    continue;
                  }
                  t = -c / b;
                  if (0 < t && t < 1) {
                    tvalues.push(t);
                  }
                  continue;
                }
                b2ac = b * b - 4 * c * a;
                sqrtb2ac = Math.sqrt(b2ac);
                if (b2ac < 0) {
                  continue;
                }
                t1 = (-b + sqrtb2ac) / (2 * a);
                if (0 < t1 && t1 < 1) {
                  tvalues.push(t1);
                }
                t2 = (-b - sqrtb2ac) / (2 * a);
                if (0 < t2 && t2 < 1) {
                  tvalues.push(t2);
                }
              }
              var j = tvalues.length,
                mt;
              var jlen = j;
              while (j--) {
                t = tvalues[j];
                mt = 1 - t;
                bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
                bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
              }
              bounds[0][jlen] = x0;
              bounds[1][jlen] = y0;
              bounds[0][jlen + 1] = x3;
              bounds[1][jlen + 1] = y3;
              bounds[0].length = bounds[1].length = jlen + 2;
              return [Math.min.apply(Math, _toConsumableArray(bounds[0])), Math.min.apply(Math, _toConsumableArray(bounds[1])), Math.max.apply(Math, _toConsumableArray(bounds[0])), Math.max.apply(Math, _toConsumableArray(bounds[1]))];
            }
          }]);
          return Util;
        }();
        exports.Util = Util;
        var PDFStringTranslateTable = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac];
        function stringToPDFString(str) {
          if (str[0] >= "\xEF") {
            var encoding;
            if (str[0] === "\xFE" && str[1] === "\xFF") {
              encoding = "utf-16be";
            } else if (str[0] === "\xFF" && str[1] === "\xFE") {
              encoding = "utf-16le";
            } else if (str[0] === "\xEF" && str[1] === "\xBB" && str[2] === "\xBF") {
              encoding = "utf-8";
            }
            if (encoding) {
              try {
                var decoder = new TextDecoder(encoding, {
                  fatal: true
                });
                var buffer = stringToBytes(str);
                return decoder.decode(buffer);
              } catch (ex) {
                warn("stringToPDFString: \"".concat(ex, "\"."));
              }
            }
          }
          var strBuf = [];
          for (var i = 0, ii = str.length; i < ii; i++) {
            var code = PDFStringTranslateTable[str.charCodeAt(i)];
            strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
          }
          return strBuf.join("");
        }
        function stringToUTF8String(str) {
          return decodeURIComponent(escape(str));
        }
        function utf8StringToString(str) {
          return unescape(encodeURIComponent(str));
        }
        function isArrayBuffer(v) {
          return _typeof(v) === "object" && (v === null || v === void 0 ? void 0 : v.byteLength) !== undefined;
        }
        function isArrayEqual(arr1, arr2) {
          if (arr1.length !== arr2.length) {
            return false;
          }
          for (var i = 0, ii = arr1.length; i < ii; i++) {
            if (arr1[i] !== arr2[i]) {
              return false;
            }
          }
          return true;
        }
        function getModificationDate() {
          var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
          var buffer = [date.getUTCFullYear().toString(), (date.getUTCMonth() + 1).toString().padStart(2, "0"), date.getUTCDate().toString().padStart(2, "0"), date.getUTCHours().toString().padStart(2, "0"), date.getUTCMinutes().toString().padStart(2, "0"), date.getUTCSeconds().toString().padStart(2, "0")];
          return buffer.join("");
        }
        var _settled = /*#__PURE__*/new WeakMap();
        var PromiseCapability = /*#__PURE__*/function () {
          function PromiseCapability() {
            var _this4 = this;
            _classCallCheck(this, PromiseCapability);
            _classPrivateFieldInitSpec(this, _settled, {
              writable: true,
              value: false
            });
            this.promise = new Promise(function (resolve, reject) {
              _this4.resolve = function (data) {
                _classPrivateFieldSet(_this4, _settled, true);
                resolve(data);
              };
              _this4.reject = function (reason) {
                _classPrivateFieldSet(_this4, _settled, true);
                reject(reason);
              };
            });
          }
          _createClass(PromiseCapability, [{
            key: "settled",
            get: function get() {
              return _classPrivateFieldGet(this, _settled);
            }
          }]);
          return PromiseCapability;
        }();
        exports.PromiseCapability = PromiseCapability;
        var NormalizeRegex = null;
        var NormalizationMap = null;
        function normalizeUnicode(str) {
          if (!NormalizeRegex) {
            NormalizeRegex = /([\xA0\xB5\u037E\u0EB3\u2000-\u200A\u202F\u2126\uFB00-\uFB04\uFB06\uFB20-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBA1\uFBA4-\uFBA9\uFBAE-\uFBB1\uFBD3-\uFBDC\uFBDE-\uFBE7\uFBEA-\uFBF8\uFBFC\uFBFD\uFC00-\uFC5D\uFC64-\uFCF1\uFCF5-\uFD3D\uFD88\uFDF4\uFDFA\uFDFB\uFE71\uFE77\uFE79\uFE7B\uFE7D]+)|(\uFB05+)/g;
            NormalizationMap = new Map([["ﬅ", "ſt"]]);
          }
          return str.replaceAll(NormalizeRegex, function (_, p1, p2) {
            return p1 ? p1.normalize("NFKC") : NormalizationMap.get(p2);
          });
        }

        /***/
      }, /* 2 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.build = exports.RenderTask = exports.PDFWorkerUtil = exports.PDFWorker = exports.PDFPageProxy = exports.PDFDocumentProxy = exports.PDFDocumentLoadingTask = exports.PDFDataRangeTransport = exports.LoopbackPort = exports.DefaultStandardFontDataFactory = exports.DefaultFilterFactory = exports.DefaultCanvasFactory = exports.DefaultCMapReaderFactory = void 0;
        exports.getDocument = getDocument;
        exports.version = void 0;
        var _util = __w_pdfjs_require__(1);
        var _annotation_storage = __w_pdfjs_require__(3);
        var _display_utils = __w_pdfjs_require__(6);
        var _font_loader = __w_pdfjs_require__(9);
        var _canvas = __w_pdfjs_require__(11);
        var _worker_options = __w_pdfjs_require__(14);
        var _is_node = __w_pdfjs_require__(10);
        var _message_handler = __w_pdfjs_require__(15);
        var _metadata = __w_pdfjs_require__(16);
        var _optional_content_config = __w_pdfjs_require__(17);
        var _transport_stream = __w_pdfjs_require__(18);
        var _xfa_text = __w_pdfjs_require__(19);
        var DEFAULT_RANGE_CHUNK_SIZE = 65536;
        var RENDERING_CANCELLED_TIMEOUT = 100;
        var DELAYED_CLEANUP_TIMEOUT = 5000;
        var DefaultCanvasFactory = _is_node.isNodeJS ? __w_pdfjs_require__(20).NodeCanvasFactory : _display_utils.DOMCanvasFactory;
        exports.DefaultCanvasFactory = DefaultCanvasFactory;
        var DefaultCMapReaderFactory = _is_node.isNodeJS ? __w_pdfjs_require__(20).NodeCMapReaderFactory : _display_utils.DOMCMapReaderFactory;
        exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;
        var DefaultFilterFactory = _is_node.isNodeJS ? __w_pdfjs_require__(20).NodeFilterFactory : _display_utils.DOMFilterFactory;
        exports.DefaultFilterFactory = DefaultFilterFactory;
        var DefaultStandardFontDataFactory = _is_node.isNodeJS ? __w_pdfjs_require__(20).NodeStandardFontDataFactory : _display_utils.DOMStandardFontDataFactory;
        exports.DefaultStandardFontDataFactory = DefaultStandardFontDataFactory;
        var createPDFNetworkStream;
        {
          if (_is_node.isNodeJS) {
            var _w_pdfjs_require__ = __w_pdfjs_require__(21),
              PDFNodeStream = _w_pdfjs_require__.PDFNodeStream;
            createPDFNetworkStream = function createPDFNetworkStream(params) {
              return new PDFNodeStream(params);
            };
          } else {
            var _w_pdfjs_require__2 = __w_pdfjs_require__(24),
              PDFNetworkStream = _w_pdfjs_require__2.PDFNetworkStream;
            var _w_pdfjs_require__3 = __w_pdfjs_require__(25),
              PDFFetchStream = _w_pdfjs_require__3.PDFFetchStream;
            createPDFNetworkStream = function createPDFNetworkStream(params) {
              return (0, _display_utils.isValidFetchUrl)(params.url) ? new PDFFetchStream(params) : new PDFNetworkStream(params);
            };
          }
        }
        function getDocument(src) {
          var _src$password, _src$length;
          if (typeof src === "string" || src instanceof URL) {
            src = {
              url: src
            };
          } else if ((0, _util.isArrayBuffer)(src)) {
            src = {
              data: src
            };
          }
          if (_typeof(src) !== "object") {
            throw new Error("Invalid parameter in getDocument, need parameter object.");
          }
          if (!src.url && !src.data && !src.range) {
            throw new Error("Invalid parameter object: need either .data, .range or .url");
          }
          var task = new PDFDocumentLoadingTask();
          var docId = task.docId;
          var url = src.url ? getUrlProp(src.url) : null;
          var data = src.data ? getDataProp(src.data) : null;
          var httpHeaders = src.httpHeaders || null;
          var withCredentials = src.withCredentials === true;
          var password = (_src$password = src.password) !== null && _src$password !== void 0 ? _src$password : null;
          var rangeTransport = src.range instanceof PDFDataRangeTransport ? src.range : null;
          var rangeChunkSize = Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0 ? src.rangeChunkSize : DEFAULT_RANGE_CHUNK_SIZE;
          var worker = src.worker instanceof PDFWorker ? src.worker : null;
          var verbosity = src.verbosity;
          var docBaseUrl = typeof src.docBaseUrl === "string" && !(0, _display_utils.isDataScheme)(src.docBaseUrl) ? src.docBaseUrl : null;
          var cMapUrl = typeof src.cMapUrl === "string" ? src.cMapUrl : null;
          var cMapPacked = src.cMapPacked !== false;
          var CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;
          var standardFontDataUrl = typeof src.standardFontDataUrl === "string" ? src.standardFontDataUrl : null;
          var StandardFontDataFactory = src.StandardFontDataFactory || DefaultStandardFontDataFactory;
          var ignoreErrors = src.stopAtErrors !== true;
          var maxImageSize = Number.isInteger(src.maxImageSize) && src.maxImageSize > -1 ? src.maxImageSize : -1;
          var isEvalSupported = src.isEvalSupported !== false;
          var isOffscreenCanvasSupported = typeof src.isOffscreenCanvasSupported === "boolean" ? src.isOffscreenCanvasSupported : !_is_node.isNodeJS;
          var canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes) ? src.canvasMaxAreaInBytes : -1;
          var disableFontFace = typeof src.disableFontFace === "boolean" ? src.disableFontFace : _is_node.isNodeJS;
          var fontExtraProperties = src.fontExtraProperties === true;
          var enableXfa = src.enableXfa === true;
          var ownerDocument = src.ownerDocument || globalThis.document;
          var disableRange = src.disableRange === true;
          var disableStream = src.disableStream === true;
          var disableAutoFetch = src.disableAutoFetch === true;
          var pdfBug = src.pdfBug === true;
          var length = rangeTransport ? rangeTransport.length : (_src$length = src.length) !== null && _src$length !== void 0 ? _src$length : NaN;
          var useSystemFonts = typeof src.useSystemFonts === "boolean" ? src.useSystemFonts : !_is_node.isNodeJS && !disableFontFace;
          var useWorkerFetch = typeof src.useWorkerFetch === "boolean" ? src.useWorkerFetch : CMapReaderFactory === _display_utils.DOMCMapReaderFactory && StandardFontDataFactory === _display_utils.DOMStandardFontDataFactory && (0, _display_utils.isValidFetchUrl)(cMapUrl, document.baseURI) && (0, _display_utils.isValidFetchUrl)(standardFontDataUrl, document.baseURI);
          var canvasFactory = src.canvasFactory || new DefaultCanvasFactory({
            ownerDocument: ownerDocument
          });
          var filterFactory = src.filterFactory || new DefaultFilterFactory({
            docId: docId,
            ownerDocument: ownerDocument
          });
          var styleElement = null;
          (0, _util.setVerbosityLevel)(verbosity);
          var transportFactory = {
            canvasFactory: canvasFactory,
            filterFactory: filterFactory
          };
          if (!useWorkerFetch) {
            transportFactory.cMapReaderFactory = new CMapReaderFactory({
              baseUrl: cMapUrl,
              isCompressed: cMapPacked
            });
            transportFactory.standardFontDataFactory = new StandardFontDataFactory({
              baseUrl: standardFontDataUrl
            });
          }
          if (!worker) {
            var workerParams = {
              verbosity: verbosity,
              port: _worker_options.GlobalWorkerOptions.workerPort
            };
            worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);
            task._worker = worker;
          }
          var fetchDocParams = {
            docId: docId,
            apiVersion: '3.8.162',
            data: data,
            password: password,
            disableAutoFetch: disableAutoFetch,
            rangeChunkSize: rangeChunkSize,
            length: length,
            docBaseUrl: docBaseUrl,
            enableXfa: enableXfa,
            evaluatorOptions: {
              maxImageSize: maxImageSize,
              disableFontFace: disableFontFace,
              ignoreErrors: ignoreErrors,
              isEvalSupported: isEvalSupported,
              isOffscreenCanvasSupported: isOffscreenCanvasSupported,
              canvasMaxAreaInBytes: canvasMaxAreaInBytes,
              fontExtraProperties: fontExtraProperties,
              useSystemFonts: useSystemFonts,
              cMapUrl: useWorkerFetch ? cMapUrl : null,
              standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null
            }
          };
          var transportParams = {
            ignoreErrors: ignoreErrors,
            isEvalSupported: isEvalSupported,
            disableFontFace: disableFontFace,
            fontExtraProperties: fontExtraProperties,
            enableXfa: enableXfa,
            ownerDocument: ownerDocument,
            disableAutoFetch: disableAutoFetch,
            pdfBug: pdfBug,
            styleElement: styleElement
          };
          worker.promise.then(function () {
            if (task.destroyed) {
              throw new Error("Loading aborted");
            }
            var workerIdPromise = _fetchDocument(worker, fetchDocParams);
            var networkStreamPromise = new Promise(function (resolve) {
              var networkStream;
              if (rangeTransport) {
                networkStream = new _transport_stream.PDFDataTransportStream({
                  length: length,
                  initialData: rangeTransport.initialData,
                  progressiveDone: rangeTransport.progressiveDone,
                  contentDispositionFilename: rangeTransport.contentDispositionFilename,
                  disableRange: disableRange,
                  disableStream: disableStream
                }, rangeTransport);
              } else if (!data) {
                networkStream = createPDFNetworkStream({
                  url: url,
                  length: length,
                  httpHeaders: httpHeaders,
                  withCredentials: withCredentials,
                  rangeChunkSize: rangeChunkSize,
                  disableRange: disableRange,
                  disableStream: disableStream
                });
              }
              resolve(networkStream);
            });
            return Promise.all([workerIdPromise, networkStreamPromise]).then(function (_ref) {
              var _ref2 = _slicedToArray(_ref, 2),
                workerId = _ref2[0],
                networkStream = _ref2[1];
              if (task.destroyed) {
                throw new Error("Loading aborted");
              }
              var messageHandler = new _message_handler.MessageHandler(docId, workerId, worker.port);
              var transport = new WorkerTransport(messageHandler, task, networkStream, transportParams, transportFactory);
              task._transport = transport;
              messageHandler.send("Ready", null);
            });
          }).catch(task._capability.reject);
          return task;
        }
        function _fetchDocument(_x2, _x3) {
          return _fetchDocument2.apply(this, arguments);
        }
        function _fetchDocument2() {
          _fetchDocument2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(worker, source) {
            var workerId;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  if (!worker.destroyed) {
                    _context6.next = 2;
                    break;
                  }
                  throw new Error("Worker was destroyed");
                case 2:
                  _context6.next = 4;
                  return worker.messageHandler.sendWithPromise("GetDocRequest", source, source.data ? [source.data.buffer] : null);
                case 4:
                  workerId = _context6.sent;
                  if (!worker.destroyed) {
                    _context6.next = 7;
                    break;
                  }
                  throw new Error("Worker was destroyed");
                case 7:
                  return _context6.abrupt("return", workerId);
                case 8:
                case "end":
                  return _context6.stop();
              }
            }, _callee6);
          }));
          return _fetchDocument2.apply(this, arguments);
        }
        function getUrlProp(val) {
          if (val instanceof URL) {
            return val.href;
          }
          try {
            return new URL(val, window.location).href;
          } catch (_unused4) {
            if (_is_node.isNodeJS && typeof val === "string") {
              return val;
            }
          }
          throw new Error("Invalid PDF url data: " + "either string or URL-object is expected in the url property.");
        }
        function getDataProp(val) {
          if (_is_node.isNodeJS && typeof Buffer !== "undefined" && val instanceof Buffer) {
            throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");
          }
          if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {
            return val;
          }
          if (typeof val === "string") {
            return (0, _util.stringToBytes)(val);
          }
          if (_typeof(val) === "object" && !isNaN(val === null || val === void 0 ? void 0 : val.length) || (0, _util.isArrayBuffer)(val)) {
            return new Uint8Array(val);
          }
          throw new Error("Invalid PDF binary data: either TypedArray, " + "string, or array-like object is expected in the data property.");
        }
        var PDFDocumentLoadingTask = /*#__PURE__*/function () {
          function PDFDocumentLoadingTask() {
            var _PDFDocumentLoadingTa, _PDFDocumentLoadingTa2;
            _classCallCheck(this, PDFDocumentLoadingTask);
            this._capability = new _util.PromiseCapability();
            this._transport = null;
            this._worker = null;
            this.docId = "d".concat((_classStaticPrivateFieldSpecSet(PDFDocumentLoadingTask, PDFDocumentLoadingTask, _docId, (_PDFDocumentLoadingTa = _classStaticPrivateFieldSpecGet(PDFDocumentLoadingTask, PDFDocumentLoadingTask, _docId), _PDFDocumentLoadingTa2 = _PDFDocumentLoadingTa++, _PDFDocumentLoadingTa)), _PDFDocumentLoadingTa2));
            this.destroyed = false;
            this.onPassword = null;
            this.onProgress = null;
          }
          _createClass(PDFDocumentLoadingTask, [{
            key: "promise",
            get: function get() {
              return this._capability.promise;
            }
          }, {
            key: "destroy",
            value: function () {
              var _destroy = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                var _this$_transport;
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      this.destroyed = true;
                      _context.next = 3;
                      return (_this$_transport = this._transport) === null || _this$_transport === void 0 ? void 0 : _this$_transport.destroy();
                    case 3:
                      this._transport = null;
                      if (this._worker) {
                        this._worker.destroy();
                        this._worker = null;
                      }
                    case 5:
                    case "end":
                      return _context.stop();
                  }
                }, _callee, this);
              }));
              function destroy() {
                return _destroy.apply(this, arguments);
              }
              return destroy;
            }()
          }]);
          return PDFDocumentLoadingTask;
        }();
        var _docId = {
          writable: true,
          value: 0
        };
        exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;
        var PDFDataRangeTransport = /*#__PURE__*/function () {
          function PDFDataRangeTransport(length, initialData) {
            var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            _classCallCheck(this, PDFDataRangeTransport);
            this.length = length;
            this.initialData = initialData;
            this.progressiveDone = progressiveDone;
            this.contentDispositionFilename = contentDispositionFilename;
            this._rangeListeners = [];
            this._progressListeners = [];
            this._progressiveReadListeners = [];
            this._progressiveDoneListeners = [];
            this._readyCapability = new _util.PromiseCapability();
          }
          _createClass(PDFDataRangeTransport, [{
            key: "addRangeListener",
            value: function addRangeListener(listener) {
              this._rangeListeners.push(listener);
            }
          }, {
            key: "addProgressListener",
            value: function addProgressListener(listener) {
              this._progressListeners.push(listener);
            }
          }, {
            key: "addProgressiveReadListener",
            value: function addProgressiveReadListener(listener) {
              this._progressiveReadListeners.push(listener);
            }
          }, {
            key: "addProgressiveDoneListener",
            value: function addProgressiveDoneListener(listener) {
              this._progressiveDoneListeners.push(listener);
            }
          }, {
            key: "onDataRange",
            value: function onDataRange(begin, chunk) {
              var _iterator2 = _createForOfIteratorHelper(this._rangeListeners),
                _step2;
              try {
                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                  var listener = _step2.value;
                  listener(begin, chunk);
                }
              } catch (err) {
                _iterator2.e(err);
              } finally {
                _iterator2.f();
              }
            }
          }, {
            key: "onDataProgress",
            value: function onDataProgress(loaded, total) {
              var _this5 = this;
              this._readyCapability.promise.then(function () {
                var _iterator3 = _createForOfIteratorHelper(_this5._progressListeners),
                  _step3;
                try {
                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                    var listener = _step3.value;
                    listener(loaded, total);
                  }
                } catch (err) {
                  _iterator3.e(err);
                } finally {
                  _iterator3.f();
                }
              });
            }
          }, {
            key: "onDataProgressiveRead",
            value: function onDataProgressiveRead(chunk) {
              var _this6 = this;
              this._readyCapability.promise.then(function () {
                var _iterator4 = _createForOfIteratorHelper(_this6._progressiveReadListeners),
                  _step4;
                try {
                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                    var listener = _step4.value;
                    listener(chunk);
                  }
                } catch (err) {
                  _iterator4.e(err);
                } finally {
                  _iterator4.f();
                }
              });
            }
          }, {
            key: "onDataProgressiveDone",
            value: function onDataProgressiveDone() {
              var _this7 = this;
              this._readyCapability.promise.then(function () {
                var _iterator5 = _createForOfIteratorHelper(_this7._progressiveDoneListeners),
                  _step5;
                try {
                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                    var listener = _step5.value;
                    listener();
                  }
                } catch (err) {
                  _iterator5.e(err);
                } finally {
                  _iterator5.f();
                }
              });
            }
          }, {
            key: "transportReady",
            value: function transportReady() {
              this._readyCapability.resolve();
            }
          }, {
            key: "requestDataRange",
            value: function requestDataRange(begin, end) {
              (0, _util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange");
            }
          }, {
            key: "abort",
            value: function abort() {}
          }]);
          return PDFDataRangeTransport;
        }();
        exports.PDFDataRangeTransport = PDFDataRangeTransport;
        var PDFDocumentProxy = /*#__PURE__*/function () {
          function PDFDocumentProxy(pdfInfo, transport) {
            _classCallCheck(this, PDFDocumentProxy);
            this._pdfInfo = pdfInfo;
            this._transport = transport;
          }
          _createClass(PDFDocumentProxy, [{
            key: "annotationStorage",
            get: function get() {
              return this._transport.annotationStorage;
            }
          }, {
            key: "filterFactory",
            get: function get() {
              return this._transport.filterFactory;
            }
          }, {
            key: "numPages",
            get: function get() {
              return this._pdfInfo.numPages;
            }
          }, {
            key: "fingerprints",
            get: function get() {
              return this._pdfInfo.fingerprints;
            }
          }, {
            key: "isPureXfa",
            get: function get() {
              return (0, _util.shadow)(this, "isPureXfa", !!this._transport._htmlForXfa);
            }
          }, {
            key: "allXfaHtml",
            get: function get() {
              return this._transport._htmlForXfa;
            }
          }, {
            key: "getPage",
            value: function getPage(pageNumber) {
              return this._transport.getPage(pageNumber);
            }
          }, {
            key: "getPageIndex",
            value: function getPageIndex(ref) {
              return this._transport.getPageIndex(ref);
            }
          }, {
            key: "getDestinations",
            value: function getDestinations() {
              return this._transport.getDestinations();
            }
          }, {
            key: "getDestination",
            value: function getDestination(id) {
              return this._transport.getDestination(id);
            }
          }, {
            key: "getPageLabels",
            value: function getPageLabels() {
              return this._transport.getPageLabels();
            }
          }, {
            key: "getPageLayout",
            value: function getPageLayout() {
              return this._transport.getPageLayout();
            }
          }, {
            key: "getPageMode",
            value: function getPageMode() {
              return this._transport.getPageMode();
            }
          }, {
            key: "getViewerPreferences",
            value: function getViewerPreferences() {
              return this._transport.getViewerPreferences();
            }
          }, {
            key: "getOpenAction",
            value: function getOpenAction() {
              return this._transport.getOpenAction();
            }
          }, {
            key: "getAttachments",
            value: function getAttachments() {
              return this._transport.getAttachments();
            }
          }, {
            key: "getJavaScript",
            value: function getJavaScript() {
              return this._transport.getJavaScript();
            }
          }, {
            key: "getJSActions",
            value: function getJSActions() {
              return this._transport.getDocJSActions();
            }
          }, {
            key: "getOutline",
            value: function getOutline() {
              return this._transport.getOutline();
            }
          }, {
            key: "getOptionalContentConfig",
            value: function getOptionalContentConfig() {
              return this._transport.getOptionalContentConfig();
            }
          }, {
            key: "getPermissions",
            value: function getPermissions() {
              return this._transport.getPermissions();
            }
          }, {
            key: "getMetadata",
            value: function getMetadata() {
              return this._transport.getMetadata();
            }
          }, {
            key: "getMarkInfo",
            value: function getMarkInfo() {
              return this._transport.getMarkInfo();
            }
          }, {
            key: "getData",
            value: function getData() {
              return this._transport.getData();
            }
          }, {
            key: "saveDocument",
            value: function saveDocument() {
              return this._transport.saveDocument();
            }
          }, {
            key: "getDownloadInfo",
            value: function getDownloadInfo() {
              return this._transport.downloadInfoCapability.promise;
            }
          }, {
            key: "cleanup",
            value: function cleanup() {
              var keepLoadedFonts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);
            }
          }, {
            key: "destroy",
            value: function destroy() {
              return this.loadingTask.destroy();
            }
          }, {
            key: "loadingParams",
            get: function get() {
              return this._transport.loadingParams;
            }
          }, {
            key: "loadingTask",
            get: function get() {
              return this._transport.loadingTask;
            }
          }, {
            key: "getFieldObjects",
            value: function getFieldObjects() {
              return this._transport.getFieldObjects();
            }
          }, {
            key: "hasJSActions",
            value: function hasJSActions() {
              return this._transport.hasJSActions();
            }
          }, {
            key: "getCalculationOrderIds",
            value: function getCalculationOrderIds() {
              return this._transport.getCalculationOrderIds();
            }
          }]);
          return PDFDocumentProxy;
        }();
        exports.PDFDocumentProxy = PDFDocumentProxy;
        var _delayedCleanupTimeout = /*#__PURE__*/new WeakMap();
        var _pendingCleanup = /*#__PURE__*/new WeakMap();
        var _tryCleanup = /*#__PURE__*/new WeakSet();
        var _abortDelayedCleanup = /*#__PURE__*/new WeakSet();
        var PDFPageProxy = /*#__PURE__*/function () {
          function PDFPageProxy(pageIndex, pageInfo, transport) {
            var pdfBug = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
            _classCallCheck(this, PDFPageProxy);
            _classPrivateMethodInitSpec(this, _abortDelayedCleanup);
            _classPrivateMethodInitSpec(this, _tryCleanup);
            _classPrivateFieldInitSpec(this, _delayedCleanupTimeout, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _pendingCleanup, {
              writable: true,
              value: false
            });
            this._pageIndex = pageIndex;
            this._pageInfo = pageInfo;
            this._transport = transport;
            this._stats = pdfBug ? new _display_utils.StatTimer() : null;
            this._pdfBug = pdfBug;
            this.commonObjs = transport.commonObjs;
            this.objs = new PDFObjects();
            this._maybeCleanupAfterRender = false;
            this._intentStates = new Map();
            this.destroyed = false;
          }
          _createClass(PDFPageProxy, [{
            key: "pageNumber",
            get: function get() {
              return this._pageIndex + 1;
            }
          }, {
            key: "rotate",
            get: function get() {
              return this._pageInfo.rotate;
            }
          }, {
            key: "ref",
            get: function get() {
              return this._pageInfo.ref;
            }
          }, {
            key: "userUnit",
            get: function get() {
              return this._pageInfo.userUnit;
            }
          }, {
            key: "view",
            get: function get() {
              return this._pageInfo.view;
            }
          }, {
            key: "getViewport",
            value: function getViewport() {
              var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                scale = _ref3.scale,
                _ref3$rotation = _ref3.rotation,
                rotation = _ref3$rotation === void 0 ? this.rotate : _ref3$rotation,
                _ref3$offsetX = _ref3.offsetX,
                offsetX = _ref3$offsetX === void 0 ? 0 : _ref3$offsetX,
                _ref3$offsetY = _ref3.offsetY,
                offsetY = _ref3$offsetY === void 0 ? 0 : _ref3$offsetY,
                _ref3$dontFlip = _ref3.dontFlip,
                dontFlip = _ref3$dontFlip === void 0 ? false : _ref3$dontFlip;
              return new _display_utils.PageViewport({
                viewBox: this.view,
                scale: scale,
                rotation: rotation,
                offsetX: offsetX,
                offsetY: offsetY,
                dontFlip: dontFlip
              });
            }
          }, {
            key: "getAnnotations",
            value: function getAnnotations() {
              var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref4$intent = _ref4.intent,
                intent = _ref4$intent === void 0 ? "display" : _ref4$intent;
              var intentArgs = this._transport.getRenderingIntent(intent);
              return this._transport.getAnnotations(this._pageIndex, intentArgs.renderingIntent);
            }
          }, {
            key: "getJSActions",
            value: function getJSActions() {
              return this._transport.getPageJSActions(this._pageIndex);
            }
          }, {
            key: "filterFactory",
            get: function get() {
              return this._transport.filterFactory;
            }
          }, {
            key: "isPureXfa",
            get: function get() {
              return (0, _util.shadow)(this, "isPureXfa", !!this._transport._htmlForXfa);
            }
          }, {
            key: "getXfa",
            value: function () {
              var _getXfa = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
                var _this$_transport$_htm;
                return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                  while (1) switch (_context2.prev = _context2.next) {
                    case 0:
                      return _context2.abrupt("return", ((_this$_transport$_htm = this._transport._htmlForXfa) === null || _this$_transport$_htm === void 0 ? void 0 : _this$_transport$_htm.children[this._pageIndex]) || null);
                    case 1:
                    case "end":
                      return _context2.stop();
                  }
                }, _callee2, this);
              }));
              function getXfa() {
                return _getXfa.apply(this, arguments);
              }
              return getXfa;
            }()
          }, {
            key: "render",
            value: function render(_ref5) {
              var _this$_stats,
                _this8 = this,
                _intentState;
              var canvasContext = _ref5.canvasContext,
                viewport = _ref5.viewport,
                _ref5$intent = _ref5.intent,
                intent = _ref5$intent === void 0 ? "display" : _ref5$intent,
                _ref5$annotationMode = _ref5.annotationMode,
                annotationMode = _ref5$annotationMode === void 0 ? _util.AnnotationMode.ENABLE : _ref5$annotationMode,
                _ref5$transform = _ref5.transform,
                transform = _ref5$transform === void 0 ? null : _ref5$transform,
                _ref5$background = _ref5.background,
                background = _ref5$background === void 0 ? null : _ref5$background,
                _ref5$optionalContent = _ref5.optionalContentConfigPromise,
                optionalContentConfigPromise = _ref5$optionalContent === void 0 ? null : _ref5$optionalContent,
                _ref5$annotationCanva = _ref5.annotationCanvasMap,
                annotationCanvasMap = _ref5$annotationCanva === void 0 ? null : _ref5$annotationCanva,
                _ref5$pageColors = _ref5.pageColors,
                pageColors = _ref5$pageColors === void 0 ? null : _ref5$pageColors,
                _ref5$printAnnotation = _ref5.printAnnotationStorage,
                printAnnotationStorage = _ref5$printAnnotation === void 0 ? null : _ref5$printAnnotation;
              (_this$_stats = this._stats) === null || _this$_stats === void 0 ? void 0 : _this$_stats.time("Overall");
              var intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage);
              _classPrivateFieldSet(this, _pendingCleanup, false);
              _classPrivateMethodGet(this, _abortDelayedCleanup, _abortDelayedCleanup2).call(this);
              if (!optionalContentConfigPromise) {
                optionalContentConfigPromise = this._transport.getOptionalContentConfig();
              }
              var intentState = this._intentStates.get(intentArgs.cacheKey);
              if (!intentState) {
                intentState = Object.create(null);
                this._intentStates.set(intentArgs.cacheKey, intentState);
              }
              if (intentState.streamReaderCancelTimeout) {
                clearTimeout(intentState.streamReaderCancelTimeout);
                intentState.streamReaderCancelTimeout = null;
              }
              var intentPrint = !!(intentArgs.renderingIntent & _util.RenderingIntentFlag.PRINT);
              if (!intentState.displayReadyCapability) {
                var _this$_stats2;
                intentState.displayReadyCapability = new _util.PromiseCapability();
                intentState.operatorList = {
                  fnArray: [],
                  argsArray: [],
                  lastChunk: false,
                  separateAnnots: null
                };
                (_this$_stats2 = this._stats) === null || _this$_stats2 === void 0 ? void 0 : _this$_stats2.time("Page Request");
                this._pumpOperatorList(intentArgs);
              }
              var complete = function complete(error) {
                var _this8$_stats, _this8$_stats2;
                intentState.renderTasks.delete(internalRenderTask);
                if (_this8._maybeCleanupAfterRender || intentPrint) {
                  _classPrivateFieldSet(_this8, _pendingCleanup, true);
                }
                _classPrivateMethodGet(_this8, _tryCleanup, _tryCleanup2).call(_this8, !intentPrint);
                if (error) {
                  internalRenderTask.capability.reject(error);
                  _this8._abortOperatorList({
                    intentState: intentState,
                    reason: error instanceof Error ? error : new Error(error)
                  });
                } else {
                  internalRenderTask.capability.resolve();
                }
                (_this8$_stats = _this8._stats) === null || _this8$_stats === void 0 ? void 0 : _this8$_stats.timeEnd("Rendering");
                (_this8$_stats2 = _this8._stats) === null || _this8$_stats2 === void 0 ? void 0 : _this8$_stats2.timeEnd("Overall");
              };
              var internalRenderTask = new InternalRenderTask({
                callback: complete,
                params: {
                  canvasContext: canvasContext,
                  viewport: viewport,
                  transform: transform,
                  background: background
                },
                objs: this.objs,
                commonObjs: this.commonObjs,
                annotationCanvasMap: annotationCanvasMap,
                operatorList: intentState.operatorList,
                pageIndex: this._pageIndex,
                canvasFactory: this._transport.canvasFactory,
                filterFactory: this._transport.filterFactory,
                useRequestAnimationFrame: !intentPrint,
                pdfBug: this._pdfBug,
                pageColors: pageColors
              });
              ((_intentState = intentState).renderTasks || (_intentState.renderTasks = new Set())).add(internalRenderTask);
              var renderTask = internalRenderTask.task;
              Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(function (_ref6) {
                var _this8$_stats3;
                var _ref7 = _slicedToArray(_ref6, 2),
                  transparency = _ref7[0],
                  optionalContentConfig = _ref7[1];
                if (_this8.destroyed) {
                  complete();
                  return;
                }
                (_this8$_stats3 = _this8._stats) === null || _this8$_stats3 === void 0 ? void 0 : _this8$_stats3.time("Rendering");
                internalRenderTask.initializeGraphics({
                  transparency: transparency,
                  optionalContentConfig: optionalContentConfig
                });
                internalRenderTask.operatorListChanged();
              }).catch(complete);
              return renderTask;
            }
          }, {
            key: "getOperatorList",
            value: function getOperatorList() {
              var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref8$intent = _ref8.intent,
                intent = _ref8$intent === void 0 ? "display" : _ref8$intent,
                _ref8$annotationMode = _ref8.annotationMode,
                annotationMode = _ref8$annotationMode === void 0 ? _util.AnnotationMode.ENABLE : _ref8$annotationMode,
                _ref8$printAnnotation = _ref8.printAnnotationStorage,
                printAnnotationStorage = _ref8$printAnnotation === void 0 ? null : _ref8$printAnnotation;
              function operatorListChanged() {
                if (intentState.operatorList.lastChunk) {
                  intentState.opListReadCapability.resolve(intentState.operatorList);
                  intentState.renderTasks.delete(opListTask);
                }
              }
              var intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, true);
              var intentState = this._intentStates.get(intentArgs.cacheKey);
              if (!intentState) {
                intentState = Object.create(null);
                this._intentStates.set(intentArgs.cacheKey, intentState);
              }
              var opListTask;
              if (!intentState.opListReadCapability) {
                var _intentState2, _this$_stats3;
                opListTask = Object.create(null);
                opListTask.operatorListChanged = operatorListChanged;
                intentState.opListReadCapability = new _util.PromiseCapability();
                ((_intentState2 = intentState).renderTasks || (_intentState2.renderTasks = new Set())).add(opListTask);
                intentState.operatorList = {
                  fnArray: [],
                  argsArray: [],
                  lastChunk: false,
                  separateAnnots: null
                };
                (_this$_stats3 = this._stats) === null || _this$_stats3 === void 0 ? void 0 : _this$_stats3.time("Page Request");
                this._pumpOperatorList(intentArgs);
              }
              return intentState.opListReadCapability.promise;
            }
          }, {
            key: "streamTextContent",
            value: function streamTextContent() {
              var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref9$includeMarkedCo = _ref9.includeMarkedContent,
                includeMarkedContent = _ref9$includeMarkedCo === void 0 ? false : _ref9$includeMarkedCo,
                _ref9$disableNormaliz = _ref9.disableNormalization,
                disableNormalization = _ref9$disableNormaliz === void 0 ? false : _ref9$disableNormaliz;
              var TEXT_CONTENT_CHUNK_SIZE = 100;
              return this._transport.messageHandler.sendWithStream("GetTextContent", {
                pageIndex: this._pageIndex,
                includeMarkedContent: includeMarkedContent === true,
                disableNormalization: disableNormalization === true
              }, {
                highWaterMark: TEXT_CONTENT_CHUNK_SIZE,
                size: function size(textContent) {
                  return textContent.items.length;
                }
              });
            }
          }, {
            key: "getTextContent",
            value: function getTextContent() {
              var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
              if (this._transport._htmlForXfa) {
                return this.getXfa().then(function (xfa) {
                  return _xfa_text.XfaText.textContent(xfa);
                });
              }
              var readableStream = this.streamTextContent(params);
              return new Promise(function (resolve, reject) {
                function pump() {
                  reader.read().then(function (_ref10) {
                    var _textContent$items;
                    var value = _ref10.value,
                      done = _ref10.done;
                    if (done) {
                      resolve(textContent);
                      return;
                    }
                    Object.assign(textContent.styles, value.styles);
                    (_textContent$items = textContent.items).push.apply(_textContent$items, _toConsumableArray(value.items));
                    pump();
                  }, reject);
                }
                var reader = readableStream.getReader();
                var textContent = {
                  items: [],
                  styles: Object.create(null)
                };
                pump();
              });
            }
          }, {
            key: "getStructTree",
            value: function getStructTree() {
              return this._transport.getStructTree(this._pageIndex);
            }
          }, {
            key: "_destroy",
            value: function _destroy() {
              this.destroyed = true;
              var waitOn = [];
              var _iterator6 = _createForOfIteratorHelper(this._intentStates.values()),
                _step6;
              try {
                for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                  var intentState = _step6.value;
                  this._abortOperatorList({
                    intentState: intentState,
                    reason: new Error("Page was destroyed."),
                    force: true
                  });
                  if (intentState.opListReadCapability) {
                    continue;
                  }
                  var _iterator7 = _createForOfIteratorHelper(intentState.renderTasks),
                    _step7;
                  try {
                    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                      var internalRenderTask = _step7.value;
                      waitOn.push(internalRenderTask.completed);
                      internalRenderTask.cancel();
                    }
                  } catch (err) {
                    _iterator7.e(err);
                  } finally {
                    _iterator7.f();
                  }
                }
              } catch (err) {
                _iterator6.e(err);
              } finally {
                _iterator6.f();
              }
              this.objs.clear();
              _classPrivateFieldSet(this, _pendingCleanup, false);
              _classPrivateMethodGet(this, _abortDelayedCleanup, _abortDelayedCleanup2).call(this);
              return Promise.all(waitOn);
            }
          }, {
            key: "cleanup",
            value: function cleanup() {
              var resetStats = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              _classPrivateFieldSet(this, _pendingCleanup, true);
              var success = _classPrivateMethodGet(this, _tryCleanup, _tryCleanup2).call(this, false);
              if (resetStats && success) {
                this._stats && (this._stats = new _display_utils.StatTimer());
              }
              return success;
            }
          }, {
            key: "_startRenderPage",
            value: function _startRenderPage(transparency, cacheKey) {
              var _this$_stats4, _intentState$displayR;
              var intentState = this._intentStates.get(cacheKey);
              if (!intentState) {
                return;
              }
              (_this$_stats4 = this._stats) === null || _this$_stats4 === void 0 ? void 0 : _this$_stats4.timeEnd("Page Request");
              (_intentState$displayR = intentState.displayReadyCapability) === null || _intentState$displayR === void 0 ? void 0 : _intentState$displayR.resolve(transparency);
            }
          }, {
            key: "_renderPageChunk",
            value: function _renderPageChunk(operatorListChunk, intentState) {
              for (var i = 0, ii = operatorListChunk.length; i < ii; i++) {
                intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);
                intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);
              }
              intentState.operatorList.lastChunk = operatorListChunk.lastChunk;
              intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;
              var _iterator8 = _createForOfIteratorHelper(intentState.renderTasks),
                _step8;
              try {
                for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
                  var internalRenderTask = _step8.value;
                  internalRenderTask.operatorListChanged();
                }
              } catch (err) {
                _iterator8.e(err);
              } finally {
                _iterator8.f();
              }
              if (operatorListChunk.lastChunk) {
                _classPrivateMethodGet(this, _tryCleanup, _tryCleanup2).call(this, true);
              }
            }
          }, {
            key: "_pumpOperatorList",
            value: function _pumpOperatorList(_ref11) {
              var _this9 = this;
              var renderingIntent = _ref11.renderingIntent,
                cacheKey = _ref11.cacheKey,
                annotationStorageSerializable = _ref11.annotationStorageSerializable;
              var map = annotationStorageSerializable.map,
                transfers = annotationStorageSerializable.transfers;
              var readableStream = this._transport.messageHandler.sendWithStream("GetOperatorList", {
                pageIndex: this._pageIndex,
                intent: renderingIntent,
                cacheKey: cacheKey,
                annotationStorage: map
              }, transfers);
              var reader = readableStream.getReader();
              var intentState = this._intentStates.get(cacheKey);
              intentState.streamReader = reader;
              var pump = function pump() {
                reader.read().then(function (_ref12) {
                  var value = _ref12.value,
                    done = _ref12.done;
                  if (done) {
                    intentState.streamReader = null;
                    return;
                  }
                  if (_this9._transport.destroyed) {
                    return;
                  }
                  _this9._renderPageChunk(value, intentState);
                  pump();
                }, function (reason) {
                  intentState.streamReader = null;
                  if (_this9._transport.destroyed) {
                    return;
                  }
                  if (intentState.operatorList) {
                    intentState.operatorList.lastChunk = true;
                    var _iterator9 = _createForOfIteratorHelper(intentState.renderTasks),
                      _step9;
                    try {
                      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                        var internalRenderTask = _step9.value;
                        internalRenderTask.operatorListChanged();
                      }
                    } catch (err) {
                      _iterator9.e(err);
                    } finally {
                      _iterator9.f();
                    }
                    _classPrivateMethodGet(_this9, _tryCleanup, _tryCleanup2).call(_this9, true);
                  }
                  if (intentState.displayReadyCapability) {
                    intentState.displayReadyCapability.reject(reason);
                  } else if (intentState.opListReadCapability) {
                    intentState.opListReadCapability.reject(reason);
                  } else {
                    throw reason;
                  }
                });
              };
              pump();
            }
          }, {
            key: "_abortOperatorList",
            value: function _abortOperatorList(_ref13) {
              var _this10 = this;
              var intentState = _ref13.intentState,
                reason = _ref13.reason,
                _ref13$force = _ref13.force,
                force = _ref13$force === void 0 ? false : _ref13$force;
              if (!intentState.streamReader) {
                return;
              }
              if (intentState.streamReaderCancelTimeout) {
                clearTimeout(intentState.streamReaderCancelTimeout);
                intentState.streamReaderCancelTimeout = null;
              }
              if (!force) {
                if (intentState.renderTasks.size > 0) {
                  return;
                }
                if (reason instanceof _display_utils.RenderingCancelledException) {
                  var delay = RENDERING_CANCELLED_TIMEOUT;
                  if (reason.extraDelay > 0 && reason.extraDelay < 1000) {
                    delay += reason.extraDelay;
                  }
                  intentState.streamReaderCancelTimeout = setTimeout(function () {
                    intentState.streamReaderCancelTimeout = null;
                    _this10._abortOperatorList({
                      intentState: intentState,
                      reason: reason,
                      force: true
                    });
                  }, delay);
                  return;
                }
              }
              intentState.streamReader.cancel(new _util.AbortException(reason.message)).catch(function () {});
              intentState.streamReader = null;
              if (this._transport.destroyed) {
                return;
              }
              var _iterator10 = _createForOfIteratorHelper(this._intentStates),
                _step10;
              try {
                for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                  var _step10$value = _slicedToArray(_step10.value, 2),
                    curCacheKey = _step10$value[0],
                    curIntentState = _step10$value[1];
                  if (curIntentState === intentState) {
                    this._intentStates.delete(curCacheKey);
                    break;
                  }
                }
              } catch (err) {
                _iterator10.e(err);
              } finally {
                _iterator10.f();
              }
              this.cleanup();
            }
          }, {
            key: "stats",
            get: function get() {
              return this._stats;
            }
          }]);
          return PDFPageProxy;
        }();
        function _tryCleanup2() {
          var _this21 = this;
          var delayed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          _classPrivateMethodGet(this, _abortDelayedCleanup, _abortDelayedCleanup2).call(this);
          if (!_classPrivateFieldGet(this, _pendingCleanup) || this.destroyed) {
            return false;
          }
          if (delayed) {
            _classPrivateFieldSet(this, _delayedCleanupTimeout, setTimeout(function () {
              _classPrivateFieldSet(_this21, _delayedCleanupTimeout, null);
              _classPrivateMethodGet(_this21, _tryCleanup, _tryCleanup2).call(_this21, false);
            }, DELAYED_CLEANUP_TIMEOUT));
            return false;
          }
          var _iterator14 = _createForOfIteratorHelper(this._intentStates.values()),
            _step14;
          try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
              var _step14$value = _step14.value,
                renderTasks = _step14$value.renderTasks,
                operatorList = _step14$value.operatorList;
              if (renderTasks.size > 0 || !operatorList.lastChunk) {
                return false;
              }
            }
          } catch (err) {
            _iterator14.e(err);
          } finally {
            _iterator14.f();
          }
          this._intentStates.clear();
          this.objs.clear();
          _classPrivateFieldSet(this, _pendingCleanup, false);
          return true;
        }
        function _abortDelayedCleanup2() {
          if (_classPrivateFieldGet(this, _delayedCleanupTimeout)) {
            clearTimeout(_classPrivateFieldGet(this, _delayedCleanupTimeout));
            _classPrivateFieldSet(this, _delayedCleanupTimeout, null);
          }
        }
        exports.PDFPageProxy = PDFPageProxy;
        var _listeners = /*#__PURE__*/new WeakMap();
        var _deferred = /*#__PURE__*/new WeakMap();
        var LoopbackPort = /*#__PURE__*/function () {
          function LoopbackPort() {
            _classCallCheck(this, LoopbackPort);
            _classPrivateFieldInitSpec(this, _listeners, {
              writable: true,
              value: new Set()
            });
            _classPrivateFieldInitSpec(this, _deferred, {
              writable: true,
              value: Promise.resolve()
            });
          }
          _createClass(LoopbackPort, [{
            key: "postMessage",
            value: function postMessage(obj, transfer) {
              var _this11 = this;
              var event = {
                data: structuredClone(obj, transfer ? {
                  transfer: transfer
                } : null)
              };
              _classPrivateFieldGet(this, _deferred).then(function () {
                var _iterator11 = _createForOfIteratorHelper(_classPrivateFieldGet(_this11, _listeners)),
                  _step11;
                try {
                  for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
                    var listener = _step11.value;
                    listener.call(_this11, event);
                  }
                } catch (err) {
                  _iterator11.e(err);
                } finally {
                  _iterator11.f();
                }
              });
            }
          }, {
            key: "addEventListener",
            value: function addEventListener(name, listener) {
              _classPrivateFieldGet(this, _listeners).add(listener);
            }
          }, {
            key: "removeEventListener",
            value: function removeEventListener(name, listener) {
              _classPrivateFieldGet(this, _listeners).delete(listener);
            }
          }, {
            key: "terminate",
            value: function terminate() {
              _classPrivateFieldGet(this, _listeners).clear();
            }
          }]);
          return LoopbackPort;
        }();
        exports.LoopbackPort = LoopbackPort;
        var PDFWorkerUtil = {
          isWorkerDisabled: false,
          fallbackWorkerSrc: null,
          fakeWorkerId: 0
        };
        exports.PDFWorkerUtil = PDFWorkerUtil;
        {
          if (_is_node.isNodeJS && typeof require === "function") {
            PDFWorkerUtil.isWorkerDisabled = true;
            PDFWorkerUtil.fallbackWorkerSrc = "./pdf.worker.js";
          } else if ((typeof document === "undefined" ? "undefined" : _typeof(document)) === "object") {
            var _document, _document$currentScri;
            var pdfjsFilePath = (_document = document) === null || _document === void 0 ? void 0 : (_document$currentScri = _document.currentScript) === null || _document$currentScri === void 0 ? void 0 : _document$currentScri.src;
            if (pdfjsFilePath) {
              PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(/(\.(?:min\.)?js)(\?.*)?$/i, ".worker$1$2");
            }
          }
          PDFWorkerUtil.isSameOrigin = function (baseUrl, otherUrl) {
            var base;
            try {
              base = new URL(baseUrl);
              if (!base.origin || base.origin === "null") {
                return false;
              }
            } catch (_unused5) {
              return false;
            }
            var other = new URL(otherUrl, base);
            return base.origin === other.origin;
          };
          PDFWorkerUtil.createCDNWrapper = function (url) {
            var wrapper = "importScripts(\"".concat(url, "\");");
            return URL.createObjectURL(new Blob([wrapper]));
          };
        }
        var PDFWorker = /*#__PURE__*/function () {
          function PDFWorker() {
            var _ref14 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref14$name = _ref14.name,
              name = _ref14$name === void 0 ? null : _ref14$name,
              _ref14$port = _ref14.port,
              port = _ref14$port === void 0 ? null : _ref14$port,
              _ref14$verbosity = _ref14.verbosity,
              verbosity = _ref14$verbosity === void 0 ? (0, _util.getVerbosityLevel)() : _ref14$verbosity;
            _classCallCheck(this, PDFWorker);
            if (port && _classStaticPrivateFieldSpecGet(PDFWorker, PDFWorker, _workerPorts).has(port)) {
              throw new Error("Cannot use more than one PDFWorker per port.");
            }
            this.name = name;
            this.destroyed = false;
            this.verbosity = verbosity;
            this._readyCapability = new _util.PromiseCapability();
            this._port = null;
            this._webWorker = null;
            this._messageHandler = null;
            if (port) {
              _classStaticPrivateFieldSpecGet(PDFWorker, PDFWorker, _workerPorts).set(port, this);
              this._initializeFromPort(port);
              return;
            }
            this._initialize();
          }
          _createClass(PDFWorker, [{
            key: "promise",
            get: function get() {
              return this._readyCapability.promise;
            }
          }, {
            key: "port",
            get: function get() {
              return this._port;
            }
          }, {
            key: "messageHandler",
            get: function get() {
              return this._messageHandler;
            }
          }, {
            key: "_initializeFromPort",
            value: function _initializeFromPort(port) {
              this._port = port;
              this._messageHandler = new _message_handler.MessageHandler("main", "worker", port);
              this._messageHandler.on("ready", function () {});
              this._readyCapability.resolve();
              this._messageHandler.send("configure", {
                verbosity: this.verbosity
              });
            }
          }, {
            key: "_initialize",
            value: function _initialize() {
              var _this12 = this;
              if (!PDFWorkerUtil.isWorkerDisabled && !PDFWorker._mainThreadWorkerMessageHandler) {
                var workerSrc = PDFWorker.workerSrc;
                try {
                  if (!PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc)) {
                    workerSrc = PDFWorkerUtil.createCDNWrapper(new URL(workerSrc, window.location).href);
                  }
                  var worker = new Worker(workerSrc);
                  var messageHandler = new _message_handler.MessageHandler("main", "worker", worker);
                  var terminateEarly = function terminateEarly() {
                    worker.removeEventListener("error", onWorkerError);
                    messageHandler.destroy();
                    worker.terminate();
                    if (_this12.destroyed) {
                      _this12._readyCapability.reject(new Error("Worker was destroyed"));
                    } else {
                      _this12._setupFakeWorker();
                    }
                  };
                  var onWorkerError = function onWorkerError() {
                    if (!_this12._webWorker) {
                      terminateEarly();
                    }
                  };
                  worker.addEventListener("error", onWorkerError);
                  messageHandler.on("test", function (data) {
                    worker.removeEventListener("error", onWorkerError);
                    if (_this12.destroyed) {
                      terminateEarly();
                      return;
                    }
                    if (data) {
                      _this12._messageHandler = messageHandler;
                      _this12._port = worker;
                      _this12._webWorker = worker;
                      _this12._readyCapability.resolve();
                      messageHandler.send("configure", {
                        verbosity: _this12.verbosity
                      });
                    } else {
                      _this12._setupFakeWorker();
                      messageHandler.destroy();
                      worker.terminate();
                    }
                  });
                  messageHandler.on("ready", function (data) {
                    worker.removeEventListener("error", onWorkerError);
                    if (_this12.destroyed) {
                      terminateEarly();
                      return;
                    }
                    try {
                      sendTest();
                    } catch (_unused6) {
                      _this12._setupFakeWorker();
                    }
                  });
                  var sendTest = function sendTest() {
                    var testObj = new Uint8Array();
                    messageHandler.send("test", testObj, [testObj.buffer]);
                  };
                  sendTest();
                  return;
                } catch (_unused7) {
                  (0, _util.info)("The worker has been disabled.");
                }
              }
              this._setupFakeWorker();
            }
          }, {
            key: "_setupFakeWorker",
            value: function _setupFakeWorker() {
              var _this13 = this;
              if (!PDFWorkerUtil.isWorkerDisabled) {
                (0, _util.warn)("Setting up fake worker.");
                PDFWorkerUtil.isWorkerDisabled = true;
              }
              PDFWorker._setupFakeWorkerGlobal.then(function (WorkerMessageHandler) {
                if (_this13.destroyed) {
                  _this13._readyCapability.reject(new Error("Worker was destroyed"));
                  return;
                }
                var port = new LoopbackPort();
                _this13._port = port;
                var id = "fake".concat(PDFWorkerUtil.fakeWorkerId++);
                var workerHandler = new _message_handler.MessageHandler(id + "_worker", id, port);
                WorkerMessageHandler.setup(workerHandler, port);
                var messageHandler = new _message_handler.MessageHandler(id, id + "_worker", port);
                _this13._messageHandler = messageHandler;
                _this13._readyCapability.resolve();
                messageHandler.send("configure", {
                  verbosity: _this13.verbosity
                });
              }).catch(function (reason) {
                _this13._readyCapability.reject(new Error("Setting up fake worker failed: \"".concat(reason.message, "\".")));
              });
            }
          }, {
            key: "destroy",
            value: function destroy() {
              this.destroyed = true;
              if (this._webWorker) {
                this._webWorker.terminate();
                this._webWorker = null;
              }
              _classStaticPrivateFieldSpecGet(PDFWorker, PDFWorker, _workerPorts).delete(this._port);
              this._port = null;
              if (this._messageHandler) {
                this._messageHandler.destroy();
                this._messageHandler = null;
              }
            }
          }], [{
            key: "fromPort",
            value: function fromPort(params) {
              if (!(params !== null && params !== void 0 && params.port)) {
                throw new Error("PDFWorker.fromPort - invalid method signature.");
              }
              if (_classStaticPrivateFieldSpecGet(this, PDFWorker, _workerPorts).has(params.port)) {
                return _classStaticPrivateFieldSpecGet(this, PDFWorker, _workerPorts).get(params.port);
              }
              return new PDFWorker(params);
            }
          }, {
            key: "workerSrc",
            get: function get() {
              if (_worker_options.GlobalWorkerOptions.workerSrc) {
                return _worker_options.GlobalWorkerOptions.workerSrc;
              }
              if (PDFWorkerUtil.fallbackWorkerSrc !== null) {
                if (!_is_node.isNodeJS) {
                  (0, _display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.');
                }
                return PDFWorkerUtil.fallbackWorkerSrc;
              }
              throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
            }
          }, {
            key: "_mainThreadWorkerMessageHandler",
            get: function get() {
              try {
                var _globalThis$pdfjsWork;
                return ((_globalThis$pdfjsWork = globalThis.pdfjsWorker) === null || _globalThis$pdfjsWork === void 0 ? void 0 : _globalThis$pdfjsWork.WorkerMessageHandler) || null;
              } catch (_unused8) {
                return null;
              }
            }
          }, {
            key: "_setupFakeWorkerGlobal",
            get: function get() {
              var _this14 = this;
              var loader = /*#__PURE__*/function () {
                var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
                  var mainWorkerMessageHandler, worker;
                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                    while (1) switch (_context3.prev = _context3.next) {
                      case 0:
                        mainWorkerMessageHandler = _this14._mainThreadWorkerMessageHandler;
                        if (!mainWorkerMessageHandler) {
                          _context3.next = 3;
                          break;
                        }
                        return _context3.abrupt("return", mainWorkerMessageHandler);
                      case 3:
                        if (!(_is_node.isNodeJS && typeof require === "function")) {
                          _context3.next = 6;
                          break;
                        }
                        worker = eval("require")(_this14.workerSrc);
                        return _context3.abrupt("return", worker.WorkerMessageHandler);
                      case 6:
                        _context3.next = 8;
                        return (0, _display_utils.loadScript)(_this14.workerSrc);
                      case 8:
                        return _context3.abrupt("return", window.pdfjsWorker.WorkerMessageHandler);
                      case 9:
                      case "end":
                        return _context3.stop();
                    }
                  }, _callee3);
                }));
                return function loader() {
                  return _ref15.apply(this, arguments);
                };
              }();
              return (0, _util.shadow)(this, "_setupFakeWorkerGlobal", loader());
            }
          }]);
          return PDFWorker;
        }();
        var _workerPorts = {
          writable: true,
          value: new WeakMap()
        };
        exports.PDFWorker = PDFWorker;
        var _methodPromises = /*#__PURE__*/new WeakMap();
        var _pageCache = /*#__PURE__*/new WeakMap();
        var _pagePromises = /*#__PURE__*/new WeakMap();
        var _cacheSimpleMethod = /*#__PURE__*/new WeakSet();
        var WorkerTransport = /*#__PURE__*/function () {
          function WorkerTransport(messageHandler, loadingTask, networkStream, params, factory) {
            _classCallCheck(this, WorkerTransport);
            _classPrivateMethodInitSpec(this, _cacheSimpleMethod);
            _classPrivateFieldInitSpec(this, _methodPromises, {
              writable: true,
              value: new Map()
            });
            _classPrivateFieldInitSpec(this, _pageCache, {
              writable: true,
              value: new Map()
            });
            _classPrivateFieldInitSpec(this, _pagePromises, {
              writable: true,
              value: new Map()
            });
            this.messageHandler = messageHandler;
            this.loadingTask = loadingTask;
            this.commonObjs = new PDFObjects();
            this.fontLoader = new _font_loader.FontLoader({
              ownerDocument: params.ownerDocument,
              styleElement: params.styleElement
            });
            this._params = params;
            this.canvasFactory = factory.canvasFactory;
            this.filterFactory = factory.filterFactory;
            this.cMapReaderFactory = factory.cMapReaderFactory;
            this.standardFontDataFactory = factory.standardFontDataFactory;
            this.destroyed = false;
            this.destroyCapability = null;
            this._passwordCapability = null;
            this._networkStream = networkStream;
            this._fullReader = null;
            this._lastProgress = null;
            this.downloadInfoCapability = new _util.PromiseCapability();
            this.setupMessageHandler();
          }
          _createClass(WorkerTransport, [{
            key: "annotationStorage",
            get: function get() {
              return (0, _util.shadow)(this, "annotationStorage", new _annotation_storage.AnnotationStorage());
            }
          }, {
            key: "getRenderingIntent",
            value: function getRenderingIntent(intent) {
              var annotationMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _util.AnnotationMode.ENABLE;
              var printAnnotationStorage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
              var isOpList = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
              var renderingIntent = _util.RenderingIntentFlag.DISPLAY;
              var annotationStorageSerializable = _annotation_storage.SerializableEmpty;
              switch (intent) {
                case "any":
                  renderingIntent = _util.RenderingIntentFlag.ANY;
                  break;
                case "display":
                  break;
                case "print":
                  renderingIntent = _util.RenderingIntentFlag.PRINT;
                  break;
                default:
                  (0, _util.warn)("getRenderingIntent - invalid intent: ".concat(intent));
              }
              switch (annotationMode) {
                case _util.AnnotationMode.DISABLE:
                  renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;
                  break;
                case _util.AnnotationMode.ENABLE:
                  break;
                case _util.AnnotationMode.ENABLE_FORMS:
                  renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;
                  break;
                case _util.AnnotationMode.ENABLE_STORAGE:
                  renderingIntent += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE;
                  var annotationStorage = renderingIntent & _util.RenderingIntentFlag.PRINT && printAnnotationStorage instanceof _annotation_storage.PrintAnnotationStorage ? printAnnotationStorage : this.annotationStorage;
                  annotationStorageSerializable = annotationStorage.serializable;
                  break;
                default:
                  (0, _util.warn)("getRenderingIntent - invalid annotationMode: ".concat(annotationMode));
              }
              if (isOpList) {
                renderingIntent += _util.RenderingIntentFlag.OPLIST;
              }
              return {
                renderingIntent: renderingIntent,
                cacheKey: "".concat(renderingIntent, "_").concat(annotationStorageSerializable.hash),
                annotationStorageSerializable: annotationStorageSerializable
              };
            }
          }, {
            key: "destroy",
            value: function destroy() {
              var _this15 = this;
              if (this.destroyCapability) {
                return this.destroyCapability.promise;
              }
              this.destroyed = true;
              this.destroyCapability = new _util.PromiseCapability();
              if (this._passwordCapability) {
                this._passwordCapability.reject(new Error("Worker was destroyed during onPassword callback"));
              }
              var waitOn = [];
              var _iterator12 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _pageCache).values()),
                _step12;
              try {
                for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
                  var page = _step12.value;
                  waitOn.push(page._destroy());
                }
              } catch (err) {
                _iterator12.e(err);
              } finally {
                _iterator12.f();
              }
              _classPrivateFieldGet(this, _pageCache).clear();
              _classPrivateFieldGet(this, _pagePromises).clear();
              if (this.hasOwnProperty("annotationStorage")) {
                this.annotationStorage.resetModified();
              }
              var terminated = this.messageHandler.sendWithPromise("Terminate", null);
              waitOn.push(terminated);
              Promise.all(waitOn).then(function () {
                _this15.commonObjs.clear();
                _this15.fontLoader.clear();
                _classPrivateFieldGet(_this15, _methodPromises).clear();
                _this15.filterFactory.destroy();
                if (_this15._networkStream) {
                  _this15._networkStream.cancelAllRequests(new _util.AbortException("Worker was terminated."));
                }
                if (_this15.messageHandler) {
                  _this15.messageHandler.destroy();
                  _this15.messageHandler = null;
                }
                _this15.destroyCapability.resolve();
              }, this.destroyCapability.reject);
              return this.destroyCapability.promise;
            }
          }, {
            key: "setupMessageHandler",
            value: function setupMessageHandler() {
              var _this16 = this;
              var messageHandler = this.messageHandler,
                loadingTask = this.loadingTask;
              messageHandler.on("GetReader", function (data, sink) {
                (0, _util.assert)(_this16._networkStream, "GetReader - no `IPDFStream` instance available.");
                _this16._fullReader = _this16._networkStream.getFullReader();
                _this16._fullReader.onProgress = function (evt) {
                  _this16._lastProgress = {
                    loaded: evt.loaded,
                    total: evt.total
                  };
                };
                sink.onPull = function () {
                  _this16._fullReader.read().then(function (_ref16) {
                    var value = _ref16.value,
                      done = _ref16.done;
                    if (done) {
                      sink.close();
                      return;
                    }
                    (0, _util.assert)(value instanceof ArrayBuffer, "GetReader - expected an ArrayBuffer.");
                    sink.enqueue(new Uint8Array(value), 1, [value]);
                  }).catch(function (reason) {
                    sink.error(reason);
                  });
                };
                sink.onCancel = function (reason) {
                  _this16._fullReader.cancel(reason);
                  sink.ready.catch(function (readyReason) {
                    if (_this16.destroyed) {
                      return;
                    }
                    throw readyReason;
                  });
                };
              });
              messageHandler.on("ReaderHeadersReady", function (data) {
                var headersCapability = new _util.PromiseCapability();
                var fullReader = _this16._fullReader;
                fullReader.headersReady.then(function () {
                  if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {
                    if (_this16._lastProgress) {
                      var _loadingTask$onProgre;
                      (_loadingTask$onProgre = loadingTask.onProgress) === null || _loadingTask$onProgre === void 0 ? void 0 : _loadingTask$onProgre.call(loadingTask, _this16._lastProgress);
                    }
                    fullReader.onProgress = function (evt) {
                      var _loadingTask$onProgre2;
                      (_loadingTask$onProgre2 = loadingTask.onProgress) === null || _loadingTask$onProgre2 === void 0 ? void 0 : _loadingTask$onProgre2.call(loadingTask, {
                        loaded: evt.loaded,
                        total: evt.total
                      });
                    };
                  }
                  headersCapability.resolve({
                    isStreamingSupported: fullReader.isStreamingSupported,
                    isRangeSupported: fullReader.isRangeSupported,
                    contentLength: fullReader.contentLength
                  });
                }, headersCapability.reject);
                return headersCapability.promise;
              });
              messageHandler.on("GetRangeReader", function (data, sink) {
                (0, _util.assert)(_this16._networkStream, "GetRangeReader - no `IPDFStream` instance available.");
                var rangeReader = _this16._networkStream.getRangeReader(data.begin, data.end);
                if (!rangeReader) {
                  sink.close();
                  return;
                }
                sink.onPull = function () {
                  rangeReader.read().then(function (_ref17) {
                    var value = _ref17.value,
                      done = _ref17.done;
                    if (done) {
                      sink.close();
                      return;
                    }
                    (0, _util.assert)(value instanceof ArrayBuffer, "GetRangeReader - expected an ArrayBuffer.");
                    sink.enqueue(new Uint8Array(value), 1, [value]);
                  }).catch(function (reason) {
                    sink.error(reason);
                  });
                };
                sink.onCancel = function (reason) {
                  rangeReader.cancel(reason);
                  sink.ready.catch(function (readyReason) {
                    if (_this16.destroyed) {
                      return;
                    }
                    throw readyReason;
                  });
                };
              });
              messageHandler.on("GetDoc", function (_ref18) {
                var pdfInfo = _ref18.pdfInfo;
                _this16._numPages = pdfInfo.numPages;
                _this16._htmlForXfa = pdfInfo.htmlForXfa;
                delete pdfInfo.htmlForXfa;
                loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, _this16));
              });
              messageHandler.on("DocException", function (ex) {
                var reason;
                switch (ex.name) {
                  case "PasswordException":
                    reason = new _util.PasswordException(ex.message, ex.code);
                    break;
                  case "InvalidPDFException":
                    reason = new _util.InvalidPDFException(ex.message);
                    break;
                  case "MissingPDFException":
                    reason = new _util.MissingPDFException(ex.message);
                    break;
                  case "UnexpectedResponseException":
                    reason = new _util.UnexpectedResponseException(ex.message, ex.status);
                    break;
                  case "UnknownErrorException":
                    reason = new _util.UnknownErrorException(ex.message, ex.details);
                    break;
                  default:
                    (0, _util.unreachable)("DocException - expected a valid Error.");
                }
                loadingTask._capability.reject(reason);
              });
              messageHandler.on("PasswordRequest", function (exception) {
                _this16._passwordCapability = new _util.PromiseCapability();
                if (loadingTask.onPassword) {
                  var updatePassword = function updatePassword(password) {
                    if (password instanceof Error) {
                      _this16._passwordCapability.reject(password);
                    } else {
                      _this16._passwordCapability.resolve({
                        password: password
                      });
                    }
                  };
                  try {
                    loadingTask.onPassword(updatePassword, exception.code);
                  } catch (ex) {
                    _this16._passwordCapability.reject(ex);
                  }
                } else {
                  _this16._passwordCapability.reject(new _util.PasswordException(exception.message, exception.code));
                }
                return _this16._passwordCapability.promise;
              });
              messageHandler.on("DataLoaded", function (data) {
                var _loadingTask$onProgre3;
                (_loadingTask$onProgre3 = loadingTask.onProgress) === null || _loadingTask$onProgre3 === void 0 ? void 0 : _loadingTask$onProgre3.call(loadingTask, {
                  loaded: data.length,
                  total: data.length
                });
                _this16.downloadInfoCapability.resolve(data);
              });
              messageHandler.on("StartRenderPage", function (data) {
                if (_this16.destroyed) {
                  return;
                }
                var page = _classPrivateFieldGet(_this16, _pageCache).get(data.pageIndex);
                page._startRenderPage(data.transparency, data.cacheKey);
              });
              messageHandler.on("commonobj", function (_ref19) {
                var _globalThis$FontInspe;
                var _ref20 = _slicedToArray(_ref19, 3),
                  id = _ref20[0],
                  type = _ref20[1],
                  exportedData = _ref20[2];
                if (_this16.destroyed) {
                  return;
                }
                if (_this16.commonObjs.has(id)) {
                  return;
                }
                switch (type) {
                  case "Font":
                    var params = _this16._params;
                    if ("error" in exportedData) {
                      var exportedError = exportedData.error;
                      (0, _util.warn)("Error during font loading: ".concat(exportedError));
                      _this16.commonObjs.resolve(id, exportedError);
                      break;
                    }
                    var inspectFont = params.pdfBug && (_globalThis$FontInspe = globalThis.FontInspector) !== null && _globalThis$FontInspe !== void 0 && _globalThis$FontInspe.enabled ? function (font, url) {
                      return globalThis.FontInspector.fontAdded(font, url);
                    } : null;
                    var font = new _font_loader.FontFaceObject(exportedData, {
                      isEvalSupported: params.isEvalSupported,
                      disableFontFace: params.disableFontFace,
                      ignoreErrors: params.ignoreErrors,
                      inspectFont: inspectFont
                    });
                    _this16.fontLoader.bind(font).catch(function (reason) {
                      return messageHandler.sendWithPromise("FontFallback", {
                        id: id
                      });
                    }).finally(function () {
                      if (!params.fontExtraProperties && font.data) {
                        font.data = null;
                      }
                      _this16.commonObjs.resolve(id, font);
                    });
                    break;
                  case "FontPath":
                  case "Image":
                  case "Pattern":
                    _this16.commonObjs.resolve(id, exportedData);
                    break;
                  default:
                    throw new Error("Got unknown common object type ".concat(type));
                }
              });
              messageHandler.on("obj", function (_ref21) {
                var _ref22 = _slicedToArray(_ref21, 4),
                  id = _ref22[0],
                  pageIndex = _ref22[1],
                  type = _ref22[2],
                  imageData = _ref22[3];
                if (_this16.destroyed) {
                  return;
                }
                var pageProxy = _classPrivateFieldGet(_this16, _pageCache).get(pageIndex);
                if (pageProxy.objs.has(id)) {
                  return;
                }
                switch (type) {
                  case "Image":
                    pageProxy.objs.resolve(id, imageData);
                    if (imageData) {
                      var length;
                      if (imageData.bitmap) {
                        var width = imageData.width,
                          height = imageData.height;
                        length = width * height * 4;
                      } else {
                        var _imageData$data;
                        length = ((_imageData$data = imageData.data) === null || _imageData$data === void 0 ? void 0 : _imageData$data.length) || 0;
                      }
                      if (length > _util.MAX_IMAGE_SIZE_TO_CACHE) {
                        pageProxy._maybeCleanupAfterRender = true;
                      }
                    }
                    break;
                  case "Pattern":
                    pageProxy.objs.resolve(id, imageData);
                    break;
                  default:
                    throw new Error("Got unknown object type ".concat(type));
                }
              });
              messageHandler.on("DocProgress", function (data) {
                var _loadingTask$onProgre4;
                if (_this16.destroyed) {
                  return;
                }
                (_loadingTask$onProgre4 = loadingTask.onProgress) === null || _loadingTask$onProgre4 === void 0 ? void 0 : _loadingTask$onProgre4.call(loadingTask, {
                  loaded: data.loaded,
                  total: data.total
                });
              });
              messageHandler.on("FetchBuiltInCMap", function (data) {
                if (_this16.destroyed) {
                  return Promise.reject(new Error("Worker was destroyed."));
                }
                if (!_this16.cMapReaderFactory) {
                  return Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."));
                }
                return _this16.cMapReaderFactory.fetch(data);
              });
              messageHandler.on("FetchStandardFontData", function (data) {
                if (_this16.destroyed) {
                  return Promise.reject(new Error("Worker was destroyed."));
                }
                if (!_this16.standardFontDataFactory) {
                  return Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter."));
                }
                return _this16.standardFontDataFactory.fetch(data);
              });
            }
          }, {
            key: "getData",
            value: function getData() {
              return this.messageHandler.sendWithPromise("GetData", null);
            }
          }, {
            key: "saveDocument",
            value: function saveDocument() {
              var _this$_fullReader$fil,
                _this$_fullReader,
                _this17 = this;
              if (this.annotationStorage.size <= 0) {
                (0, _util.warn)("saveDocument called while `annotationStorage` is empty, " + "please use the getData-method instead.");
              }
              var _this$annotationStora = this.annotationStorage.serializable,
                map = _this$annotationStora.map,
                transfers = _this$annotationStora.transfers;
              return this.messageHandler.sendWithPromise("SaveDocument", {
                isPureXfa: !!this._htmlForXfa,
                numPages: this._numPages,
                annotationStorage: map,
                filename: (_this$_fullReader$fil = (_this$_fullReader = this._fullReader) === null || _this$_fullReader === void 0 ? void 0 : _this$_fullReader.filename) !== null && _this$_fullReader$fil !== void 0 ? _this$_fullReader$fil : null
              }, transfers).finally(function () {
                _this17.annotationStorage.resetModified();
              });
            }
          }, {
            key: "getPage",
            value: function getPage(pageNumber) {
              var _this18 = this;
              if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {
                return Promise.reject(new Error("Invalid page request."));
              }
              var pageIndex = pageNumber - 1,
                cachedPromise = _classPrivateFieldGet(this, _pagePromises).get(pageIndex);
              if (cachedPromise) {
                return cachedPromise;
              }
              var promise = this.messageHandler.sendWithPromise("GetPage", {
                pageIndex: pageIndex
              }).then(function (pageInfo) {
                if (_this18.destroyed) {
                  throw new Error("Transport destroyed");
                }
                var page = new PDFPageProxy(pageIndex, pageInfo, _this18, _this18._params.pdfBug);
                _classPrivateFieldGet(_this18, _pageCache).set(pageIndex, page);
                return page;
              });
              _classPrivateFieldGet(this, _pagePromises).set(pageIndex, promise);
              return promise;
            }
          }, {
            key: "getPageIndex",
            value: function getPageIndex(ref) {
              if (_typeof(ref) !== "object" || ref === null || !Number.isInteger(ref.num) || ref.num < 0 || !Number.isInteger(ref.gen) || ref.gen < 0) {
                return Promise.reject(new Error("Invalid pageIndex request."));
              }
              return this.messageHandler.sendWithPromise("GetPageIndex", {
                num: ref.num,
                gen: ref.gen
              });
            }
          }, {
            key: "getAnnotations",
            value: function getAnnotations(pageIndex, intent) {
              return this.messageHandler.sendWithPromise("GetAnnotations", {
                pageIndex: pageIndex,
                intent: intent
              });
            }
          }, {
            key: "getFieldObjects",
            value: function getFieldObjects() {
              return _classPrivateMethodGet(this, _cacheSimpleMethod, _cacheSimpleMethod2).call(this, "GetFieldObjects");
            }
          }, {
            key: "hasJSActions",
            value: function hasJSActions() {
              return _classPrivateMethodGet(this, _cacheSimpleMethod, _cacheSimpleMethod2).call(this, "HasJSActions");
            }
          }, {
            key: "getCalculationOrderIds",
            value: function getCalculationOrderIds() {
              return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
            }
          }, {
            key: "getDestinations",
            value: function getDestinations() {
              return this.messageHandler.sendWithPromise("GetDestinations", null);
            }
          }, {
            key: "getDestination",
            value: function getDestination(id) {
              if (typeof id !== "string") {
                return Promise.reject(new Error("Invalid destination request."));
              }
              return this.messageHandler.sendWithPromise("GetDestination", {
                id: id
              });
            }
          }, {
            key: "getPageLabels",
            value: function getPageLabels() {
              return this.messageHandler.sendWithPromise("GetPageLabels", null);
            }
          }, {
            key: "getPageLayout",
            value: function getPageLayout() {
              return this.messageHandler.sendWithPromise("GetPageLayout", null);
            }
          }, {
            key: "getPageMode",
            value: function getPageMode() {
              return this.messageHandler.sendWithPromise("GetPageMode", null);
            }
          }, {
            key: "getViewerPreferences",
            value: function getViewerPreferences() {
              return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
            }
          }, {
            key: "getOpenAction",
            value: function getOpenAction() {
              return this.messageHandler.sendWithPromise("GetOpenAction", null);
            }
          }, {
            key: "getAttachments",
            value: function getAttachments() {
              return this.messageHandler.sendWithPromise("GetAttachments", null);
            }
          }, {
            key: "getJavaScript",
            value: function getJavaScript() {
              return this.messageHandler.sendWithPromise("GetJavaScript", null);
            }
          }, {
            key: "getDocJSActions",
            value: function getDocJSActions() {
              return this.messageHandler.sendWithPromise("GetDocJSActions", null);
            }
          }, {
            key: "getPageJSActions",
            value: function getPageJSActions(pageIndex) {
              return this.messageHandler.sendWithPromise("GetPageJSActions", {
                pageIndex: pageIndex
              });
            }
          }, {
            key: "getStructTree",
            value: function getStructTree(pageIndex) {
              return this.messageHandler.sendWithPromise("GetStructTree", {
                pageIndex: pageIndex
              });
            }
          }, {
            key: "getOutline",
            value: function getOutline() {
              return this.messageHandler.sendWithPromise("GetOutline", null);
            }
          }, {
            key: "getOptionalContentConfig",
            value: function getOptionalContentConfig() {
              return this.messageHandler.sendWithPromise("GetOptionalContentConfig", null).then(function (results) {
                return new _optional_content_config.OptionalContentConfig(results);
              });
            }
          }, {
            key: "getPermissions",
            value: function getPermissions() {
              return this.messageHandler.sendWithPromise("GetPermissions", null);
            }
          }, {
            key: "getMetadata",
            value: function getMetadata() {
              var _this19 = this;
              var name = "GetMetadata",
                cachedPromise = _classPrivateFieldGet(this, _methodPromises).get(name);
              if (cachedPromise) {
                return cachedPromise;
              }
              var promise = this.messageHandler.sendWithPromise(name, null).then(function (results) {
                var _this19$_fullReader$f, _this19$_fullReader, _this19$_fullReader$c, _this19$_fullReader2;
                return {
                  info: results[0],
                  metadata: results[1] ? new _metadata.Metadata(results[1]) : null,
                  contentDispositionFilename: (_this19$_fullReader$f = (_this19$_fullReader = _this19._fullReader) === null || _this19$_fullReader === void 0 ? void 0 : _this19$_fullReader.filename) !== null && _this19$_fullReader$f !== void 0 ? _this19$_fullReader$f : null,
                  contentLength: (_this19$_fullReader$c = (_this19$_fullReader2 = _this19._fullReader) === null || _this19$_fullReader2 === void 0 ? void 0 : _this19$_fullReader2.contentLength) !== null && _this19$_fullReader$c !== void 0 ? _this19$_fullReader$c : null
                };
              });
              _classPrivateFieldGet(this, _methodPromises).set(name, promise);
              return promise;
            }
          }, {
            key: "getMarkInfo",
            value: function getMarkInfo() {
              return this.messageHandler.sendWithPromise("GetMarkInfo", null);
            }
          }, {
            key: "startCleanup",
            value: function () {
              var _startCleanup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
                var keepLoadedFonts,
                  _iterator13,
                  _step13,
                  page,
                  cleanupSuccessful,
                  _args4 = arguments;
                return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                  while (1) switch (_context4.prev = _context4.next) {
                    case 0:
                      keepLoadedFonts = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : false;
                      if (!this.destroyed) {
                        _context4.next = 3;
                        break;
                      }
                      return _context4.abrupt("return");
                    case 3:
                      _context4.next = 5;
                      return this.messageHandler.sendWithPromise("Cleanup", null);
                    case 5:
                      _iterator13 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _pageCache).values());
                      _context4.prev = 6;
                      _iterator13.s();
                    case 8:
                      if ((_step13 = _iterator13.n()).done) {
                        _context4.next = 15;
                        break;
                      }
                      page = _step13.value;
                      cleanupSuccessful = page.cleanup();
                      if (cleanupSuccessful) {
                        _context4.next = 13;
                        break;
                      }
                      throw new Error("startCleanup: Page ".concat(page.pageNumber, " is currently rendering."));
                    case 13:
                      _context4.next = 8;
                      break;
                    case 15:
                      _context4.next = 20;
                      break;
                    case 17:
                      _context4.prev = 17;
                      _context4.t0 = _context4["catch"](6);
                      _iterator13.e(_context4.t0);
                    case 20:
                      _context4.prev = 20;
                      _iterator13.f();
                      return _context4.finish(20);
                    case 23:
                      this.commonObjs.clear();
                      if (!keepLoadedFonts) {
                        this.fontLoader.clear();
                      }
                      _classPrivateFieldGet(this, _methodPromises).clear();
                      this.filterFactory.destroy(true);
                    case 27:
                    case "end":
                      return _context4.stop();
                  }
                }, _callee4, this, [[6, 17, 20, 23]]);
              }));
              function startCleanup() {
                return _startCleanup.apply(this, arguments);
              }
              return startCleanup;
            }()
          }, {
            key: "loadingParams",
            get: function get() {
              var _this$_params = this._params,
                disableAutoFetch = _this$_params.disableAutoFetch,
                enableXfa = _this$_params.enableXfa;
              return (0, _util.shadow)(this, "loadingParams", {
                disableAutoFetch: disableAutoFetch,
                enableXfa: enableXfa
              });
            }
          }]);
          return WorkerTransport;
        }();
        function _cacheSimpleMethod2(name) {
          var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
          var cachedPromise = _classPrivateFieldGet(this, _methodPromises).get(name);
          if (cachedPromise) {
            return cachedPromise;
          }
          var promise = this.messageHandler.sendWithPromise(name, data);
          _classPrivateFieldGet(this, _methodPromises).set(name, promise);
          return promise;
        }
        var _objs = /*#__PURE__*/new WeakMap();
        var _ensureObj = /*#__PURE__*/new WeakSet();
        var PDFObjects = /*#__PURE__*/function () {
          function PDFObjects() {
            _classCallCheck(this, PDFObjects);
            _classPrivateMethodInitSpec(this, _ensureObj);
            _classPrivateFieldInitSpec(this, _objs, {
              writable: true,
              value: Object.create(null)
            });
          }
          _createClass(PDFObjects, [{
            key: "get",
            value: function get(objId) {
              var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              if (callback) {
                var _obj = _classPrivateMethodGet(this, _ensureObj, _ensureObj2).call(this, objId);
                _obj.capability.promise.then(function () {
                  return callback(_obj.data);
                });
                return null;
              }
              var obj = _classPrivateFieldGet(this, _objs)[objId];
              if (!(obj !== null && obj !== void 0 && obj.capability.settled)) {
                throw new Error("Requesting object that isn't resolved yet ".concat(objId, "."));
              }
              return obj.data;
            }
          }, {
            key: "has",
            value: function has(objId) {
              var obj = _classPrivateFieldGet(this, _objs)[objId];
              return (obj === null || obj === void 0 ? void 0 : obj.capability.settled) || false;
            }
          }, {
            key: "resolve",
            value: function resolve(objId) {
              var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              var obj = _classPrivateMethodGet(this, _ensureObj, _ensureObj2).call(this, objId);
              obj.data = data;
              obj.capability.resolve();
            }
          }, {
            key: "clear",
            value: function clear() {
              for (var objId in _classPrivateFieldGet(this, _objs)) {
                var _data$bitmap;
                var data = _classPrivateFieldGet(this, _objs)[objId].data;
                data === null || data === void 0 ? void 0 : (_data$bitmap = data.bitmap) === null || _data$bitmap === void 0 ? void 0 : _data$bitmap.close();
              }
              _classPrivateFieldSet(this, _objs, Object.create(null));
            }
          }]);
          return PDFObjects;
        }();
        function _ensureObj2(objId) {
          var obj = _classPrivateFieldGet(this, _objs)[objId];
          if (obj) {
            return obj;
          }
          return _classPrivateFieldGet(this, _objs)[objId] = {
            capability: new _util.PromiseCapability(),
            data: null
          };
        }
        var _internalRenderTask = /*#__PURE__*/new WeakMap();
        var RenderTask = /*#__PURE__*/function () {
          function RenderTask(internalRenderTask) {
            _classCallCheck(this, RenderTask);
            _classPrivateFieldInitSpec(this, _internalRenderTask, {
              writable: true,
              value: null
            });
            _classPrivateFieldSet(this, _internalRenderTask, internalRenderTask);
            this.onContinue = null;
          }
          _createClass(RenderTask, [{
            key: "promise",
            get: function get() {
              return _classPrivateFieldGet(this, _internalRenderTask).capability.promise;
            }
          }, {
            key: "cancel",
            value: function cancel() {
              var extraDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
              _classPrivateFieldGet(this, _internalRenderTask).cancel(null, extraDelay);
            }
          }, {
            key: "separateAnnots",
            get: function get() {
              var separateAnnots = _classPrivateFieldGet(this, _internalRenderTask).operatorList.separateAnnots;
              if (!separateAnnots) {
                return false;
              }
              var _classPrivateFieldGet2 = _classPrivateFieldGet(this, _internalRenderTask),
                annotationCanvasMap = _classPrivateFieldGet2.annotationCanvasMap;
              return separateAnnots.form || separateAnnots.canvas && (annotationCanvasMap === null || annotationCanvasMap === void 0 ? void 0 : annotationCanvasMap.size) > 0;
            }
          }]);
          return RenderTask;
        }();
        exports.RenderTask = RenderTask;
        var InternalRenderTask = /*#__PURE__*/function () {
          function InternalRenderTask(_ref23) {
            var callback = _ref23.callback,
              params = _ref23.params,
              objs = _ref23.objs,
              commonObjs = _ref23.commonObjs,
              annotationCanvasMap = _ref23.annotationCanvasMap,
              operatorList = _ref23.operatorList,
              pageIndex = _ref23.pageIndex,
              canvasFactory = _ref23.canvasFactory,
              filterFactory = _ref23.filterFactory,
              _ref23$useRequestAnim = _ref23.useRequestAnimationFrame,
              useRequestAnimationFrame = _ref23$useRequestAnim === void 0 ? false : _ref23$useRequestAnim,
              _ref23$pdfBug = _ref23.pdfBug,
              pdfBug = _ref23$pdfBug === void 0 ? false : _ref23$pdfBug,
              _ref23$pageColors = _ref23.pageColors,
              pageColors = _ref23$pageColors === void 0 ? null : _ref23$pageColors;
            _classCallCheck(this, InternalRenderTask);
            this.callback = callback;
            this.params = params;
            this.objs = objs;
            this.commonObjs = commonObjs;
            this.annotationCanvasMap = annotationCanvasMap;
            this.operatorListIdx = null;
            this.operatorList = operatorList;
            this._pageIndex = pageIndex;
            this.canvasFactory = canvasFactory;
            this.filterFactory = filterFactory;
            this._pdfBug = pdfBug;
            this.pageColors = pageColors;
            this.running = false;
            this.graphicsReadyCallback = null;
            this.graphicsReady = false;
            this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== "undefined";
            this.cancelled = false;
            this.capability = new _util.PromiseCapability();
            this.task = new RenderTask(this);
            this._cancelBound = this.cancel.bind(this);
            this._continueBound = this._continue.bind(this);
            this._scheduleNextBound = this._scheduleNext.bind(this);
            this._nextBound = this._next.bind(this);
            this._canvas = params.canvasContext.canvas;
          }
          _createClass(InternalRenderTask, [{
            key: "completed",
            get: function get() {
              return this.capability.promise.catch(function () {});
            }
          }, {
            key: "initializeGraphics",
            value: function initializeGraphics(_ref24) {
              var _globalThis$StepperMa, _this$graphicsReadyCa;
              var _ref24$transparency = _ref24.transparency,
                transparency = _ref24$transparency === void 0 ? false : _ref24$transparency,
                optionalContentConfig = _ref24.optionalContentConfig;
              if (this.cancelled) {
                return;
              }
              if (this._canvas) {
                if (_classStaticPrivateFieldSpecGet(InternalRenderTask, InternalRenderTask, _canvasInUse).has(this._canvas)) {
                  throw new Error("Cannot use the same canvas during multiple render() operations. " + "Use different canvas or ensure previous operations were " + "cancelled or completed.");
                }
                _classStaticPrivateFieldSpecGet(InternalRenderTask, InternalRenderTask, _canvasInUse).add(this._canvas);
              }
              if (this._pdfBug && (_globalThis$StepperMa = globalThis.StepperManager) !== null && _globalThis$StepperMa !== void 0 && _globalThis$StepperMa.enabled) {
                this.stepper = globalThis.StepperManager.create(this._pageIndex);
                this.stepper.init(this.operatorList);
                this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();
              }
              var _this$params = this.params,
                canvasContext = _this$params.canvasContext,
                viewport = _this$params.viewport,
                transform = _this$params.transform,
                background = _this$params.background;
              this.gfx = new _canvas.CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
                optionalContentConfig: optionalContentConfig
              }, this.annotationCanvasMap, this.pageColors);
              this.gfx.beginDrawing({
                transform: transform,
                viewport: viewport,
                transparency: transparency,
                background: background
              });
              this.operatorListIdx = 0;
              this.graphicsReady = true;
              (_this$graphicsReadyCa = this.graphicsReadyCallback) === null || _this$graphicsReadyCa === void 0 ? void 0 : _this$graphicsReadyCa.call(this);
            }
          }, {
            key: "cancel",
            value: function cancel() {
              var _this$gfx;
              var error = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
              var extraDelay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
              this.running = false;
              this.cancelled = true;
              (_this$gfx = this.gfx) === null || _this$gfx === void 0 ? void 0 : _this$gfx.endDrawing();
              if (this._canvas) {
                _classStaticPrivateFieldSpecGet(InternalRenderTask, InternalRenderTask, _canvasInUse).delete(this._canvas);
              }
              this.callback(error || new _display_utils.RenderingCancelledException("Rendering cancelled, page ".concat(this._pageIndex + 1), extraDelay));
            }
          }, {
            key: "operatorListChanged",
            value: function operatorListChanged() {
              var _this$stepper;
              if (!this.graphicsReady) {
                this.graphicsReadyCallback || (this.graphicsReadyCallback = this._continueBound);
                return;
              }
              (_this$stepper = this.stepper) === null || _this$stepper === void 0 ? void 0 : _this$stepper.updateOperatorList(this.operatorList);
              if (this.running) {
                return;
              }
              this._continue();
            }
          }, {
            key: "_continue",
            value: function _continue() {
              this.running = true;
              if (this.cancelled) {
                return;
              }
              if (this.task.onContinue) {
                this.task.onContinue(this._scheduleNextBound);
              } else {
                this._scheduleNext();
              }
            }
          }, {
            key: "_scheduleNext",
            value: function _scheduleNext() {
              var _this20 = this;
              if (this._useRequestAnimationFrame) {
                window.requestAnimationFrame(function () {
                  _this20._nextBound().catch(_this20._cancelBound);
                });
              } else {
                Promise.resolve().then(this._nextBound).catch(this._cancelBound);
              }
            }
          }, {
            key: "_next",
            value: function () {
              var _next2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
                return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                  while (1) switch (_context5.prev = _context5.next) {
                    case 0:
                      if (!this.cancelled) {
                        _context5.next = 2;
                        break;
                      }
                      return _context5.abrupt("return");
                    case 2:
                      this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);
                      if (this.operatorListIdx === this.operatorList.argsArray.length) {
                        this.running = false;
                        if (this.operatorList.lastChunk) {
                          this.gfx.endDrawing(this.pageColors);
                          if (this._canvas) {
                            _classStaticPrivateFieldSpecGet(InternalRenderTask, InternalRenderTask, _canvasInUse).delete(this._canvas);
                          }
                          this.callback();
                        }
                      }
                    case 4:
                    case "end":
                      return _context5.stop();
                  }
                }, _callee5, this);
              }));
              function _next() {
                return _next2.apply(this, arguments);
              }
              return _next;
            }()
          }]);
          return InternalRenderTask;
        }();
        var _canvasInUse = {
          writable: true,
          value: new WeakSet()
        };
        var version = '3.8.162';
        exports.version = version;
        var build = '2c74323e3';
        exports.build = build;

        /***/
      }, /* 3 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SerializableEmpty = exports.PrintAnnotationStorage = exports.AnnotationStorage = void 0;
        var _util = __w_pdfjs_require__(1);
        var _editor = __w_pdfjs_require__(4);
        var _murmurhash = __w_pdfjs_require__(8);
        var SerializableEmpty = Object.freeze({
          map: null,
          hash: "",
          transfers: undefined
        });
        exports.SerializableEmpty = SerializableEmpty;
        var _modified = /*#__PURE__*/new WeakMap();
        var _storage = /*#__PURE__*/new WeakMap();
        var _setModified = /*#__PURE__*/new WeakSet();
        var AnnotationStorage = /*#__PURE__*/function () {
          function AnnotationStorage() {
            _classCallCheck(this, AnnotationStorage);
            _classPrivateMethodInitSpec(this, _setModified);
            _classPrivateFieldInitSpec(this, _modified, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _storage, {
              writable: true,
              value: new Map()
            });
            this.onSetModified = null;
            this.onResetModified = null;
            this.onAnnotationEditor = null;
          }
          _createClass(AnnotationStorage, [{
            key: "getValue",
            value: function getValue(key, defaultValue) {
              var value = _classPrivateFieldGet(this, _storage).get(key);
              if (value === undefined) {
                return defaultValue;
              }
              return Object.assign(defaultValue, value);
            }
          }, {
            key: "getRawValue",
            value: function getRawValue(key) {
              return _classPrivateFieldGet(this, _storage).get(key);
            }
          }, {
            key: "remove",
            value: function remove(key) {
              _classPrivateFieldGet(this, _storage).delete(key);
              if (_classPrivateFieldGet(this, _storage).size === 0) {
                this.resetModified();
              }
              if (typeof this.onAnnotationEditor === "function") {
                var _iterator15 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _storage).values()),
                  _step15;
                try {
                  for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                    var value = _step15.value;
                    if (value instanceof _editor.AnnotationEditor) {
                      return;
                    }
                  }
                } catch (err) {
                  _iterator15.e(err);
                } finally {
                  _iterator15.f();
                }
                this.onAnnotationEditor(null);
              }
            }
          }, {
            key: "setValue",
            value: function setValue(key, value) {
              var obj = _classPrivateFieldGet(this, _storage).get(key);
              var modified = false;
              if (obj !== undefined) {
                for (var _i2 = 0, _Object$entries = Object.entries(value); _i2 < _Object$entries.length; _i2++) {
                  var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),
                    entry = _Object$entries$_i[0],
                    val = _Object$entries$_i[1];
                  if (obj[entry] !== val) {
                    modified = true;
                    obj[entry] = val;
                  }
                }
              } else {
                modified = true;
                _classPrivateFieldGet(this, _storage).set(key, value);
              }
              if (modified) {
                _classPrivateMethodGet(this, _setModified, _setModified2).call(this);
              }
              if (value instanceof _editor.AnnotationEditor && typeof this.onAnnotationEditor === "function") {
                this.onAnnotationEditor(value.constructor._type);
              }
            }
          }, {
            key: "has",
            value: function has(key) {
              return _classPrivateFieldGet(this, _storage).has(key);
            }
          }, {
            key: "getAll",
            value: function getAll() {
              return _classPrivateFieldGet(this, _storage).size > 0 ? (0, _util.objectFromMap)(_classPrivateFieldGet(this, _storage)) : null;
            }
          }, {
            key: "setAll",
            value: function setAll(obj) {
              for (var _i3 = 0, _Object$entries2 = Object.entries(obj); _i3 < _Object$entries2.length; _i3++) {
                var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i3], 2),
                  key = _Object$entries2$_i[0],
                  val = _Object$entries2$_i[1];
                this.setValue(key, val);
              }
            }
          }, {
            key: "size",
            get: function get() {
              return _classPrivateFieldGet(this, _storage).size;
            }
          }, {
            key: "resetModified",
            value: function resetModified() {
              if (_classPrivateFieldGet(this, _modified)) {
                _classPrivateFieldSet(this, _modified, false);
                if (typeof this.onResetModified === "function") {
                  this.onResetModified();
                }
              }
            }
          }, {
            key: "print",
            get: function get() {
              return new PrintAnnotationStorage(this);
            }
          }, {
            key: "serializable",
            get: function get() {
              if (_classPrivateFieldGet(this, _storage).size === 0) {
                return SerializableEmpty;
              }
              var map = new Map(),
                hash = new _murmurhash.MurmurHash3_64(),
                transfers = [];
              var _iterator16 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _storage)),
                _step16;
              try {
                for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                  var _step16$value = _slicedToArray(_step16.value, 2),
                    key = _step16$value[0],
                    val = _step16$value[1];
                  var serialized = val instanceof _editor.AnnotationEditor ? val.serialize() : val;
                  if (serialized) {
                    map.set(key, serialized);
                    hash.update("".concat(key, ":").concat(JSON.stringify(serialized)));
                    if (serialized.bitmap) {
                      transfers.push(serialized.bitmap);
                    }
                  }
                }
              } catch (err) {
                _iterator16.e(err);
              } finally {
                _iterator16.f();
              }
              return map.size > 0 ? {
                map: map,
                hash: hash.hexdigest(),
                transfers: transfers
              } : SerializableEmpty;
            }
          }]);
          return AnnotationStorage;
        }();
        function _setModified2() {
          if (!_classPrivateFieldGet(this, _modified)) {
            _classPrivateFieldSet(this, _modified, true);
            if (typeof this.onSetModified === "function") {
              this.onSetModified();
            }
          }
        }
        exports.AnnotationStorage = AnnotationStorage;
        var _serializable = /*#__PURE__*/new WeakMap();
        var PrintAnnotationStorage = /*#__PURE__*/function (_AnnotationStorage) {
          _inherits(PrintAnnotationStorage, _AnnotationStorage);
          var _super8 = _createSuper(PrintAnnotationStorage);
          function PrintAnnotationStorage(parent) {
            var _this22;
            _classCallCheck(this, PrintAnnotationStorage);
            _this22 = _super8.call(this);
            _classPrivateFieldInitSpec(_assertThisInitialized(_this22), _serializable, {
              writable: true,
              value: void 0
            });
            var _parent$serializable = parent.serializable,
              map = _parent$serializable.map,
              hash = _parent$serializable.hash,
              transfers = _parent$serializable.transfers;
            var clone = structuredClone(map, transfers ? {
              transfer: transfers
            } : null);
            _classPrivateFieldSet(_assertThisInitialized(_this22), _serializable, {
              map: clone,
              hash: hash,
              transfers: transfers
            });
            return _this22;
          }
          _createClass(PrintAnnotationStorage, [{
            key: "print",
            get: function get() {
              (0, _util.unreachable)("Should not call PrintAnnotationStorage.print");
            }
          }, {
            key: "serializable",
            get: function get() {
              return _classPrivateFieldGet(this, _serializable);
            }
          }]);
          return PrintAnnotationStorage;
        }(AnnotationStorage);
        exports.PrintAnnotationStorage = PrintAnnotationStorage;

        /***/
      }, /* 4 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnnotationEditor = void 0;
        var _tools = __w_pdfjs_require__(5);
        var _util = __w_pdfjs_require__(1);
        var _boundFocusin = /*#__PURE__*/new WeakMap();
        var _boundFocusout = /*#__PURE__*/new WeakMap();
        var _hasBeenSelected = /*#__PURE__*/new WeakMap();
        var _isEditing = /*#__PURE__*/new WeakMap();
        var _isInEditMode = /*#__PURE__*/new WeakMap();
        var _zIndex = /*#__PURE__*/new WeakMap();
        var AnnotationEditor = /*#__PURE__*/function () {
          function AnnotationEditor(parameters) {
            _classCallCheck(this, AnnotationEditor);
            _classPrivateFieldInitSpec(this, _boundFocusin, {
              writable: true,
              value: this.focusin.bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundFocusout, {
              writable: true,
              value: this.focusout.bind(this)
            });
            _classPrivateFieldInitSpec(this, _hasBeenSelected, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _isEditing, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _isInEditMode, {
              writable: true,
              value: false
            });
            _defineProperty(this, "_uiManager", null);
            _classPrivateFieldInitSpec(this, _zIndex, {
              writable: true,
              value: AnnotationEditor._zIndex++
            });
            if (this.constructor === AnnotationEditor) {
              (0, _util.unreachable)("Cannot initialize AnnotationEditor.");
            }
            this.parent = parameters.parent;
            this.id = parameters.id;
            this.width = this.height = null;
            this.pageIndex = parameters.parent.pageIndex;
            this.name = parameters.name;
            this.div = null;
            this._uiManager = parameters.uiManager;
            this.annotationElementId = null;
            var _this$parent$viewport = this.parent.viewport,
              rotation = _this$parent$viewport.rotation,
              _this$parent$viewport2 = _this$parent$viewport.rawDims,
              pageWidth = _this$parent$viewport2.pageWidth,
              pageHeight = _this$parent$viewport2.pageHeight,
              pageX = _this$parent$viewport2.pageX,
              pageY = _this$parent$viewport2.pageY;
            this.rotation = rotation;
            this.pageRotation = (360 + rotation - this._uiManager.viewParameters.rotation) % 360;
            this.pageDimensions = [pageWidth, pageHeight];
            this.pageTranslation = [pageX, pageY];
            var _this$parentDimension = _slicedToArray(this.parentDimensions, 2),
              width = _this$parentDimension[0],
              height = _this$parentDimension[1];
            this.x = parameters.x / width;
            this.y = parameters.y / height;
            this.isAttachedToDOM = false;
            this.deleted = false;
          }
          _createClass(AnnotationEditor, [{
            key: "addCommands",
            value: function addCommands(params) {
              this._uiManager.addCommands(params);
            }
          }, {
            key: "currentLayer",
            get: function get() {
              return this._uiManager.currentLayer;
            }
          }, {
            key: "setInBackground",
            value: function setInBackground() {
              this.div.style.zIndex = 0;
            }
          }, {
            key: "setInForeground",
            value: function setInForeground() {
              this.div.style.zIndex = _classPrivateFieldGet(this, _zIndex);
            }
          }, {
            key: "setParent",
            value: function setParent(parent) {
              if (parent !== null) {
                this.pageIndex = parent.pageIndex;
                this.pageDimensions = parent.pageDimensions;
              }
              this.parent = parent;
            }
          }, {
            key: "focusin",
            value: function focusin(event) {
              if (!_classPrivateFieldGet(this, _hasBeenSelected)) {
                this.parent.setSelected(this);
              } else {
                _classPrivateFieldSet(this, _hasBeenSelected, false);
              }
            }
          }, {
            key: "focusout",
            value: function focusout(event) {
              var _this$parent;
              if (!this.isAttachedToDOM) {
                return;
              }
              var target = event.relatedTarget;
              if (target !== null && target !== void 0 && target.closest("#".concat(this.id))) {
                return;
              }
              event.preventDefault();
              if (!((_this$parent = this.parent) !== null && _this$parent !== void 0 && _this$parent.isMultipleSelection)) {
                this.commitOrRemove();
              }
            }
          }, {
            key: "commitOrRemove",
            value: function commitOrRemove() {
              if (this.isEmpty()) {
                this.remove();
              } else {
                this.commit();
              }
            }
          }, {
            key: "commit",
            value: function commit() {
              this.addToAnnotationStorage();
            }
          }, {
            key: "addToAnnotationStorage",
            value: function addToAnnotationStorage() {
              this._uiManager.addToAnnotationStorage(this);
            }
          }, {
            key: "dragstart",
            value: function dragstart(event) {
              var rect = this.parent.div.getBoundingClientRect();
              this.startX = event.clientX - rect.x;
              this.startY = event.clientY - rect.y;
              event.dataTransfer.setData("text/plain", this.id);
              event.dataTransfer.effectAllowed = "move";
            }
          }, {
            key: "setAt",
            value: function setAt(x, y, tx, ty) {
              var _this$parentDimension2 = _slicedToArray(this.parentDimensions, 2),
                width = _this$parentDimension2[0],
                height = _this$parentDimension2[1];
              var _this$screenToPageTra = this.screenToPageTranslation(tx, ty);
              var _this$screenToPageTra2 = _slicedToArray(_this$screenToPageTra, 2);
              tx = _this$screenToPageTra2[0];
              ty = _this$screenToPageTra2[1];
              this.x = (x + tx) / width;
              this.y = (y + ty) / height;
              this.div.style.left = "".concat(100 * this.x, "%");
              this.div.style.top = "".concat(100 * this.y, "%");
            }
          }, {
            key: "translate",
            value: function translate(x, y) {
              var _this$parentDimension3 = _slicedToArray(this.parentDimensions, 2),
                width = _this$parentDimension3[0],
                height = _this$parentDimension3[1];
              var _this$screenToPageTra3 = this.screenToPageTranslation(x, y);
              var _this$screenToPageTra4 = _slicedToArray(_this$screenToPageTra3, 2);
              x = _this$screenToPageTra4[0];
              y = _this$screenToPageTra4[1];
              this.x += x / width;
              this.y += y / height;
              this.div.style.left = "".concat(100 * this.x, "%");
              this.div.style.top = "".concat(100 * this.y, "%");
            }
          }, {
            key: "screenToPageTranslation",
            value: function screenToPageTranslation(x, y) {
              switch (this.parentRotation) {
                case 90:
                  return [y, -x];
                case 180:
                  return [-x, -y];
                case 270:
                  return [-y, x];
                default:
                  return [x, y];
              }
            }
          }, {
            key: "parentScale",
            get: function get() {
              return this._uiManager.viewParameters.realScale;
            }
          }, {
            key: "parentRotation",
            get: function get() {
              return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;
            }
          }, {
            key: "parentDimensions",
            get: function get() {
              var realScale = this._uiManager.viewParameters.realScale;
              var _this$pageDimensions = _slicedToArray(this.pageDimensions, 2),
                pageWidth = _this$pageDimensions[0],
                pageHeight = _this$pageDimensions[1];
              return [pageWidth * realScale, pageHeight * realScale];
            }
          }, {
            key: "setDims",
            value: function setDims(width, height) {
              var _this$parentDimension4 = _slicedToArray(this.parentDimensions, 2),
                parentWidth = _this$parentDimension4[0],
                parentHeight = _this$parentDimension4[1];
              this.div.style.width = "".concat(100 * width / parentWidth, "%");
              this.div.style.height = "".concat(100 * height / parentHeight, "%");
            }
          }, {
            key: "fixDims",
            value: function fixDims() {
              var style = this.div.style;
              var height = style.height,
                width = style.width;
              var widthPercent = width.endsWith("%");
              var heightPercent = height.endsWith("%");
              if (widthPercent && heightPercent) {
                return;
              }
              var _this$parentDimension5 = _slicedToArray(this.parentDimensions, 2),
                parentWidth = _this$parentDimension5[0],
                parentHeight = _this$parentDimension5[1];
              if (!widthPercent) {
                style.width = "".concat(100 * parseFloat(width) / parentWidth, "%");
              }
              if (!heightPercent) {
                style.height = "".concat(100 * parseFloat(height) / parentHeight, "%");
              }
            }
          }, {
            key: "getInitialTranslation",
            value: function getInitialTranslation() {
              return [0, 0];
            }
          }, {
            key: "render",
            value: function render() {
              this.div = document.createElement("div");
              this.div.setAttribute("data-editor-rotation", (360 - this.rotation) % 360);
              this.div.className = this.name;
              this.div.setAttribute("id", this.id);
              this.div.setAttribute("tabIndex", 0);
              this.setInForeground();
              this.div.addEventListener("focusin", _classPrivateFieldGet(this, _boundFocusin));
              this.div.addEventListener("focusout", _classPrivateFieldGet(this, _boundFocusout));
              var _this$getInitialTrans = this.getInitialTranslation(),
                _this$getInitialTrans2 = _slicedToArray(_this$getInitialTrans, 2),
                tx = _this$getInitialTrans2[0],
                ty = _this$getInitialTrans2[1];
              this.translate(tx, ty);
              (0, _tools.bindEvents)(this, this.div, ["dragstart", "pointerdown"]);
              return this.div;
            }
          }, {
            key: "pointerdown",
            value: function pointerdown(event) {
              var isMac = _util.FeatureTest.platform.isMac;
              if (event.button !== 0 || event.ctrlKey && isMac) {
                event.preventDefault();
                return;
              }
              if (event.ctrlKey && !isMac || event.shiftKey || event.metaKey && isMac) {
                this.parent.toggleSelected(this);
              } else {
                this.parent.setSelected(this);
              }
              _classPrivateFieldSet(this, _hasBeenSelected, true);
            }
          }, {
            key: "getRect",
            value: function getRect(tx, ty) {
              var scale = this.parentScale;
              var _this$pageDimensions2 = _slicedToArray(this.pageDimensions, 2),
                pageWidth = _this$pageDimensions2[0],
                pageHeight = _this$pageDimensions2[1];
              var _this$pageTranslation = _slicedToArray(this.pageTranslation, 2),
                pageX = _this$pageTranslation[0],
                pageY = _this$pageTranslation[1];
              var shiftX = tx / scale;
              var shiftY = ty / scale;
              var x = this.x * pageWidth;
              var y = this.y * pageHeight;
              var width = this.width * pageWidth;
              var height = this.height * pageHeight;
              switch (this.rotation) {
                case 0:
                  return [x + shiftX + pageX, pageHeight - y - shiftY - height + pageY, x + shiftX + width + pageX, pageHeight - y - shiftY + pageY];
                case 90:
                  return [x + shiftY + pageX, pageHeight - y + shiftX + pageY, x + shiftY + height + pageX, pageHeight - y + shiftX + width + pageY];
                case 180:
                  return [x - shiftX - width + pageX, pageHeight - y + shiftY + pageY, x - shiftX + pageX, pageHeight - y + shiftY + height + pageY];
                case 270:
                  return [x - shiftY - height + pageX, pageHeight - y - shiftX - width + pageY, x - shiftY + pageX, pageHeight - y - shiftX + pageY];
                default:
                  throw new Error("Invalid rotation");
              }
            }
          }, {
            key: "getRectInCurrentCoords",
            value: function getRectInCurrentCoords(rect, pageHeight) {
              var _rect = _slicedToArray(rect, 4),
                x1 = _rect[0],
                y1 = _rect[1],
                x2 = _rect[2],
                y2 = _rect[3];
              var width = x2 - x1;
              var height = y2 - y1;
              switch (this.rotation) {
                case 0:
                  return [x1, pageHeight - y2, width, height];
                case 90:
                  return [x1, pageHeight - y1, height, width];
                case 180:
                  return [x2, pageHeight - y1, width, height];
                case 270:
                  return [x2, pageHeight - y2, height, width];
                default:
                  throw new Error("Invalid rotation");
              }
            }
          }, {
            key: "onceAdded",
            value: function onceAdded() {}
          }, {
            key: "isEmpty",
            value: function isEmpty() {
              return false;
            }
          }, {
            key: "enableEditMode",
            value: function enableEditMode() {
              _classPrivateFieldSet(this, _isInEditMode, true);
            }
          }, {
            key: "disableEditMode",
            value: function disableEditMode() {
              _classPrivateFieldSet(this, _isInEditMode, false);
            }
          }, {
            key: "isInEditMode",
            value: function isInEditMode() {
              return _classPrivateFieldGet(this, _isInEditMode);
            }
          }, {
            key: "shouldGetKeyboardEvents",
            value: function shouldGetKeyboardEvents() {
              return false;
            }
          }, {
            key: "needsToBeRebuilt",
            value: function needsToBeRebuilt() {
              return this.div && !this.isAttachedToDOM;
            }
          }, {
            key: "rebuild",
            value: function rebuild() {
              var _this$div, _this$div2;
              (_this$div = this.div) === null || _this$div === void 0 ? void 0 : _this$div.addEventListener("focusin", _classPrivateFieldGet(this, _boundFocusin));
              (_this$div2 = this.div) === null || _this$div2 === void 0 ? void 0 : _this$div2.addEventListener("focusout", _classPrivateFieldGet(this, _boundFocusout));
            }
          }, {
            key: "serialize",
            value: function serialize() {
              var _isForCopying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              (0, _util.unreachable)("An editor must be serializable");
            }
          }, {
            key: "remove",
            value: function remove() {
              this.div.removeEventListener("focusin", _classPrivateFieldGet(this, _boundFocusin));
              this.div.removeEventListener("focusout", _classPrivateFieldGet(this, _boundFocusout));
              if (!this.isEmpty()) {
                this.commit();
              }
              this.parent.remove(this);
            }
          }, {
            key: "select",
            value: function select() {
              var _this$div3;
              (_this$div3 = this.div) === null || _this$div3 === void 0 ? void 0 : _this$div3.classList.add("selectedEditor");
            }
          }, {
            key: "unselect",
            value: function unselect() {
              var _this$div4;
              (_this$div4 = this.div) === null || _this$div4 === void 0 ? void 0 : _this$div4.classList.remove("selectedEditor");
            }
          }, {
            key: "updateParams",
            value: function updateParams(type, value) {}
          }, {
            key: "disableEditing",
            value: function disableEditing() {}
          }, {
            key: "enableEditing",
            value: function enableEditing() {}
          }, {
            key: "propertiesToUpdate",
            get: function get() {
              return {};
            }
          }, {
            key: "contentDiv",
            get: function get() {
              return this.div;
            }
          }, {
            key: "isEditing",
            get: function get() {
              return _classPrivateFieldGet(this, _isEditing);
            },
            set: function set(value) {
              _classPrivateFieldSet(this, _isEditing, value);
              if (value) {
                this.parent.setSelected(this);
                this.parent.setActiveEditor(this);
              } else {
                this.parent.setActiveEditor(null);
              }
            }
          }], [{
            key: "_defaultLineColor",
            get: function get() {
              return (0, _util.shadow)(this, "_defaultLineColor", this._colorManager.getHexCode("CanvasText"));
            }
          }, {
            key: "deleteAnnotationElement",
            value: function deleteAnnotationElement(editor) {
              var fakeEditor = new FakeEditor({
                id: editor.parent.getNextId(),
                parent: editor.parent,
                uiManager: editor._uiManager
              });
              fakeEditor.annotationElementId = editor.annotationElementId;
              fakeEditor.deleted = true;
              fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);
            }
          }, {
            key: "deserialize",
            value: function deserialize(data, parent, uiManager) {
              var editor = new this.prototype.constructor({
                parent: parent,
                id: parent.getNextId(),
                uiManager: uiManager
              });
              editor.rotation = data.rotation;
              var _editor$pageDimension = _slicedToArray(editor.pageDimensions, 2),
                pageWidth = _editor$pageDimension[0],
                pageHeight = _editor$pageDimension[1];
              var _editor$getRectInCurr = editor.getRectInCurrentCoords(data.rect, pageHeight),
                _editor$getRectInCurr2 = _slicedToArray(_editor$getRectInCurr, 4),
                x = _editor$getRectInCurr2[0],
                y = _editor$getRectInCurr2[1],
                width = _editor$getRectInCurr2[2],
                height = _editor$getRectInCurr2[3];
              editor.x = x / pageWidth;
              editor.y = y / pageHeight;
              editor.width = width / pageWidth;
              editor.height = height / pageHeight;
              return editor;
            }
          }]);
          return AnnotationEditor;
        }();
        _defineProperty(AnnotationEditor, "_colorManager", new _tools.ColorManager());
        _defineProperty(AnnotationEditor, "_zIndex", 1);
        exports.AnnotationEditor = AnnotationEditor;
        var FakeEditor = /*#__PURE__*/function (_AnnotationEditor) {
          _inherits(FakeEditor, _AnnotationEditor);
          var _super9 = _createSuper(FakeEditor);
          function FakeEditor(params) {
            var _this23;
            _classCallCheck(this, FakeEditor);
            _this23 = _super9.call(this, params);
            _this23.annotationElementId = params.annotationElementId;
            _this23.deleted = true;
            return _this23;
          }
          _createClass(FakeEditor, [{
            key: "serialize",
            value: function serialize() {
              return {
                id: this.annotationElementId,
                deleted: true,
                pageIndex: this.pageIndex
              };
            }
          }]);
          return FakeEditor;
        }(AnnotationEditor);
        /***/
      }, /* 5 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.KeyboardManager = exports.CommandManager = exports.ColorManager = exports.AnnotationEditorUIManager = void 0;
        exports.bindEvents = bindEvents;
        exports.opacityToHex = opacityToHex;
        var _util = __w_pdfjs_require__(1);
        var _display_utils = __w_pdfjs_require__(6);
        function bindEvents(obj, element, names) {
          var _iterator17 = _createForOfIteratorHelper(names),
            _step17;
          try {
            for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
              var name = _step17.value;
              element.addEventListener(name, obj[name].bind(obj));
            }
          } catch (err) {
            _iterator17.e(err);
          } finally {
            _iterator17.f();
          }
        }
        function opacityToHex(opacity) {
          return Math.round(Math.min(255, Math.max(1, 255 * opacity))).toString(16).padStart(2, "0");
        }
        var _id = /*#__PURE__*/new WeakMap();
        var IdManager = /*#__PURE__*/function () {
          function IdManager() {
            _classCallCheck(this, IdManager);
            _classPrivateFieldInitSpec(this, _id, {
              writable: true,
              value: 0
            });
          }
          _createClass(IdManager, [{
            key: "getId",
            value: function getId() {
              var _this$id, _this$id2;
              return "".concat(_util.AnnotationEditorPrefix).concat((_classPrivateFieldSet(this, _id, (_this$id = _classPrivateFieldGet(this, _id), _this$id2 = _this$id++, _this$id)), _this$id2));
            }
          }]);
          return IdManager;
        }();
        var _commands = /*#__PURE__*/new WeakMap();
        var _locked = /*#__PURE__*/new WeakMap();
        var _maxSize = /*#__PURE__*/new WeakMap();
        var _position = /*#__PURE__*/new WeakMap();
        var CommandManager = /*#__PURE__*/function () {
          function CommandManager() {
            var maxSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;
            _classCallCheck(this, CommandManager);
            _classPrivateFieldInitSpec(this, _commands, {
              writable: true,
              value: []
            });
            _classPrivateFieldInitSpec(this, _locked, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _maxSize, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(this, _position, {
              writable: true,
              value: -1
            });
            _classPrivateFieldSet(this, _maxSize, maxSize);
          }
          _createClass(CommandManager, [{
            key: "add",
            value: function add(_ref25) {
              var cmd = _ref25.cmd,
                undo = _ref25.undo,
                mustExec = _ref25.mustExec,
                _ref25$type = _ref25.type,
                type = _ref25$type === void 0 ? NaN : _ref25$type,
                _ref25$overwriteIfSam = _ref25.overwriteIfSameType,
                overwriteIfSameType = _ref25$overwriteIfSam === void 0 ? false : _ref25$overwriteIfSam,
                _ref25$keepUndo = _ref25.keepUndo,
                keepUndo = _ref25$keepUndo === void 0 ? false : _ref25$keepUndo;
              if (mustExec) {
                cmd();
              }
              if (_classPrivateFieldGet(this, _locked)) {
                return;
              }
              var save = {
                cmd: cmd,
                undo: undo,
                type: type
              };
              if (_classPrivateFieldGet(this, _position) === -1) {
                if (_classPrivateFieldGet(this, _commands).length > 0) {
                  _classPrivateFieldGet(this, _commands).length = 0;
                }
                _classPrivateFieldSet(this, _position, 0);
                _classPrivateFieldGet(this, _commands).push(save);
                return;
              }
              if (overwriteIfSameType && _classPrivateFieldGet(this, _commands)[_classPrivateFieldGet(this, _position)].type === type) {
                if (keepUndo) {
                  save.undo = _classPrivateFieldGet(this, _commands)[_classPrivateFieldGet(this, _position)].undo;
                }
                _classPrivateFieldGet(this, _commands)[_classPrivateFieldGet(this, _position)] = save;
                return;
              }
              var next = _classPrivateFieldGet(this, _position) + 1;
              if (next === _classPrivateFieldGet(this, _maxSize)) {
                _classPrivateFieldGet(this, _commands).splice(0, 1);
              } else {
                _classPrivateFieldSet(this, _position, next);
                if (next < _classPrivateFieldGet(this, _commands).length) {
                  _classPrivateFieldGet(this, _commands).splice(next);
                }
              }
              _classPrivateFieldGet(this, _commands).push(save);
            }
          }, {
            key: "undo",
            value: function undo() {
              if (_classPrivateFieldGet(this, _position) === -1) {
                return;
              }
              _classPrivateFieldSet(this, _locked, true);
              _classPrivateFieldGet(this, _commands)[_classPrivateFieldGet(this, _position)].undo();
              _classPrivateFieldSet(this, _locked, false);
              _classPrivateFieldSet(this, _position, _classPrivateFieldGet(this, _position) - 1);
            }
          }, {
            key: "redo",
            value: function redo() {
              if (_classPrivateFieldGet(this, _position) < _classPrivateFieldGet(this, _commands).length - 1) {
                _classPrivateFieldSet(this, _position, _classPrivateFieldGet(this, _position) + 1);
                _classPrivateFieldSet(this, _locked, true);
                _classPrivateFieldGet(this, _commands)[_classPrivateFieldGet(this, _position)].cmd();
                _classPrivateFieldSet(this, _locked, false);
              }
            }
          }, {
            key: "hasSomethingToUndo",
            value: function hasSomethingToUndo() {
              return _classPrivateFieldGet(this, _position) !== -1;
            }
          }, {
            key: "hasSomethingToRedo",
            value: function hasSomethingToRedo() {
              return _classPrivateFieldGet(this, _position) < _classPrivateFieldGet(this, _commands).length - 1;
            }
          }, {
            key: "destroy",
            value: function destroy() {
              _classPrivateFieldSet(this, _commands, null);
            }
          }]);
          return CommandManager;
        }();
        exports.CommandManager = CommandManager;
        var _serialize = /*#__PURE__*/new WeakSet();
        var KeyboardManager = /*#__PURE__*/function () {
          function KeyboardManager(callbacks) {
            _classCallCheck(this, KeyboardManager);
            _classPrivateMethodInitSpec(this, _serialize);
            this.buffer = [];
            this.callbacks = new Map();
            this.allKeys = new Set();
            var isMac = _util.FeatureTest.platform.isMac;
            var _iterator18 = _createForOfIteratorHelper(callbacks),
              _step18;
            try {
              for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                var _step18$value = _slicedToArray(_step18.value, 3),
                  keys = _step18$value[0],
                  callback = _step18$value[1],
                  _step18$value$ = _step18$value[2],
                  bubbles = _step18$value$ === void 0 ? false : _step18$value$;
                var _iterator19 = _createForOfIteratorHelper(keys),
                  _step19;
                try {
                  for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
                    var key = _step19.value;
                    var isMacKey = key.startsWith("mac+");
                    if (isMac && isMacKey) {
                      this.callbacks.set(key.slice(4), {
                        callback: callback,
                        bubbles: bubbles
                      });
                      this.allKeys.add(key.split("+").at(-1));
                    } else if (!isMac && !isMacKey) {
                      this.callbacks.set(key, {
                        callback: callback,
                        bubbles: bubbles
                      });
                      this.allKeys.add(key.split("+").at(-1));
                    }
                  }
                } catch (err) {
                  _iterator19.e(err);
                } finally {
                  _iterator19.f();
                }
              }
            } catch (err) {
              _iterator18.e(err);
            } finally {
              _iterator18.f();
            }
          }
          _createClass(KeyboardManager, [{
            key: "exec",
            value: function exec(self, event) {
              if (!this.allKeys.has(event.key)) {
                return;
              }
              var info = this.callbacks.get(_classPrivateMethodGet(this, _serialize, _serialize2).call(this, event));
              if (!info) {
                return;
              }
              var callback = info.callback,
                bubbles = info.bubbles;
              callback.bind(self)();
              if (!bubbles) {
                event.stopPropagation();
                event.preventDefault();
              }
            }
          }]);
          return KeyboardManager;
        }();
        function _serialize2(event) {
          if (event.altKey) {
            this.buffer.push("alt");
          }
          if (event.ctrlKey) {
            this.buffer.push("ctrl");
          }
          if (event.metaKey) {
            this.buffer.push("meta");
          }
          if (event.shiftKey) {
            this.buffer.push("shift");
          }
          this.buffer.push(event.key);
          var str = this.buffer.join("+");
          this.buffer.length = 0;
          return str;
        }
        exports.KeyboardManager = KeyboardManager;
        var ColorManager = /*#__PURE__*/function () {
          function ColorManager() {
            _classCallCheck(this, ColorManager);
          }
          _createClass(ColorManager, [{
            key: "_colors",
            get: function get() {
              var colors = new Map([["CanvasText", null], ["Canvas", null]]);
              (0, _display_utils.getColorValues)(colors);
              return (0, _util.shadow)(this, "_colors", colors);
            }
          }, {
            key: "convert",
            value: function convert(color) {
              var rgb = (0, _display_utils.getRGB)(color);
              if (!window.matchMedia("(forced-colors: active)").matches) {
                return rgb;
              }
              var _iterator20 = _createForOfIteratorHelper(this._colors),
                _step20;
              try {
                for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
                  var _step20$value = _slicedToArray(_step20.value, 2),
                    name = _step20$value[0],
                    RGB = _step20$value[1];
                  if (RGB.every(function (x, i) {
                    return x === rgb[i];
                  })) {
                    return ColorManager._colorsMapping.get(name);
                  }
                }
              } catch (err) {
                _iterator20.e(err);
              } finally {
                _iterator20.f();
              }
              return rgb;
            }
          }, {
            key: "getHexCode",
            value: function getHexCode(name) {
              var _util$Util;
              var rgb = this._colors.get(name);
              if (!rgb) {
                return name;
              }
              return (_util$Util = _util.Util).makeHexColor.apply(_util$Util, _toConsumableArray(rgb));
            }
          }]);
          return ColorManager;
        }();
        _defineProperty(ColorManager, "_colorsMapping", new Map([["CanvasText", [0, 0, 0]], ["Canvas", [255, 255, 255]]]));
        exports.ColorManager = ColorManager;
        var _activeEditor = /*#__PURE__*/new WeakMap();
        var _allEditors = /*#__PURE__*/new WeakMap();
        var _allLayers = /*#__PURE__*/new WeakMap();
        var _annotationStorage = /*#__PURE__*/new WeakMap();
        var _commandManager = /*#__PURE__*/new WeakMap();
        var _currentPageIndex = /*#__PURE__*/new WeakMap();
        var _deletedAnnotationsElementIds = /*#__PURE__*/new WeakMap();
        var _editorTypes = /*#__PURE__*/new WeakMap();
        var _editorsToRescale = /*#__PURE__*/new WeakMap();
        var _eventBus = /*#__PURE__*/new WeakMap();
        var _idManager = /*#__PURE__*/new WeakMap();
        var _isEnabled = /*#__PURE__*/new WeakMap();
        var _mode = /*#__PURE__*/new WeakMap();
        var _selectedEditors = /*#__PURE__*/new WeakMap();
        var _boundCopy = /*#__PURE__*/new WeakMap();
        var _boundCut = /*#__PURE__*/new WeakMap();
        var _boundPaste = /*#__PURE__*/new WeakMap();
        var _boundKeydown = /*#__PURE__*/new WeakMap();
        var _boundOnEditingAction = /*#__PURE__*/new WeakMap();
        var _boundOnPageChanging = /*#__PURE__*/new WeakMap();
        var _boundOnScaleChanging = /*#__PURE__*/new WeakMap();
        var _boundOnRotationChanging = /*#__PURE__*/new WeakMap();
        var _previousStates = /*#__PURE__*/new WeakMap();
        var _container = /*#__PURE__*/new WeakMap();
        var _addKeyboardManager = /*#__PURE__*/new WeakSet();
        var _removeKeyboardManager = /*#__PURE__*/new WeakSet();
        var _addCopyPasteListeners = /*#__PURE__*/new WeakSet();
        var _removeCopyPasteListeners = /*#__PURE__*/new WeakSet();
        var _dispatchUpdateStates = /*#__PURE__*/new WeakSet();
        var _dispatchUpdateUI = /*#__PURE__*/new WeakSet();
        var _enableAll = /*#__PURE__*/new WeakSet();
        var _disableAll = /*#__PURE__*/new WeakSet();
        var _addEditorToLayer = /*#__PURE__*/new WeakSet();
        var _isEmpty = /*#__PURE__*/new WeakSet();
        var _selectEditors = /*#__PURE__*/new WeakSet();
        var AnnotationEditorUIManager = /*#__PURE__*/function () {
          function AnnotationEditorUIManager(container, eventBus, annotationStorage) {
            _classCallCheck(this, AnnotationEditorUIManager);
            _classPrivateMethodInitSpec(this, _selectEditors);
            _classPrivateMethodInitSpec(this, _isEmpty);
            _classPrivateMethodInitSpec(this, _addEditorToLayer);
            _classPrivateMethodInitSpec(this, _disableAll);
            _classPrivateMethodInitSpec(this, _enableAll);
            _classPrivateMethodInitSpec(this, _dispatchUpdateUI);
            _classPrivateMethodInitSpec(this, _dispatchUpdateStates);
            _classPrivateMethodInitSpec(this, _removeCopyPasteListeners);
            _classPrivateMethodInitSpec(this, _addCopyPasteListeners);
            _classPrivateMethodInitSpec(this, _removeKeyboardManager);
            _classPrivateMethodInitSpec(this, _addKeyboardManager);
            _classPrivateFieldInitSpec(this, _activeEditor, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _allEditors, {
              writable: true,
              value: new Map()
            });
            _classPrivateFieldInitSpec(this, _allLayers, {
              writable: true,
              value: new Map()
            });
            _classPrivateFieldInitSpec(this, _annotationStorage, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _commandManager, {
              writable: true,
              value: new CommandManager()
            });
            _classPrivateFieldInitSpec(this, _currentPageIndex, {
              writable: true,
              value: 0
            });
            _classPrivateFieldInitSpec(this, _deletedAnnotationsElementIds, {
              writable: true,
              value: new Set()
            });
            _classPrivateFieldInitSpec(this, _editorTypes, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _editorsToRescale, {
              writable: true,
              value: new Set()
            });
            _classPrivateFieldInitSpec(this, _eventBus, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _idManager, {
              writable: true,
              value: new IdManager()
            });
            _classPrivateFieldInitSpec(this, _isEnabled, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _mode, {
              writable: true,
              value: _util.AnnotationEditorType.NONE
            });
            _classPrivateFieldInitSpec(this, _selectedEditors, {
              writable: true,
              value: new Set()
            });
            _classPrivateFieldInitSpec(this, _boundCopy, {
              writable: true,
              value: this.copy.bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundCut, {
              writable: true,
              value: this.cut.bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundPaste, {
              writable: true,
              value: this.paste.bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundKeydown, {
              writable: true,
              value: this.keydown.bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundOnEditingAction, {
              writable: true,
              value: this.onEditingAction.bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundOnPageChanging, {
              writable: true,
              value: this.onPageChanging.bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundOnScaleChanging, {
              writable: true,
              value: this.onScaleChanging.bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundOnRotationChanging, {
              writable: true,
              value: this.onRotationChanging.bind(this)
            });
            _classPrivateFieldInitSpec(this, _previousStates, {
              writable: true,
              value: {
                isEditing: false,
                isEmpty: true,
                hasSomethingToUndo: false,
                hasSomethingToRedo: false,
                hasSelectedEditor: false
              }
            });
            _classPrivateFieldInitSpec(this, _container, {
              writable: true,
              value: null
            });
            _classPrivateFieldSet(this, _container, container);
            _classPrivateFieldSet(this, _eventBus, eventBus);
            _classPrivateFieldGet(this, _eventBus)._on("editingaction", _classPrivateFieldGet(this, _boundOnEditingAction));
            _classPrivateFieldGet(this, _eventBus)._on("pagechanging", _classPrivateFieldGet(this, _boundOnPageChanging));
            _classPrivateFieldGet(this, _eventBus)._on("scalechanging", _classPrivateFieldGet(this, _boundOnScaleChanging));
            _classPrivateFieldGet(this, _eventBus)._on("rotationchanging", _classPrivateFieldGet(this, _boundOnRotationChanging));
            _classPrivateFieldSet(this, _annotationStorage, annotationStorage);
            this.viewParameters = {
              realScale: _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS,
              rotation: 0
            };
          }
          _createClass(AnnotationEditorUIManager, [{
            key: "destroy",
            value: function destroy() {
              _classPrivateMethodGet(this, _removeKeyboardManager, _removeKeyboardManager2).call(this);
              _classPrivateFieldGet(this, _eventBus)._off("editingaction", _classPrivateFieldGet(this, _boundOnEditingAction));
              _classPrivateFieldGet(this, _eventBus)._off("pagechanging", _classPrivateFieldGet(this, _boundOnPageChanging));
              _classPrivateFieldGet(this, _eventBus)._off("scalechanging", _classPrivateFieldGet(this, _boundOnScaleChanging));
              _classPrivateFieldGet(this, _eventBus)._off("rotationchanging", _classPrivateFieldGet(this, _boundOnRotationChanging));
              var _iterator21 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _allLayers).values()),
                _step21;
              try {
                for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
                  var layer = _step21.value;
                  layer.destroy();
                }
              } catch (err) {
                _iterator21.e(err);
              } finally {
                _iterator21.f();
              }
              _classPrivateFieldGet(this, _allLayers).clear();
              _classPrivateFieldGet(this, _allEditors).clear();
              _classPrivateFieldGet(this, _editorsToRescale).clear();
              _classPrivateFieldSet(this, _activeEditor, null);
              _classPrivateFieldGet(this, _selectedEditors).clear();
              _classPrivateFieldGet(this, _commandManager).destroy();
            }
          }, {
            key: "onPageChanging",
            value: function onPageChanging(_ref26) {
              var pageNumber = _ref26.pageNumber;
              _classPrivateFieldSet(this, _currentPageIndex, pageNumber - 1);
            }
          }, {
            key: "focusMainContainer",
            value: function focusMainContainer() {
              _classPrivateFieldGet(this, _container).focus();
            }
          }, {
            key: "addShouldRescale",
            value: function addShouldRescale(editor) {
              _classPrivateFieldGet(this, _editorsToRescale).add(editor);
            }
          }, {
            key: "removeShouldRescale",
            value: function removeShouldRescale(editor) {
              _classPrivateFieldGet(this, _editorsToRescale).delete(editor);
            }
          }, {
            key: "onScaleChanging",
            value: function onScaleChanging(_ref27) {
              var scale = _ref27.scale;
              this.commitOrRemove();
              this.viewParameters.realScale = scale * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS;
              var _iterator22 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _editorsToRescale)),
                _step22;
              try {
                for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
                  var editor = _step22.value;
                  editor.onScaleChanging();
                }
              } catch (err) {
                _iterator22.e(err);
              } finally {
                _iterator22.f();
              }
            }
          }, {
            key: "onRotationChanging",
            value: function onRotationChanging(_ref28) {
              var pagesRotation = _ref28.pagesRotation;
              this.commitOrRemove();
              this.viewParameters.rotation = pagesRotation;
            }
          }, {
            key: "addToAnnotationStorage",
            value: function addToAnnotationStorage(editor) {
              if (!editor.isEmpty() && _classPrivateFieldGet(this, _annotationStorage) && !_classPrivateFieldGet(this, _annotationStorage).has(editor.id)) {
                _classPrivateFieldGet(this, _annotationStorage).setValue(editor.id, editor);
              }
            }
          }, {
            key: "copy",
            value: function copy(event) {
              event.preventDefault();
              if (_classPrivateFieldGet(this, _activeEditor)) {
                _classPrivateFieldGet(this, _activeEditor).commitOrRemove();
              }
              if (!this.hasSelection) {
                return;
              }
              var editors = [];
              var _iterator23 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _selectedEditors)),
                _step23;
              try {
                for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
                  var editor = _step23.value;
                  var serialized = editor.serialize(true);
                  if (serialized) {
                    editors.push(serialized);
                  }
                }
              } catch (err) {
                _iterator23.e(err);
              } finally {
                _iterator23.f();
              }
              if (editors.length === 0) {
                return;
              }
              event.clipboardData.setData("application/pdfjs", JSON.stringify(editors));
            }
          }, {
            key: "cut",
            value: function cut(event) {
              this.copy(event);
              this.delete();
            }
          }, {
            key: "paste",
            value: function paste(event) {
              var _this24 = this;
              event.preventDefault();
              var data = event.clipboardData.getData("application/pdfjs");
              if (!data) {
                return;
              }
              try {
                data = JSON.parse(data);
              } catch (ex) {
                (0, _util.warn)("paste: \"".concat(ex.message, "\"."));
                return;
              }
              if (!Array.isArray(data)) {
                return;
              }
              this.unselectAll();
              var layer = _classPrivateFieldGet(this, _allLayers).get(_classPrivateFieldGet(this, _currentPageIndex));
              try {
                var newEditors = [];
                var _iterator24 = _createForOfIteratorHelper(data),
                  _step24;
                try {
                  for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
                    var editor = _step24.value;
                    var deserializedEditor = layer.deserialize(editor);
                    if (!deserializedEditor) {
                      return;
                    }
                    newEditors.push(deserializedEditor);
                  }
                } catch (err) {
                  _iterator24.e(err);
                } finally {
                  _iterator24.f();
                }
                var cmd = function cmd() {
                  for (var _i4 = 0, _newEditors = newEditors; _i4 < _newEditors.length; _i4++) {
                    var editor = _newEditors[_i4];
                    _classPrivateMethodGet(_this24, _addEditorToLayer, _addEditorToLayer2).call(_this24, editor);
                  }
                  _classPrivateMethodGet(_this24, _selectEditors, _selectEditors2).call(_this24, newEditors);
                };
                var undo = function undo() {
                  for (var _i5 = 0, _newEditors2 = newEditors; _i5 < _newEditors2.length; _i5++) {
                    var editor = _newEditors2[_i5];
                    editor.remove();
                  }
                };
                this.addCommands({
                  cmd: cmd,
                  undo: undo,
                  mustExec: true
                });
              } catch (ex) {
                (0, _util.warn)("paste: \"".concat(ex.message, "\"."));
              }
            }
          }, {
            key: "keydown",
            value: function keydown(event) {
              var _this$getActive;
              if (!((_this$getActive = this.getActive()) !== null && _this$getActive !== void 0 && _this$getActive.shouldGetKeyboardEvents())) {
                AnnotationEditorUIManager._keyboardManager.exec(this, event);
              }
            }
          }, {
            key: "onEditingAction",
            value: function onEditingAction(details) {
              if (["undo", "redo", "delete", "selectAll"].includes(details.name)) {
                this[details.name]();
              }
            }
          }, {
            key: "setEditingState",
            value: function setEditingState(isEditing) {
              if (isEditing) {
                _classPrivateMethodGet(this, _addKeyboardManager, _addKeyboardManager2).call(this);
                _classPrivateMethodGet(this, _addCopyPasteListeners, _addCopyPasteListeners2).call(this);
                _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                  isEditing: _classPrivateFieldGet(this, _mode) !== _util.AnnotationEditorType.NONE,
                  isEmpty: _classPrivateMethodGet(this, _isEmpty, _isEmpty2).call(this),
                  hasSomethingToUndo: _classPrivateFieldGet(this, _commandManager).hasSomethingToUndo(),
                  hasSomethingToRedo: _classPrivateFieldGet(this, _commandManager).hasSomethingToRedo(),
                  hasSelectedEditor: false
                });
              } else {
                _classPrivateMethodGet(this, _removeKeyboardManager, _removeKeyboardManager2).call(this);
                _classPrivateMethodGet(this, _removeCopyPasteListeners, _removeCopyPasteListeners2).call(this);
                _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                  isEditing: false
                });
              }
            }
          }, {
            key: "registerEditorTypes",
            value: function registerEditorTypes(types) {
              if (_classPrivateFieldGet(this, _editorTypes)) {
                return;
              }
              _classPrivateFieldSet(this, _editorTypes, types);
              var _iterator25 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _editorTypes)),
                _step25;
              try {
                for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
                  var editorType = _step25.value;
                  _classPrivateMethodGet(this, _dispatchUpdateUI, _dispatchUpdateUI2).call(this, editorType.defaultPropertiesToUpdate);
                }
              } catch (err) {
                _iterator25.e(err);
              } finally {
                _iterator25.f();
              }
            }
          }, {
            key: "getId",
            value: function getId() {
              return _classPrivateFieldGet(this, _idManager).getId();
            }
          }, {
            key: "currentLayer",
            get: function get() {
              return _classPrivateFieldGet(this, _allLayers).get(_classPrivateFieldGet(this, _currentPageIndex));
            }
          }, {
            key: "currentPageIndex",
            get: function get() {
              return _classPrivateFieldGet(this, _currentPageIndex);
            }
          }, {
            key: "addLayer",
            value: function addLayer(layer) {
              _classPrivateFieldGet(this, _allLayers).set(layer.pageIndex, layer);
              if (_classPrivateFieldGet(this, _isEnabled)) {
                layer.enable();
              } else {
                layer.disable();
              }
            }
          }, {
            key: "removeLayer",
            value: function removeLayer(layer) {
              _classPrivateFieldGet(this, _allLayers).delete(layer.pageIndex);
            }
          }, {
            key: "updateMode",
            value: function updateMode(mode) {
              _classPrivateFieldSet(this, _mode, mode);
              if (mode === _util.AnnotationEditorType.NONE) {
                this.setEditingState(false);
                _classPrivateMethodGet(this, _disableAll, _disableAll2).call(this);
              } else {
                this.setEditingState(true);
                _classPrivateMethodGet(this, _enableAll, _enableAll2).call(this);
                var _iterator26 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _allLayers).values()),
                  _step26;
                try {
                  for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
                    var layer = _step26.value;
                    layer.updateMode(mode);
                  }
                } catch (err) {
                  _iterator26.e(err);
                } finally {
                  _iterator26.f();
                }
              }
            }
          }, {
            key: "updateToolbar",
            value: function updateToolbar(mode) {
              if (mode === _classPrivateFieldGet(this, _mode)) {
                return;
              }
              _classPrivateFieldGet(this, _eventBus).dispatch("switchannotationeditormode", {
                source: this,
                mode: mode
              });
            }
          }, {
            key: "updateParams",
            value: function updateParams(type, value) {
              if (!_classPrivateFieldGet(this, _editorTypes)) {
                return;
              }
              var _iterator27 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _selectedEditors)),
                _step27;
              try {
                for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
                  var editor = _step27.value;
                  editor.updateParams(type, value);
                }
              } catch (err) {
                _iterator27.e(err);
              } finally {
                _iterator27.f();
              }
              var _iterator28 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _editorTypes)),
                _step28;
              try {
                for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
                  var editorType = _step28.value;
                  editorType.updateDefaultParams(type, value);
                }
              } catch (err) {
                _iterator28.e(err);
              } finally {
                _iterator28.f();
              }
            }
          }, {
            key: "getEditors",
            value: function getEditors(pageIndex) {
              var editors = [];
              var _iterator29 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _allEditors).values()),
                _step29;
              try {
                for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
                  var editor = _step29.value;
                  if (editor.pageIndex === pageIndex) {
                    editors.push(editor);
                  }
                }
              } catch (err) {
                _iterator29.e(err);
              } finally {
                _iterator29.f();
              }
              return editors;
            }
          }, {
            key: "getEditor",
            value: function getEditor(id) {
              return _classPrivateFieldGet(this, _allEditors).get(id);
            }
          }, {
            key: "addEditor",
            value: function addEditor(editor) {
              _classPrivateFieldGet(this, _allEditors).set(editor.id, editor);
            }
          }, {
            key: "removeEditor",
            value: function removeEditor(editor) {
              _classPrivateFieldGet(this, _allEditors).delete(editor.id);
              this.unselect(editor);
              if (!editor.annotationElementId || !_classPrivateFieldGet(this, _deletedAnnotationsElementIds).has(editor.annotationElementId)) {
                var _classPrivateFieldGet3;
                (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _annotationStorage)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.remove(editor.id);
              }
            }
          }, {
            key: "addDeletedAnnotationElement",
            value: function addDeletedAnnotationElement(editor) {
              _classPrivateFieldGet(this, _deletedAnnotationsElementIds).add(editor.annotationElementId);
              editor.deleted = true;
            }
          }, {
            key: "isDeletedAnnotationElement",
            value: function isDeletedAnnotationElement(annotationElementId) {
              return _classPrivateFieldGet(this, _deletedAnnotationsElementIds).has(annotationElementId);
            }
          }, {
            key: "removeDeletedAnnotationElement",
            value: function removeDeletedAnnotationElement(editor) {
              _classPrivateFieldGet(this, _deletedAnnotationsElementIds).delete(editor.annotationElementId);
              editor.deleted = false;
            }
          }, {
            key: "setActiveEditor",
            value: function setActiveEditor(editor) {
              if (_classPrivateFieldGet(this, _activeEditor) === editor) {
                return;
              }
              _classPrivateFieldSet(this, _activeEditor, editor);
              if (editor) {
                _classPrivateMethodGet(this, _dispatchUpdateUI, _dispatchUpdateUI2).call(this, editor.propertiesToUpdate);
              }
            }
          }, {
            key: "toggleSelected",
            value: function toggleSelected(editor) {
              if (_classPrivateFieldGet(this, _selectedEditors).has(editor)) {
                _classPrivateFieldGet(this, _selectedEditors).delete(editor);
                editor.unselect();
                _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                  hasSelectedEditor: this.hasSelection
                });
                return;
              }
              _classPrivateFieldGet(this, _selectedEditors).add(editor);
              editor.select();
              _classPrivateMethodGet(this, _dispatchUpdateUI, _dispatchUpdateUI2).call(this, editor.propertiesToUpdate);
              _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                hasSelectedEditor: true
              });
            }
          }, {
            key: "setSelected",
            value: function setSelected(editor) {
              var _iterator30 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _selectedEditors)),
                _step30;
              try {
                for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
                  var ed = _step30.value;
                  if (ed !== editor) {
                    ed.unselect();
                  }
                }
              } catch (err) {
                _iterator30.e(err);
              } finally {
                _iterator30.f();
              }
              _classPrivateFieldGet(this, _selectedEditors).clear();
              _classPrivateFieldGet(this, _selectedEditors).add(editor);
              editor.select();
              _classPrivateMethodGet(this, _dispatchUpdateUI, _dispatchUpdateUI2).call(this, editor.propertiesToUpdate);
              _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                hasSelectedEditor: true
              });
            }
          }, {
            key: "isSelected",
            value: function isSelected(editor) {
              return _classPrivateFieldGet(this, _selectedEditors).has(editor);
            }
          }, {
            key: "unselect",
            value: function unselect(editor) {
              editor.unselect();
              _classPrivateFieldGet(this, _selectedEditors).delete(editor);
              _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                hasSelectedEditor: this.hasSelection
              });
            }
          }, {
            key: "hasSelection",
            get: function get() {
              return _classPrivateFieldGet(this, _selectedEditors).size !== 0;
            }
          }, {
            key: "undo",
            value: function undo() {
              _classPrivateFieldGet(this, _commandManager).undo();
              _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                hasSomethingToUndo: _classPrivateFieldGet(this, _commandManager).hasSomethingToUndo(),
                hasSomethingToRedo: true,
                isEmpty: _classPrivateMethodGet(this, _isEmpty, _isEmpty2).call(this)
              });
            }
          }, {
            key: "redo",
            value: function redo() {
              _classPrivateFieldGet(this, _commandManager).redo();
              _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                hasSomethingToUndo: true,
                hasSomethingToRedo: _classPrivateFieldGet(this, _commandManager).hasSomethingToRedo(),
                isEmpty: _classPrivateMethodGet(this, _isEmpty, _isEmpty2).call(this)
              });
            }
          }, {
            key: "addCommands",
            value: function addCommands(params) {
              _classPrivateFieldGet(this, _commandManager).add(params);
              _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                hasSomethingToUndo: true,
                hasSomethingToRedo: false,
                isEmpty: _classPrivateMethodGet(this, _isEmpty, _isEmpty2).call(this)
              });
            }
          }, {
            key: "delete",
            value: function _delete() {
              var _this25 = this;
              this.commitOrRemove();
              if (!this.hasSelection) {
                return;
              }
              var editors = _toConsumableArray(_classPrivateFieldGet(this, _selectedEditors));
              var cmd = function cmd() {
                var _iterator31 = _createForOfIteratorHelper(editors),
                  _step31;
                try {
                  for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
                    var editor = _step31.value;
                    editor.remove();
                  }
                } catch (err) {
                  _iterator31.e(err);
                } finally {
                  _iterator31.f();
                }
              };
              var undo = function undo() {
                var _iterator32 = _createForOfIteratorHelper(editors),
                  _step32;
                try {
                  for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
                    var editor = _step32.value;
                    _classPrivateMethodGet(_this25, _addEditorToLayer, _addEditorToLayer2).call(_this25, editor);
                  }
                } catch (err) {
                  _iterator32.e(err);
                } finally {
                  _iterator32.f();
                }
              };
              this.addCommands({
                cmd: cmd,
                undo: undo,
                mustExec: true
              });
            }
          }, {
            key: "commitOrRemove",
            value: function commitOrRemove() {
              var _classPrivateFieldGet4;
              (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _activeEditor)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.commitOrRemove();
            }
          }, {
            key: "selectAll",
            value: function selectAll() {
              var _iterator33 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _selectedEditors)),
                _step33;
              try {
                for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
                  var editor = _step33.value;
                  editor.commit();
                }
              } catch (err) {
                _iterator33.e(err);
              } finally {
                _iterator33.f();
              }
              _classPrivateMethodGet(this, _selectEditors, _selectEditors2).call(this, _classPrivateFieldGet(this, _allEditors).values());
            }
          }, {
            key: "unselectAll",
            value: function unselectAll() {
              if (_classPrivateFieldGet(this, _activeEditor)) {
                _classPrivateFieldGet(this, _activeEditor).commitOrRemove();
                return;
              }
              if (_classPrivateFieldGet(this, _selectedEditors).size === 0) {
                return;
              }
              var _iterator34 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _selectedEditors)),
                _step34;
              try {
                for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
                  var editor = _step34.value;
                  editor.unselect();
                }
              } catch (err) {
                _iterator34.e(err);
              } finally {
                _iterator34.f();
              }
              _classPrivateFieldGet(this, _selectedEditors).clear();
              _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
                hasSelectedEditor: false
              });
            }
          }, {
            key: "isActive",
            value: function isActive(editor) {
              return _classPrivateFieldGet(this, _activeEditor) === editor;
            }
          }, {
            key: "getActive",
            value: function getActive() {
              return _classPrivateFieldGet(this, _activeEditor);
            }
          }, {
            key: "getMode",
            value: function getMode() {
              return _classPrivateFieldGet(this, _mode);
            }
          }], [{
            key: "_keyboardManager",
            get: function get() {
              return (0, _util.shadow)(this, "_keyboardManager", new KeyboardManager([[["ctrl+a", "mac+meta+a"], AnnotationEditorUIManager.prototype.selectAll], [["ctrl+z", "mac+meta+z"], AnnotationEditorUIManager.prototype.undo], [["ctrl+y", "ctrl+shift+Z", "mac+meta+shift+Z"], AnnotationEditorUIManager.prototype.redo], [["Backspace", "alt+Backspace", "ctrl+Backspace", "shift+Backspace", "mac+Backspace", "mac+alt+Backspace", "mac+ctrl+Backspace", "Delete", "ctrl+Delete", "shift+Delete"], AnnotationEditorUIManager.prototype.delete], [["Escape", "mac+Escape"], AnnotationEditorUIManager.prototype.unselectAll]]));
            }
          }]);
          return AnnotationEditorUIManager;
        }();
        function _addKeyboardManager2() {
          _classPrivateFieldGet(this, _container).addEventListener("keydown", _classPrivateFieldGet(this, _boundKeydown));
        }
        function _removeKeyboardManager2() {
          _classPrivateFieldGet(this, _container).removeEventListener("keydown", _classPrivateFieldGet(this, _boundKeydown));
        }
        function _addCopyPasteListeners2() {
          document.addEventListener("copy", _classPrivateFieldGet(this, _boundCopy));
          document.addEventListener("cut", _classPrivateFieldGet(this, _boundCut));
          document.addEventListener("paste", _classPrivateFieldGet(this, _boundPaste));
        }
        function _removeCopyPasteListeners2() {
          document.removeEventListener("copy", _classPrivateFieldGet(this, _boundCopy));
          document.removeEventListener("cut", _classPrivateFieldGet(this, _boundCut));
          document.removeEventListener("paste", _classPrivateFieldGet(this, _boundPaste));
        }
        function _dispatchUpdateStates2(details) {
          var _this26 = this;
          var hasChanged = Object.entries(details).some(function (_ref29) {
            var _ref30 = _slicedToArray(_ref29, 2),
              key = _ref30[0],
              value = _ref30[1];
            return _classPrivateFieldGet(_this26, _previousStates)[key] !== value;
          });
          if (hasChanged) {
            _classPrivateFieldGet(this, _eventBus).dispatch("annotationeditorstateschanged", {
              source: this,
              details: Object.assign(_classPrivateFieldGet(this, _previousStates), details)
            });
          }
        }
        function _dispatchUpdateUI2(details) {
          _classPrivateFieldGet(this, _eventBus).dispatch("annotationeditorparamschanged", {
            source: this,
            details: details
          });
        }
        function _enableAll2() {
          if (!_classPrivateFieldGet(this, _isEnabled)) {
            _classPrivateFieldSet(this, _isEnabled, true);
            var _iterator35 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _allLayers).values()),
              _step35;
            try {
              for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
                var layer = _step35.value;
                layer.enable();
              }
            } catch (err) {
              _iterator35.e(err);
            } finally {
              _iterator35.f();
            }
          }
        }
        function _disableAll2() {
          this.unselectAll();
          if (_classPrivateFieldGet(this, _isEnabled)) {
            _classPrivateFieldSet(this, _isEnabled, false);
            var _iterator36 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _allLayers).values()),
              _step36;
            try {
              for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
                var layer = _step36.value;
                layer.disable();
              }
            } catch (err) {
              _iterator36.e(err);
            } finally {
              _iterator36.f();
            }
          }
        }
        function _addEditorToLayer2(editor) {
          var layer = _classPrivateFieldGet(this, _allLayers).get(editor.pageIndex);
          if (layer) {
            layer.addOrRebuild(editor);
          } else {
            this.addEditor(editor);
          }
        }
        function _isEmpty2() {
          if (_classPrivateFieldGet(this, _allEditors).size === 0) {
            return true;
          }
          if (_classPrivateFieldGet(this, _allEditors).size === 1) {
            var _iterator37 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _allEditors).values()),
              _step37;
            try {
              for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
                var editor = _step37.value;
                return editor.isEmpty();
              }
            } catch (err) {
              _iterator37.e(err);
            } finally {
              _iterator37.f();
            }
          }
          return false;
        }
        function _selectEditors2(editors) {
          _classPrivateFieldGet(this, _selectedEditors).clear();
          var _iterator38 = _createForOfIteratorHelper(editors),
            _step38;
          try {
            for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
              var editor = _step38.value;
              if (editor.isEmpty()) {
                continue;
              }
              _classPrivateFieldGet(this, _selectedEditors).add(editor);
              editor.select();
            }
          } catch (err) {
            _iterator38.e(err);
          } finally {
            _iterator38.f();
          }
          _classPrivateMethodGet(this, _dispatchUpdateStates, _dispatchUpdateStates2).call(this, {
            hasSelectedEditor: true
          });
        }
        exports.AnnotationEditorUIManager = AnnotationEditorUIManager;

        /***/
      }, /* 6 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.StatTimer = exports.RenderingCancelledException = exports.PixelsPerInch = exports.PageViewport = exports.PDFDateString = exports.DOMStandardFontDataFactory = exports.DOMSVGFactory = exports.DOMFilterFactory = exports.DOMCanvasFactory = exports.DOMCMapReaderFactory = exports.AnnotationPrefix = void 0;
        exports.deprecated = deprecated;
        exports.getColorValues = getColorValues;
        exports.getCurrentTransform = getCurrentTransform;
        exports.getCurrentTransformInverse = getCurrentTransformInverse;
        exports.getFilenameFromUrl = getFilenameFromUrl;
        exports.getPdfFilenameFromUrl = getPdfFilenameFromUrl;
        exports.getRGB = getRGB;
        exports.getXfaPageViewport = getXfaPageViewport;
        exports.isDataScheme = isDataScheme;
        exports.isPdfFile = isPdfFile;
        exports.isValidFetchUrl = isValidFetchUrl;
        exports.loadScript = loadScript;
        exports.setLayerDimensions = setLayerDimensions;
        var _base_factory = __w_pdfjs_require__(7);
        var _util = __w_pdfjs_require__(1);
        var SVG_NS = "http://www.w3.org/2000/svg";
        var AnnotationPrefix = "pdfjs_internal_id_";
        exports.AnnotationPrefix = AnnotationPrefix;
        var PixelsPerInch = /*#__PURE__*/_createClass(function PixelsPerInch() {
          _classCallCheck(this, PixelsPerInch);
        });
        _defineProperty(PixelsPerInch, "CSS", 96.0);
        _defineProperty(PixelsPerInch, "PDF", 72.0);
        _defineProperty(PixelsPerInch, "PDF_TO_CSS_UNITS", PixelsPerInch.CSS / PixelsPerInch.PDF);
        exports.PixelsPerInch = PixelsPerInch;
        var _cache = /*#__PURE__*/new WeakMap();
        var _defs = /*#__PURE__*/new WeakMap();
        var _docId2 = /*#__PURE__*/new WeakMap();
        var _document2 = /*#__PURE__*/new WeakMap();
        var _hcmFilter = /*#__PURE__*/new WeakMap();
        var _hcmKey = /*#__PURE__*/new WeakMap();
        var _hcmUrl = /*#__PURE__*/new WeakMap();
        var _hcmHighlightFilter = /*#__PURE__*/new WeakMap();
        var _hcmHighlightKey = /*#__PURE__*/new WeakMap();
        var _hcmHighlightUrl = /*#__PURE__*/new WeakMap();
        var _id2 = /*#__PURE__*/new WeakMap();
        var _cache2 = /*#__PURE__*/new WeakMap();
        var _defs2 = /*#__PURE__*/new WeakMap();
        var _addGrayConversion = /*#__PURE__*/new WeakSet();
        var _createFilter = /*#__PURE__*/new WeakSet();
        var _appendFeFunc = /*#__PURE__*/new WeakSet();
        var _addTransferMapConversion = /*#__PURE__*/new WeakSet();
        var _getRGB = /*#__PURE__*/new WeakSet();
        var DOMFilterFactory = /*#__PURE__*/function (_base_factory$BaseFil) {
          _inherits(DOMFilterFactory, _base_factory$BaseFil);
          var _super10 = _createSuper(DOMFilterFactory);
          function DOMFilterFactory() {
            var _this27;
            var _ref31 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              docId = _ref31.docId,
              _ref31$ownerDocument = _ref31.ownerDocument,
              ownerDocument = _ref31$ownerDocument === void 0 ? globalThis.document : _ref31$ownerDocument;
            _classCallCheck(this, DOMFilterFactory);
            _this27 = _super10.call(this);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this27), _getRGB);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this27), _addTransferMapConversion);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this27), _appendFeFunc);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this27), _createFilter);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this27), _addGrayConversion);
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _defs2, {
              get: _get_defs,
              set: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _cache2, {
              get: _get_cache,
              set: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _cache, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _defs, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _docId2, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _document2, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _hcmFilter, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _hcmKey, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _hcmUrl, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _hcmHighlightFilter, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _hcmHighlightKey, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _hcmHighlightUrl, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this27), _id2, {
              writable: true,
              value: 0
            });
            _classPrivateFieldSet(_assertThisInitialized(_this27), _docId2, docId);
            _classPrivateFieldSet(_assertThisInitialized(_this27), _document2, ownerDocument);
            return _this27;
          }
          _createClass(DOMFilterFactory, [{
            key: "addFilter",
            value: function addFilter(maps) {
              var _this$id3, _this$id4;
              if (!maps) {
                return "none";
              }
              var value = _classPrivateFieldGet(this, _cache2).get(maps);
              if (value) {
                return value;
              }
              var tableR, tableG, tableB, key;
              if (maps.length === 1) {
                var mapR = maps[0];
                var buffer = new Array(256);
                for (var i = 0; i < 256; i++) {
                  buffer[i] = mapR[i] / 255;
                }
                key = tableR = tableG = tableB = buffer.join(",");
              } else {
                var _maps = _slicedToArray(maps, 3),
                  _mapR = _maps[0],
                  mapG = _maps[1],
                  mapB = _maps[2];
                var bufferR = new Array(256);
                var bufferG = new Array(256);
                var bufferB = new Array(256);
                for (var _i6 = 0; _i6 < 256; _i6++) {
                  bufferR[_i6] = _mapR[_i6] / 255;
                  bufferG[_i6] = mapG[_i6] / 255;
                  bufferB[_i6] = mapB[_i6] / 255;
                }
                tableR = bufferR.join(",");
                tableG = bufferG.join(",");
                tableB = bufferB.join(",");
                key = "".concat(tableR).concat(tableG).concat(tableB);
              }
              value = _classPrivateFieldGet(this, _cache2).get(key);
              if (value) {
                _classPrivateFieldGet(this, _cache2).set(maps, value);
                return value;
              }
              var id = "g_".concat(_classPrivateFieldGet(this, _docId2), "_transfer_map_").concat((_classPrivateFieldSet(this, _id2, (_this$id3 = _classPrivateFieldGet(this, _id2), _this$id4 = _this$id3++, _this$id3)), _this$id4));
              var url = "url(#".concat(id, ")");
              _classPrivateFieldGet(this, _cache2).set(maps, url);
              _classPrivateFieldGet(this, _cache2).set(key, url);
              var filter = _classPrivateMethodGet(this, _createFilter, _createFilter2).call(this, id);
              _classPrivateMethodGet(this, _addTransferMapConversion, _addTransferMapConversion2).call(this, tableR, tableG, tableB, filter);
              return url;
            }
          }, {
            key: "addHCMFilter",
            value: function addHCMFilter(fgColor, bgColor) {
              var _classPrivateFieldGet5, _util$Util2, _util$Util3;
              var key = "".concat(fgColor, "-").concat(bgColor);
              if (_classPrivateFieldGet(this, _hcmKey) === key) {
                return _classPrivateFieldGet(this, _hcmUrl);
              }
              _classPrivateFieldSet(this, _hcmKey, key);
              _classPrivateFieldSet(this, _hcmUrl, "none");
              (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _hcmFilter)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.remove();
              if (!fgColor || !bgColor) {
                return _classPrivateFieldGet(this, _hcmUrl);
              }
              var fgRGB = _classPrivateMethodGet(this, _getRGB, _getRGB2).call(this, fgColor);
              fgColor = (_util$Util2 = _util.Util).makeHexColor.apply(_util$Util2, _toConsumableArray(fgRGB));
              var bgRGB = _classPrivateMethodGet(this, _getRGB, _getRGB2).call(this, bgColor);
              bgColor = (_util$Util3 = _util.Util).makeHexColor.apply(_util$Util3, _toConsumableArray(bgRGB));
              _classPrivateFieldGet(this, _defs2).style.color = "";
              if (fgColor === "#000000" && bgColor === "#ffffff" || fgColor === bgColor) {
                return _classPrivateFieldGet(this, _hcmUrl);
              }
              var map = new Array(256);
              for (var i = 0; i <= 255; i++) {
                var x = i / 255;
                map[i] = x <= 0.03928 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
              }
              var table = map.join(",");
              var id = "g_".concat(_classPrivateFieldGet(this, _docId2), "_hcm_filter");
              var filter = _classPrivateFieldSet(this, _hcmHighlightFilter, _classPrivateMethodGet(this, _createFilter, _createFilter2).call(this, id));
              _classPrivateMethodGet(this, _addTransferMapConversion, _addTransferMapConversion2).call(this, table, table, table, filter);
              _classPrivateMethodGet(this, _addGrayConversion, _addGrayConversion2).call(this, filter);
              var getSteps = function getSteps(c, n) {
                var start = fgRGB[c] / 255;
                var end = bgRGB[c] / 255;
                var arr = new Array(n + 1);
                for (var _i7 = 0; _i7 <= n; _i7++) {
                  arr[_i7] = start + _i7 / n * (end - start);
                }
                return arr.join(",");
              };
              _classPrivateMethodGet(this, _addTransferMapConversion, _addTransferMapConversion2).call(this, getSteps(0, 5), getSteps(1, 5), getSteps(2, 5), filter);
              _classPrivateFieldSet(this, _hcmUrl, "url(#".concat(id, ")"));
              return _classPrivateFieldGet(this, _hcmUrl);
            }
          }, {
            key: "addHighlightHCMFilter",
            value: function addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {
              var _classPrivateFieldGet6;
              var key = "".concat(fgColor, "-").concat(bgColor, "-").concat(newFgColor, "-").concat(newBgColor);
              if (_classPrivateFieldGet(this, _hcmHighlightKey) === key) {
                return _classPrivateFieldGet(this, _hcmHighlightUrl);
              }
              _classPrivateFieldSet(this, _hcmHighlightKey, key);
              _classPrivateFieldSet(this, _hcmHighlightUrl, "none");
              (_classPrivateFieldGet6 = _classPrivateFieldGet(this, _hcmHighlightFilter)) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.remove();
              if (!fgColor || !bgColor) {
                return _classPrivateFieldGet(this, _hcmHighlightUrl);
              }
              var _map = [fgColor, bgColor].map(_classPrivateMethodGet(this, _getRGB, _getRGB2).bind(this)),
                _map2 = _slicedToArray(_map, 2),
                fgRGB = _map2[0],
                bgRGB = _map2[1];
              var fgGray = Math.round(0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]);
              var bgGray = Math.round(0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]);
              var _map3 = [newFgColor, newBgColor].map(_classPrivateMethodGet(this, _getRGB, _getRGB2).bind(this)),
                _map4 = _slicedToArray(_map3, 2),
                newFgRGB = _map4[0],
                newBgRGB = _map4[1];
              if (bgGray < fgGray) {
                var _ref32 = [bgGray, fgGray, newBgRGB, newFgRGB];
                fgGray = _ref32[0];
                bgGray = _ref32[1];
                newFgRGB = _ref32[2];
                newBgRGB = _ref32[3];
              }
              _classPrivateFieldGet(this, _defs2).style.color = "";
              var getSteps = function getSteps(fg, bg, n) {
                var arr = new Array(256);
                var step = (bgGray - fgGray) / n;
                var newStart = fg / 255;
                var newStep = (bg - fg) / (255 * n);
                var prev = 0;
                for (var i = 0; i <= n; i++) {
                  var k = Math.round(fgGray + i * step);
                  var value = newStart + i * newStep;
                  for (var j = prev; j <= k; j++) {
                    arr[j] = value;
                  }
                  prev = k + 1;
                }
                for (var _i8 = prev; _i8 < 256; _i8++) {
                  arr[_i8] = arr[prev - 1];
                }
                return arr.join(",");
              };
              var id = "g_".concat(_classPrivateFieldGet(this, _docId2), "_hcm_highlight_filter");
              var filter = _classPrivateFieldSet(this, _hcmHighlightFilter, _classPrivateMethodGet(this, _createFilter, _createFilter2).call(this, id));
              _classPrivateMethodGet(this, _addGrayConversion, _addGrayConversion2).call(this, filter);
              _classPrivateMethodGet(this, _addTransferMapConversion, _addTransferMapConversion2).call(this, getSteps(newFgRGB[0], newBgRGB[0], 5), getSteps(newFgRGB[1], newBgRGB[1], 5), getSteps(newFgRGB[2], newBgRGB[2], 5), filter);
              _classPrivateFieldSet(this, _hcmHighlightUrl, "url(#".concat(id, ")"));
              return _classPrivateFieldGet(this, _hcmHighlightUrl);
            }
          }, {
            key: "destroy",
            value: function destroy() {
              var keepHCM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              if (keepHCM && (_classPrivateFieldGet(this, _hcmUrl) || _classPrivateFieldGet(this, _hcmHighlightUrl))) {
                return;
              }
              if (_classPrivateFieldGet(this, _defs)) {
                _classPrivateFieldGet(this, _defs).parentNode.parentNode.remove();
                _classPrivateFieldSet(this, _defs, null);
              }
              if (_classPrivateFieldGet(this, _cache)) {
                _classPrivateFieldGet(this, _cache).clear();
                _classPrivateFieldSet(this, _cache, null);
              }
              _classPrivateFieldSet(this, _id2, 0);
            }
          }]);
          return DOMFilterFactory;
        }(_base_factory.BaseFilterFactory);
        function _get_cache() {
          return _classPrivateFieldGet(this, _cache) || _classPrivateFieldSet(this, _cache, new Map());
        }
        function _get_defs() {
          if (!_classPrivateFieldGet(this, _defs)) {
            var div = _classPrivateFieldGet(this, _document2).createElement("div");
            var style = div.style;
            style.visibility = "hidden";
            style.contain = "strict";
            style.width = style.height = 0;
            style.position = "absolute";
            style.top = style.left = 0;
            style.zIndex = -1;
            var svg = _classPrivateFieldGet(this, _document2).createElementNS(SVG_NS, "svg");
            svg.setAttribute("width", 0);
            svg.setAttribute("height", 0);
            _classPrivateFieldSet(this, _defs, _classPrivateFieldGet(this, _document2).createElementNS(SVG_NS, "defs"));
            div.append(svg);
            svg.append(_classPrivateFieldGet(this, _defs));
            _classPrivateFieldGet(this, _document2).body.append(div);
          }
          return _classPrivateFieldGet(this, _defs);
        }
        function _addGrayConversion2(filter) {
          var feColorMatrix = _classPrivateFieldGet(this, _document2).createElementNS(SVG_NS, "feColorMatrix");
          feColorMatrix.setAttribute("type", "matrix");
          feColorMatrix.setAttribute("values", "0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0");
          filter.append(feColorMatrix);
        }
        function _createFilter2(id) {
          var filter = _classPrivateFieldGet(this, _document2).createElementNS(SVG_NS, "filter");
          filter.setAttribute("color-interpolation-filters", "sRGB");
          filter.setAttribute("id", id);
          _classPrivateFieldGet(this, _defs2).append(filter);
          return filter;
        }
        function _appendFeFunc2(feComponentTransfer, func, table) {
          var feFunc = _classPrivateFieldGet(this, _document2).createElementNS(SVG_NS, func);
          feFunc.setAttribute("type", "discrete");
          feFunc.setAttribute("tableValues", table);
          feComponentTransfer.append(feFunc);
        }
        function _addTransferMapConversion2(rTable, gTable, bTable, filter) {
          var feComponentTransfer = _classPrivateFieldGet(this, _document2).createElementNS(SVG_NS, "feComponentTransfer");
          filter.append(feComponentTransfer);
          _classPrivateMethodGet(this, _appendFeFunc, _appendFeFunc2).call(this, feComponentTransfer, "feFuncR", rTable);
          _classPrivateMethodGet(this, _appendFeFunc, _appendFeFunc2).call(this, feComponentTransfer, "feFuncG", gTable);
          _classPrivateMethodGet(this, _appendFeFunc, _appendFeFunc2).call(this, feComponentTransfer, "feFuncB", bTable);
        }
        function _getRGB2(color) {
          _classPrivateFieldGet(this, _defs2).style.color = color;
          return getRGB(getComputedStyle(_classPrivateFieldGet(this, _defs2)).getPropertyValue("color"));
        }
        exports.DOMFilterFactory = DOMFilterFactory;
        var DOMCanvasFactory = /*#__PURE__*/function (_base_factory$BaseCan) {
          _inherits(DOMCanvasFactory, _base_factory$BaseCan);
          var _super11 = _createSuper(DOMCanvasFactory);
          function DOMCanvasFactory() {
            var _this28;
            var _ref33 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
              _ref33$ownerDocument = _ref33.ownerDocument,
              ownerDocument = _ref33$ownerDocument === void 0 ? globalThis.document : _ref33$ownerDocument;
            _classCallCheck(this, DOMCanvasFactory);
            _this28 = _super11.call(this);
            _this28._document = ownerDocument;
            return _this28;
          }
          _createClass(DOMCanvasFactory, [{
            key: "_createCanvas",
            value: function _createCanvas(width, height) {
              var canvas = this._document.createElement("canvas");
              canvas.width = width;
              canvas.height = height;
              return canvas;
            }
          }]);
          return DOMCanvasFactory;
        }(_base_factory.BaseCanvasFactory);
        exports.DOMCanvasFactory = DOMCanvasFactory;
        function fetchData(_x4) {
          return _fetchData.apply(this, arguments);
        }
        function _fetchData() {
          _fetchData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(url) {
            var asTypedArray,
              response,
              _args7 = arguments;
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  asTypedArray = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : false;
                  if (!isValidFetchUrl(url, document.baseURI)) {
                    _context7.next = 21;
                    break;
                  }
                  _context7.next = 4;
                  return fetch(url);
                case 4:
                  response = _context7.sent;
                  if (response.ok) {
                    _context7.next = 7;
                    break;
                  }
                  throw new Error(response.statusText);
                case 7:
                  if (!asTypedArray) {
                    _context7.next = 15;
                    break;
                  }
                  _context7.t1 = Uint8Array;
                  _context7.next = 11;
                  return response.arrayBuffer();
                case 11:
                  _context7.t2 = _context7.sent;
                  _context7.t0 = new _context7.t1(_context7.t2);
                  _context7.next = 20;
                  break;
                case 15:
                  _context7.t3 = (0, _util.stringToBytes);
                  _context7.next = 18;
                  return response.text();
                case 18:
                  _context7.t4 = _context7.sent;
                  _context7.t0 = (0, _context7.t3)(_context7.t4);
                case 20:
                  return _context7.abrupt("return", _context7.t0);
                case 21:
                  return _context7.abrupt("return", new Promise(function (resolve, reject) {
                    var request = new XMLHttpRequest();
                    request.open("GET", url, true);
                    if (asTypedArray) {
                      request.responseType = "arraybuffer";
                    }
                    request.onreadystatechange = function () {
                      if (request.readyState !== XMLHttpRequest.DONE) {
                        return;
                      }
                      if (request.status === 200 || request.status === 0) {
                        var data;
                        if (asTypedArray && request.response) {
                          data = new Uint8Array(request.response);
                        } else if (!asTypedArray && request.responseText) {
                          data = (0, _util.stringToBytes)(request.responseText);
                        }
                        if (data) {
                          resolve(data);
                          return;
                        }
                      }
                      reject(new Error(request.statusText));
                    };
                    request.send(null);
                  }));
                case 22:
                case "end":
                  return _context7.stop();
              }
            }, _callee7);
          }));
          return _fetchData.apply(this, arguments);
        }
        var DOMCMapReaderFactory = /*#__PURE__*/function (_base_factory$BaseCMa) {
          _inherits(DOMCMapReaderFactory, _base_factory$BaseCMa);
          var _super12 = _createSuper(DOMCMapReaderFactory);
          function DOMCMapReaderFactory() {
            _classCallCheck(this, DOMCMapReaderFactory);
            return _super12.apply(this, arguments);
          }
          _createClass(DOMCMapReaderFactory, [{
            key: "_fetchData",
            value: function _fetchData(url, compressionType) {
              return fetchData(url, this.isCompressed).then(function (data) {
                return {
                  cMapData: data,
                  compressionType: compressionType
                };
              });
            }
          }]);
          return DOMCMapReaderFactory;
        }(_base_factory.BaseCMapReaderFactory);
        exports.DOMCMapReaderFactory = DOMCMapReaderFactory;
        var DOMStandardFontDataFactory = /*#__PURE__*/function (_base_factory$BaseSta) {
          _inherits(DOMStandardFontDataFactory, _base_factory$BaseSta);
          var _super13 = _createSuper(DOMStandardFontDataFactory);
          function DOMStandardFontDataFactory() {
            _classCallCheck(this, DOMStandardFontDataFactory);
            return _super13.apply(this, arguments);
          }
          _createClass(DOMStandardFontDataFactory, [{
            key: "_fetchData",
            value: function _fetchData(url) {
              return fetchData(url, true);
            }
          }]);
          return DOMStandardFontDataFactory;
        }(_base_factory.BaseStandardFontDataFactory);
        exports.DOMStandardFontDataFactory = DOMStandardFontDataFactory;
        var DOMSVGFactory = /*#__PURE__*/function (_base_factory$BaseSVG) {
          _inherits(DOMSVGFactory, _base_factory$BaseSVG);
          var _super14 = _createSuper(DOMSVGFactory);
          function DOMSVGFactory() {
            _classCallCheck(this, DOMSVGFactory);
            return _super14.apply(this, arguments);
          }
          _createClass(DOMSVGFactory, [{
            key: "_createSVG",
            value: function _createSVG(type) {
              return document.createElementNS(SVG_NS, type);
            }
          }]);
          return DOMSVGFactory;
        }(_base_factory.BaseSVGFactory);
        exports.DOMSVGFactory = DOMSVGFactory;
        var PageViewport = /*#__PURE__*/function () {
          function PageViewport(_ref34) {
            var viewBox = _ref34.viewBox,
              scale = _ref34.scale,
              rotation = _ref34.rotation,
              _ref34$offsetX = _ref34.offsetX,
              offsetX = _ref34$offsetX === void 0 ? 0 : _ref34$offsetX,
              _ref34$offsetY = _ref34.offsetY,
              offsetY = _ref34$offsetY === void 0 ? 0 : _ref34$offsetY,
              _ref34$dontFlip = _ref34.dontFlip,
              dontFlip = _ref34$dontFlip === void 0 ? false : _ref34$dontFlip;
            _classCallCheck(this, PageViewport);
            this.viewBox = viewBox;
            this.scale = scale;
            this.rotation = rotation;
            this.offsetX = offsetX;
            this.offsetY = offsetY;
            var centerX = (viewBox[2] + viewBox[0]) / 2;
            var centerY = (viewBox[3] + viewBox[1]) / 2;
            var rotateA, rotateB, rotateC, rotateD;
            rotation %= 360;
            if (rotation < 0) {
              rotation += 360;
            }
            switch (rotation) {
              case 180:
                rotateA = -1;
                rotateB = 0;
                rotateC = 0;
                rotateD = 1;
                break;
              case 90:
                rotateA = 0;
                rotateB = 1;
                rotateC = 1;
                rotateD = 0;
                break;
              case 270:
                rotateA = 0;
                rotateB = -1;
                rotateC = -1;
                rotateD = 0;
                break;
              case 0:
                rotateA = 1;
                rotateB = 0;
                rotateC = 0;
                rotateD = -1;
                break;
              default:
                throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
            }
            if (dontFlip) {
              rotateC = -rotateC;
              rotateD = -rotateD;
            }
            var offsetCanvasX, offsetCanvasY;
            var width, height;
            if (rotateA === 0) {
              offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;
              offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;
              width = (viewBox[3] - viewBox[1]) * scale;
              height = (viewBox[2] - viewBox[0]) * scale;
            } else {
              offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;
              offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;
              width = (viewBox[2] - viewBox[0]) * scale;
              height = (viewBox[3] - viewBox[1]) * scale;
            }
            this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];
            this.width = width;
            this.height = height;
          }
          _createClass(PageViewport, [{
            key: "rawDims",
            get: function get() {
              var viewBox = this.viewBox;
              return (0, _util.shadow)(this, "rawDims", {
                pageWidth: viewBox[2] - viewBox[0],
                pageHeight: viewBox[3] - viewBox[1],
                pageX: viewBox[0],
                pageY: viewBox[1]
              });
            }
          }, {
            key: "clone",
            value: function clone() {
              var _ref35 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
                _ref35$scale = _ref35.scale,
                scale = _ref35$scale === void 0 ? this.scale : _ref35$scale,
                _ref35$rotation = _ref35.rotation,
                rotation = _ref35$rotation === void 0 ? this.rotation : _ref35$rotation,
                _ref35$offsetX = _ref35.offsetX,
                offsetX = _ref35$offsetX === void 0 ? this.offsetX : _ref35$offsetX,
                _ref35$offsetY = _ref35.offsetY,
                offsetY = _ref35$offsetY === void 0 ? this.offsetY : _ref35$offsetY,
                _ref35$dontFlip = _ref35.dontFlip,
                dontFlip = _ref35$dontFlip === void 0 ? false : _ref35$dontFlip;
              return new PageViewport({
                viewBox: this.viewBox.slice(),
                scale: scale,
                rotation: rotation,
                offsetX: offsetX,
                offsetY: offsetY,
                dontFlip: dontFlip
              });
            }
          }, {
            key: "convertToViewportPoint",
            value: function convertToViewportPoint(x, y) {
              return _util.Util.applyTransform([x, y], this.transform);
            }
          }, {
            key: "convertToViewportRectangle",
            value: function convertToViewportRectangle(rect) {
              var topLeft = _util.Util.applyTransform([rect[0], rect[1]], this.transform);
              var bottomRight = _util.Util.applyTransform([rect[2], rect[3]], this.transform);
              return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];
            }
          }, {
            key: "convertToPdfPoint",
            value: function convertToPdfPoint(x, y) {
              return _util.Util.applyInverseTransform([x, y], this.transform);
            }
          }]);
          return PageViewport;
        }();
        exports.PageViewport = PageViewport;
        var RenderingCancelledException = /*#__PURE__*/function (_util$BaseException) {
          _inherits(RenderingCancelledException, _util$BaseException);
          var _super15 = _createSuper(RenderingCancelledException);
          function RenderingCancelledException(msg) {
            var _this29;
            var extraDelay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            _classCallCheck(this, RenderingCancelledException);
            _this29 = _super15.call(this, msg, "RenderingCancelledException");
            _this29.extraDelay = extraDelay;
            return _this29;
          }
          return _createClass(RenderingCancelledException);
        }(_util.BaseException);
        exports.RenderingCancelledException = RenderingCancelledException;
        function isDataScheme(url) {
          var ii = url.length;
          var i = 0;
          while (i < ii && url[i].trim() === "") {
            i++;
          }
          return url.substring(i, i + 5).toLowerCase() === "data:";
        }
        function isPdfFile(filename) {
          return typeof filename === "string" && /\.pdf$/i.test(filename);
        }
        function getFilenameFromUrl(url) {
          var onlyStripPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          if (!onlyStripPath) {
            var _url$split = url.split(/[#?]/, 1);
            var _url$split2 = _slicedToArray(_url$split, 1);
            url = _url$split2[0];
          }
          return url.substring(url.lastIndexOf("/") + 1);
        }
        function getPdfFilenameFromUrl(url) {
          var defaultFilename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "document.pdf";
          if (typeof url !== "string") {
            return defaultFilename;
          }
          if (isDataScheme(url)) {
            (0, _util.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.');
            return defaultFilename;
          }
          var reURI = /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/;
          var reFilename = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i;
          var splitURI = reURI.exec(url);
          var suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);
          if (suggestedFilename) {
            suggestedFilename = suggestedFilename[0];
            if (suggestedFilename.includes("%")) {
              try {
                suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];
              } catch (_unused9) {}
            }
          }
          return suggestedFilename || defaultFilename;
        }
        var StatTimer = /*#__PURE__*/function () {
          function StatTimer() {
            _classCallCheck(this, StatTimer);
            _defineProperty(this, "started", Object.create(null));
            _defineProperty(this, "times", []);
          }
          _createClass(StatTimer, [{
            key: "time",
            value: function time(name) {
              if (name in this.started) {
                (0, _util.warn)("Timer is already running for ".concat(name));
              }
              this.started[name] = Date.now();
            }
          }, {
            key: "timeEnd",
            value: function timeEnd(name) {
              if (!(name in this.started)) {
                (0, _util.warn)("Timer has not been started for ".concat(name));
              }
              this.times.push({
                name: name,
                start: this.started[name],
                end: Date.now()
              });
              delete this.started[name];
            }
          }, {
            key: "toString",
            value: function toString() {
              var outBuf = [];
              var longest = 0;
              var _iterator39 = _createForOfIteratorHelper(this.times),
                _step39;
              try {
                for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
                  var name = _step39.value.name;
                  longest = Math.max(name.length, longest);
                }
              } catch (err) {
                _iterator39.e(err);
              } finally {
                _iterator39.f();
              }
              var _iterator40 = _createForOfIteratorHelper(this.times),
                _step40;
              try {
                for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
                  var _step40$value = _step40.value,
                    _name = _step40$value.name,
                    start = _step40$value.start,
                    end = _step40$value.end;
                  outBuf.push("".concat(_name.padEnd(longest), " ").concat(end - start, "ms\n"));
                }
              } catch (err) {
                _iterator40.e(err);
              } finally {
                _iterator40.f();
              }
              return outBuf.join("");
            }
          }]);
          return StatTimer;
        }();
        exports.StatTimer = StatTimer;
        function isValidFetchUrl(url, baseUrl) {
          try {
            var _ref36 = baseUrl ? new URL(url, baseUrl) : new URL(url),
              protocol = _ref36.protocol;
            return protocol === "http:" || protocol === "https:";
          } catch (_unused10) {
            return false;
          }
        }
        function loadScript(src) {
          var removeScriptElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
          return new Promise(function (resolve, reject) {
            var script = document.createElement("script");
            script.src = src;
            script.onload = function (evt) {
              if (removeScriptElement) {
                script.remove();
              }
              resolve(evt);
            };
            script.onerror = function () {
              reject(new Error("Cannot load script at: ".concat(script.src)));
            };
            (document.head || document.documentElement).append(script);
          });
        }
        function deprecated(details) {
          console.log("Deprecated API usage: " + details);
        }
        var pdfDateStringRegex;
        var PDFDateString = /*#__PURE__*/function () {
          function PDFDateString() {
            _classCallCheck(this, PDFDateString);
          }
          _createClass(PDFDateString, null, [{
            key: "toDateObject",
            value: function toDateObject(input) {
              if (!input || typeof input !== "string") {
                return null;
              }
              pdfDateStringRegex || (pdfDateStringRegex = new RegExp("^D:" + "(\\d{4})" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "(\\d{2})?" + "([Z|+|-])?" + "(\\d{2})?" + "'?" + "(\\d{2})?" + "'?"));
              var matches = pdfDateStringRegex.exec(input);
              if (!matches) {
                return null;
              }
              var year = parseInt(matches[1], 10);
              var month = parseInt(matches[2], 10);
              month = month >= 1 && month <= 12 ? month - 1 : 0;
              var day = parseInt(matches[3], 10);
              day = day >= 1 && day <= 31 ? day : 1;
              var hour = parseInt(matches[4], 10);
              hour = hour >= 0 && hour <= 23 ? hour : 0;
              var minute = parseInt(matches[5], 10);
              minute = minute >= 0 && minute <= 59 ? minute : 0;
              var second = parseInt(matches[6], 10);
              second = second >= 0 && second <= 59 ? second : 0;
              var universalTimeRelation = matches[7] || "Z";
              var offsetHour = parseInt(matches[8], 10);
              offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;
              var offsetMinute = parseInt(matches[9], 10) || 0;
              offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;
              if (universalTimeRelation === "-") {
                hour += offsetHour;
                minute += offsetMinute;
              } else if (universalTimeRelation === "+") {
                hour -= offsetHour;
                minute -= offsetMinute;
              }
              return new Date(Date.UTC(year, month, day, hour, minute, second));
            }
          }]);
          return PDFDateString;
        }();
        exports.PDFDateString = PDFDateString;
        function getXfaPageViewport(xfaPage, _ref37) {
          var _ref37$scale = _ref37.scale,
            scale = _ref37$scale === void 0 ? 1 : _ref37$scale,
            _ref37$rotation = _ref37.rotation,
            rotation = _ref37$rotation === void 0 ? 0 : _ref37$rotation;
          var _xfaPage$attributes$s = xfaPage.attributes.style,
            width = _xfaPage$attributes$s.width,
            height = _xfaPage$attributes$s.height;
          var viewBox = [0, 0, parseInt(width), parseInt(height)];
          return new PageViewport({
            viewBox: viewBox,
            scale: scale,
            rotation: rotation
          });
        }
        function getRGB(color) {
          if (color.startsWith("#")) {
            var colorRGB = parseInt(color.slice(1), 16);
            return [(colorRGB & 0xff0000) >> 16, (colorRGB & 0x00ff00) >> 8, colorRGB & 0x0000ff];
          }
          if (color.startsWith("rgb(")) {
            return color.slice(4, -1).split(",").map(function (x) {
              return parseInt(x);
            });
          }
          if (color.startsWith("rgba(")) {
            return color.slice(5, -1).split(",").map(function (x) {
              return parseInt(x);
            }).slice(0, 3);
          }
          (0, _util.warn)("Not a valid color format: \"".concat(color, "\""));
          return [0, 0, 0];
        }
        function getColorValues(colors) {
          var span = document.createElement("span");
          span.style.visibility = "hidden";
          document.body.append(span);
          var _iterator41 = _createForOfIteratorHelper(colors.keys()),
            _step41;
          try {
            for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
              var name = _step41.value;
              span.style.color = name;
              var computedColor = window.getComputedStyle(span).color;
              colors.set(name, getRGB(computedColor));
            }
          } catch (err) {
            _iterator41.e(err);
          } finally {
            _iterator41.f();
          }
          span.remove();
        }
        function getCurrentTransform(ctx) {
          var _ctx$getTransform = ctx.getTransform(),
            a = _ctx$getTransform.a,
            b = _ctx$getTransform.b,
            c = _ctx$getTransform.c,
            d = _ctx$getTransform.d,
            e = _ctx$getTransform.e,
            f = _ctx$getTransform.f;
          return [a, b, c, d, e, f];
        }
        function getCurrentTransformInverse(ctx) {
          var _ctx$getTransform$inv = ctx.getTransform().invertSelf(),
            a = _ctx$getTransform$inv.a,
            b = _ctx$getTransform$inv.b,
            c = _ctx$getTransform$inv.c,
            d = _ctx$getTransform$inv.d,
            e = _ctx$getTransform$inv.e,
            f = _ctx$getTransform$inv.f;
          return [a, b, c, d, e, f];
        }
        function setLayerDimensions(div, viewport) {
          var mustFlip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          var mustRotate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
          if (viewport instanceof PageViewport) {
            var _viewport$rawDims = viewport.rawDims,
              pageWidth = _viewport$rawDims.pageWidth,
              pageHeight = _viewport$rawDims.pageHeight;
            var style = div.style;
            var widthStr = "calc(var(--scale-factor) * ".concat(pageWidth, "px)");
            var heightStr = "calc(var(--scale-factor) * ".concat(pageHeight, "px)");
            if (!mustFlip || viewport.rotation % 180 === 0) {
              style.width = widthStr;
              style.height = heightStr;
            } else {
              style.width = heightStr;
              style.height = widthStr;
            }
          }
          if (mustRotate) {
            div.setAttribute("data-main-rotation", viewport.rotation);
          }
        }

        /***/
      }, /* 7 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BaseStandardFontDataFactory = exports.BaseSVGFactory = exports.BaseFilterFactory = exports.BaseCanvasFactory = exports.BaseCMapReaderFactory = void 0;
        var _util = __w_pdfjs_require__(1);
        var BaseFilterFactory = /*#__PURE__*/function () {
          function BaseFilterFactory() {
            _classCallCheck(this, BaseFilterFactory);
            if (this.constructor === BaseFilterFactory) {
              (0, _util.unreachable)("Cannot initialize BaseFilterFactory.");
            }
          }
          _createClass(BaseFilterFactory, [{
            key: "addFilter",
            value: function addFilter(maps) {
              return "none";
            }
          }, {
            key: "addHCMFilter",
            value: function addHCMFilter(fgColor, bgColor) {
              return "none";
            }
          }, {
            key: "addHighlightHCMFilter",
            value: function addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {
              return "none";
            }
          }, {
            key: "destroy",
            value: function destroy() {
              var keepHCM = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
            }
          }]);
          return BaseFilterFactory;
        }();
        exports.BaseFilterFactory = BaseFilterFactory;
        var BaseCanvasFactory = /*#__PURE__*/function () {
          function BaseCanvasFactory() {
            _classCallCheck(this, BaseCanvasFactory);
            if (this.constructor === BaseCanvasFactory) {
              (0, _util.unreachable)("Cannot initialize BaseCanvasFactory.");
            }
          }
          _createClass(BaseCanvasFactory, [{
            key: "create",
            value: function create(width, height) {
              if (width <= 0 || height <= 0) {
                throw new Error("Invalid canvas size");
              }
              var canvas = this._createCanvas(width, height);
              return {
                canvas: canvas,
                context: canvas.getContext("2d")
              };
            }
          }, {
            key: "reset",
            value: function reset(canvasAndContext, width, height) {
              if (!canvasAndContext.canvas) {
                throw new Error("Canvas is not specified");
              }
              if (width <= 0 || height <= 0) {
                throw new Error("Invalid canvas size");
              }
              canvasAndContext.canvas.width = width;
              canvasAndContext.canvas.height = height;
            }
          }, {
            key: "destroy",
            value: function destroy(canvasAndContext) {
              if (!canvasAndContext.canvas) {
                throw new Error("Canvas is not specified");
              }
              canvasAndContext.canvas.width = 0;
              canvasAndContext.canvas.height = 0;
              canvasAndContext.canvas = null;
              canvasAndContext.context = null;
            }
          }, {
            key: "_createCanvas",
            value: function _createCanvas(width, height) {
              (0, _util.unreachable)("Abstract method `_createCanvas` called.");
            }
          }]);
          return BaseCanvasFactory;
        }();
        exports.BaseCanvasFactory = BaseCanvasFactory;
        var BaseCMapReaderFactory = /*#__PURE__*/function () {
          function BaseCMapReaderFactory(_ref38) {
            var _ref38$baseUrl = _ref38.baseUrl,
              baseUrl = _ref38$baseUrl === void 0 ? null : _ref38$baseUrl,
              _ref38$isCompressed = _ref38.isCompressed,
              isCompressed = _ref38$isCompressed === void 0 ? true : _ref38$isCompressed;
            _classCallCheck(this, BaseCMapReaderFactory);
            if (this.constructor === BaseCMapReaderFactory) {
              (0, _util.unreachable)("Cannot initialize BaseCMapReaderFactory.");
            }
            this.baseUrl = baseUrl;
            this.isCompressed = isCompressed;
          }
          _createClass(BaseCMapReaderFactory, [{
            key: "fetch",
            value: function () {
              var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(_ref39) {
                var _this30 = this;
                var name, url, compressionType;
                return _regeneratorRuntime().wrap(function _callee8$(_context8) {
                  while (1) switch (_context8.prev = _context8.next) {
                    case 0:
                      name = _ref39.name;
                      if (this.baseUrl) {
                        _context8.next = 3;
                        break;
                      }
                      throw new Error('The CMap "baseUrl" parameter must be specified, ensure that ' + 'the "cMapUrl" and "cMapPacked" API parameters are provided.');
                    case 3:
                      if (name) {
                        _context8.next = 5;
                        break;
                      }
                      throw new Error("CMap name must be specified.");
                    case 5:
                      url = this.baseUrl + name + (this.isCompressed ? ".bcmap" : "");
                      compressionType = this.isCompressed ? _util.CMapCompressionType.BINARY : _util.CMapCompressionType.NONE;
                      return _context8.abrupt("return", this._fetchData(url, compressionType).catch(function (reason) {
                        throw new Error("Unable to load ".concat(_this30.isCompressed ? "binary " : "", "CMap at: ").concat(url));
                      }));
                    case 8:
                    case "end":
                      return _context8.stop();
                  }
                }, _callee8, this);
              }));
              function fetch(_x5) {
                return _fetch.apply(this, arguments);
              }
              return fetch;
            }()
          }, {
            key: "_fetchData",
            value: function _fetchData(url, compressionType) {
              (0, _util.unreachable)("Abstract method `_fetchData` called.");
            }
          }]);
          return BaseCMapReaderFactory;
        }();
        exports.BaseCMapReaderFactory = BaseCMapReaderFactory;
        var BaseStandardFontDataFactory = /*#__PURE__*/function () {
          function BaseStandardFontDataFactory(_ref40) {
            var _ref40$baseUrl = _ref40.baseUrl,
              baseUrl = _ref40$baseUrl === void 0 ? null : _ref40$baseUrl;
            _classCallCheck(this, BaseStandardFontDataFactory);
            if (this.constructor === BaseStandardFontDataFactory) {
              (0, _util.unreachable)("Cannot initialize BaseStandardFontDataFactory.");
            }
            this.baseUrl = baseUrl;
          }
          _createClass(BaseStandardFontDataFactory, [{
            key: "fetch",
            value: function () {
              var _fetch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(_ref41) {
                var filename, url;
                return _regeneratorRuntime().wrap(function _callee9$(_context9) {
                  while (1) switch (_context9.prev = _context9.next) {
                    case 0:
                      filename = _ref41.filename;
                      if (this.baseUrl) {
                        _context9.next = 3;
                        break;
                      }
                      throw new Error('The standard font "baseUrl" parameter must be specified, ensure that ' + 'the "standardFontDataUrl" API parameter is provided.');
                    case 3:
                      if (filename) {
                        _context9.next = 5;
                        break;
                      }
                      throw new Error("Font filename must be specified.");
                    case 5:
                      url = "".concat(this.baseUrl).concat(filename);
                      return _context9.abrupt("return", this._fetchData(url).catch(function (reason) {
                        throw new Error("Unable to load font data at: ".concat(url));
                      }));
                    case 7:
                    case "end":
                      return _context9.stop();
                  }
                }, _callee9, this);
              }));
              function fetch(_x6) {
                return _fetch2.apply(this, arguments);
              }
              return fetch;
            }()
          }, {
            key: "_fetchData",
            value: function _fetchData(url) {
              (0, _util.unreachable)("Abstract method `_fetchData` called.");
            }
          }]);
          return BaseStandardFontDataFactory;
        }();
        exports.BaseStandardFontDataFactory = BaseStandardFontDataFactory;
        var BaseSVGFactory = /*#__PURE__*/function () {
          function BaseSVGFactory() {
            _classCallCheck(this, BaseSVGFactory);
            if (this.constructor === BaseSVGFactory) {
              (0, _util.unreachable)("Cannot initialize BaseSVGFactory.");
            }
          }
          _createClass(BaseSVGFactory, [{
            key: "create",
            value: function create(width, height) {
              var skipDimensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
              if (width <= 0 || height <= 0) {
                throw new Error("Invalid SVG dimensions");
              }
              var svg = this._createSVG("svg:svg");
              svg.setAttribute("version", "1.1");
              if (!skipDimensions) {
                svg.setAttribute("width", "".concat(width, "px"));
                svg.setAttribute("height", "".concat(height, "px"));
              }
              svg.setAttribute("preserveAspectRatio", "none");
              svg.setAttribute("viewBox", "0 0 ".concat(width, " ").concat(height));
              return svg;
            }
          }, {
            key: "createElement",
            value: function createElement(type) {
              if (typeof type !== "string") {
                throw new Error("Invalid SVG element type");
              }
              return this._createSVG(type);
            }
          }, {
            key: "_createSVG",
            value: function _createSVG(type) {
              (0, _util.unreachable)("Abstract method `_createSVG` called.");
            }
          }]);
          return BaseSVGFactory;
        }();
        exports.BaseSVGFactory = BaseSVGFactory;

        /***/
      }, /* 8 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MurmurHash3_64 = void 0;
        var _util = __w_pdfjs_require__(1);
        var SEED = 0xc3d2e1f0;
        var MASK_HIGH = 0xffff0000;
        var MASK_LOW = 0xffff;
        var MurmurHash3_64 = /*#__PURE__*/function () {
          function MurmurHash3_64(seed) {
            _classCallCheck(this, MurmurHash3_64);
            this.h1 = seed ? seed & 0xffffffff : SEED;
            this.h2 = seed ? seed & 0xffffffff : SEED;
          }
          _createClass(MurmurHash3_64, [{
            key: "update",
            value: function update(input) {
              var data, length;
              if (typeof input === "string") {
                data = new Uint8Array(input.length * 2);
                length = 0;
                for (var i = 0, ii = input.length; i < ii; i++) {
                  var code = input.charCodeAt(i);
                  if (code <= 0xff) {
                    data[length++] = code;
                  } else {
                    data[length++] = code >>> 8;
                    data[length++] = code & 0xff;
                  }
                }
              } else if ((0, _util.isArrayBuffer)(input)) {
                data = input.slice();
                length = data.byteLength;
              } else {
                throw new Error("Wrong data format in MurmurHash3_64_update. " + "Input must be a string or array.");
              }
              var blockCounts = length >> 2;
              var tailLength = length - blockCounts * 4;
              var dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);
              var k1 = 0,
                k2 = 0;
              var h1 = this.h1,
                h2 = this.h2;
              var C1 = 0xcc9e2d51,
                C2 = 0x1b873593;
              var C1_LOW = C1 & MASK_LOW,
                C2_LOW = C2 & MASK_LOW;
              for (var _i9 = 0; _i9 < blockCounts; _i9++) {
                if (_i9 & 1) {
                  k1 = dataUint32[_i9];
                  k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
                  k1 = k1 << 15 | k1 >>> 17;
                  k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
                  h1 ^= k1;
                  h1 = h1 << 13 | h1 >>> 19;
                  h1 = h1 * 5 + 0xe6546b64;
                } else {
                  k2 = dataUint32[_i9];
                  k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;
                  k2 = k2 << 15 | k2 >>> 17;
                  k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;
                  h2 ^= k2;
                  h2 = h2 << 13 | h2 >>> 19;
                  h2 = h2 * 5 + 0xe6546b64;
                }
              }
              k1 = 0;
              switch (tailLength) {
                case 3:
                  k1 ^= data[blockCounts * 4 + 2] << 16;
                case 2:
                  k1 ^= data[blockCounts * 4 + 1] << 8;
                case 1:
                  k1 ^= data[blockCounts * 4];
                  k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;
                  k1 = k1 << 15 | k1 >>> 17;
                  k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;
                  if (blockCounts & 1) {
                    h1 ^= k1;
                  } else {
                    h2 ^= k1;
                  }
              }
              this.h1 = h1;
              this.h2 = h2;
            }
          }, {
            key: "hexdigest",
            value: function hexdigest() {
              var h1 = this.h1,
                h2 = this.h2;
              h1 ^= h2 >>> 1;
              h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;
              h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;
              h1 ^= h2 >>> 1;
              h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;
              h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;
              h1 ^= h2 >>> 1;
              return (h1 >>> 0).toString(16).padStart(8, "0") + (h2 >>> 0).toString(16).padStart(8, "0");
            }
          }]);
          return MurmurHash3_64;
        }();
        exports.MurmurHash3_64 = MurmurHash3_64;

        /***/
      }, /* 9 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FontLoader = exports.FontFaceObject = void 0;
        var _util = __w_pdfjs_require__(1);
        var _is_node = __w_pdfjs_require__(10);
        var _systemFonts = /*#__PURE__*/new WeakMap();
        var FontLoader = /*#__PURE__*/function () {
          function FontLoader(_ref42) {
            var _ref42$ownerDocument = _ref42.ownerDocument,
              ownerDocument = _ref42$ownerDocument === void 0 ? globalThis.document : _ref42$ownerDocument,
              _ref42$styleElement = _ref42.styleElement,
              styleElement = _ref42$styleElement === void 0 ? null : _ref42$styleElement;
            _classCallCheck(this, FontLoader);
            _classPrivateFieldInitSpec(this, _systemFonts, {
              writable: true,
              value: new Set()
            });
            this._document = ownerDocument;
            this.nativeFontFaces = new Set();
            this.styleElement = null;
            this.loadingRequests = [];
            this.loadTestFontId = 0;
          }
          _createClass(FontLoader, [{
            key: "addNativeFontFace",
            value: function addNativeFontFace(nativeFontFace) {
              this.nativeFontFaces.add(nativeFontFace);
              this._document.fonts.add(nativeFontFace);
            }
          }, {
            key: "removeNativeFontFace",
            value: function removeNativeFontFace(nativeFontFace) {
              this.nativeFontFaces.delete(nativeFontFace);
              this._document.fonts.delete(nativeFontFace);
            }
          }, {
            key: "insertRule",
            value: function insertRule(rule) {
              if (!this.styleElement) {
                this.styleElement = this._document.createElement("style");
                this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement);
              }
              var styleSheet = this.styleElement.sheet;
              styleSheet.insertRule(rule, styleSheet.cssRules.length);
            }
          }, {
            key: "clear",
            value: function clear() {
              var _iterator42 = _createForOfIteratorHelper(this.nativeFontFaces),
                _step42;
              try {
                for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
                  var nativeFontFace = _step42.value;
                  this._document.fonts.delete(nativeFontFace);
                }
              } catch (err) {
                _iterator42.e(err);
              } finally {
                _iterator42.f();
              }
              this.nativeFontFaces.clear();
              _classPrivateFieldGet(this, _systemFonts).clear();
              if (this.styleElement) {
                this.styleElement.remove();
                this.styleElement = null;
              }
            }
          }, {
            key: "loadSystemFont",
            value: function () {
              var _loadSystemFont = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(info) {
                var loadedName, src, style, fontFace;
                return _regeneratorRuntime().wrap(function _callee10$(_context10) {
                  while (1) switch (_context10.prev = _context10.next) {
                    case 0:
                      if (!(!info || _classPrivateFieldGet(this, _systemFonts).has(info.loadedName))) {
                        _context10.next = 2;
                        break;
                      }
                      return _context10.abrupt("return");
                    case 2:
                      (0, _util.assert)(!this.disableFontFace, "loadSystemFont shouldn't be called when `disableFontFace` is set.");
                      if (!this.isFontLoadingAPISupported) {
                        _context10.next = 18;
                        break;
                      }
                      loadedName = info.loadedName, src = info.src, style = info.style;
                      fontFace = new FontFace(loadedName, src, style);
                      this.addNativeFontFace(fontFace);
                      _context10.prev = 7;
                      _context10.next = 10;
                      return fontFace.load();
                    case 10:
                      _classPrivateFieldGet(this, _systemFonts).add(loadedName);
                      _context10.next = 17;
                      break;
                    case 13:
                      _context10.prev = 13;
                      _context10.t0 = _context10["catch"](7);
                      (0, _util.warn)("Cannot load system font: ".concat(info.baseFontName, ", installing it could help to improve PDF rendering."));
                      this.removeNativeFontFace(fontFace);
                    case 17:
                      return _context10.abrupt("return");
                    case 18:
                      (0, _util.unreachable)("Not implemented: loadSystemFont without the Font Loading API.");
                    case 19:
                    case "end":
                      return _context10.stop();
                  }
                }, _callee10, this, [[7, 13]]);
              }));
              function loadSystemFont(_x7) {
                return _loadSystemFont.apply(this, arguments);
              }
              return loadSystemFont;
            }()
          }, {
            key: "bind",
            value: function () {
              var _bind = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(font) {
                var _this31 = this;
                var nativeFontFace, rule;
                return _regeneratorRuntime().wrap(function _callee11$(_context11) {
                  while (1) switch (_context11.prev = _context11.next) {
                    case 0:
                      if (!(font.attached || font.missingFile && !font.systemFontInfo)) {
                        _context11.next = 2;
                        break;
                      }
                      return _context11.abrupt("return");
                    case 2:
                      font.attached = true;
                      if (!font.systemFontInfo) {
                        _context11.next = 7;
                        break;
                      }
                      _context11.next = 6;
                      return this.loadSystemFont(font.systemFontInfo);
                    case 6:
                      return _context11.abrupt("return");
                    case 7:
                      if (!this.isFontLoadingAPISupported) {
                        _context11.next = 22;
                        break;
                      }
                      nativeFontFace = font.createNativeFontFace();
                      if (!nativeFontFace) {
                        _context11.next = 21;
                        break;
                      }
                      this.addNativeFontFace(nativeFontFace);
                      _context11.prev = 11;
                      _context11.next = 14;
                      return nativeFontFace.loaded;
                    case 14:
                      _context11.next = 21;
                      break;
                    case 16:
                      _context11.prev = 16;
                      _context11.t0 = _context11["catch"](11);
                      (0, _util.warn)("Failed to load font '".concat(nativeFontFace.family, "': '").concat(_context11.t0, "'."));
                      font.disableFontFace = true;
                      throw _context11.t0;
                    case 21:
                      return _context11.abrupt("return");
                    case 22:
                      rule = font.createFontFaceRule();
                      if (!rule) {
                        _context11.next = 29;
                        break;
                      }
                      this.insertRule(rule);
                      if (!this.isSyncFontLoadingSupported) {
                        _context11.next = 27;
                        break;
                      }
                      return _context11.abrupt("return");
                    case 27:
                      _context11.next = 29;
                      return new Promise(function (resolve) {
                        var request = _this31._queueLoadingCallback(resolve);
                        _this31._prepareFontLoadEvent(font, request);
                      });
                    case 29:
                    case "end":
                      return _context11.stop();
                  }
                }, _callee11, this, [[11, 16]]);
              }));
              function bind(_x8) {
                return _bind.apply(this, arguments);
              }
              return bind;
            }()
          }, {
            key: "isFontLoadingAPISupported",
            get: function get() {
              var _this$_document;
              var hasFonts = !!((_this$_document = this._document) !== null && _this$_document !== void 0 && _this$_document.fonts);
              return (0, _util.shadow)(this, "isFontLoadingAPISupported", hasFonts);
            }
          }, {
            key: "isSyncFontLoadingSupported",
            get: function get() {
              var supported = false;
              if (_is_node.isNodeJS) {
                supported = true;
              } else if (typeof navigator !== "undefined" && /Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent)) {
                supported = true;
              }
              return (0, _util.shadow)(this, "isSyncFontLoadingSupported", supported);
            }
          }, {
            key: "_queueLoadingCallback",
            value: function _queueLoadingCallback(callback) {
              function completeRequest() {
                (0, _util.assert)(!request.done, "completeRequest() cannot be called twice.");
                request.done = true;
                while (loadingRequests.length > 0 && loadingRequests[0].done) {
                  var otherRequest = loadingRequests.shift();
                  setTimeout(otherRequest.callback, 0);
                }
              }
              var loadingRequests = this.loadingRequests;
              var request = {
                done: false,
                complete: completeRequest,
                callback: callback
              };
              loadingRequests.push(request);
              return request;
            }
          }, {
            key: "_loadTestFont",
            get: function get() {
              var testFont = atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA" + "FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA" + "ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA" + "AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1" + "AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD" + "6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM" + "AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D" + "IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA" + "AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA" + "AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB" + "AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY" + "AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA" + "AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" + "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA" + "AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC" + "AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3" + "Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj" + "FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
              return (0, _util.shadow)(this, "_loadTestFont", testFont);
            }
          }, {
            key: "_prepareFontLoadEvent",
            value: function _prepareFontLoadEvent(font, request) {
              function int32(data, offset) {
                return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;
              }
              function spliceString(s, offset, remove, insert) {
                var chunk1 = s.substring(0, offset);
                var chunk2 = s.substring(offset + remove);
                return chunk1 + insert + chunk2;
              }
              var i, ii;
              var canvas = this._document.createElement("canvas");
              canvas.width = 1;
              canvas.height = 1;
              var ctx = canvas.getContext("2d");
              var called = 0;
              function isFontReady(name, callback) {
                if (++called > 30) {
                  (0, _util.warn)("Load test font never loaded.");
                  callback();
                  return;
                }
                ctx.font = "30px " + name;
                ctx.fillText(".", 0, 20);
                var imageData = ctx.getImageData(0, 0, 1, 1);
                if (imageData.data[3] > 0) {
                  callback();
                  return;
                }
                setTimeout(isFontReady.bind(null, name, callback));
              }
              var loadTestFontId = "lt".concat(Date.now()).concat(this.loadTestFontId++);
              var data = this._loadTestFont;
              var COMMENT_OFFSET = 976;
              data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);
              var CFF_CHECKSUM_OFFSET = 16;
              var XXXX_VALUE = 0x58585858;
              var checksum = int32(data, CFF_CHECKSUM_OFFSET);
              for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {
                checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;
              }
              if (i < loadTestFontId.length) {
                checksum = checksum - XXXX_VALUE + int32(loadTestFontId + "XXX", i) | 0;
              }
              data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, (0, _util.string32)(checksum));
              var url = "url(data:font/opentype;base64,".concat(btoa(data), ");");
              var rule = "@font-face {font-family:\"".concat(loadTestFontId, "\";src:").concat(url, "}");
              this.insertRule(rule);
              var div = this._document.createElement("div");
              div.style.visibility = "hidden";
              div.style.width = div.style.height = "10px";
              div.style.position = "absolute";
              div.style.top = div.style.left = "0px";
              for (var _i10 = 0, _arr2 = [font.loadedName, loadTestFontId]; _i10 < _arr2.length; _i10++) {
                var name = _arr2[_i10];
                var span = this._document.createElement("span");
                span.textContent = "Hi";
                span.style.fontFamily = name;
                div.append(span);
              }
              this._document.body.append(div);
              isFontReady(loadTestFontId, function () {
                div.remove();
                request.complete();
              });
            }
          }]);
          return FontLoader;
        }();
        exports.FontLoader = FontLoader;
        var FontFaceObject = /*#__PURE__*/function () {
          function FontFaceObject(translatedData, _ref43) {
            var _ref43$isEvalSupporte = _ref43.isEvalSupported,
              isEvalSupported = _ref43$isEvalSupporte === void 0 ? true : _ref43$isEvalSupporte,
              _ref43$disableFontFac = _ref43.disableFontFace,
              disableFontFace = _ref43$disableFontFac === void 0 ? false : _ref43$disableFontFac,
              _ref43$ignoreErrors = _ref43.ignoreErrors,
              ignoreErrors = _ref43$ignoreErrors === void 0 ? false : _ref43$ignoreErrors,
              _ref43$inspectFont = _ref43.inspectFont,
              inspectFont = _ref43$inspectFont === void 0 ? null : _ref43$inspectFont;
            _classCallCheck(this, FontFaceObject);
            this.compiledGlyphs = Object.create(null);
            for (var i in translatedData) {
              this[i] = translatedData[i];
            }
            this.isEvalSupported = isEvalSupported !== false;
            this.disableFontFace = disableFontFace === true;
            this.ignoreErrors = ignoreErrors === true;
            this._inspectFont = inspectFont;
          }
          _createClass(FontFaceObject, [{
            key: "createNativeFontFace",
            value: function createNativeFontFace() {
              var _this$_inspectFont;
              if (!this.data || this.disableFontFace) {
                return null;
              }
              var nativeFontFace;
              if (!this.cssFontInfo) {
                nativeFontFace = new FontFace(this.loadedName, this.data, {});
              } else {
                var css = {
                  weight: this.cssFontInfo.fontWeight
                };
                if (this.cssFontInfo.italicAngle) {
                  css.style = "oblique ".concat(this.cssFontInfo.italicAngle, "deg");
                }
                nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);
              }
              (_this$_inspectFont = this._inspectFont) === null || _this$_inspectFont === void 0 ? void 0 : _this$_inspectFont.call(this, this);
              return nativeFontFace;
            }
          }, {
            key: "createFontFaceRule",
            value: function createFontFaceRule() {
              var _this$_inspectFont2;
              if (!this.data || this.disableFontFace) {
                return null;
              }
              var data = (0, _util.bytesToString)(this.data);
              var url = "url(data:".concat(this.mimetype, ";base64,").concat(btoa(data), ");");
              var rule;
              if (!this.cssFontInfo) {
                rule = "@font-face {font-family:\"".concat(this.loadedName, "\";src:").concat(url, "}");
              } else {
                var css = "font-weight: ".concat(this.cssFontInfo.fontWeight, ";");
                if (this.cssFontInfo.italicAngle) {
                  css += "font-style: oblique ".concat(this.cssFontInfo.italicAngle, "deg;");
                }
                rule = "@font-face {font-family:\"".concat(this.cssFontInfo.fontFamily, "\";").concat(css, "src:").concat(url, "}");
              }
              (_this$_inspectFont2 = this._inspectFont) === null || _this$_inspectFont2 === void 0 ? void 0 : _this$_inspectFont2.call(this, this, url);
              return rule;
            }
          }, {
            key: "getPathGenerator",
            value: function getPathGenerator(objs, character) {
              if (this.compiledGlyphs[character] !== undefined) {
                return this.compiledGlyphs[character];
              }
              var cmds;
              try {
                cmds = objs.get(this.loadedName + "_path_" + character);
              } catch (ex) {
                if (!this.ignoreErrors) {
                  throw ex;
                }
                (0, _util.warn)("getPathGenerator - ignoring character: \"".concat(ex, "\"."));
                return this.compiledGlyphs[character] = function (c, size) {};
              }
              if (this.isEvalSupported && _util.FeatureTest.isEvalSupported) {
                var jsBuf = [];
                var _iterator43 = _createForOfIteratorHelper(cmds),
                  _step43;
                try {
                  for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
                    var current = _step43.value;
                    var args = current.args !== undefined ? current.args.join(",") : "";
                    jsBuf.push("c.", current.cmd, "(", args, ");\n");
                  }
                } catch (err) {
                  _iterator43.e(err);
                } finally {
                  _iterator43.f();
                }
                return this.compiledGlyphs[character] = new Function("c", "size", jsBuf.join(""));
              }
              return this.compiledGlyphs[character] = function (c, size) {
                var _iterator44 = _createForOfIteratorHelper(cmds),
                  _step44;
                try {
                  for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
                    var _current = _step44.value;
                    if (_current.cmd === "scale") {
                      _current.args = [size, -size];
                    }
                    c[_current.cmd].apply(c, _current.args);
                  }
                } catch (err) {
                  _iterator44.e(err);
                } finally {
                  _iterator44.f();
                }
              };
            }
          }]);
          return FontFaceObject;
        }();
        exports.FontFaceObject = FontFaceObject;

        /***/
      }, /* 10 */
      /***/function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isNodeJS = void 0;
        var isNodeJS = (typeof process === "undefined" ? "undefined" : _typeof(process)) === "object" && process + "" === "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser");
        exports.isNodeJS = isNodeJS;

        /***/
      }, /* 11 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanvasGraphics = void 0;
        var _util = __w_pdfjs_require__(1);
        var _display_utils = __w_pdfjs_require__(6);
        var _pattern_helper = __w_pdfjs_require__(12);
        var _image_utils = __w_pdfjs_require__(13);
        var _is_node = __w_pdfjs_require__(10);
        var MIN_FONT_SIZE = 16;
        var MAX_FONT_SIZE = 100;
        var MAX_GROUP_SIZE = 4096;
        var EXECUTION_TIME = 15;
        var EXECUTION_STEPS = 10;
        var MAX_SIZE_TO_COMPILE = 1000;
        var FULL_CHUNK_HEIGHT = 16;
        function mirrorContextOperations(ctx, destCtx) {
          if (ctx._removeMirroring) {
            throw new Error("Context is already forwarding operations.");
          }
          ctx.__originalSave = ctx.save;
          ctx.__originalRestore = ctx.restore;
          ctx.__originalRotate = ctx.rotate;
          ctx.__originalScale = ctx.scale;
          ctx.__originalTranslate = ctx.translate;
          ctx.__originalTransform = ctx.transform;
          ctx.__originalSetTransform = ctx.setTransform;
          ctx.__originalResetTransform = ctx.resetTransform;
          ctx.__originalClip = ctx.clip;
          ctx.__originalMoveTo = ctx.moveTo;
          ctx.__originalLineTo = ctx.lineTo;
          ctx.__originalBezierCurveTo = ctx.bezierCurveTo;
          ctx.__originalRect = ctx.rect;
          ctx.__originalClosePath = ctx.closePath;
          ctx.__originalBeginPath = ctx.beginPath;
          ctx._removeMirroring = function () {
            ctx.save = ctx.__originalSave;
            ctx.restore = ctx.__originalRestore;
            ctx.rotate = ctx.__originalRotate;
            ctx.scale = ctx.__originalScale;
            ctx.translate = ctx.__originalTranslate;
            ctx.transform = ctx.__originalTransform;
            ctx.setTransform = ctx.__originalSetTransform;
            ctx.resetTransform = ctx.__originalResetTransform;
            ctx.clip = ctx.__originalClip;
            ctx.moveTo = ctx.__originalMoveTo;
            ctx.lineTo = ctx.__originalLineTo;
            ctx.bezierCurveTo = ctx.__originalBezierCurveTo;
            ctx.rect = ctx.__originalRect;
            ctx.closePath = ctx.__originalClosePath;
            ctx.beginPath = ctx.__originalBeginPath;
            delete ctx._removeMirroring;
          };
          ctx.save = function ctxSave() {
            destCtx.save();
            this.__originalSave();
          };
          ctx.restore = function ctxRestore() {
            destCtx.restore();
            this.__originalRestore();
          };
          ctx.translate = function ctxTranslate(x, y) {
            destCtx.translate(x, y);
            this.__originalTranslate(x, y);
          };
          ctx.scale = function ctxScale(x, y) {
            destCtx.scale(x, y);
            this.__originalScale(x, y);
          };
          ctx.transform = function ctxTransform(a, b, c, d, e, f) {
            destCtx.transform(a, b, c, d, e, f);
            this.__originalTransform(a, b, c, d, e, f);
          };
          ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
            destCtx.setTransform(a, b, c, d, e, f);
            this.__originalSetTransform(a, b, c, d, e, f);
          };
          ctx.resetTransform = function ctxResetTransform() {
            destCtx.resetTransform();
            this.__originalResetTransform();
          };
          ctx.rotate = function ctxRotate(angle) {
            destCtx.rotate(angle);
            this.__originalRotate(angle);
          };
          ctx.clip = function ctxRotate(rule) {
            destCtx.clip(rule);
            this.__originalClip(rule);
          };
          ctx.moveTo = function (x, y) {
            destCtx.moveTo(x, y);
            this.__originalMoveTo(x, y);
          };
          ctx.lineTo = function (x, y) {
            destCtx.lineTo(x, y);
            this.__originalLineTo(x, y);
          };
          ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
            destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
            this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
          };
          ctx.rect = function (x, y, width, height) {
            destCtx.rect(x, y, width, height);
            this.__originalRect(x, y, width, height);
          };
          ctx.closePath = function () {
            destCtx.closePath();
            this.__originalClosePath();
          };
          ctx.beginPath = function () {
            destCtx.beginPath();
            this.__originalBeginPath();
          };
        }
        var CachedCanvases = /*#__PURE__*/function () {
          function CachedCanvases(canvasFactory) {
            _classCallCheck(this, CachedCanvases);
            this.canvasFactory = canvasFactory;
            this.cache = Object.create(null);
          }
          _createClass(CachedCanvases, [{
            key: "getCanvas",
            value: function getCanvas(id, width, height) {
              var canvasEntry;
              if (this.cache[id] !== undefined) {
                canvasEntry = this.cache[id];
                this.canvasFactory.reset(canvasEntry, width, height);
              } else {
                canvasEntry = this.canvasFactory.create(width, height);
                this.cache[id] = canvasEntry;
              }
              return canvasEntry;
            }
          }, {
            key: "delete",
            value: function _delete(id) {
              delete this.cache[id];
            }
          }, {
            key: "clear",
            value: function clear() {
              for (var id in this.cache) {
                var canvasEntry = this.cache[id];
                this.canvasFactory.destroy(canvasEntry);
                delete this.cache[id];
              }
            }
          }]);
          return CachedCanvases;
        }();
        function drawImageAtIntegerCoords(ctx, srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH) {
          var _ref44 = (0, _display_utils.getCurrentTransform)(ctx),
            _ref45 = _slicedToArray(_ref44, 6),
            a = _ref45[0],
            b = _ref45[1],
            c = _ref45[2],
            d = _ref45[3],
            tx = _ref45[4],
            ty = _ref45[5];
          if (b === 0 && c === 0) {
            var tlX = destX * a + tx;
            var rTlX = Math.round(tlX);
            var tlY = destY * d + ty;
            var rTlY = Math.round(tlY);
            var brX = (destX + destW) * a + tx;
            var rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
            var brY = (destY + destH) * d + ty;
            var rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
            ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);
            ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);
            ctx.setTransform(a, b, c, d, tx, ty);
            return [rWidth, rHeight];
          }
          if (a === 0 && d === 0) {
            var _tlX = destY * c + tx;
            var _rTlX = Math.round(_tlX);
            var _tlY = destX * b + ty;
            var _rTlY = Math.round(_tlY);
            var _brX = (destY + destH) * c + tx;
            var _rWidth = Math.abs(Math.round(_brX) - _rTlX) || 1;
            var _brY = (destX + destW) * b + ty;
            var _rHeight = Math.abs(Math.round(_brY) - _rTlY) || 1;
            ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, _rTlX, _rTlY);
            ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, _rHeight, _rWidth);
            ctx.setTransform(a, b, c, d, tx, ty);
            return [_rHeight, _rWidth];
          }
          ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);
          var scaleX = Math.hypot(a, b);
          var scaleY = Math.hypot(c, d);
          return [scaleX * destW, scaleY * destH];
        }
        function compileType3Glyph(imgData) {
          var width = imgData.width,
            height = imgData.height;
          if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {
            return null;
          }
          var POINT_TO_PROCESS_LIMIT = 1000;
          var POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);
          var width1 = width + 1;
          var points = new Uint8Array(width1 * (height + 1));
          var i, j, j0;
          var lineSize = width + 7 & ~7;
          var data = new Uint8Array(lineSize * height),
            pos = 0;
          var _iterator45 = _createForOfIteratorHelper(imgData.data),
            _step45;
          try {
            for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
              var elem = _step45.value;
              var mask = 128;
              while (mask > 0) {
                data[pos++] = elem & mask ? 0 : 255;
                mask >>= 1;
              }
            }
          } catch (err) {
            _iterator45.e(err);
          } finally {
            _iterator45.f();
          }
          var count = 0;
          pos = 0;
          if (data[pos] !== 0) {
            points[0] = 1;
            ++count;
          }
          for (j = 1; j < width; j++) {
            if (data[pos] !== data[pos + 1]) {
              points[j] = data[pos] ? 2 : 1;
              ++count;
            }
            pos++;
          }
          if (data[pos] !== 0) {
            points[j] = 2;
            ++count;
          }
          for (i = 1; i < height; i++) {
            pos = i * lineSize;
            j0 = i * width1;
            if (data[pos - lineSize] !== data[pos]) {
              points[j0] = data[pos] ? 1 : 8;
              ++count;
            }
            var sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);
            for (j = 1; j < width; j++) {
              sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);
              if (POINT_TYPES[sum]) {
                points[j0 + j] = POINT_TYPES[sum];
                ++count;
              }
              pos++;
            }
            if (data[pos - lineSize] !== data[pos]) {
              points[j0 + j] = data[pos] ? 2 : 4;
              ++count;
            }
            if (count > POINT_TO_PROCESS_LIMIT) {
              return null;
            }
          }
          pos = lineSize * (height - 1);
          j0 = i * width1;
          if (data[pos] !== 0) {
            points[j0] = 8;
            ++count;
          }
          for (j = 1; j < width; j++) {
            if (data[pos] !== data[pos + 1]) {
              points[j0 + j] = data[pos] ? 4 : 8;
              ++count;
            }
            pos++;
          }
          if (data[pos] !== 0) {
            points[j0 + j] = 4;
            ++count;
          }
          if (count > POINT_TO_PROCESS_LIMIT) {
            return null;
          }
          var steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);
          var path = new Path2D();
          for (i = 0; count && i <= height; i++) {
            var p = i * width1;
            var end = p + width;
            while (p < end && !points[p]) {
              p++;
            }
            if (p === end) {
              continue;
            }
            path.moveTo(p % width1, i);
            var p0 = p;
            var type = points[p];
            do {
              var step = steps[type];
              do {
                p += step;
              } while (!points[p]);
              var pp = points[p];
              if (pp !== 5 && pp !== 10) {
                type = pp;
                points[p] = 0;
              } else {
                type = pp & 0x33 * type >> 4;
                points[p] &= type >> 2 | type << 2;
              }
              path.lineTo(p % width1, p / width1 | 0);
              if (!points[p]) {
                --count;
              }
            } while (p0 !== p);
            --i;
          }
          data = null;
          points = null;
          var drawOutline = function drawOutline(c) {
            c.save();
            c.scale(1 / width, -1 / height);
            c.translate(0, -height);
            c.fill(path);
            c.beginPath();
            c.restore();
          };
          return drawOutline;
        }
        var CanvasExtraState = /*#__PURE__*/function () {
          function CanvasExtraState(width, height) {
            _classCallCheck(this, CanvasExtraState);
            this.alphaIsShape = false;
            this.fontSize = 0;
            this.fontSizeScale = 1;
            this.textMatrix = _util.IDENTITY_MATRIX;
            this.textMatrixScale = 1;
            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
            this.leading = 0;
            this.x = 0;
            this.y = 0;
            this.lineX = 0;
            this.lineY = 0;
            this.charSpacing = 0;
            this.wordSpacing = 0;
            this.textHScale = 1;
            this.textRenderingMode = _util.TextRenderingMode.FILL;
            this.textRise = 0;
            this.fillColor = "#000000";
            this.strokeColor = "#000000";
            this.patternFill = false;
            this.fillAlpha = 1;
            this.strokeAlpha = 1;
            this.lineWidth = 1;
            this.activeSMask = null;
            this.transferMaps = "none";
            this.startNewPathAndClipBox([0, 0, width, height]);
          }
          _createClass(CanvasExtraState, [{
            key: "clone",
            value: function clone() {
              var clone = Object.create(this);
              clone.clipBox = this.clipBox.slice();
              return clone;
            }
          }, {
            key: "setCurrentPoint",
            value: function setCurrentPoint(x, y) {
              this.x = x;
              this.y = y;
            }
          }, {
            key: "updatePathMinMax",
            value: function updatePathMinMax(transform, x, y) {
              var _util$Util$applyTrans = _util.Util.applyTransform([x, y], transform);
              var _util$Util$applyTrans2 = _slicedToArray(_util$Util$applyTrans, 2);
              x = _util$Util$applyTrans2[0];
              y = _util$Util$applyTrans2[1];
              this.minX = Math.min(this.minX, x);
              this.minY = Math.min(this.minY, y);
              this.maxX = Math.max(this.maxX, x);
              this.maxY = Math.max(this.maxY, y);
            }
          }, {
            key: "updateRectMinMax",
            value: function updateRectMinMax(transform, rect) {
              var p1 = _util.Util.applyTransform(rect, transform);
              var p2 = _util.Util.applyTransform(rect.slice(2), transform);
              this.minX = Math.min(this.minX, p1[0], p2[0]);
              this.minY = Math.min(this.minY, p1[1], p2[1]);
              this.maxX = Math.max(this.maxX, p1[0], p2[0]);
              this.maxY = Math.max(this.maxY, p1[1], p2[1]);
            }
          }, {
            key: "updateScalingPathMinMax",
            value: function updateScalingPathMinMax(transform, minMax) {
              _util.Util.scaleMinMax(transform, minMax);
              this.minX = Math.min(this.minX, minMax[0]);
              this.maxX = Math.max(this.maxX, minMax[1]);
              this.minY = Math.min(this.minY, minMax[2]);
              this.maxY = Math.max(this.maxY, minMax[3]);
            }
          }, {
            key: "updateCurvePathMinMax",
            value: function updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {
              var box = _util.Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);
              if (minMax) {
                minMax[0] = Math.min(minMax[0], box[0], box[2]);
                minMax[1] = Math.max(minMax[1], box[0], box[2]);
                minMax[2] = Math.min(minMax[2], box[1], box[3]);
                minMax[3] = Math.max(minMax[3], box[1], box[3]);
                return;
              }
              this.updateRectMinMax(transform, box);
            }
          }, {
            key: "getPathBoundingBox",
            value: function getPathBoundingBox() {
              var pathType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _pattern_helper.PathType.FILL;
              var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              var box = [this.minX, this.minY, this.maxX, this.maxY];
              if (pathType === _pattern_helper.PathType.STROKE) {
                if (!transform) {
                  (0, _util.unreachable)("Stroke bounding box must include transform.");
                }
                var scale = _util.Util.singularValueDecompose2dScale(transform);
                var xStrokePad = scale[0] * this.lineWidth / 2;
                var yStrokePad = scale[1] * this.lineWidth / 2;
                box[0] -= xStrokePad;
                box[1] -= yStrokePad;
                box[2] += xStrokePad;
                box[3] += yStrokePad;
              }
              return box;
            }
          }, {
            key: "updateClipFromPath",
            value: function updateClipFromPath() {
              var intersect = _util.Util.intersect(this.clipBox, this.getPathBoundingBox());
              this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);
            }
          }, {
            key: "isEmptyClip",
            value: function isEmptyClip() {
              return this.minX === Infinity;
            }
          }, {
            key: "startNewPathAndClipBox",
            value: function startNewPathAndClipBox(box) {
              this.clipBox = box;
              this.minX = Infinity;
              this.minY = Infinity;
              this.maxX = 0;
              this.maxY = 0;
            }
          }, {
            key: "getClippedPathBoundingBox",
            value: function getClippedPathBoundingBox() {
              var pathType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _pattern_helper.PathType.FILL;
              var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              return _util.Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));
            }
          }]);
          return CanvasExtraState;
        }();
        function putBinaryImageData(ctx, imgData) {
          if (typeof ImageData !== "undefined" && imgData instanceof ImageData) {
            ctx.putImageData(imgData, 0, 0);
            return;
          }
          var height = imgData.height,
            width = imgData.width;
          var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
          var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
          var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
          var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
          var srcPos = 0,
            destPos;
          var src = imgData.data;
          var dest = chunkImgData.data;
          var i, j, thisChunkHeight, elemsInThisChunk;
          if (imgData.kind === _util.ImageKind.GRAYSCALE_1BPP) {
            var srcLength = src.byteLength;
            var dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
            var dest32DataLength = dest32.length;
            var fullSrcDiff = width + 7 >> 3;
            var white = 0xffffffff;
            var black = _util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;
            for (i = 0; i < totalChunks; i++) {
              thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
              destPos = 0;
              for (j = 0; j < thisChunkHeight; j++) {
                var srcDiff = srcLength - srcPos;
                var k = 0;
                var kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
                var kEndUnrolled = kEnd & ~7;
                var mask = 0;
                var srcByte = 0;
                for (; k < kEndUnrolled; k += 8) {
                  srcByte = src[srcPos++];
                  dest32[destPos++] = srcByte & 128 ? white : black;
                  dest32[destPos++] = srcByte & 64 ? white : black;
                  dest32[destPos++] = srcByte & 32 ? white : black;
                  dest32[destPos++] = srcByte & 16 ? white : black;
                  dest32[destPos++] = srcByte & 8 ? white : black;
                  dest32[destPos++] = srcByte & 4 ? white : black;
                  dest32[destPos++] = srcByte & 2 ? white : black;
                  dest32[destPos++] = srcByte & 1 ? white : black;
                }
                for (; k < kEnd; k++) {
                  if (mask === 0) {
                    srcByte = src[srcPos++];
                    mask = 128;
                  }
                  dest32[destPos++] = srcByte & mask ? white : black;
                  mask >>= 1;
                }
              }
              while (destPos < dest32DataLength) {
                dest32[destPos++] = 0;
              }
              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
            }
          } else if (imgData.kind === _util.ImageKind.RGBA_32BPP) {
            j = 0;
            elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;
            for (i = 0; i < fullChunks; i++) {
              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
              srcPos += elemsInThisChunk;
              ctx.putImageData(chunkImgData, 0, j);
              j += FULL_CHUNK_HEIGHT;
            }
            if (i < totalChunks) {
              elemsInThisChunk = width * partialChunkHeight * 4;
              dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
              ctx.putImageData(chunkImgData, 0, j);
            }
          } else if (imgData.kind === _util.ImageKind.RGB_24BPP) {
            thisChunkHeight = FULL_CHUNK_HEIGHT;
            elemsInThisChunk = width * thisChunkHeight;
            for (i = 0; i < totalChunks; i++) {
              if (i >= fullChunks) {
                thisChunkHeight = partialChunkHeight;
                elemsInThisChunk = width * thisChunkHeight;
              }
              destPos = 0;
              for (j = elemsInThisChunk; j--;) {
                dest[destPos++] = src[srcPos++];
                dest[destPos++] = src[srcPos++];
                dest[destPos++] = src[srcPos++];
                dest[destPos++] = 255;
              }
              ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
            }
          } else {
            throw new Error("bad image kind: ".concat(imgData.kind));
          }
        }
        function putBinaryImageMask(ctx, imgData) {
          if (imgData.bitmap) {
            ctx.drawImage(imgData.bitmap, 0, 0);
            return;
          }
          var height = imgData.height,
            width = imgData.width;
          var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
          var fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
          var totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
          var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
          var srcPos = 0;
          var src = imgData.data;
          var dest = chunkImgData.data;
          for (var i = 0; i < totalChunks; i++) {
            var thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
            var _ref46 = (0, _image_utils.convertBlackAndWhiteToRGBA)({
              src: src,
              srcPos: srcPos,
              dest: dest,
              width: width,
              height: thisChunkHeight,
              nonBlackColor: 0
            });
            srcPos = _ref46.srcPos;
            ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
          }
        }
        function copyCtxState(sourceCtx, destCtx) {
          var properties = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font", "filter"];
          for (var _i11 = 0, _properties = properties; _i11 < _properties.length; _i11++) {
            var property = _properties[_i11];
            if (sourceCtx[property] !== undefined) {
              destCtx[property] = sourceCtx[property];
            }
          }
          if (sourceCtx.setLineDash !== undefined) {
            destCtx.setLineDash(sourceCtx.getLineDash());
            destCtx.lineDashOffset = sourceCtx.lineDashOffset;
          }
        }
        function resetCtxToDefault(ctx) {
          ctx.strokeStyle = ctx.fillStyle = "#000000";
          ctx.fillRule = "nonzero";
          ctx.globalAlpha = 1;
          ctx.lineWidth = 1;
          ctx.lineCap = "butt";
          ctx.lineJoin = "miter";
          ctx.miterLimit = 10;
          ctx.globalCompositeOperation = "source-over";
          ctx.font = "10px sans-serif";
          if (ctx.setLineDash !== undefined) {
            ctx.setLineDash([]);
            ctx.lineDashOffset = 0;
          }
          if (!_is_node.isNodeJS) {
            ctx.filter = "none";
          }
        }
        function composeSMaskBackdrop(bytes, r0, g0, b0) {
          var length = bytes.length;
          for (var i = 3; i < length; i += 4) {
            var alpha = bytes[i];
            if (alpha === 0) {
              bytes[i - 3] = r0;
              bytes[i - 2] = g0;
              bytes[i - 1] = b0;
            } else if (alpha < 255) {
              var alpha_ = 255 - alpha;
              bytes[i - 3] = bytes[i - 3] * alpha + r0 * alpha_ >> 8;
              bytes[i - 2] = bytes[i - 2] * alpha + g0 * alpha_ >> 8;
              bytes[i - 1] = bytes[i - 1] * alpha + b0 * alpha_ >> 8;
            }
          }
        }
        function composeSMaskAlpha(maskData, layerData, transferMap) {
          var length = maskData.length;
          var scale = 1 / 255;
          for (var i = 3; i < length; i += 4) {
            var alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
            layerData[i] = layerData[i] * alpha * scale | 0;
          }
        }
        function composeSMaskLuminosity(maskData, layerData, transferMap) {
          var length = maskData.length;
          for (var i = 3; i < length; i += 4) {
            var y = maskData[i - 3] * 77 + maskData[i - 2] * 152 + maskData[i - 1] * 28;
            layerData[i] = transferMap ? layerData[i] * transferMap[y >> 8] >> 8 : layerData[i] * y >> 16;
          }
        }
        function genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {
          var hasBackdrop = !!backdrop;
          var r0 = hasBackdrop ? backdrop[0] : 0;
          var g0 = hasBackdrop ? backdrop[1] : 0;
          var b0 = hasBackdrop ? backdrop[2] : 0;
          var composeFn;
          if (subtype === "Luminosity") {
            composeFn = composeSMaskLuminosity;
          } else {
            composeFn = composeSMaskAlpha;
          }
          var PIXELS_TO_PROCESS = 1048576;
          var chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));
          for (var row = 0; row < height; row += chunkSize) {
            var chunkHeight = Math.min(chunkSize, height - row);
            var maskData = maskCtx.getImageData(layerOffsetX - maskOffsetX, row + (layerOffsetY - maskOffsetY), width, chunkHeight);
            var layerData = layerCtx.getImageData(layerOffsetX, row + layerOffsetY, width, chunkHeight);
            if (hasBackdrop) {
              composeSMaskBackdrop(maskData.data, r0, g0, b0);
            }
            composeFn(maskData.data, layerData.data, transferMap);
            layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);
          }
        }
        function composeSMask(ctx, smask, layerCtx, layerBox) {
          var layerOffsetX = layerBox[0];
          var layerOffsetY = layerBox[1];
          var layerWidth = layerBox[2] - layerOffsetX;
          var layerHeight = layerBox[3] - layerOffsetY;
          if (layerWidth === 0 || layerHeight === 0) {
            return;
          }
          genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);
          ctx.save();
          ctx.globalAlpha = 1;
          ctx.globalCompositeOperation = "source-over";
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.drawImage(layerCtx.canvas, 0, 0);
          ctx.restore();
        }
        function getImageSmoothingEnabled(transform, interpolate) {
          var scale = _util.Util.singularValueDecompose2dScale(transform);
          scale[0] = Math.fround(scale[0]);
          scale[1] = Math.fround(scale[1]);
          var actualScale = Math.fround((globalThis.devicePixelRatio || 1) * _display_utils.PixelsPerInch.PDF_TO_CSS_UNITS);
          if (interpolate !== undefined) {
            return interpolate;
          } else if (scale[0] <= actualScale || scale[1] <= actualScale) {
            return true;
          }
          return false;
        }
        var LINE_CAP_STYLES = ["butt", "round", "square"];
        var LINE_JOIN_STYLES = ["miter", "round", "bevel"];
        var NORMAL_CLIP = {};
        var EO_CLIP = {};
        var _restoreInitialState = /*#__PURE__*/new WeakSet();
        var _drawFilter = /*#__PURE__*/new WeakSet();
        var CanvasGraphics = /*#__PURE__*/function () {
          function CanvasGraphics(canvasCtx, commonObjs, objs, canvasFactory, filterFactory, _ref47, annotationCanvasMap, pageColors) {
            var optionalContentConfig = _ref47.optionalContentConfig,
              _ref47$markedContentS = _ref47.markedContentStack,
              markedContentStack = _ref47$markedContentS === void 0 ? null : _ref47$markedContentS;
            _classCallCheck(this, CanvasGraphics);
            _classPrivateMethodInitSpec(this, _drawFilter);
            _classPrivateMethodInitSpec(this, _restoreInitialState);
            this.ctx = canvasCtx;
            this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
            this.stateStack = [];
            this.pendingClip = null;
            this.pendingEOFill = false;
            this.res = null;
            this.xobjs = null;
            this.commonObjs = commonObjs;
            this.objs = objs;
            this.canvasFactory = canvasFactory;
            this.filterFactory = filterFactory;
            this.groupStack = [];
            this.processingType3 = null;
            this.baseTransform = null;
            this.baseTransformStack = [];
            this.groupLevel = 0;
            this.smaskStack = [];
            this.smaskCounter = 0;
            this.tempSMask = null;
            this.suspendedCtx = null;
            this.contentVisible = true;
            this.markedContentStack = markedContentStack || [];
            this.optionalContentConfig = optionalContentConfig;
            this.cachedCanvases = new CachedCanvases(this.canvasFactory);
            this.cachedPatterns = new Map();
            this.annotationCanvasMap = annotationCanvasMap;
            this.viewportScale = 1;
            this.outputScaleX = 1;
            this.outputScaleY = 1;
            this.pageColors = pageColors;
            this._cachedScaleForStroking = [-1, 0];
            this._cachedGetSinglePixelWidth = null;
            this._cachedBitmapsMap = new Map();
          }
          _createClass(CanvasGraphics, [{
            key: "getObject",
            value: function getObject(data) {
              var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              if (typeof data === "string") {
                return data.startsWith("g_") ? this.commonObjs.get(data) : this.objs.get(data);
              }
              return fallback;
            }
          }, {
            key: "beginDrawing",
            value: function beginDrawing(_ref48) {
              var _this$ctx3;
              var transform = _ref48.transform,
                viewport = _ref48.viewport,
                _ref48$transparency = _ref48.transparency,
                transparency = _ref48$transparency === void 0 ? false : _ref48$transparency,
                _ref48$background = _ref48.background,
                background = _ref48$background === void 0 ? null : _ref48$background;
              var width = this.ctx.canvas.width;
              var height = this.ctx.canvas.height;
              var savedFillStyle = this.ctx.fillStyle;
              this.ctx.fillStyle = background || "#ffffff";
              this.ctx.fillRect(0, 0, width, height);
              this.ctx.fillStyle = savedFillStyle;
              if (transparency) {
                var _this$ctx;
                var transparentCanvas = this.cachedCanvases.getCanvas("transparent", width, height);
                this.compositeCtx = this.ctx;
                this.transparentCanvas = transparentCanvas.canvas;
                this.ctx = transparentCanvas.context;
                this.ctx.save();
                (_this$ctx = this.ctx).transform.apply(_this$ctx, _toConsumableArray((0, _display_utils.getCurrentTransform)(this.compositeCtx)));
              }
              this.ctx.save();
              resetCtxToDefault(this.ctx);
              if (transform) {
                var _this$ctx2;
                (_this$ctx2 = this.ctx).transform.apply(_this$ctx2, _toConsumableArray(transform));
                this.outputScaleX = transform[0];
                this.outputScaleY = transform[0];
              }
              (_this$ctx3 = this.ctx).transform.apply(_this$ctx3, _toConsumableArray(viewport.transform));
              this.viewportScale = viewport.scale;
              this.baseTransform = (0, _display_utils.getCurrentTransform)(this.ctx);
            }
          }, {
            key: "executeOperatorList",
            value: function executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {
              var argsArray = operatorList.argsArray;
              var fnArray = operatorList.fnArray;
              var i = executionStartIdx || 0;
              var argsArrayLen = argsArray.length;
              if (argsArrayLen === i) {
                return i;
              }
              var chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === "function";
              var endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
              var steps = 0;
              var commonObjs = this.commonObjs;
              var objs = this.objs;
              var fnId;
              while (true) {
                if (stepper !== undefined && i === stepper.nextBreakPoint) {
                  stepper.breakIt(i, continueCallback);
                  return i;
                }
                fnId = fnArray[i];
                if (fnId !== _util.OPS.dependency) {
                  this[fnId].apply(this, argsArray[i]);
                } else {
                  var _iterator46 = _createForOfIteratorHelper(argsArray[i]),
                    _step46;
                  try {
                    for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
                      var depObjId = _step46.value;
                      var objsPool = depObjId.startsWith("g_") ? commonObjs : objs;
                      if (!objsPool.has(depObjId)) {
                        objsPool.get(depObjId, continueCallback);
                        return i;
                      }
                    }
                  } catch (err) {
                    _iterator46.e(err);
                  } finally {
                    _iterator46.f();
                  }
                }
                i++;
                if (i === argsArrayLen) {
                  return i;
                }
                if (chunkOperations && ++steps > EXECUTION_STEPS) {
                  if (Date.now() > endTime) {
                    continueCallback();
                    return i;
                  }
                  steps = 0;
                }
              }
            }
          }, {
            key: "endDrawing",
            value: function endDrawing() {
              _classPrivateMethodGet(this, _restoreInitialState, _restoreInitialState2).call(this);
              this.cachedCanvases.clear();
              this.cachedPatterns.clear();
              var _iterator47 = _createForOfIteratorHelper(this._cachedBitmapsMap.values()),
                _step47;
              try {
                for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
                  var cache = _step47.value;
                  var _iterator48 = _createForOfIteratorHelper(cache.values()),
                    _step48;
                  try {
                    for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
                      var canvas = _step48.value;
                      if (typeof HTMLCanvasElement !== "undefined" && canvas instanceof HTMLCanvasElement) {
                        canvas.width = canvas.height = 0;
                      }
                    }
                  } catch (err) {
                    _iterator48.e(err);
                  } finally {
                    _iterator48.f();
                  }
                  cache.clear();
                }
              } catch (err) {
                _iterator47.e(err);
              } finally {
                _iterator47.f();
              }
              this._cachedBitmapsMap.clear();
              _classPrivateMethodGet(this, _drawFilter, _drawFilter2).call(this);
            }
          }, {
            key: "_scaleImage",
            value: function _scaleImage(img, inverseTransform) {
              var width = img.width;
              var height = img.height;
              var widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);
              var heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);
              var paintWidth = width,
                paintHeight = height;
              var tmpCanvasId = "prescale1";
              var tmpCanvas, tmpCtx;
              while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {
                var newWidth = paintWidth,
                  newHeight = paintHeight;
                if (widthScale > 2 && paintWidth > 1) {
                  newWidth = paintWidth >= 16384 ? Math.floor(paintWidth / 2) - 1 || 1 : Math.ceil(paintWidth / 2);
                  widthScale /= paintWidth / newWidth;
                }
                if (heightScale > 2 && paintHeight > 1) {
                  newHeight = paintHeight >= 16384 ? Math.floor(paintHeight / 2) - 1 || 1 : Math.ceil(paintHeight) / 2;
                  heightScale /= paintHeight / newHeight;
                }
                tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);
                tmpCtx = tmpCanvas.context;
                tmpCtx.clearRect(0, 0, newWidth, newHeight);
                tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);
                img = tmpCanvas.canvas;
                paintWidth = newWidth;
                paintHeight = newHeight;
                tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
              }
              return {
                img: img,
                paintWidth: paintWidth,
                paintHeight: paintHeight
              };
            }
          }, {
            key: "_createMaskCanvas",
            value: function _createMaskCanvas(img) {
              var ctx = this.ctx;
              var width = img.width,
                height = img.height;
              var fillColor = this.current.fillColor;
              var isPatternFill = this.current.patternFill;
              var currentTransform = (0, _display_utils.getCurrentTransform)(ctx);
              var cache, cacheKey, scaled, maskCanvas;
              if ((img.bitmap || img.data) && img.count > 1) {
                var mainKey = img.bitmap || img.data.buffer;
                cacheKey = JSON.stringify(isPatternFill ? currentTransform : [currentTransform.slice(0, 4), fillColor]);
                cache = this._cachedBitmapsMap.get(mainKey);
                if (!cache) {
                  cache = new Map();
                  this._cachedBitmapsMap.set(mainKey, cache);
                }
                var cachedImage = cache.get(cacheKey);
                if (cachedImage && !isPatternFill) {
                  var _offsetX = Math.round(Math.min(currentTransform[0], currentTransform[2]) + currentTransform[4]);
                  var _offsetY = Math.round(Math.min(currentTransform[1], currentTransform[3]) + currentTransform[5]);
                  return {
                    canvas: cachedImage,
                    offsetX: _offsetX,
                    offsetY: _offsetY
                  };
                }
                scaled = cachedImage;
              }
              if (!scaled) {
                maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                putBinaryImageMask(maskCanvas.context, img);
              }
              var maskToCanvas = _util.Util.transform(currentTransform, [1 / width, 0, 0, -1 / height, 0, 0]);
              maskToCanvas = _util.Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);
              var cord1 = _util.Util.applyTransform([0, 0], maskToCanvas);
              var cord2 = _util.Util.applyTransform([width, height], maskToCanvas);
              var rect = _util.Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);
              var drawnWidth = Math.round(rect[2] - rect[0]) || 1;
              var drawnHeight = Math.round(rect[3] - rect[1]) || 1;
              var fillCanvas = this.cachedCanvases.getCanvas("fillCanvas", drawnWidth, drawnHeight);
              var fillCtx = fillCanvas.context;
              var offsetX = Math.min(cord1[0], cord2[0]);
              var offsetY = Math.min(cord1[1], cord2[1]);
              fillCtx.translate(-offsetX, -offsetY);
              fillCtx.transform.apply(fillCtx, _toConsumableArray(maskToCanvas));
              if (!scaled) {
                scaled = this._scaleImage(maskCanvas.canvas, (0, _display_utils.getCurrentTransformInverse)(fillCtx));
                scaled = scaled.img;
                if (cache && isPatternFill) {
                  cache.set(cacheKey, scaled);
                }
              }
              fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled((0, _display_utils.getCurrentTransform)(fillCtx), img.interpolate);
              drawImageAtIntegerCoords(fillCtx, scaled, 0, 0, scaled.width, scaled.height, 0, 0, width, height);
              fillCtx.globalCompositeOperation = "source-in";
              var inverse = _util.Util.transform((0, _display_utils.getCurrentTransformInverse)(fillCtx), [1, 0, 0, 1, -offsetX, -offsetY]);
              fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, _pattern_helper.PathType.FILL) : fillColor;
              fillCtx.fillRect(0, 0, width, height);
              if (cache && !isPatternFill) {
                this.cachedCanvases.delete("fillCanvas");
                cache.set(cacheKey, fillCanvas.canvas);
              }
              return {
                canvas: fillCanvas.canvas,
                offsetX: Math.round(offsetX),
                offsetY: Math.round(offsetY)
              };
            }
          }, {
            key: "setLineWidth",
            value: function setLineWidth(width) {
              if (width !== this.current.lineWidth) {
                this._cachedScaleForStroking[0] = -1;
              }
              this.current.lineWidth = width;
              this.ctx.lineWidth = width;
            }
          }, {
            key: "setLineCap",
            value: function setLineCap(style) {
              this.ctx.lineCap = LINE_CAP_STYLES[style];
            }
          }, {
            key: "setLineJoin",
            value: function setLineJoin(style) {
              this.ctx.lineJoin = LINE_JOIN_STYLES[style];
            }
          }, {
            key: "setMiterLimit",
            value: function setMiterLimit(limit) {
              this.ctx.miterLimit = limit;
            }
          }, {
            key: "setDash",
            value: function setDash(dashArray, dashPhase) {
              var ctx = this.ctx;
              if (ctx.setLineDash !== undefined) {
                ctx.setLineDash(dashArray);
                ctx.lineDashOffset = dashPhase;
              }
            }
          }, {
            key: "setRenderingIntent",
            value: function setRenderingIntent(intent) {}
          }, {
            key: "setFlatness",
            value: function setFlatness(flatness) {}
          }, {
            key: "setGState",
            value: function setGState(states) {
              var _iterator49 = _createForOfIteratorHelper(states),
                _step49;
              try {
                for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
                  var _step49$value = _slicedToArray(_step49.value, 2),
                    key = _step49$value[0],
                    value = _step49$value[1];
                  switch (key) {
                    case "LW":
                      this.setLineWidth(value);
                      break;
                    case "LC":
                      this.setLineCap(value);
                      break;
                    case "LJ":
                      this.setLineJoin(value);
                      break;
                    case "ML":
                      this.setMiterLimit(value);
                      break;
                    case "D":
                      this.setDash(value[0], value[1]);
                      break;
                    case "RI":
                      this.setRenderingIntent(value);
                      break;
                    case "FL":
                      this.setFlatness(value);
                      break;
                    case "Font":
                      this.setFont(value[0], value[1]);
                      break;
                    case "CA":
                      this.current.strokeAlpha = value;
                      break;
                    case "ca":
                      this.current.fillAlpha = value;
                      this.ctx.globalAlpha = value;
                      break;
                    case "BM":
                      this.ctx.globalCompositeOperation = value;
                      break;
                    case "SMask":
                      this.current.activeSMask = value ? this.tempSMask : null;
                      this.tempSMask = null;
                      this.checkSMaskState();
                      break;
                    case "TR":
                      this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(value);
                      break;
                  }
                }
              } catch (err) {
                _iterator49.e(err);
              } finally {
                _iterator49.f();
              }
            }
          }, {
            key: "inSMaskMode",
            get: function get() {
              return !!this.suspendedCtx;
            }
          }, {
            key: "checkSMaskState",
            value: function checkSMaskState() {
              var inSMaskMode = this.inSMaskMode;
              if (this.current.activeSMask && !inSMaskMode) {
                this.beginSMaskMode();
              } else if (!this.current.activeSMask && inSMaskMode) {
                this.endSMaskMode();
              }
            }
          }, {
            key: "beginSMaskMode",
            value: function beginSMaskMode() {
              if (this.inSMaskMode) {
                throw new Error("beginSMaskMode called while already in smask mode");
              }
              var drawnWidth = this.ctx.canvas.width;
              var drawnHeight = this.ctx.canvas.height;
              var cacheId = "smaskGroupAt" + this.groupLevel;
              var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);
              this.suspendedCtx = this.ctx;
              this.ctx = scratchCanvas.context;
              var ctx = this.ctx;
              ctx.setTransform.apply(ctx, _toConsumableArray((0, _display_utils.getCurrentTransform)(this.suspendedCtx)));
              copyCtxState(this.suspendedCtx, ctx);
              mirrorContextOperations(ctx, this.suspendedCtx);
              this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
            }
          }, {
            key: "endSMaskMode",
            value: function endSMaskMode() {
              if (!this.inSMaskMode) {
                throw new Error("endSMaskMode called while not in smask mode");
              }
              this.ctx._removeMirroring();
              copyCtxState(this.ctx, this.suspendedCtx);
              this.ctx = this.suspendedCtx;
              this.suspendedCtx = null;
            }
          }, {
            key: "compose",
            value: function compose(dirtyBox) {
              if (!this.current.activeSMask) {
                return;
              }
              if (!dirtyBox) {
                dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
              } else {
                dirtyBox[0] = Math.floor(dirtyBox[0]);
                dirtyBox[1] = Math.floor(dirtyBox[1]);
                dirtyBox[2] = Math.ceil(dirtyBox[2]);
                dirtyBox[3] = Math.ceil(dirtyBox[3]);
              }
              var smask = this.current.activeSMask;
              var suspendedCtx = this.suspendedCtx;
              composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
              this.ctx.save();
              this.ctx.setTransform(1, 0, 0, 1, 0, 0);
              this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
              this.ctx.restore();
            }
          }, {
            key: "save",
            value: function save() {
              if (this.inSMaskMode) {
                copyCtxState(this.ctx, this.suspendedCtx);
                this.suspendedCtx.save();
              } else {
                this.ctx.save();
              }
              var old = this.current;
              this.stateStack.push(old);
              this.current = old.clone();
            }
          }, {
            key: "restore",
            value: function restore() {
              if (this.stateStack.length === 0 && this.inSMaskMode) {
                this.endSMaskMode();
              }
              if (this.stateStack.length !== 0) {
                this.current = this.stateStack.pop();
                if (this.inSMaskMode) {
                  this.suspendedCtx.restore();
                  copyCtxState(this.suspendedCtx, this.ctx);
                } else {
                  this.ctx.restore();
                }
                this.checkSMaskState();
                this.pendingClip = null;
                this._cachedScaleForStroking[0] = -1;
                this._cachedGetSinglePixelWidth = null;
              }
            }
          }, {
            key: "transform",
            value: function transform(a, b, c, d, e, f) {
              this.ctx.transform(a, b, c, d, e, f);
              this._cachedScaleForStroking[0] = -1;
              this._cachedGetSinglePixelWidth = null;
            }
          }, {
            key: "constructPath",
            value: function constructPath(ops, args, minMax) {
              var ctx = this.ctx;
              var current = this.current;
              var x = current.x,
                y = current.y;
              var startX, startY;
              var currentTransform = (0, _display_utils.getCurrentTransform)(ctx);
              var isScalingMatrix = currentTransform[0] === 0 && currentTransform[3] === 0 || currentTransform[1] === 0 && currentTransform[2] === 0;
              var minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;
              for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {
                switch (ops[i] | 0) {
                  case _util.OPS.rectangle:
                    x = args[j++];
                    y = args[j++];
                    var width = args[j++];
                    var height = args[j++];
                    var xw = x + width;
                    var yh = y + height;
                    ctx.moveTo(x, y);
                    if (width === 0 || height === 0) {
                      ctx.lineTo(xw, yh);
                    } else {
                      ctx.lineTo(xw, y);
                      ctx.lineTo(xw, yh);
                      ctx.lineTo(x, yh);
                    }
                    if (!isScalingMatrix) {
                      current.updateRectMinMax(currentTransform, [x, y, xw, yh]);
                    }
                    ctx.closePath();
                    break;
                  case _util.OPS.moveTo:
                    x = args[j++];
                    y = args[j++];
                    ctx.moveTo(x, y);
                    if (!isScalingMatrix) {
                      current.updatePathMinMax(currentTransform, x, y);
                    }
                    break;
                  case _util.OPS.lineTo:
                    x = args[j++];
                    y = args[j++];
                    ctx.lineTo(x, y);
                    if (!isScalingMatrix) {
                      current.updatePathMinMax(currentTransform, x, y);
                    }
                    break;
                  case _util.OPS.curveTo:
                    startX = x;
                    startY = y;
                    x = args[j + 4];
                    y = args[j + 5];
                    ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);
                    current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y, minMaxForBezier);
                    j += 6;
                    break;
                  case _util.OPS.curveTo2:
                    startX = x;
                    startY = y;
                    ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);
                    current.updateCurvePathMinMax(currentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3], minMaxForBezier);
                    x = args[j + 2];
                    y = args[j + 3];
                    j += 4;
                    break;
                  case _util.OPS.curveTo3:
                    startX = x;
                    startY = y;
                    x = args[j + 2];
                    y = args[j + 3];
                    ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
                    current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], x, y, x, y, minMaxForBezier);
                    j += 4;
                    break;
                  case _util.OPS.closePath:
                    ctx.closePath();
                    break;
                }
              }
              if (isScalingMatrix) {
                current.updateScalingPathMinMax(currentTransform, minMaxForBezier);
              }
              current.setCurrentPoint(x, y);
            }
          }, {
            key: "closePath",
            value: function closePath() {
              this.ctx.closePath();
            }
          }, {
            key: "stroke",
            value: function stroke() {
              var consumePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
              var ctx = this.ctx;
              var strokeColor = this.current.strokeColor;
              ctx.globalAlpha = this.current.strokeAlpha;
              if (this.contentVisible) {
                if (_typeof(strokeColor) === "object" && strokeColor !== null && strokeColor !== void 0 && strokeColor.getPattern) {
                  ctx.save();
                  ctx.strokeStyle = strokeColor.getPattern(ctx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.STROKE);
                  this.rescaleAndStroke(false);
                  ctx.restore();
                } else {
                  this.rescaleAndStroke(true);
                }
              }
              if (consumePath) {
                this.consumePath(this.current.getClippedPathBoundingBox());
              }
              ctx.globalAlpha = this.current.fillAlpha;
            }
          }, {
            key: "closeStroke",
            value: function closeStroke() {
              this.closePath();
              this.stroke();
            }
          }, {
            key: "fill",
            value: function fill() {
              var consumePath = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
              var ctx = this.ctx;
              var fillColor = this.current.fillColor;
              var isPatternFill = this.current.patternFill;
              var needRestore = false;
              if (isPatternFill) {
                ctx.save();
                ctx.fillStyle = fillColor.getPattern(ctx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.FILL);
                needRestore = true;
              }
              var intersect = this.current.getClippedPathBoundingBox();
              if (this.contentVisible && intersect !== null) {
                if (this.pendingEOFill) {
                  ctx.fill("evenodd");
                  this.pendingEOFill = false;
                } else {
                  ctx.fill();
                }
              }
              if (needRestore) {
                ctx.restore();
              }
              if (consumePath) {
                this.consumePath(intersect);
              }
            }
          }, {
            key: "eoFill",
            value: function eoFill() {
              this.pendingEOFill = true;
              this.fill();
            }
          }, {
            key: "fillStroke",
            value: function fillStroke() {
              this.fill(false);
              this.stroke(false);
              this.consumePath();
            }
          }, {
            key: "eoFillStroke",
            value: function eoFillStroke() {
              this.pendingEOFill = true;
              this.fillStroke();
            }
          }, {
            key: "closeFillStroke",
            value: function closeFillStroke() {
              this.closePath();
              this.fillStroke();
            }
          }, {
            key: "closeEOFillStroke",
            value: function closeEOFillStroke() {
              this.pendingEOFill = true;
              this.closePath();
              this.fillStroke();
            }
          }, {
            key: "endPath",
            value: function endPath() {
              this.consumePath();
            }
          }, {
            key: "clip",
            value: function clip() {
              this.pendingClip = NORMAL_CLIP;
            }
          }, {
            key: "eoClip",
            value: function eoClip() {
              this.pendingClip = EO_CLIP;
            }
          }, {
            key: "beginText",
            value: function beginText() {
              this.current.textMatrix = _util.IDENTITY_MATRIX;
              this.current.textMatrixScale = 1;
              this.current.x = this.current.lineX = 0;
              this.current.y = this.current.lineY = 0;
            }
          }, {
            key: "endText",
            value: function endText() {
              var paths = this.pendingTextPaths;
              var ctx = this.ctx;
              if (paths === undefined) {
                ctx.beginPath();
                return;
              }
              ctx.save();
              ctx.beginPath();
              var _iterator50 = _createForOfIteratorHelper(paths),
                _step50;
              try {
                for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
                  var path = _step50.value;
                  ctx.setTransform.apply(ctx, _toConsumableArray(path.transform));
                  ctx.translate(path.x, path.y);
                  path.addToPath(ctx, path.fontSize);
                }
              } catch (err) {
                _iterator50.e(err);
              } finally {
                _iterator50.f();
              }
              ctx.restore();
              ctx.clip();
              ctx.beginPath();
              delete this.pendingTextPaths;
            }
          }, {
            key: "setCharSpacing",
            value: function setCharSpacing(spacing) {
              this.current.charSpacing = spacing;
            }
          }, {
            key: "setWordSpacing",
            value: function setWordSpacing(spacing) {
              this.current.wordSpacing = spacing;
            }
          }, {
            key: "setHScale",
            value: function setHScale(scale) {
              this.current.textHScale = scale / 100;
            }
          }, {
            key: "setLeading",
            value: function setLeading(leading) {
              this.current.leading = -leading;
            }
          }, {
            key: "setFont",
            value: function setFont(fontRefName, size) {
              var _fontObj$systemFontIn;
              var fontObj = this.commonObjs.get(fontRefName);
              var current = this.current;
              if (!fontObj) {
                throw new Error("Can't find font for ".concat(fontRefName));
              }
              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;
              if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
                (0, _util.warn)("Invalid font matrix for font " + fontRefName);
              }
              if (size < 0) {
                size = -size;
                current.fontDirection = -1;
              } else {
                current.fontDirection = 1;
              }
              this.current.font = fontObj;
              this.current.fontSize = size;
              if (fontObj.isType3Font) {
                return;
              }
              var name = fontObj.loadedName || "sans-serif";
              var typeface = ((_fontObj$systemFontIn = fontObj.systemFontInfo) === null || _fontObj$systemFontIn === void 0 ? void 0 : _fontObj$systemFontIn.css) || "\"".concat(name, "\", ").concat(fontObj.fallbackName);
              var bold = "normal";
              if (fontObj.black) {
                bold = "900";
              } else if (fontObj.bold) {
                bold = "bold";
              }
              var italic = fontObj.italic ? "italic" : "normal";
              var browserFontSize = size;
              if (size < MIN_FONT_SIZE) {
                browserFontSize = MIN_FONT_SIZE;
              } else if (size > MAX_FONT_SIZE) {
                browserFontSize = MAX_FONT_SIZE;
              }
              this.current.fontSizeScale = size / browserFontSize;
              this.ctx.font = "".concat(italic, " ").concat(bold, " ").concat(browserFontSize, "px ").concat(typeface);
            }
          }, {
            key: "setTextRenderingMode",
            value: function setTextRenderingMode(mode) {
              this.current.textRenderingMode = mode;
            }
          }, {
            key: "setTextRise",
            value: function setTextRise(rise) {
              this.current.textRise = rise;
            }
          }, {
            key: "moveText",
            value: function moveText(x, y) {
              this.current.x = this.current.lineX += x;
              this.current.y = this.current.lineY += y;
            }
          }, {
            key: "setLeadingMoveText",
            value: function setLeadingMoveText(x, y) {
              this.setLeading(-y);
              this.moveText(x, y);
            }
          }, {
            key: "setTextMatrix",
            value: function setTextMatrix(a, b, c, d, e, f) {
              this.current.textMatrix = [a, b, c, d, e, f];
              this.current.textMatrixScale = Math.hypot(a, b);
              this.current.x = this.current.lineX = 0;
              this.current.y = this.current.lineY = 0;
            }
          }, {
            key: "nextLine",
            value: function nextLine() {
              this.moveText(0, this.current.leading);
            }
          }, {
            key: "paintChar",
            value: function paintChar(character, x, y, patternTransform) {
              var ctx = this.ctx;
              var current = this.current;
              var font = current.font;
              var textRenderingMode = current.textRenderingMode;
              var fontSize = current.fontSize / current.fontSizeScale;
              var fillStrokeMode = textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
              var isAddToPathSet = !!(textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG);
              var patternFill = current.patternFill && !font.missingFile;
              var addToPath;
              if (font.disableFontFace || isAddToPathSet || patternFill) {
                addToPath = font.getPathGenerator(this.commonObjs, character);
              }
              if (font.disableFontFace || patternFill) {
                ctx.save();
                ctx.translate(x, y);
                ctx.beginPath();
                addToPath(ctx, fontSize);
                if (patternTransform) {
                  ctx.setTransform.apply(ctx, _toConsumableArray(patternTransform));
                }
                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  ctx.fill();
                }
                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  ctx.stroke();
                }
                ctx.restore();
              } else {
                if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  ctx.fillText(character, x, y);
                }
                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  ctx.strokeText(character, x, y);
                }
              }
              if (isAddToPathSet) {
                var paths = this.pendingTextPaths || (this.pendingTextPaths = []);
                paths.push({
                  transform: (0, _display_utils.getCurrentTransform)(ctx),
                  x: x,
                  y: y,
                  fontSize: fontSize,
                  addToPath: addToPath
                });
              }
            }
          }, {
            key: "isFontSubpixelAAEnabled",
            get: function get() {
              var _this$cachedCanvases$ = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10),
                ctx = _this$cachedCanvases$.context;
              ctx.scale(1.5, 1);
              ctx.fillText("I", 0, 10);
              var data = ctx.getImageData(0, 0, 10, 10).data;
              var enabled = false;
              for (var i = 3; i < data.length; i += 4) {
                if (data[i] > 0 && data[i] < 255) {
                  enabled = true;
                  break;
                }
              }
              return (0, _util.shadow)(this, "isFontSubpixelAAEnabled", enabled);
            }
          }, {
            key: "showText",
            value: function showText(glyphs) {
              var current = this.current;
              var font = current.font;
              if (font.isType3Font) {
                return this.showType3Text(glyphs);
              }
              var fontSize = current.fontSize;
              if (fontSize === 0) {
                return undefined;
              }
              var ctx = this.ctx;
              var fontSizeScale = current.fontSizeScale;
              var charSpacing = current.charSpacing;
              var wordSpacing = current.wordSpacing;
              var fontDirection = current.fontDirection;
              var textHScale = current.textHScale * fontDirection;
              var glyphsLength = glyphs.length;
              var vertical = font.vertical;
              var spacingDir = vertical ? 1 : -1;
              var defaultVMetrics = font.defaultVMetrics;
              var widthAdvanceScale = fontSize * current.fontMatrix[0];
              var simpleFillText = current.textRenderingMode === _util.TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;
              ctx.save();
              ctx.transform.apply(ctx, _toConsumableArray(current.textMatrix));
              ctx.translate(current.x, current.y + current.textRise);
              if (fontDirection > 0) {
                ctx.scale(textHScale, -1);
              } else {
                ctx.scale(textHScale, 1);
              }
              var patternTransform;
              if (current.patternFill) {
                ctx.save();
                var pattern = current.fillColor.getPattern(ctx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.FILL);
                patternTransform = (0, _display_utils.getCurrentTransform)(ctx);
                ctx.restore();
                ctx.fillStyle = pattern;
              }
              var lineWidth = current.lineWidth;
              var scale = current.textMatrixScale;
              if (scale === 0 || lineWidth === 0) {
                var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
                if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                  lineWidth = this.getSinglePixelWidth();
                }
              } else {
                lineWidth /= scale;
              }
              if (fontSizeScale !== 1.0) {
                ctx.scale(fontSizeScale, fontSizeScale);
                lineWidth /= fontSizeScale;
              }
              ctx.lineWidth = lineWidth;
              if (font.isInvalidPDFjsFont) {
                var chars = [];
                var width = 0;
                var _iterator51 = _createForOfIteratorHelper(glyphs),
                  _step51;
                try {
                  for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
                    var glyph = _step51.value;
                    chars.push(glyph.unicode);
                    width += glyph.width;
                  }
                } catch (err) {
                  _iterator51.e(err);
                } finally {
                  _iterator51.f();
                }
                ctx.fillText(chars.join(""), 0, 0);
                current.x += width * widthAdvanceScale * textHScale;
                ctx.restore();
                this.compose();
                return undefined;
              }
              var x = 0,
                i;
              for (i = 0; i < glyphsLength; ++i) {
                var _glyph = glyphs[i];
                if (typeof _glyph === "number") {
                  x += spacingDir * _glyph * fontSize / 1000;
                  continue;
                }
                var restoreNeeded = false;
                var spacing = (_glyph.isSpace ? wordSpacing : 0) + charSpacing;
                var character = _glyph.fontChar;
                var accent = _glyph.accent;
                var scaledX = void 0,
                  scaledY = void 0;
                var _width = _glyph.width;
                if (vertical) {
                  var vmetric = _glyph.vmetric || defaultVMetrics;
                  var vx = -(_glyph.vmetric ? vmetric[1] : _width * 0.5) * widthAdvanceScale;
                  var vy = vmetric[2] * widthAdvanceScale;
                  _width = vmetric ? -vmetric[0] : _width;
                  scaledX = vx / fontSizeScale;
                  scaledY = (x + vy) / fontSizeScale;
                } else {
                  scaledX = x / fontSizeScale;
                  scaledY = 0;
                }
                if (font.remeasure && _width > 0) {
                  var measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;
                  if (_width < measuredWidth && this.isFontSubpixelAAEnabled) {
                    var characterScaleX = _width / measuredWidth;
                    restoreNeeded = true;
                    ctx.save();
                    ctx.scale(characterScaleX, 1);
                    scaledX /= characterScaleX;
                  } else if (_width !== measuredWidth) {
                    scaledX += (_width - measuredWidth) / 2000 * fontSize / fontSizeScale;
                  }
                }
                if (this.contentVisible && (_glyph.isInFont || font.missingFile)) {
                  if (simpleFillText && !accent) {
                    ctx.fillText(character, scaledX, scaledY);
                  } else {
                    this.paintChar(character, scaledX, scaledY, patternTransform);
                    if (accent) {
                      var scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;
                      var scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;
                      this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);
                    }
                  }
                }
                var charWidth = void 0;
                if (vertical) {
                  charWidth = _width * widthAdvanceScale - spacing * fontDirection;
                } else {
                  charWidth = _width * widthAdvanceScale + spacing * fontDirection;
                }
                x += charWidth;
                if (restoreNeeded) {
                  ctx.restore();
                }
              }
              if (vertical) {
                current.y -= x;
              } else {
                current.x += x * textHScale;
              }
              ctx.restore();
              this.compose();
              return undefined;
            }
          }, {
            key: "showType3Text",
            value: function showType3Text(glyphs) {
              var ctx = this.ctx;
              var current = this.current;
              var font = current.font;
              var fontSize = current.fontSize;
              var fontDirection = current.fontDirection;
              var spacingDir = font.vertical ? 1 : -1;
              var charSpacing = current.charSpacing;
              var wordSpacing = current.wordSpacing;
              var textHScale = current.textHScale * fontDirection;
              var fontMatrix = current.fontMatrix || _util.FONT_IDENTITY_MATRIX;
              var glyphsLength = glyphs.length;
              var isTextInvisible = current.textRenderingMode === _util.TextRenderingMode.INVISIBLE;
              var i, glyph, width, spacingLength;
              if (isTextInvisible || fontSize === 0) {
                return;
              }
              this._cachedScaleForStroking[0] = -1;
              this._cachedGetSinglePixelWidth = null;
              ctx.save();
              ctx.transform.apply(ctx, _toConsumableArray(current.textMatrix));
              ctx.translate(current.x, current.y);
              ctx.scale(textHScale, fontDirection);
              for (i = 0; i < glyphsLength; ++i) {
                glyph = glyphs[i];
                if (typeof glyph === "number") {
                  spacingLength = spacingDir * glyph * fontSize / 1000;
                  this.ctx.translate(spacingLength, 0);
                  current.x += spacingLength * textHScale;
                  continue;
                }
                var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                var operatorList = font.charProcOperatorList[glyph.operatorListId];
                if (!operatorList) {
                  (0, _util.warn)("Type3 character \"".concat(glyph.operatorListId, "\" is not available."));
                  continue;
                }
                if (this.contentVisible) {
                  this.processingType3 = glyph;
                  this.save();
                  ctx.scale(fontSize, fontSize);
                  ctx.transform.apply(ctx, _toConsumableArray(fontMatrix));
                  this.executeOperatorList(operatorList);
                  this.restore();
                }
                var transformed = _util.Util.applyTransform([glyph.width, 0], fontMatrix);
                width = transformed[0] * fontSize + spacing;
                ctx.translate(width, 0);
                current.x += width * textHScale;
              }
              ctx.restore();
              this.processingType3 = null;
            }
          }, {
            key: "setCharWidth",
            value: function setCharWidth(xWidth, yWidth) {}
          }, {
            key: "setCharWidthAndBounds",
            value: function setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
              this.ctx.rect(llx, lly, urx - llx, ury - lly);
              this.ctx.clip();
              this.endPath();
            }
          }, {
            key: "getColorN_Pattern",
            value: function getColorN_Pattern(IR) {
              var _this32 = this;
              var pattern;
              if (IR[0] === "TilingPattern") {
                var color = IR[1];
                var baseTransform = this.baseTransform || (0, _display_utils.getCurrentTransform)(this.ctx);
                var canvasGraphicsFactory = {
                  createCanvasGraphics: function createCanvasGraphics(ctx) {
                    return new CanvasGraphics(ctx, _this32.commonObjs, _this32.objs, _this32.canvasFactory, _this32.filterFactory, {
                      optionalContentConfig: _this32.optionalContentConfig,
                      markedContentStack: _this32.markedContentStack
                    });
                  }
                };
                pattern = new _pattern_helper.TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);
              } else {
                pattern = this._getPattern(IR[1], IR[2]);
              }
              return pattern;
            }
          }, {
            key: "setStrokeColorN",
            value: function setStrokeColorN() {
              this.current.strokeColor = this.getColorN_Pattern(arguments);
            }
          }, {
            key: "setFillColorN",
            value: function setFillColorN() {
              this.current.fillColor = this.getColorN_Pattern(arguments);
              this.current.patternFill = true;
            }
          }, {
            key: "setStrokeRGBColor",
            value: function setStrokeRGBColor(r, g, b) {
              var color = _util.Util.makeHexColor(r, g, b);
              this.ctx.strokeStyle = color;
              this.current.strokeColor = color;
            }
          }, {
            key: "setFillRGBColor",
            value: function setFillRGBColor(r, g, b) {
              var color = _util.Util.makeHexColor(r, g, b);
              this.ctx.fillStyle = color;
              this.current.fillColor = color;
              this.current.patternFill = false;
            }
          }, {
            key: "_getPattern",
            value: function _getPattern(objId) {
              var matrix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              var pattern;
              if (this.cachedPatterns.has(objId)) {
                pattern = this.cachedPatterns.get(objId);
              } else {
                pattern = (0, _pattern_helper.getShadingPattern)(this.getObject(objId));
                this.cachedPatterns.set(objId, pattern);
              }
              if (matrix) {
                pattern.matrix = matrix;
              }
              return pattern;
            }
          }, {
            key: "shadingFill",
            value: function shadingFill(objId) {
              if (!this.contentVisible) {
                return;
              }
              var ctx = this.ctx;
              this.save();
              var pattern = this._getPattern(objId);
              ctx.fillStyle = pattern.getPattern(ctx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.SHADING);
              var inv = (0, _display_utils.getCurrentTransformInverse)(ctx);
              if (inv) {
                var _ctx$canvas = ctx.canvas,
                  width = _ctx$canvas.width,
                  height = _ctx$canvas.height;
                var _util$Util$getAxialAl = _util.Util.getAxialAlignedBoundingBox([0, 0, width, height], inv),
                  _util$Util$getAxialAl2 = _slicedToArray(_util$Util$getAxialAl, 4),
                  x0 = _util$Util$getAxialAl2[0],
                  y0 = _util$Util$getAxialAl2[1],
                  x1 = _util$Util$getAxialAl2[2],
                  y1 = _util$Util$getAxialAl2[3];
                this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
              } else {
                this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
              }
              this.compose(this.current.getClippedPathBoundingBox());
              this.restore();
            }
          }, {
            key: "beginInlineImage",
            value: function beginInlineImage() {
              (0, _util.unreachable)("Should not call beginInlineImage");
            }
          }, {
            key: "beginImageData",
            value: function beginImageData() {
              (0, _util.unreachable)("Should not call beginImageData");
            }
          }, {
            key: "paintFormXObjectBegin",
            value: function paintFormXObjectBegin(matrix, bbox) {
              if (!this.contentVisible) {
                return;
              }
              this.save();
              this.baseTransformStack.push(this.baseTransform);
              if (Array.isArray(matrix) && matrix.length === 6) {
                this.transform.apply(this, _toConsumableArray(matrix));
              }
              this.baseTransform = (0, _display_utils.getCurrentTransform)(this.ctx);
              if (bbox) {
                var width = bbox[2] - bbox[0];
                var height = bbox[3] - bbox[1];
                this.ctx.rect(bbox[0], bbox[1], width, height);
                this.current.updateRectMinMax((0, _display_utils.getCurrentTransform)(this.ctx), bbox);
                this.clip();
                this.endPath();
              }
            }
          }, {
            key: "paintFormXObjectEnd",
            value: function paintFormXObjectEnd() {
              if (!this.contentVisible) {
                return;
              }
              this.restore();
              this.baseTransform = this.baseTransformStack.pop();
            }
          }, {
            key: "beginGroup",
            value: function beginGroup(group) {
              if (!this.contentVisible) {
                return;
              }
              this.save();
              if (this.inSMaskMode) {
                this.endSMaskMode();
                this.current.activeSMask = null;
              }
              var currentCtx = this.ctx;
              if (!group.isolated) {
                (0, _util.info)("TODO: Support non-isolated groups.");
              }
              if (group.knockout) {
                (0, _util.warn)("Knockout groups not supported.");
              }
              var currentTransform = (0, _display_utils.getCurrentTransform)(currentCtx);
              if (group.matrix) {
                currentCtx.transform.apply(currentCtx, _toConsumableArray(group.matrix));
              }
              if (!group.bbox) {
                throw new Error("Bounding box is required.");
              }
              var bounds = _util.Util.getAxialAlignedBoundingBox(group.bbox, (0, _display_utils.getCurrentTransform)(currentCtx));
              var canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];
              bounds = _util.Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
              var offsetX = Math.floor(bounds[0]);
              var offsetY = Math.floor(bounds[1]);
              var drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
              var drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
              var scaleX = 1,
                scaleY = 1;
              if (drawnWidth > MAX_GROUP_SIZE) {
                scaleX = drawnWidth / MAX_GROUP_SIZE;
                drawnWidth = MAX_GROUP_SIZE;
              }
              if (drawnHeight > MAX_GROUP_SIZE) {
                scaleY = drawnHeight / MAX_GROUP_SIZE;
                drawnHeight = MAX_GROUP_SIZE;
              }
              this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);
              var cacheId = "groupAt" + this.groupLevel;
              if (group.smask) {
                cacheId += "_smask_" + this.smaskCounter++ % 2;
              }
              var scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);
              var groupCtx = scratchCanvas.context;
              groupCtx.scale(1 / scaleX, 1 / scaleY);
              groupCtx.translate(-offsetX, -offsetY);
              groupCtx.transform.apply(groupCtx, _toConsumableArray(currentTransform));
              if (group.smask) {
                this.smaskStack.push({
                  canvas: scratchCanvas.canvas,
                  context: groupCtx,
                  offsetX: offsetX,
                  offsetY: offsetY,
                  scaleX: scaleX,
                  scaleY: scaleY,
                  subtype: group.smask.subtype,
                  backdrop: group.smask.backdrop,
                  transferMap: group.smask.transferMap || null,
                  startTransformInverse: null
                });
              } else {
                currentCtx.setTransform(1, 0, 0, 1, 0, 0);
                currentCtx.translate(offsetX, offsetY);
                currentCtx.scale(scaleX, scaleY);
                currentCtx.save();
              }
              copyCtxState(currentCtx, groupCtx);
              this.ctx = groupCtx;
              this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
              this.groupStack.push(currentCtx);
              this.groupLevel++;
            }
          }, {
            key: "endGroup",
            value: function endGroup(group) {
              if (!this.contentVisible) {
                return;
              }
              this.groupLevel--;
              var groupCtx = this.ctx;
              var ctx = this.groupStack.pop();
              this.ctx = ctx;
              this.ctx.imageSmoothingEnabled = false;
              if (group.smask) {
                this.tempSMask = this.smaskStack.pop();
                this.restore();
              } else {
                var _this$ctx4;
                this.ctx.restore();
                var currentMtx = (0, _display_utils.getCurrentTransform)(this.ctx);
                this.restore();
                this.ctx.save();
                (_this$ctx4 = this.ctx).setTransform.apply(_this$ctx4, _toConsumableArray(currentMtx));
                var dirtyBox = _util.Util.getAxialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx);
                this.ctx.drawImage(groupCtx.canvas, 0, 0);
                this.ctx.restore();
                this.compose(dirtyBox);
              }
            }
          }, {
            key: "beginAnnotation",
            value: function beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {
              _classPrivateMethodGet(this, _restoreInitialState, _restoreInitialState2).call(this);
              resetCtxToDefault(this.ctx);
              this.ctx.save();
              this.save();
              if (this.baseTransform) {
                var _this$ctx5;
                (_this$ctx5 = this.ctx).setTransform.apply(_this$ctx5, _toConsumableArray(this.baseTransform));
              }
              if (Array.isArray(rect) && rect.length === 4) {
                var width = rect[2] - rect[0];
                var height = rect[3] - rect[1];
                if (hasOwnCanvas && this.annotationCanvasMap) {
                  transform = transform.slice();
                  transform[4] -= rect[0];
                  transform[5] -= rect[1];
                  rect = rect.slice();
                  rect[0] = rect[1] = 0;
                  rect[2] = width;
                  rect[3] = height;
                  var _util$Util$singularVa = _util.Util.singularValueDecompose2dScale((0, _display_utils.getCurrentTransform)(this.ctx)),
                    _util$Util$singularVa2 = _slicedToArray(_util$Util$singularVa, 2),
                    scaleX = _util$Util$singularVa2[0],
                    scaleY = _util$Util$singularVa2[1];
                  var viewportScale = this.viewportScale;
                  var canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);
                  var canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);
                  this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);
                  var _this$annotationCanva = this.annotationCanvas,
                    canvas = _this$annotationCanva.canvas,
                    context = _this$annotationCanva.context;
                  this.annotationCanvasMap.set(id, canvas);
                  this.annotationCanvas.savedCtx = this.ctx;
                  this.ctx = context;
                  this.ctx.save();
                  this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);
                  resetCtxToDefault(this.ctx);
                } else {
                  resetCtxToDefault(this.ctx);
                  this.ctx.rect(rect[0], rect[1], width, height);
                  this.ctx.clip();
                  this.endPath();
                }
              }
              this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);
              this.transform.apply(this, _toConsumableArray(transform));
              this.transform.apply(this, _toConsumableArray(matrix));
            }
          }, {
            key: "endAnnotation",
            value: function endAnnotation() {
              if (this.annotationCanvas) {
                this.ctx.restore();
                _classPrivateMethodGet(this, _drawFilter, _drawFilter2).call(this);
                this.ctx = this.annotationCanvas.savedCtx;
                delete this.annotationCanvas.savedCtx;
                delete this.annotationCanvas;
              }
            }
          }, {
            key: "paintImageMaskXObject",
            value: function paintImageMaskXObject(img) {
              if (!this.contentVisible) {
                return;
              }
              var count = img.count;
              img = this.getObject(img.data, img);
              img.count = count;
              var ctx = this.ctx;
              var glyph = this.processingType3;
              if (glyph) {
                if (glyph.compiled === undefined) {
                  glyph.compiled = compileType3Glyph(img);
                }
                if (glyph.compiled) {
                  glyph.compiled(ctx);
                  return;
                }
              }
              var mask = this._createMaskCanvas(img);
              var maskCanvas = mask.canvas;
              ctx.save();
              ctx.setTransform(1, 0, 0, 1, 0, 0);
              ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);
              ctx.restore();
              this.compose();
            }
          }, {
            key: "paintImageMaskXObjectRepeat",
            value: function paintImageMaskXObjectRepeat(img, scaleX) {
              var skewX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
              var skewY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
              var scaleY = arguments.length > 4 ? arguments[4] : undefined;
              var positions = arguments.length > 5 ? arguments[5] : undefined;
              if (!this.contentVisible) {
                return;
              }
              img = this.getObject(img.data, img);
              var ctx = this.ctx;
              ctx.save();
              var currentTransform = (0, _display_utils.getCurrentTransform)(ctx);
              ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);
              var mask = this._createMaskCanvas(img);
              ctx.setTransform(1, 0, 0, 1, mask.offsetX - currentTransform[4], mask.offsetY - currentTransform[5]);
              for (var i = 0, ii = positions.length; i < ii; i += 2) {
                var trans = _util.Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);
                var _util$Util$applyTrans3 = _util.Util.applyTransform([0, 0], trans),
                  _util$Util$applyTrans4 = _slicedToArray(_util$Util$applyTrans3, 2),
                  x = _util$Util$applyTrans4[0],
                  y = _util$Util$applyTrans4[1];
                ctx.drawImage(mask.canvas, x, y);
              }
              ctx.restore();
              this.compose();
            }
          }, {
            key: "paintImageMaskXObjectGroup",
            value: function paintImageMaskXObjectGroup(images) {
              if (!this.contentVisible) {
                return;
              }
              var ctx = this.ctx;
              var fillColor = this.current.fillColor;
              var isPatternFill = this.current.patternFill;
              var _iterator52 = _createForOfIteratorHelper(images),
                _step52;
              try {
                for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
                  var image = _step52.value;
                  var data = image.data,
                    width = image.width,
                    height = image.height,
                    transform = image.transform;
                  var maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
                  var maskCtx = maskCanvas.context;
                  maskCtx.save();
                  var img = this.getObject(data, image);
                  putBinaryImageMask(maskCtx, img);
                  maskCtx.globalCompositeOperation = "source-in";
                  maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, (0, _display_utils.getCurrentTransformInverse)(ctx), _pattern_helper.PathType.FILL) : fillColor;
                  maskCtx.fillRect(0, 0, width, height);
                  maskCtx.restore();
                  ctx.save();
                  ctx.transform.apply(ctx, _toConsumableArray(transform));
                  ctx.scale(1, -1);
                  drawImageAtIntegerCoords(ctx, maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);
                  ctx.restore();
                }
              } catch (err) {
                _iterator52.e(err);
              } finally {
                _iterator52.f();
              }
              this.compose();
            }
          }, {
            key: "paintImageXObject",
            value: function paintImageXObject(objId) {
              if (!this.contentVisible) {
                return;
              }
              var imgData = this.getObject(objId);
              if (!imgData) {
                (0, _util.warn)("Dependent image isn't ready yet");
                return;
              }
              this.paintInlineImageXObject(imgData);
            }
          }, {
            key: "paintImageXObjectRepeat",
            value: function paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
              if (!this.contentVisible) {
                return;
              }
              var imgData = this.getObject(objId);
              if (!imgData) {
                (0, _util.warn)("Dependent image isn't ready yet");
                return;
              }
              var width = imgData.width;
              var height = imgData.height;
              var map = [];
              for (var i = 0, ii = positions.length; i < ii; i += 2) {
                map.push({
                  transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
                  x: 0,
                  y: 0,
                  w: width,
                  h: height
                });
              }
              this.paintInlineImageXObjectGroup(imgData, map);
            }
          }, {
            key: "applyTransferMapsToCanvas",
            value: function applyTransferMapsToCanvas(ctx) {
              if (this.current.transferMaps !== "none") {
                ctx.filter = this.current.transferMaps;
                ctx.drawImage(ctx.canvas, 0, 0);
                ctx.filter = "none";
              }
              return ctx.canvas;
            }
          }, {
            key: "applyTransferMapsToBitmap",
            value: function applyTransferMapsToBitmap(imgData) {
              if (this.current.transferMaps === "none") {
                return imgData.bitmap;
              }
              var bitmap = imgData.bitmap,
                width = imgData.width,
                height = imgData.height;
              var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
              var tmpCtx = tmpCanvas.context;
              tmpCtx.filter = this.current.transferMaps;
              tmpCtx.drawImage(bitmap, 0, 0);
              tmpCtx.filter = "none";
              return tmpCanvas.canvas;
            }
          }, {
            key: "paintInlineImageXObject",
            value: function paintInlineImageXObject(imgData) {
              if (!this.contentVisible) {
                return;
              }
              var width = imgData.width;
              var height = imgData.height;
              var ctx = this.ctx;
              this.save();
              if (!_is_node.isNodeJS) {
                ctx.filter = "none";
              }
              ctx.scale(1 / width, -1 / height);
              var imgToPaint;
              if (imgData.bitmap) {
                imgToPaint = this.applyTransferMapsToBitmap(imgData);
              } else if (typeof HTMLElement === "function" && imgData instanceof HTMLElement || !imgData.data) {
                imgToPaint = imgData;
              } else {
                var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", width, height);
                var tmpCtx = tmpCanvas.context;
                putBinaryImageData(tmpCtx, imgData);
                imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
              }
              var scaled = this._scaleImage(imgToPaint, (0, _display_utils.getCurrentTransformInverse)(ctx));
              ctx.imageSmoothingEnabled = getImageSmoothingEnabled((0, _display_utils.getCurrentTransform)(ctx), imgData.interpolate);
              drawImageAtIntegerCoords(ctx, scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);
              this.compose();
              this.restore();
            }
          }, {
            key: "paintInlineImageXObjectGroup",
            value: function paintInlineImageXObjectGroup(imgData, map) {
              if (!this.contentVisible) {
                return;
              }
              var ctx = this.ctx;
              var imgToPaint;
              if (imgData.bitmap) {
                imgToPaint = imgData.bitmap;
              } else {
                var w = imgData.width;
                var h = imgData.height;
                var tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w, h);
                var tmpCtx = tmpCanvas.context;
                putBinaryImageData(tmpCtx, imgData);
                imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
              }
              var _iterator53 = _createForOfIteratorHelper(map),
                _step53;
              try {
                for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
                  var entry = _step53.value;
                  ctx.save();
                  ctx.transform.apply(ctx, _toConsumableArray(entry.transform));
                  ctx.scale(1, -1);
                  drawImageAtIntegerCoords(ctx, imgToPaint, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);
                  ctx.restore();
                }
              } catch (err) {
                _iterator53.e(err);
              } finally {
                _iterator53.f();
              }
              this.compose();
            }
          }, {
            key: "paintSolidColorImageMask",
            value: function paintSolidColorImageMask() {
              if (!this.contentVisible) {
                return;
              }
              this.ctx.fillRect(0, 0, 1, 1);
              this.compose();
            }
          }, {
            key: "markPoint",
            value: function markPoint(tag) {}
          }, {
            key: "markPointProps",
            value: function markPointProps(tag, properties) {}
          }, {
            key: "beginMarkedContent",
            value: function beginMarkedContent(tag) {
              this.markedContentStack.push({
                visible: true
              });
            }
          }, {
            key: "beginMarkedContentProps",
            value: function beginMarkedContentProps(tag, properties) {
              if (tag === "OC") {
                this.markedContentStack.push({
                  visible: this.optionalContentConfig.isVisible(properties)
                });
              } else {
                this.markedContentStack.push({
                  visible: true
                });
              }
              this.contentVisible = this.isContentVisible();
            }
          }, {
            key: "endMarkedContent",
            value: function endMarkedContent() {
              this.markedContentStack.pop();
              this.contentVisible = this.isContentVisible();
            }
          }, {
            key: "beginCompat",
            value: function beginCompat() {}
          }, {
            key: "endCompat",
            value: function endCompat() {}
          }, {
            key: "consumePath",
            value: function consumePath(clipBox) {
              var isEmpty = this.current.isEmptyClip();
              if (this.pendingClip) {
                this.current.updateClipFromPath();
              }
              if (!this.pendingClip) {
                this.compose(clipBox);
              }
              var ctx = this.ctx;
              if (this.pendingClip) {
                if (!isEmpty) {
                  if (this.pendingClip === EO_CLIP) {
                    ctx.clip("evenodd");
                  } else {
                    ctx.clip();
                  }
                }
                this.pendingClip = null;
              }
              this.current.startNewPathAndClipBox(this.current.clipBox);
              ctx.beginPath();
            }
          }, {
            key: "getSinglePixelWidth",
            value: function getSinglePixelWidth() {
              if (!this._cachedGetSinglePixelWidth) {
                var m = (0, _display_utils.getCurrentTransform)(this.ctx);
                if (m[1] === 0 && m[2] === 0) {
                  this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));
                } else {
                  var absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);
                  var normX = Math.hypot(m[0], m[2]);
                  var normY = Math.hypot(m[1], m[3]);
                  this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;
                }
              }
              return this._cachedGetSinglePixelWidth;
            }
          }, {
            key: "getScaleForStroking",
            value: function getScaleForStroking() {
              if (this._cachedScaleForStroking[0] === -1) {
                var lineWidth = this.current.lineWidth;
                var _this$ctx$getTransfor = this.ctx.getTransform(),
                  a = _this$ctx$getTransfor.a,
                  b = _this$ctx$getTransfor.b,
                  c = _this$ctx$getTransfor.c,
                  d = _this$ctx$getTransfor.d;
                var scaleX, scaleY;
                if (b === 0 && c === 0) {
                  var normX = Math.abs(a);
                  var normY = Math.abs(d);
                  if (normX === normY) {
                    if (lineWidth === 0) {
                      scaleX = scaleY = 1 / normX;
                    } else {
                      var scaledLineWidth = normX * lineWidth;
                      scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;
                    }
                  } else if (lineWidth === 0) {
                    scaleX = 1 / normX;
                    scaleY = 1 / normY;
                  } else {
                    var scaledXLineWidth = normX * lineWidth;
                    var scaledYLineWidth = normY * lineWidth;
                    scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;
                    scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;
                  }
                } else {
                  var absDet = Math.abs(a * d - b * c);
                  var _normX = Math.hypot(a, b);
                  var _normY = Math.hypot(c, d);
                  if (lineWidth === 0) {
                    scaleX = _normY / absDet;
                    scaleY = _normX / absDet;
                  } else {
                    var baseArea = lineWidth * absDet;
                    scaleX = _normY > baseArea ? _normY / baseArea : 1;
                    scaleY = _normX > baseArea ? _normX / baseArea : 1;
                  }
                }
                this._cachedScaleForStroking[0] = scaleX;
                this._cachedScaleForStroking[1] = scaleY;
              }
              return this._cachedScaleForStroking;
            }
          }, {
            key: "rescaleAndStroke",
            value: function rescaleAndStroke(saveRestore) {
              var ctx = this.ctx;
              var lineWidth = this.current.lineWidth;
              var _this$getScaleForStro = this.getScaleForStroking(),
                _this$getScaleForStro2 = _slicedToArray(_this$getScaleForStro, 2),
                scaleX = _this$getScaleForStro2[0],
                scaleY = _this$getScaleForStro2[1];
              ctx.lineWidth = lineWidth || 1;
              if (scaleX === 1 && scaleY === 1) {
                ctx.stroke();
                return;
              }
              var dashes = ctx.getLineDash();
              if (saveRestore) {
                ctx.save();
              }
              ctx.scale(scaleX, scaleY);
              if (dashes.length > 0) {
                var scale = Math.max(scaleX, scaleY);
                ctx.setLineDash(dashes.map(function (x) {
                  return x / scale;
                }));
                ctx.lineDashOffset /= scale;
              }
              ctx.stroke();
              if (saveRestore) {
                ctx.restore();
              }
            }
          }, {
            key: "isContentVisible",
            value: function isContentVisible() {
              for (var i = this.markedContentStack.length - 1; i >= 0; i--) {
                if (!this.markedContentStack[i].visible) {
                  return false;
                }
              }
              return true;
            }
          }]);
          return CanvasGraphics;
        }();
        function _restoreInitialState2() {
          while (this.stateStack.length || this.inSMaskMode) {
            this.restore();
          }
          this.ctx.restore();
          if (this.transparentCanvas) {
            this.ctx = this.compositeCtx;
            this.ctx.save();
            this.ctx.setTransform(1, 0, 0, 1, 0, 0);
            this.ctx.drawImage(this.transparentCanvas, 0, 0);
            this.ctx.restore();
            this.transparentCanvas = null;
          }
        }
        function _drawFilter2() {
          if (this.pageColors) {
            var hcmFilterId = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);
            if (hcmFilterId !== "none") {
              var savedFilter = this.ctx.filter;
              this.ctx.filter = hcmFilterId;
              this.ctx.drawImage(this.ctx.canvas, 0, 0);
              this.ctx.filter = savedFilter;
            }
          }
        }
        exports.CanvasGraphics = CanvasGraphics;
        for (var op in _util.OPS) {
          if (CanvasGraphics.prototype[op] !== undefined) {
            CanvasGraphics.prototype[_util.OPS[op]] = CanvasGraphics.prototype[op];
          }
        }

        /***/
      }, /* 12 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TilingPattern = exports.PathType = void 0;
        exports.getShadingPattern = getShadingPattern;
        var _util = __w_pdfjs_require__(1);
        var _display_utils = __w_pdfjs_require__(6);
        var PathType = {
          FILL: "Fill",
          STROKE: "Stroke",
          SHADING: "Shading"
        };
        exports.PathType = PathType;
        function applyBoundingBox(ctx, bbox) {
          if (!bbox) {
            return;
          }
          var width = bbox[2] - bbox[0];
          var height = bbox[3] - bbox[1];
          var region = new Path2D();
          region.rect(bbox[0], bbox[1], width, height);
          ctx.clip(region);
        }
        var BaseShadingPattern = /*#__PURE__*/function () {
          function BaseShadingPattern() {
            _classCallCheck(this, BaseShadingPattern);
            if (this.constructor === BaseShadingPattern) {
              (0, _util.unreachable)("Cannot initialize BaseShadingPattern.");
            }
          }
          _createClass(BaseShadingPattern, [{
            key: "getPattern",
            value: function getPattern() {
              (0, _util.unreachable)("Abstract method `getPattern` called.");
            }
          }]);
          return BaseShadingPattern;
        }();
        var RadialAxialShadingPattern = /*#__PURE__*/function (_BaseShadingPattern) {
          _inherits(RadialAxialShadingPattern, _BaseShadingPattern);
          var _super16 = _createSuper(RadialAxialShadingPattern);
          function RadialAxialShadingPattern(IR) {
            var _this33;
            _classCallCheck(this, RadialAxialShadingPattern);
            _this33 = _super16.call(this);
            _this33._type = IR[1];
            _this33._bbox = IR[2];
            _this33._colorStops = IR[3];
            _this33._p0 = IR[4];
            _this33._p1 = IR[5];
            _this33._r0 = IR[6];
            _this33._r1 = IR[7];
            _this33.matrix = null;
            return _this33;
          }
          _createClass(RadialAxialShadingPattern, [{
            key: "_createGradient",
            value: function _createGradient(ctx) {
              var grad;
              if (this._type === "axial") {
                grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);
              } else if (this._type === "radial") {
                grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);
              }
              var _iterator54 = _createForOfIteratorHelper(this._colorStops),
                _step54;
              try {
                for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
                  var colorStop = _step54.value;
                  grad.addColorStop(colorStop[0], colorStop[1]);
                }
              } catch (err) {
                _iterator54.e(err);
              } finally {
                _iterator54.f();
              }
              return grad;
            }
          }, {
            key: "getPattern",
            value: function getPattern(ctx, owner, inverse, pathType) {
              var pattern;
              if (pathType === PathType.STROKE || pathType === PathType.FILL) {
                var ownerBBox = owner.current.getClippedPathBoundingBox(pathType, (0, _display_utils.getCurrentTransform)(ctx)) || [0, 0, 0, 0];
                var width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;
                var height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;
                var tmpCanvas = owner.cachedCanvases.getCanvas("pattern", width, height, true);
                var tmpCtx = tmpCanvas.context;
                tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
                tmpCtx.beginPath();
                tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);
                tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);
                inverse = _util.Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);
                tmpCtx.transform.apply(tmpCtx, _toConsumableArray(owner.baseTransform));
                if (this.matrix) {
                  tmpCtx.transform.apply(tmpCtx, _toConsumableArray(this.matrix));
                }
                applyBoundingBox(tmpCtx, this._bbox);
                tmpCtx.fillStyle = this._createGradient(tmpCtx);
                tmpCtx.fill();
                pattern = ctx.createPattern(tmpCanvas.canvas, "no-repeat");
                var domMatrix = new DOMMatrix(inverse);
                pattern.setTransform(domMatrix);
              } else {
                applyBoundingBox(ctx, this._bbox);
                pattern = this._createGradient(ctx);
              }
              return pattern;
            }
          }]);
          return RadialAxialShadingPattern;
        }(BaseShadingPattern);
        function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
          var coords = context.coords,
            colors = context.colors;
          var bytes = data.data,
            rowSize = data.width * 4;
          var tmp;
          if (coords[p1 + 1] > coords[p2 + 1]) {
            tmp = p1;
            p1 = p2;
            p2 = tmp;
            tmp = c1;
            c1 = c2;
            c2 = tmp;
          }
          if (coords[p2 + 1] > coords[p3 + 1]) {
            tmp = p2;
            p2 = p3;
            p3 = tmp;
            tmp = c2;
            c2 = c3;
            c3 = tmp;
          }
          if (coords[p1 + 1] > coords[p2 + 1]) {
            tmp = p1;
            p1 = p2;
            p2 = tmp;
            tmp = c1;
            c1 = c2;
            c2 = tmp;
          }
          var x1 = (coords[p1] + context.offsetX) * context.scaleX;
          var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
          var x2 = (coords[p2] + context.offsetX) * context.scaleX;
          var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
          var x3 = (coords[p3] + context.offsetX) * context.scaleX;
          var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;
          if (y1 >= y3) {
            return;
          }
          var c1r = colors[c1],
            c1g = colors[c1 + 1],
            c1b = colors[c1 + 2];
          var c2r = colors[c2],
            c2g = colors[c2 + 1],
            c2b = colors[c2 + 2];
          var c3r = colors[c3],
            c3g = colors[c3 + 1],
            c3b = colors[c3 + 2];
          var minY = Math.round(y1),
            maxY = Math.round(y3);
          var xa, car, cag, cab;
          var xb, cbr, cbg, cbb;
          for (var y = minY; y <= maxY; y++) {
            if (y < y2) {
              var _k = void 0;
              if (y < y1) {
                _k = 0;
              } else {
                _k = (y1 - y) / (y1 - y2);
              }
              xa = x1 - (x1 - x2) * _k;
              car = c1r - (c1r - c2r) * _k;
              cag = c1g - (c1g - c2g) * _k;
              cab = c1b - (c1b - c2b) * _k;
            } else {
              var _k2 = void 0;
              if (y > y3) {
                _k2 = 1;
              } else if (y2 === y3) {
                _k2 = 0;
              } else {
                _k2 = (y2 - y) / (y2 - y3);
              }
              xa = x2 - (x2 - x3) * _k2;
              car = c2r - (c2r - c3r) * _k2;
              cag = c2g - (c2g - c3g) * _k2;
              cab = c2b - (c2b - c3b) * _k2;
            }
            var k = void 0;
            if (y < y1) {
              k = 0;
            } else if (y > y3) {
              k = 1;
            } else {
              k = (y1 - y) / (y1 - y3);
            }
            xb = x1 - (x1 - x3) * k;
            cbr = c1r - (c1r - c3r) * k;
            cbg = c1g - (c1g - c3g) * k;
            cbb = c1b - (c1b - c3b) * k;
            var x1_ = Math.round(Math.min(xa, xb));
            var x2_ = Math.round(Math.max(xa, xb));
            var j = rowSize * y + x1_ * 4;
            for (var x = x1_; x <= x2_; x++) {
              k = (xa - x) / (xa - xb);
              if (k < 0) {
                k = 0;
              } else if (k > 1) {
                k = 1;
              }
              bytes[j++] = car - (car - cbr) * k | 0;
              bytes[j++] = cag - (cag - cbg) * k | 0;
              bytes[j++] = cab - (cab - cbb) * k | 0;
              bytes[j++] = 255;
            }
          }
        }
        function drawFigure(data, figure, context) {
          var ps = figure.coords;
          var cs = figure.colors;
          var i, ii;
          switch (figure.type) {
            case "lattice":
              var verticesPerRow = figure.verticesPerRow;
              var rows = Math.floor(ps.length / verticesPerRow) - 1;
              var cols = verticesPerRow - 1;
              for (i = 0; i < rows; i++) {
                var q = i * verticesPerRow;
                for (var j = 0; j < cols; j++, q++) {
                  drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);
                  drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);
                }
              }
              break;
            case "triangles":
              for (i = 0, ii = ps.length; i < ii; i += 3) {
                drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);
              }
              break;
            default:
              throw new Error("illegal figure");
          }
        }
        var MeshShadingPattern = /*#__PURE__*/function (_BaseShadingPattern2) {
          _inherits(MeshShadingPattern, _BaseShadingPattern2);
          var _super17 = _createSuper(MeshShadingPattern);
          function MeshShadingPattern(IR) {
            var _this34;
            _classCallCheck(this, MeshShadingPattern);
            _this34 = _super17.call(this);
            _this34._coords = IR[2];
            _this34._colors = IR[3];
            _this34._figures = IR[4];
            _this34._bounds = IR[5];
            _this34._bbox = IR[7];
            _this34._background = IR[8];
            _this34.matrix = null;
            return _this34;
          }
          _createClass(MeshShadingPattern, [{
            key: "_createMeshCanvas",
            value: function _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {
              var EXPECTED_SCALE = 1.1;
              var MAX_PATTERN_SIZE = 3000;
              var BORDER_SIZE = 2;
              var offsetX = Math.floor(this._bounds[0]);
              var offsetY = Math.floor(this._bounds[1]);
              var boundsWidth = Math.ceil(this._bounds[2]) - offsetX;
              var boundsHeight = Math.ceil(this._bounds[3]) - offsetY;
              var width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
              var height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);
              var scaleX = boundsWidth / width;
              var scaleY = boundsHeight / height;
              var context = {
                coords: this._coords,
                colors: this._colors,
                offsetX: -offsetX,
                offsetY: -offsetY,
                scaleX: 1 / scaleX,
                scaleY: 1 / scaleY
              };
              var paddedWidth = width + BORDER_SIZE * 2;
              var paddedHeight = height + BORDER_SIZE * 2;
              var tmpCanvas = cachedCanvases.getCanvas("mesh", paddedWidth, paddedHeight, false);
              var tmpCtx = tmpCanvas.context;
              var data = tmpCtx.createImageData(width, height);
              if (backgroundColor) {
                var bytes = data.data;
                for (var i = 0, ii = bytes.length; i < ii; i += 4) {
                  bytes[i] = backgroundColor[0];
                  bytes[i + 1] = backgroundColor[1];
                  bytes[i + 2] = backgroundColor[2];
                  bytes[i + 3] = 255;
                }
              }
              var _iterator55 = _createForOfIteratorHelper(this._figures),
                _step55;
              try {
                for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
                  var figure = _step55.value;
                  drawFigure(data, figure, context);
                }
              } catch (err) {
                _iterator55.e(err);
              } finally {
                _iterator55.f();
              }
              tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
              var canvas = tmpCanvas.canvas;
              return {
                canvas: canvas,
                offsetX: offsetX - BORDER_SIZE * scaleX,
                offsetY: offsetY - BORDER_SIZE * scaleY,
                scaleX: scaleX,
                scaleY: scaleY
              };
            }
          }, {
            key: "getPattern",
            value: function getPattern(ctx, owner, inverse, pathType) {
              applyBoundingBox(ctx, this._bbox);
              var scale;
              if (pathType === PathType.SHADING) {
                scale = _util.Util.singularValueDecompose2dScale((0, _display_utils.getCurrentTransform)(ctx));
              } else {
                scale = _util.Util.singularValueDecompose2dScale(owner.baseTransform);
                if (this.matrix) {
                  var matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);
                  scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];
                }
              }
              var temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);
              if (pathType !== PathType.SHADING) {
                ctx.setTransform.apply(ctx, _toConsumableArray(owner.baseTransform));
                if (this.matrix) {
                  ctx.transform.apply(ctx, _toConsumableArray(this.matrix));
                }
              }
              ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
              ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);
              return ctx.createPattern(temporaryPatternCanvas.canvas, "no-repeat");
            }
          }]);
          return MeshShadingPattern;
        }(BaseShadingPattern);
        var DummyShadingPattern = /*#__PURE__*/function (_BaseShadingPattern3) {
          _inherits(DummyShadingPattern, _BaseShadingPattern3);
          var _super18 = _createSuper(DummyShadingPattern);
          function DummyShadingPattern() {
            _classCallCheck(this, DummyShadingPattern);
            return _super18.apply(this, arguments);
          }
          _createClass(DummyShadingPattern, [{
            key: "getPattern",
            value: function getPattern() {
              return "hotpink";
            }
          }]);
          return DummyShadingPattern;
        }(BaseShadingPattern);
        function getShadingPattern(IR) {
          switch (IR[0]) {
            case "RadialAxial":
              return new RadialAxialShadingPattern(IR);
            case "Mesh":
              return new MeshShadingPattern(IR);
            case "Dummy":
              return new DummyShadingPattern();
          }
          throw new Error("Unknown IR type: ".concat(IR[0]));
        }
        var PaintType = {
          COLORED: 1,
          UNCOLORED: 2
        };
        var TilingPattern = /*#__PURE__*/function () {
          function TilingPattern(IR, color, ctx, canvasGraphicsFactory, baseTransform) {
            _classCallCheck(this, TilingPattern);
            this.operatorList = IR[2];
            this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];
            this.bbox = IR[4];
            this.xstep = IR[5];
            this.ystep = IR[6];
            this.paintType = IR[7];
            this.tilingType = IR[8];
            this.color = color;
            this.ctx = ctx;
            this.canvasGraphicsFactory = canvasGraphicsFactory;
            this.baseTransform = baseTransform;
          }
          _createClass(TilingPattern, [{
            key: "createPatternCanvas",
            value: function createPatternCanvas(owner) {
              var operatorList = this.operatorList;
              var bbox = this.bbox;
              var xstep = this.xstep;
              var ystep = this.ystep;
              var paintType = this.paintType;
              var tilingType = this.tilingType;
              var color = this.color;
              var canvasGraphicsFactory = this.canvasGraphicsFactory;
              (0, _util.info)("TilingType: " + tilingType);
              var x0 = bbox[0],
                y0 = bbox[1],
                x1 = bbox[2],
                y1 = bbox[3];
              var matrixScale = _util.Util.singularValueDecompose2dScale(this.matrix);
              var curMatrixScale = _util.Util.singularValueDecompose2dScale(this.baseTransform);
              var combinedScale = [matrixScale[0] * curMatrixScale[0], matrixScale[1] * curMatrixScale[1]];
              var dimx = this.getSizeAndScale(xstep, this.ctx.canvas.width, combinedScale[0]);
              var dimy = this.getSizeAndScale(ystep, this.ctx.canvas.height, combinedScale[1]);
              var tmpCanvas = owner.cachedCanvases.getCanvas("pattern", dimx.size, dimy.size, true);
              var tmpCtx = tmpCanvas.context;
              var graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
              graphics.groupLevel = owner.groupLevel;
              this.setFillAndStrokeStyleToContext(graphics, paintType, color);
              var adjustedX0 = x0;
              var adjustedY0 = y0;
              var adjustedX1 = x1;
              var adjustedY1 = y1;
              if (x0 < 0) {
                adjustedX0 = 0;
                adjustedX1 += Math.abs(x0);
              }
              if (y0 < 0) {
                adjustedY0 = 0;
                adjustedY1 += Math.abs(y0);
              }
              tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));
              graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);
              tmpCtx.save();
              this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);
              graphics.baseTransform = (0, _display_utils.getCurrentTransform)(graphics.ctx);
              graphics.executeOperatorList(operatorList);
              graphics.endDrawing();
              return {
                canvas: tmpCanvas.canvas,
                scaleX: dimx.scale,
                scaleY: dimy.scale,
                offsetX: adjustedX0,
                offsetY: adjustedY0
              };
            }
          }, {
            key: "getSizeAndScale",
            value: function getSizeAndScale(step, realOutputSize, scale) {
              step = Math.abs(step);
              var maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);
              var size = Math.ceil(step * scale);
              if (size >= maxSize) {
                size = maxSize;
              } else {
                scale = size / step;
              }
              return {
                scale: scale,
                size: size
              };
            }
          }, {
            key: "clipBbox",
            value: function clipBbox(graphics, x0, y0, x1, y1) {
              var bboxWidth = x1 - x0;
              var bboxHeight = y1 - y0;
              graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
              graphics.current.updateRectMinMax((0, _display_utils.getCurrentTransform)(graphics.ctx), [x0, y0, x1, y1]);
              graphics.clip();
              graphics.endPath();
            }
          }, {
            key: "setFillAndStrokeStyleToContext",
            value: function setFillAndStrokeStyleToContext(graphics, paintType, color) {
              var context = graphics.ctx,
                current = graphics.current;
              switch (paintType) {
                case PaintType.COLORED:
                  var ctx = this.ctx;
                  context.fillStyle = ctx.fillStyle;
                  context.strokeStyle = ctx.strokeStyle;
                  current.fillColor = ctx.fillStyle;
                  current.strokeColor = ctx.strokeStyle;
                  break;
                case PaintType.UNCOLORED:
                  var cssColor = _util.Util.makeHexColor(color[0], color[1], color[2]);
                  context.fillStyle = cssColor;
                  context.strokeStyle = cssColor;
                  current.fillColor = cssColor;
                  current.strokeColor = cssColor;
                  break;
                default:
                  throw new _util.FormatError("Unsupported paint type: ".concat(paintType));
              }
            }
          }, {
            key: "getPattern",
            value: function getPattern(ctx, owner, inverse, pathType) {
              var matrix = inverse;
              if (pathType !== PathType.SHADING) {
                matrix = _util.Util.transform(matrix, owner.baseTransform);
                if (this.matrix) {
                  matrix = _util.Util.transform(matrix, this.matrix);
                }
              }
              var temporaryPatternCanvas = this.createPatternCanvas(owner);
              var domMatrix = new DOMMatrix(matrix);
              domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);
              domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);
              var pattern = ctx.createPattern(temporaryPatternCanvas.canvas, "repeat");
              pattern.setTransform(domMatrix);
              return pattern;
            }
          }]);
          return TilingPattern;
        }();
        _defineProperty(TilingPattern, "MAX_PATTERN_SIZE", 3000);
        exports.TilingPattern = TilingPattern;

        /***/
      }, /* 13 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.convertBlackAndWhiteToRGBA = convertBlackAndWhiteToRGBA;
        exports.convertToRGBA = convertToRGBA;
        exports.grayToRGBA = grayToRGBA;
        var _util = __w_pdfjs_require__(1);
        function convertToRGBA(params) {
          switch (params.kind) {
            case _util.ImageKind.GRAYSCALE_1BPP:
              return convertBlackAndWhiteToRGBA(params);
            case _util.ImageKind.RGB_24BPP:
              return convertRGBToRGBA(params);
          }
          return null;
        }
        function convertBlackAndWhiteToRGBA(_ref49) {
          var src = _ref49.src,
            _ref49$srcPos = _ref49.srcPos,
            srcPos = _ref49$srcPos === void 0 ? 0 : _ref49$srcPos,
            dest = _ref49.dest,
            width = _ref49.width,
            height = _ref49.height,
            _ref49$nonBlackColor = _ref49.nonBlackColor,
            nonBlackColor = _ref49$nonBlackColor === void 0 ? 0xffffffff : _ref49$nonBlackColor,
            _ref49$inverseDecode = _ref49.inverseDecode,
            inverseDecode = _ref49$inverseDecode === void 0 ? false : _ref49$inverseDecode;
          var black = _util.FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;
          var _ref50 = inverseDecode ? [nonBlackColor, black] : [black, nonBlackColor],
            _ref51 = _slicedToArray(_ref50, 2),
            zeroMapping = _ref51[0],
            oneMapping = _ref51[1];
          var widthInSource = width >> 3;
          var widthRemainder = width & 7;
          var srcLength = src.length;
          dest = new Uint32Array(dest.buffer);
          var destPos = 0;
          for (var i = 0; i < height; i++) {
            for (var max = srcPos + widthInSource; srcPos < max; srcPos++) {
              var _elem = srcPos < srcLength ? src[srcPos] : 255;
              dest[destPos++] = _elem & 128 ? oneMapping : zeroMapping;
              dest[destPos++] = _elem & 64 ? oneMapping : zeroMapping;
              dest[destPos++] = _elem & 32 ? oneMapping : zeroMapping;
              dest[destPos++] = _elem & 16 ? oneMapping : zeroMapping;
              dest[destPos++] = _elem & 8 ? oneMapping : zeroMapping;
              dest[destPos++] = _elem & 4 ? oneMapping : zeroMapping;
              dest[destPos++] = _elem & 2 ? oneMapping : zeroMapping;
              dest[destPos++] = _elem & 1 ? oneMapping : zeroMapping;
            }
            if (widthRemainder === 0) {
              continue;
            }
            var elem = srcPos < srcLength ? src[srcPos++] : 255;
            for (var j = 0; j < widthRemainder; j++) {
              dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;
            }
          }
          return {
            srcPos: srcPos,
            destPos: destPos
          };
        }
        function convertRGBToRGBA(_ref52) {
          var src = _ref52.src,
            _ref52$srcPos = _ref52.srcPos,
            srcPos = _ref52$srcPos === void 0 ? 0 : _ref52$srcPos,
            dest = _ref52.dest,
            _ref52$destPos = _ref52.destPos,
            destPos = _ref52$destPos === void 0 ? 0 : _ref52$destPos,
            width = _ref52.width,
            height = _ref52.height;
          var i = 0;
          var len32 = src.length >> 2;
          var src32 = new Uint32Array(src.buffer, srcPos, len32);
          if (_util.FeatureTest.isLittleEndian) {
            for (; i < len32 - 2; i += 3, destPos += 4) {
              var s1 = src32[i];
              var s2 = src32[i + 1];
              var s3 = src32[i + 2];
              dest[destPos] = s1 | 0xff000000;
              dest[destPos + 1] = s1 >>> 24 | s2 << 8 | 0xff000000;
              dest[destPos + 2] = s2 >>> 16 | s3 << 16 | 0xff000000;
              dest[destPos + 3] = s3 >>> 8 | 0xff000000;
            }
            for (var j = i * 4, jj = src.length; j < jj; j += 3) {
              dest[destPos++] = src[j] | src[j + 1] << 8 | src[j + 2] << 16 | 0xff000000;
            }
          } else {
            for (; i < len32 - 2; i += 3, destPos += 4) {
              var _s2 = src32[i];
              var _s3 = src32[i + 1];
              var _s4 = src32[i + 2];
              dest[destPos] = _s2 | 0xff;
              dest[destPos + 1] = _s2 << 24 | _s3 >>> 8 | 0xff;
              dest[destPos + 2] = _s3 << 16 | _s4 >>> 16 | 0xff;
              dest[destPos + 3] = _s4 << 8 | 0xff;
            }
            for (var _j = i * 4, _jj = src.length; _j < _jj; _j += 3) {
              dest[destPos++] = src[_j] << 24 | src[_j + 1] << 16 | src[_j + 2] << 8 | 0xff;
            }
          }
          return {
            srcPos: srcPos,
            destPos: destPos
          };
        }
        function grayToRGBA(src, dest) {
          if (_util.FeatureTest.isLittleEndian) {
            for (var i = 0, ii = src.length; i < ii; i++) {
              dest[i] = src[i] * 0x10101 | 0xff000000;
            }
          } else {
            for (var _i12 = 0, _ii = src.length; _i12 < _ii; _i12++) {
              dest[_i12] = src[_i12] * 0x1010100 | 0x000000ff;
            }
          }
        }

        /***/
      }, /* 14 */
      /***/function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GlobalWorkerOptions = void 0;
        var GlobalWorkerOptions = Object.create(null);
        exports.GlobalWorkerOptions = GlobalWorkerOptions;
        GlobalWorkerOptions.workerPort = null;
        GlobalWorkerOptions.workerSrc = "";

        /***/
      }, /* 15 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MessageHandler = void 0;
        var _util = __w_pdfjs_require__(1);
        var CallbackKind = {
          UNKNOWN: 0,
          DATA: 1,
          ERROR: 2
        };
        var StreamKind = {
          UNKNOWN: 0,
          CANCEL: 1,
          CANCEL_COMPLETE: 2,
          CLOSE: 3,
          ENQUEUE: 4,
          ERROR: 5,
          PULL: 6,
          PULL_COMPLETE: 7,
          START_COMPLETE: 8
        };
        function wrapReason(reason) {
          if (!(reason instanceof Error || _typeof(reason) === "object" && reason !== null)) {
            (0, _util.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.');
          }
          switch (reason.name) {
            case "AbortException":
              return new _util.AbortException(reason.message);
            case "MissingPDFException":
              return new _util.MissingPDFException(reason.message);
            case "PasswordException":
              return new _util.PasswordException(reason.message, reason.code);
            case "UnexpectedResponseException":
              return new _util.UnexpectedResponseException(reason.message, reason.status);
            case "UnknownErrorException":
              return new _util.UnknownErrorException(reason.message, reason.details);
            default:
              return new _util.UnknownErrorException(reason.message, reason.toString());
          }
        }
        var _createStreamSink = /*#__PURE__*/new WeakSet();
        var _processStreamMessage = /*#__PURE__*/new WeakSet();
        var _deleteStreamController = /*#__PURE__*/new WeakSet();
        var MessageHandler = /*#__PURE__*/function () {
          function MessageHandler(_sourceName, _targetName, _comObj) {
            var _this35 = this;
            _classCallCheck(this, MessageHandler);
            _classPrivateMethodInitSpec(this, _deleteStreamController);
            _classPrivateMethodInitSpec(this, _processStreamMessage);
            _classPrivateMethodInitSpec(this, _createStreamSink);
            this.sourceName = _sourceName;
            this.targetName = _targetName;
            this.comObj = _comObj;
            this.callbackId = 1;
            this.streamId = 1;
            this.streamSinks = Object.create(null);
            this.streamControllers = Object.create(null);
            this.callbackCapabilities = Object.create(null);
            this.actionHandler = Object.create(null);
            this._onComObjOnMessage = function (event) {
              var data = event.data;
              if (data.targetName !== _this35.sourceName) {
                return;
              }
              if (data.stream) {
                _classPrivateMethodGet(_this35, _processStreamMessage, _processStreamMessage2).call(_this35, data);
                return;
              }
              if (data.callback) {
                var callbackId = data.callbackId;
                var capability = _this35.callbackCapabilities[callbackId];
                if (!capability) {
                  throw new Error("Cannot resolve callback ".concat(callbackId));
                }
                delete _this35.callbackCapabilities[callbackId];
                if (data.callback === CallbackKind.DATA) {
                  capability.resolve(data.data);
                } else if (data.callback === CallbackKind.ERROR) {
                  capability.reject(wrapReason(data.reason));
                } else {
                  throw new Error("Unexpected callback case");
                }
                return;
              }
              var action = _this35.actionHandler[data.action];
              if (!action) {
                throw new Error("Unknown action from worker: ".concat(data.action));
              }
              if (data.callbackId) {
                var cbSourceName = _this35.sourceName;
                var cbTargetName = data.sourceName;
                new Promise(function (resolve) {
                  resolve(action(data.data));
                }).then(function (result) {
                  _comObj.postMessage({
                    sourceName: cbSourceName,
                    targetName: cbTargetName,
                    callback: CallbackKind.DATA,
                    callbackId: data.callbackId,
                    data: result
                  });
                }, function (reason) {
                  _comObj.postMessage({
                    sourceName: cbSourceName,
                    targetName: cbTargetName,
                    callback: CallbackKind.ERROR,
                    callbackId: data.callbackId,
                    reason: wrapReason(reason)
                  });
                });
                return;
              }
              if (data.streamId) {
                _classPrivateMethodGet(_this35, _createStreamSink, _createStreamSink2).call(_this35, data);
                return;
              }
              action(data.data);
            };
            _comObj.addEventListener("message", this._onComObjOnMessage);
          }
          _createClass(MessageHandler, [{
            key: "on",
            value: function on(actionName, handler) {
              var ah = this.actionHandler;
              if (ah[actionName]) {
                throw new Error("There is already an actionName called \"".concat(actionName, "\""));
              }
              ah[actionName] = handler;
            }
          }, {
            key: "send",
            value: function send(actionName, data, transfers) {
              this.comObj.postMessage({
                sourceName: this.sourceName,
                targetName: this.targetName,
                action: actionName,
                data: data
              }, transfers);
            }
          }, {
            key: "sendWithPromise",
            value: function sendWithPromise(actionName, data, transfers) {
              var callbackId = this.callbackId++;
              var capability = new _util.PromiseCapability();
              this.callbackCapabilities[callbackId] = capability;
              try {
                this.comObj.postMessage({
                  sourceName: this.sourceName,
                  targetName: this.targetName,
                  action: actionName,
                  callbackId: callbackId,
                  data: data
                }, transfers);
              } catch (ex) {
                capability.reject(ex);
              }
              return capability.promise;
            }
          }, {
            key: "sendWithStream",
            value: function sendWithStream(actionName, data, queueingStrategy, transfers) {
              var _this36 = this;
              var streamId = this.streamId++,
                sourceName = this.sourceName,
                targetName = this.targetName,
                comObj = this.comObj;
              return new ReadableStream({
                start: function start(controller) {
                  var startCapability = new _util.PromiseCapability();
                  _this36.streamControllers[streamId] = {
                    controller: controller,
                    startCall: startCapability,
                    pullCall: null,
                    cancelCall: null,
                    isClosed: false
                  };
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    action: actionName,
                    streamId: streamId,
                    data: data,
                    desiredSize: controller.desiredSize
                  }, transfers);
                  return startCapability.promise;
                },
                pull: function pull(controller) {
                  var pullCapability = new _util.PromiseCapability();
                  _this36.streamControllers[streamId].pullCall = pullCapability;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.PULL,
                    streamId: streamId,
                    desiredSize: controller.desiredSize
                  });
                  return pullCapability.promise;
                },
                cancel: function cancel(reason) {
                  (0, _util.assert)(reason instanceof Error, "cancel must have a valid reason");
                  var cancelCapability = new _util.PromiseCapability();
                  _this36.streamControllers[streamId].cancelCall = cancelCapability;
                  _this36.streamControllers[streamId].isClosed = true;
                  comObj.postMessage({
                    sourceName: sourceName,
                    targetName: targetName,
                    stream: StreamKind.CANCEL,
                    streamId: streamId,
                    reason: wrapReason(reason)
                  });
                  return cancelCapability.promise;
                }
              }, queueingStrategy);
            }
          }, {
            key: "destroy",
            value: function destroy() {
              this.comObj.removeEventListener("message", this._onComObjOnMessage);
            }
          }]);
          return MessageHandler;
        }();
        function _createStreamSink2(data) {
          var streamId = data.streamId,
            sourceName = this.sourceName,
            targetName = data.sourceName,
            comObj = this.comObj;
          var self = this,
            action = this.actionHandler[data.action];
          var streamSink = {
            enqueue: function enqueue(chunk) {
              var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
              var transfers = arguments.length > 2 ? arguments[2] : undefined;
              if (this.isCancelled) {
                return;
              }
              var lastDesiredSize = this.desiredSize;
              this.desiredSize -= size;
              if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                this.sinkCapability = new _util.PromiseCapability();
                this.ready = this.sinkCapability.promise;
              }
              comObj.postMessage({
                sourceName: sourceName,
                targetName: targetName,
                stream: StreamKind.ENQUEUE,
                streamId: streamId,
                chunk: chunk
              }, transfers);
            },
            close: function close() {
              if (this.isCancelled) {
                return;
              }
              this.isCancelled = true;
              comObj.postMessage({
                sourceName: sourceName,
                targetName: targetName,
                stream: StreamKind.CLOSE,
                streamId: streamId
              });
              delete self.streamSinks[streamId];
            },
            error: function error(reason) {
              (0, _util.assert)(reason instanceof Error, "error must have a valid reason");
              if (this.isCancelled) {
                return;
              }
              this.isCancelled = true;
              comObj.postMessage({
                sourceName: sourceName,
                targetName: targetName,
                stream: StreamKind.ERROR,
                streamId: streamId,
                reason: wrapReason(reason)
              });
            },
            sinkCapability: new _util.PromiseCapability(),
            onPull: null,
            onCancel: null,
            isCancelled: false,
            desiredSize: data.desiredSize,
            ready: null
          };
          streamSink.sinkCapability.resolve();
          streamSink.ready = streamSink.sinkCapability.promise;
          this.streamSinks[streamId] = streamSink;
          new Promise(function (resolve) {
            resolve(action(data.data, streamSink));
          }).then(function () {
            comObj.postMessage({
              sourceName: sourceName,
              targetName: targetName,
              stream: StreamKind.START_COMPLETE,
              streamId: streamId,
              success: true
            });
          }, function (reason) {
            comObj.postMessage({
              sourceName: sourceName,
              targetName: targetName,
              stream: StreamKind.START_COMPLETE,
              streamId: streamId,
              reason: wrapReason(reason)
            });
          });
        }
        function _processStreamMessage2(data) {
          var streamId = data.streamId,
            sourceName = this.sourceName,
            targetName = data.sourceName,
            comObj = this.comObj;
          var streamController = this.streamControllers[streamId],
            streamSink = this.streamSinks[streamId];
          switch (data.stream) {
            case StreamKind.START_COMPLETE:
              if (data.success) {
                streamController.startCall.resolve();
              } else {
                streamController.startCall.reject(wrapReason(data.reason));
              }
              break;
            case StreamKind.PULL_COMPLETE:
              if (data.success) {
                streamController.pullCall.resolve();
              } else {
                streamController.pullCall.reject(wrapReason(data.reason));
              }
              break;
            case StreamKind.PULL:
              if (!streamSink) {
                comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.PULL_COMPLETE,
                  streamId: streamId,
                  success: true
                });
                break;
              }
              if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {
                streamSink.sinkCapability.resolve();
              }
              streamSink.desiredSize = data.desiredSize;
              new Promise(function (resolve) {
                var _streamSink$onPull;
                resolve((_streamSink$onPull = streamSink.onPull) === null || _streamSink$onPull === void 0 ? void 0 : _streamSink$onPull.call(streamSink));
              }).then(function () {
                comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.PULL_COMPLETE,
                  streamId: streamId,
                  success: true
                });
              }, function (reason) {
                comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.PULL_COMPLETE,
                  streamId: streamId,
                  reason: wrapReason(reason)
                });
              });
              break;
            case StreamKind.ENQUEUE:
              (0, _util.assert)(streamController, "enqueue should have stream controller");
              if (streamController.isClosed) {
                break;
              }
              streamController.controller.enqueue(data.chunk);
              break;
            case StreamKind.CLOSE:
              (0, _util.assert)(streamController, "close should have stream controller");
              if (streamController.isClosed) {
                break;
              }
              streamController.isClosed = true;
              streamController.controller.close();
              _classPrivateMethodGet(this, _deleteStreamController, _deleteStreamController2).call(this, streamController, streamId);
              break;
            case StreamKind.ERROR:
              (0, _util.assert)(streamController, "error should have stream controller");
              streamController.controller.error(wrapReason(data.reason));
              _classPrivateMethodGet(this, _deleteStreamController, _deleteStreamController2).call(this, streamController, streamId);
              break;
            case StreamKind.CANCEL_COMPLETE:
              if (data.success) {
                streamController.cancelCall.resolve();
              } else {
                streamController.cancelCall.reject(wrapReason(data.reason));
              }
              _classPrivateMethodGet(this, _deleteStreamController, _deleteStreamController2).call(this, streamController, streamId);
              break;
            case StreamKind.CANCEL:
              if (!streamSink) {
                break;
              }
              new Promise(function (resolve) {
                var _streamSink$onCancel;
                resolve((_streamSink$onCancel = streamSink.onCancel) === null || _streamSink$onCancel === void 0 ? void 0 : _streamSink$onCancel.call(streamSink, wrapReason(data.reason)));
              }).then(function () {
                comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.CANCEL_COMPLETE,
                  streamId: streamId,
                  success: true
                });
              }, function (reason) {
                comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.CANCEL_COMPLETE,
                  streamId: streamId,
                  reason: wrapReason(reason)
                });
              });
              streamSink.sinkCapability.reject(wrapReason(data.reason));
              streamSink.isCancelled = true;
              delete this.streamSinks[streamId];
              break;
            default:
              throw new Error("Unexpected stream case");
          }
        }
        function _deleteStreamController2(_x9, _x10) {
          return _deleteStreamController3.apply(this, arguments);
        }
        function _deleteStreamController3() {
          _deleteStreamController3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(streamController, streamId) {
            var _streamController$sta, _streamController$pul, _streamController$can;
            return _regeneratorRuntime().wrap(function _callee12$(_context12) {
              while (1) switch (_context12.prev = _context12.next) {
                case 0:
                  _context12.next = 2;
                  return Promise.allSettled([(_streamController$sta = streamController.startCall) === null || _streamController$sta === void 0 ? void 0 : _streamController$sta.promise, (_streamController$pul = streamController.pullCall) === null || _streamController$pul === void 0 ? void 0 : _streamController$pul.promise, (_streamController$can = streamController.cancelCall) === null || _streamController$can === void 0 ? void 0 : _streamController$can.promise]);
                case 2:
                  delete this.streamControllers[streamId];
                case 3:
                case "end":
                  return _context12.stop();
              }
            }, _callee12, this);
          }));
          return _deleteStreamController3.apply(this, arguments);
        }
        exports.MessageHandler = MessageHandler;

        /***/
      }, /* 16 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Metadata = void 0;
        var _util = __w_pdfjs_require__(1);
        var _metadataMap = /*#__PURE__*/new WeakMap();
        var _data = /*#__PURE__*/new WeakMap();
        var Metadata = /*#__PURE__*/function () {
          function Metadata(_ref53) {
            var parsedData = _ref53.parsedData,
              rawData = _ref53.rawData;
            _classCallCheck(this, Metadata);
            _classPrivateFieldInitSpec(this, _metadataMap, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(this, _data, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldSet(this, _metadataMap, parsedData);
            _classPrivateFieldSet(this, _data, rawData);
          }
          _createClass(Metadata, [{
            key: "getRaw",
            value: function getRaw() {
              return _classPrivateFieldGet(this, _data);
            }
          }, {
            key: "get",
            value: function get(name) {
              var _classPrivateFieldGet7;
              return (_classPrivateFieldGet7 = _classPrivateFieldGet(this, _metadataMap).get(name)) !== null && _classPrivateFieldGet7 !== void 0 ? _classPrivateFieldGet7 : null;
            }
          }, {
            key: "getAll",
            value: function getAll() {
              return (0, _util.objectFromMap)(_classPrivateFieldGet(this, _metadataMap));
            }
          }, {
            key: "has",
            value: function has(name) {
              return _classPrivateFieldGet(this, _metadataMap).has(name);
            }
          }]);
          return Metadata;
        }();
        exports.Metadata = Metadata;

        /***/
      }, /* 17 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.OptionalContentConfig = void 0;
        var _util = __w_pdfjs_require__(1);
        var _murmurhash = __w_pdfjs_require__(8);
        var INTERNAL = Symbol("INTERNAL");
        var _visible = /*#__PURE__*/new WeakMap();
        var OptionalContentGroup = /*#__PURE__*/function () {
          function OptionalContentGroup(name, intent) {
            _classCallCheck(this, OptionalContentGroup);
            _classPrivateFieldInitSpec(this, _visible, {
              writable: true,
              value: true
            });
            this.name = name;
            this.intent = intent;
          }
          _createClass(OptionalContentGroup, [{
            key: "visible",
            get: function get() {
              return _classPrivateFieldGet(this, _visible);
            }
          }, {
            key: "_setVisible",
            value: function _setVisible(internal, visible) {
              if (internal !== INTERNAL) {
                (0, _util.unreachable)("Internal method `_setVisible` called.");
              }
              _classPrivateFieldSet(this, _visible, visible);
            }
          }]);
          return OptionalContentGroup;
        }();
        var _cachedGetHash = /*#__PURE__*/new WeakMap();
        var _groups = /*#__PURE__*/new WeakMap();
        var _initialHash = /*#__PURE__*/new WeakMap();
        var _order = /*#__PURE__*/new WeakMap();
        var _evaluateVisibilityExpression = /*#__PURE__*/new WeakSet();
        var OptionalContentConfig = /*#__PURE__*/function () {
          function OptionalContentConfig(data) {
            _classCallCheck(this, OptionalContentConfig);
            _classPrivateMethodInitSpec(this, _evaluateVisibilityExpression);
            _classPrivateFieldInitSpec(this, _cachedGetHash, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _groups, {
              writable: true,
              value: new Map()
            });
            _classPrivateFieldInitSpec(this, _initialHash, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _order, {
              writable: true,
              value: null
            });
            this.name = null;
            this.creator = null;
            if (data === null) {
              return;
            }
            this.name = data.name;
            this.creator = data.creator;
            _classPrivateFieldSet(this, _order, data.order);
            var _iterator56 = _createForOfIteratorHelper(data.groups),
              _step56;
            try {
              for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
                var _group = _step56.value;
                _classPrivateFieldGet(this, _groups).set(_group.id, new OptionalContentGroup(_group.name, _group.intent));
              }
            } catch (err) {
              _iterator56.e(err);
            } finally {
              _iterator56.f();
            }
            if (data.baseState === "OFF") {
              var _iterator57 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _groups).values()),
                _step57;
              try {
                for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
                  var group = _step57.value;
                  group._setVisible(INTERNAL, false);
                }
              } catch (err) {
                _iterator57.e(err);
              } finally {
                _iterator57.f();
              }
            }
            var _iterator58 = _createForOfIteratorHelper(data.on),
              _step58;
            try {
              for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
                var on = _step58.value;
                _classPrivateFieldGet(this, _groups).get(on)._setVisible(INTERNAL, true);
              }
            } catch (err) {
              _iterator58.e(err);
            } finally {
              _iterator58.f();
            }
            var _iterator59 = _createForOfIteratorHelper(data.off),
              _step59;
            try {
              for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
                var off = _step59.value;
                _classPrivateFieldGet(this, _groups).get(off)._setVisible(INTERNAL, false);
              }
            } catch (err) {
              _iterator59.e(err);
            } finally {
              _iterator59.f();
            }
            _classPrivateFieldSet(this, _initialHash, this.getHash());
          }
          _createClass(OptionalContentConfig, [{
            key: "isVisible",
            value: function isVisible(group) {
              if (_classPrivateFieldGet(this, _groups).size === 0) {
                return true;
              }
              if (!group) {
                (0, _util.warn)("Optional content group not defined.");
                return true;
              }
              if (group.type === "OCG") {
                if (!_classPrivateFieldGet(this, _groups).has(group.id)) {
                  (0, _util.warn)("Optional content group not found: ".concat(group.id));
                  return true;
                }
                return _classPrivateFieldGet(this, _groups).get(group.id).visible;
              } else if (group.type === "OCMD") {
                if (group.expression) {
                  return _classPrivateMethodGet(this, _evaluateVisibilityExpression, _evaluateVisibilityExpression2).call(this, group.expression);
                }
                if (!group.policy || group.policy === "AnyOn") {
                  var _iterator60 = _createForOfIteratorHelper(group.ids),
                    _step60;
                  try {
                    for (_iterator60.s(); !(_step60 = _iterator60.n()).done;) {
                      var id = _step60.value;
                      if (!_classPrivateFieldGet(this, _groups).has(id)) {
                        (0, _util.warn)("Optional content group not found: ".concat(id));
                        return true;
                      }
                      if (_classPrivateFieldGet(this, _groups).get(id).visible) {
                        return true;
                      }
                    }
                  } catch (err) {
                    _iterator60.e(err);
                  } finally {
                    _iterator60.f();
                  }
                  return false;
                } else if (group.policy === "AllOn") {
                  var _iterator61 = _createForOfIteratorHelper(group.ids),
                    _step61;
                  try {
                    for (_iterator61.s(); !(_step61 = _iterator61.n()).done;) {
                      var _id3 = _step61.value;
                      if (!_classPrivateFieldGet(this, _groups).has(_id3)) {
                        (0, _util.warn)("Optional content group not found: ".concat(_id3));
                        return true;
                      }
                      if (!_classPrivateFieldGet(this, _groups).get(_id3).visible) {
                        return false;
                      }
                    }
                  } catch (err) {
                    _iterator61.e(err);
                  } finally {
                    _iterator61.f();
                  }
                  return true;
                } else if (group.policy === "AnyOff") {
                  var _iterator62 = _createForOfIteratorHelper(group.ids),
                    _step62;
                  try {
                    for (_iterator62.s(); !(_step62 = _iterator62.n()).done;) {
                      var _id4 = _step62.value;
                      if (!_classPrivateFieldGet(this, _groups).has(_id4)) {
                        (0, _util.warn)("Optional content group not found: ".concat(_id4));
                        return true;
                      }
                      if (!_classPrivateFieldGet(this, _groups).get(_id4).visible) {
                        return true;
                      }
                    }
                  } catch (err) {
                    _iterator62.e(err);
                  } finally {
                    _iterator62.f();
                  }
                  return false;
                } else if (group.policy === "AllOff") {
                  var _iterator63 = _createForOfIteratorHelper(group.ids),
                    _step63;
                  try {
                    for (_iterator63.s(); !(_step63 = _iterator63.n()).done;) {
                      var _id5 = _step63.value;
                      if (!_classPrivateFieldGet(this, _groups).has(_id5)) {
                        (0, _util.warn)("Optional content group not found: ".concat(_id5));
                        return true;
                      }
                      if (_classPrivateFieldGet(this, _groups).get(_id5).visible) {
                        return false;
                      }
                    }
                  } catch (err) {
                    _iterator63.e(err);
                  } finally {
                    _iterator63.f();
                  }
                  return true;
                }
                (0, _util.warn)("Unknown optional content policy ".concat(group.policy, "."));
                return true;
              }
              (0, _util.warn)("Unknown group type ".concat(group.type, "."));
              return true;
            }
          }, {
            key: "setVisibility",
            value: function setVisibility(id) {
              var visible = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
              if (!_classPrivateFieldGet(this, _groups).has(id)) {
                (0, _util.warn)("Optional content group not found: ".concat(id));
                return;
              }
              _classPrivateFieldGet(this, _groups).get(id)._setVisible(INTERNAL, !!visible);
              _classPrivateFieldSet(this, _cachedGetHash, null);
            }
          }, {
            key: "hasInitialVisibility",
            get: function get() {
              return this.getHash() === _classPrivateFieldGet(this, _initialHash);
            }
          }, {
            key: "getOrder",
            value: function getOrder() {
              if (!_classPrivateFieldGet(this, _groups).size) {
                return null;
              }
              if (_classPrivateFieldGet(this, _order)) {
                return _classPrivateFieldGet(this, _order).slice();
              }
              return _toConsumableArray(_classPrivateFieldGet(this, _groups).keys());
            }
          }, {
            key: "getGroups",
            value: function getGroups() {
              return _classPrivateFieldGet(this, _groups).size > 0 ? (0, _util.objectFromMap)(_classPrivateFieldGet(this, _groups)) : null;
            }
          }, {
            key: "getGroup",
            value: function getGroup(id) {
              return _classPrivateFieldGet(this, _groups).get(id) || null;
            }
          }, {
            key: "getHash",
            value: function getHash() {
              if (_classPrivateFieldGet(this, _cachedGetHash) !== null) {
                return _classPrivateFieldGet(this, _cachedGetHash);
              }
              var hash = new _murmurhash.MurmurHash3_64();
              var _iterator64 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _groups)),
                _step64;
              try {
                for (_iterator64.s(); !(_step64 = _iterator64.n()).done;) {
                  var _step64$value = _slicedToArray(_step64.value, 2),
                    id = _step64$value[0],
                    group = _step64$value[1];
                  hash.update("".concat(id, ":").concat(group.visible));
                }
              } catch (err) {
                _iterator64.e(err);
              } finally {
                _iterator64.f();
              }
              return _classPrivateFieldSet(this, _cachedGetHash, hash.hexdigest());
            }
          }]);
          return OptionalContentConfig;
        }();
        function _evaluateVisibilityExpression2(array) {
          var length = array.length;
          if (length < 2) {
            return true;
          }
          var operator = array[0];
          for (var i = 1; i < length; i++) {
            var element = array[i];
            var state = void 0;
            if (Array.isArray(element)) {
              state = _classPrivateMethodGet(this, _evaluateVisibilityExpression, _evaluateVisibilityExpression2).call(this, element);
            } else if (_classPrivateFieldGet(this, _groups).has(element)) {
              state = _classPrivateFieldGet(this, _groups).get(element).visible;
            } else {
              (0, _util.warn)("Optional content group not found: ".concat(element));
              return true;
            }
            switch (operator) {
              case "And":
                if (!state) {
                  return false;
                }
                break;
              case "Or":
                if (state) {
                  return true;
                }
                break;
              case "Not":
                return !state;
              default:
                return true;
            }
          }
          return operator === "And";
        }
        exports.OptionalContentConfig = OptionalContentConfig;

        /***/
      }, /* 18 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFDataTransportStream = void 0;
        var _util = __w_pdfjs_require__(1);
        var _display_utils = __w_pdfjs_require__(6);
        var PDFDataTransportStream = /*#__PURE__*/function () {
          function PDFDataTransportStream(_ref54, pdfDataRangeTransport) {
            var _this37 = this;
            var length = _ref54.length,
              initialData = _ref54.initialData,
              _ref54$progressiveDon = _ref54.progressiveDone,
              progressiveDone = _ref54$progressiveDon === void 0 ? false : _ref54$progressiveDon,
              _ref54$contentDisposi = _ref54.contentDispositionFilename,
              contentDispositionFilename = _ref54$contentDisposi === void 0 ? null : _ref54$contentDisposi,
              _ref54$disableRange = _ref54.disableRange,
              disableRange = _ref54$disableRange === void 0 ? false : _ref54$disableRange,
              _ref54$disableStream = _ref54.disableStream,
              disableStream = _ref54$disableStream === void 0 ? false : _ref54$disableStream;
            _classCallCheck(this, PDFDataTransportStream);
            (0, _util.assert)(pdfDataRangeTransport, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
            this._queuedChunks = [];
            this._progressiveDone = progressiveDone;
            this._contentDispositionFilename = contentDispositionFilename;
            if ((initialData === null || initialData === void 0 ? void 0 : initialData.length) > 0) {
              var buffer = initialData instanceof Uint8Array && initialData.byteLength === initialData.buffer.byteLength ? initialData.buffer : new Uint8Array(initialData).buffer;
              this._queuedChunks.push(buffer);
            }
            this._pdfDataRangeTransport = pdfDataRangeTransport;
            this._isStreamingSupported = !disableStream;
            this._isRangeSupported = !disableRange;
            this._contentLength = length;
            this._fullRequestReader = null;
            this._rangeReaders = [];
            this._pdfDataRangeTransport.addRangeListener(function (begin, chunk) {
              _this37._onReceiveData({
                begin: begin,
                chunk: chunk
              });
            });
            this._pdfDataRangeTransport.addProgressListener(function (loaded, total) {
              _this37._onProgress({
                loaded: loaded,
                total: total
              });
            });
            this._pdfDataRangeTransport.addProgressiveReadListener(function (chunk) {
              _this37._onReceiveData({
                chunk: chunk
              });
            });
            this._pdfDataRangeTransport.addProgressiveDoneListener(function () {
              _this37._onProgressiveDone();
            });
            this._pdfDataRangeTransport.transportReady();
          }
          _createClass(PDFDataTransportStream, [{
            key: "_onReceiveData",
            value: function _onReceiveData(_ref55) {
              var begin = _ref55.begin,
                chunk = _ref55.chunk;
              var buffer = chunk instanceof Uint8Array && chunk.byteLength === chunk.buffer.byteLength ? chunk.buffer : new Uint8Array(chunk).buffer;
              if (begin === undefined) {
                if (this._fullRequestReader) {
                  this._fullRequestReader._enqueue(buffer);
                } else {
                  this._queuedChunks.push(buffer);
                }
              } else {
                var found = this._rangeReaders.some(function (rangeReader) {
                  if (rangeReader._begin !== begin) {
                    return false;
                  }
                  rangeReader._enqueue(buffer);
                  return true;
                });
                (0, _util.assert)(found, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
              }
            }
          }, {
            key: "_progressiveDataLength",
            get: function get() {
              var _this$_fullRequestRea, _this$_fullRequestRea2;
              return (_this$_fullRequestRea = (_this$_fullRequestRea2 = this._fullRequestReader) === null || _this$_fullRequestRea2 === void 0 ? void 0 : _this$_fullRequestRea2._loaded) !== null && _this$_fullRequestRea !== void 0 ? _this$_fullRequestRea : 0;
            }
          }, {
            key: "_onProgress",
            value: function _onProgress(evt) {
              if (evt.total === undefined) {
                var _this$_rangeReaders$, _this$_rangeReaders$$;
                (_this$_rangeReaders$ = this._rangeReaders[0]) === null || _this$_rangeReaders$ === void 0 ? void 0 : (_this$_rangeReaders$$ = _this$_rangeReaders$.onProgress) === null || _this$_rangeReaders$$ === void 0 ? void 0 : _this$_rangeReaders$$.call(_this$_rangeReaders$, {
                  loaded: evt.loaded
                });
              } else {
                var _this$_fullRequestRea3, _this$_fullRequestRea4;
                (_this$_fullRequestRea3 = this._fullRequestReader) === null || _this$_fullRequestRea3 === void 0 ? void 0 : (_this$_fullRequestRea4 = _this$_fullRequestRea3.onProgress) === null || _this$_fullRequestRea4 === void 0 ? void 0 : _this$_fullRequestRea4.call(_this$_fullRequestRea3, {
                  loaded: evt.loaded,
                  total: evt.total
                });
              }
            }
          }, {
            key: "_onProgressiveDone",
            value: function _onProgressiveDone() {
              var _this$_fullRequestRea5;
              (_this$_fullRequestRea5 = this._fullRequestReader) === null || _this$_fullRequestRea5 === void 0 ? void 0 : _this$_fullRequestRea5.progressiveDone();
              this._progressiveDone = true;
            }
          }, {
            key: "_removeRangeReader",
            value: function _removeRangeReader(reader) {
              var i = this._rangeReaders.indexOf(reader);
              if (i >= 0) {
                this._rangeReaders.splice(i, 1);
              }
            }
          }, {
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
              var queuedChunks = this._queuedChunks;
              this._queuedChunks = null;
              return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(begin, end) {
              if (end <= this._progressiveDataLength) {
                return null;
              }
              var reader = new PDFDataTransportStreamRangeReader(this, begin, end);
              this._pdfDataRangeTransport.requestDataRange(begin, end);
              this._rangeReaders.push(reader);
              return reader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              var _this$_fullRequestRea6;
              (_this$_fullRequestRea6 = this._fullRequestReader) === null || _this$_fullRequestRea6 === void 0 ? void 0 : _this$_fullRequestRea6.cancel(reason);
              var _iterator65 = _createForOfIteratorHelper(this._rangeReaders.slice(0)),
                _step65;
              try {
                for (_iterator65.s(); !(_step65 = _iterator65.n()).done;) {
                  var reader = _step65.value;
                  reader.cancel(reason);
                }
              } catch (err) {
                _iterator65.e(err);
              } finally {
                _iterator65.f();
              }
              this._pdfDataRangeTransport.abort();
            }
          }]);
          return PDFDataTransportStream;
        }();
        exports.PDFDataTransportStream = PDFDataTransportStream;
        var PDFDataTransportStreamReader = /*#__PURE__*/function () {
          function PDFDataTransportStreamReader(stream, queuedChunks) {
            var progressiveDone = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            var contentDispositionFilename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
            _classCallCheck(this, PDFDataTransportStreamReader);
            this._stream = stream;
            this._done = progressiveDone || false;
            this._filename = (0, _display_utils.isPdfFile)(contentDispositionFilename) ? contentDispositionFilename : null;
            this._queuedChunks = queuedChunks || [];
            this._loaded = 0;
            var _iterator66 = _createForOfIteratorHelper(this._queuedChunks),
              _step66;
            try {
              for (_iterator66.s(); !(_step66 = _iterator66.n()).done;) {
                var chunk = _step66.value;
                this._loaded += chunk.byteLength;
              }
            } catch (err) {
              _iterator66.e(err);
            } finally {
              _iterator66.f();
            }
            this._requests = [];
            this._headersReady = Promise.resolve();
            stream._fullRequestReader = this;
            this.onProgress = null;
          }
          _createClass(PDFDataTransportStreamReader, [{
            key: "_enqueue",
            value: function _enqueue(chunk) {
              if (this._done) {
                return;
              }
              if (this._requests.length > 0) {
                var requestCapability = this._requests.shift();
                requestCapability.resolve({
                  value: chunk,
                  done: false
                });
              } else {
                this._queuedChunks.push(chunk);
              }
              this._loaded += chunk.byteLength;
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersReady;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._stream._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._stream._isStreamingSupported;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._stream._contentLength;
            }
          }, {
            key: "read",
            value: function () {
              var _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {
                var chunk, requestCapability;
                return _regeneratorRuntime().wrap(function _callee13$(_context13) {
                  while (1) switch (_context13.prev = _context13.next) {
                    case 0:
                      if (!(this._queuedChunks.length > 0)) {
                        _context13.next = 3;
                        break;
                      }
                      chunk = this._queuedChunks.shift();
                      return _context13.abrupt("return", {
                        value: chunk,
                        done: false
                      });
                    case 3:
                      if (!this._done) {
                        _context13.next = 5;
                        break;
                      }
                      return _context13.abrupt("return", {
                        value: undefined,
                        done: true
                      });
                    case 5:
                      requestCapability = new _util.PromiseCapability();
                      this._requests.push(requestCapability);
                      return _context13.abrupt("return", requestCapability.promise);
                    case 8:
                    case "end":
                      return _context13.stop();
                  }
                }, _callee13, this);
              }));
              function read() {
                return _read.apply(this, arguments);
              }
              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;
              var _iterator67 = _createForOfIteratorHelper(this._requests),
                _step67;
              try {
                for (_iterator67.s(); !(_step67 = _iterator67.n()).done;) {
                  var requestCapability = _step67.value;
                  requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _iterator67.e(err);
              } finally {
                _iterator67.f();
              }
              this._requests.length = 0;
            }
          }, {
            key: "progressiveDone",
            value: function progressiveDone() {
              if (this._done) {
                return;
              }
              this._done = true;
            }
          }]);
          return PDFDataTransportStreamReader;
        }();
        var PDFDataTransportStreamRangeReader = /*#__PURE__*/function () {
          function PDFDataTransportStreamRangeReader(stream, begin, end) {
            _classCallCheck(this, PDFDataTransportStreamRangeReader);
            this._stream = stream;
            this._begin = begin;
            this._end = end;
            this._queuedChunk = null;
            this._requests = [];
            this._done = false;
            this.onProgress = null;
          }
          _createClass(PDFDataTransportStreamRangeReader, [{
            key: "_enqueue",
            value: function _enqueue(chunk) {
              if (this._done) {
                return;
              }
              if (this._requests.length === 0) {
                this._queuedChunk = chunk;
              } else {
                var requestsCapability = this._requests.shift();
                requestsCapability.resolve({
                  value: chunk,
                  done: false
                });
                var _iterator68 = _createForOfIteratorHelper(this._requests),
                  _step68;
                try {
                  for (_iterator68.s(); !(_step68 = _iterator68.n()).done;) {
                    var requestCapability = _step68.value;
                    requestCapability.resolve({
                      value: undefined,
                      done: true
                    });
                  }
                } catch (err) {
                  _iterator68.e(err);
                } finally {
                  _iterator68.f();
                }
                this._requests.length = 0;
              }
              this._done = true;
              this._stream._removeRangeReader(this);
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return false;
            }
          }, {
            key: "read",
            value: function () {
              var _read2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {
                var chunk, requestCapability;
                return _regeneratorRuntime().wrap(function _callee14$(_context14) {
                  while (1) switch (_context14.prev = _context14.next) {
                    case 0:
                      if (!this._queuedChunk) {
                        _context14.next = 4;
                        break;
                      }
                      chunk = this._queuedChunk;
                      this._queuedChunk = null;
                      return _context14.abrupt("return", {
                        value: chunk,
                        done: false
                      });
                    case 4:
                      if (!this._done) {
                        _context14.next = 6;
                        break;
                      }
                      return _context14.abrupt("return", {
                        value: undefined,
                        done: true
                      });
                    case 6:
                      requestCapability = new _util.PromiseCapability();
                      this._requests.push(requestCapability);
                      return _context14.abrupt("return", requestCapability.promise);
                    case 9:
                    case "end":
                      return _context14.stop();
                  }
                }, _callee14, this);
              }));
              function read() {
                return _read2.apply(this, arguments);
              }
              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;
              var _iterator69 = _createForOfIteratorHelper(this._requests),
                _step69;
              try {
                for (_iterator69.s(); !(_step69 = _iterator69.n()).done;) {
                  var requestCapability = _step69.value;
                  requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _iterator69.e(err);
              } finally {
                _iterator69.f();
              }
              this._requests.length = 0;
              this._stream._removeRangeReader(this);
            }
          }]);
          return PDFDataTransportStreamRangeReader;
        }();
        /***/
      }, /* 19 */
      /***/function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.XfaText = void 0;
        var XfaText = /*#__PURE__*/function () {
          function XfaText() {
            _classCallCheck(this, XfaText);
          }
          _createClass(XfaText, null, [{
            key: "textContent",
            value: function textContent(xfa) {
              var items = [];
              var output = {
                items: items,
                styles: Object.create(null)
              };
              function walk(node) {
                var _node$attributes;
                if (!node) {
                  return;
                }
                var str = null;
                var name = node.name;
                if (name === "#text") {
                  str = node.value;
                } else if (!XfaText.shouldBuildText(name)) {
                  return;
                } else if (node !== null && node !== void 0 && (_node$attributes = node.attributes) !== null && _node$attributes !== void 0 && _node$attributes.textContent) {
                  str = node.attributes.textContent;
                } else if (node.value) {
                  str = node.value;
                }
                if (str !== null) {
                  items.push({
                    str: str
                  });
                }
                if (!node.children) {
                  return;
                }
                var _iterator70 = _createForOfIteratorHelper(node.children),
                  _step70;
                try {
                  for (_iterator70.s(); !(_step70 = _iterator70.n()).done;) {
                    var child = _step70.value;
                    walk(child);
                  }
                } catch (err) {
                  _iterator70.e(err);
                } finally {
                  _iterator70.f();
                }
              }
              walk(xfa);
              return output;
            }
          }, {
            key: "shouldBuildText",
            value: function shouldBuildText(name) {
              return !(name === "textarea" || name === "input" || name === "option" || name === "select");
            }
          }]);
          return XfaText;
        }();
        exports.XfaText = XfaText;

        /***/
      }, /* 20 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NodeStandardFontDataFactory = exports.NodeFilterFactory = exports.NodeCanvasFactory = exports.NodeCMapReaderFactory = void 0;
        var _base_factory = __w_pdfjs_require__(7);
        ;
        var fetchData = function fetchData(url) {
          return new Promise(function (resolve, reject) {
            var fs = require("fs");
            fs.readFile(url, function (error, data) {
              if (error || !data) {
                reject(new Error(error));
                return;
              }
              resolve(new Uint8Array(data));
            });
          });
        };
        var NodeFilterFactory = /*#__PURE__*/function (_base_factory$BaseFil2) {
          _inherits(NodeFilterFactory, _base_factory$BaseFil2);
          var _super19 = _createSuper(NodeFilterFactory);
          function NodeFilterFactory() {
            _classCallCheck(this, NodeFilterFactory);
            return _super19.apply(this, arguments);
          }
          return _createClass(NodeFilterFactory);
        }(_base_factory.BaseFilterFactory);
        exports.NodeFilterFactory = NodeFilterFactory;
        var NodeCanvasFactory = /*#__PURE__*/function (_base_factory$BaseCan2) {
          _inherits(NodeCanvasFactory, _base_factory$BaseCan2);
          var _super20 = _createSuper(NodeCanvasFactory);
          function NodeCanvasFactory() {
            _classCallCheck(this, NodeCanvasFactory);
            return _super20.apply(this, arguments);
          }
          _createClass(NodeCanvasFactory, [{
            key: "_createCanvas",
            value: function _createCanvas(width, height) {
              var Canvas = require("canvas");
              return Canvas.createCanvas(width, height);
            }
          }]);
          return NodeCanvasFactory;
        }(_base_factory.BaseCanvasFactory);
        exports.NodeCanvasFactory = NodeCanvasFactory;
        var NodeCMapReaderFactory = /*#__PURE__*/function (_base_factory$BaseCMa2) {
          _inherits(NodeCMapReaderFactory, _base_factory$BaseCMa2);
          var _super21 = _createSuper(NodeCMapReaderFactory);
          function NodeCMapReaderFactory() {
            _classCallCheck(this, NodeCMapReaderFactory);
            return _super21.apply(this, arguments);
          }
          _createClass(NodeCMapReaderFactory, [{
            key: "_fetchData",
            value: function _fetchData(url, compressionType) {
              return fetchData(url).then(function (data) {
                return {
                  cMapData: data,
                  compressionType: compressionType
                };
              });
            }
          }]);
          return NodeCMapReaderFactory;
        }(_base_factory.BaseCMapReaderFactory);
        exports.NodeCMapReaderFactory = NodeCMapReaderFactory;
        var NodeStandardFontDataFactory = /*#__PURE__*/function (_base_factory$BaseSta2) {
          _inherits(NodeStandardFontDataFactory, _base_factory$BaseSta2);
          var _super22 = _createSuper(NodeStandardFontDataFactory);
          function NodeStandardFontDataFactory() {
            _classCallCheck(this, NodeStandardFontDataFactory);
            return _super22.apply(this, arguments);
          }
          _createClass(NodeStandardFontDataFactory, [{
            key: "_fetchData",
            value: function _fetchData(url) {
              return fetchData(url);
            }
          }]);
          return NodeStandardFontDataFactory;
        }(_base_factory.BaseStandardFontDataFactory);
        exports.NodeStandardFontDataFactory = NodeStandardFontDataFactory;

        /***/
      }, /* 21 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFNodeStream = void 0;
        var _util = __w_pdfjs_require__(1);
        var _network_utils = __w_pdfjs_require__(22);
        ;
        var fs = require("fs");
        var http = require("http");
        var https = require("https");
        var url = require("url");
        var fileUriRegex = /^file:\/\/\/[a-zA-Z]:\//;
        function parseUrl(sourceUrl) {
          var parsedUrl = url.parse(sourceUrl);
          if (parsedUrl.protocol === "file:" || parsedUrl.host) {
            return parsedUrl;
          }
          if (/^[a-z]:[/\\]/i.test(sourceUrl)) {
            return url.parse("file:///".concat(sourceUrl));
          }
          if (!parsedUrl.host) {
            parsedUrl.protocol = "file:";
          }
          return parsedUrl;
        }
        var PDFNodeStream = /*#__PURE__*/function () {
          function PDFNodeStream(source) {
            _classCallCheck(this, PDFNodeStream);
            this.source = source;
            this.url = parseUrl(source.url);
            this.isHttp = this.url.protocol === "http:" || this.url.protocol === "https:";
            this.isFsUrl = this.url.protocol === "file:";
            this.httpHeaders = this.isHttp && source.httpHeaders || {};
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }
          _createClass(PDFNodeStream, [{
            key: "_progressiveDataLength",
            get: function get() {
              var _this$_fullRequestRea7, _this$_fullRequestRea8;
              return (_this$_fullRequestRea7 = (_this$_fullRequestRea8 = this._fullRequestReader) === null || _this$_fullRequestRea8 === void 0 ? void 0 : _this$_fullRequestRea8._loaded) !== null && _this$_fullRequestRea7 !== void 0 ? _this$_fullRequestRea7 : 0;
            }
          }, {
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once.");
              this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);
              return this._fullRequestReader;
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(start, end) {
              if (end <= this._progressiveDataLength) {
                return null;
              }
              var rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);
              this._rangeRequestReaders.push(rangeReader);
              return rangeReader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              var _this$_fullRequestRea9;
              (_this$_fullRequestRea9 = this._fullRequestReader) === null || _this$_fullRequestRea9 === void 0 ? void 0 : _this$_fullRequestRea9.cancel(reason);
              var _iterator71 = _createForOfIteratorHelper(this._rangeRequestReaders.slice(0)),
                _step71;
              try {
                for (_iterator71.s(); !(_step71 = _iterator71.n()).done;) {
                  var reader = _step71.value;
                  reader.cancel(reason);
                }
              } catch (err) {
                _iterator71.e(err);
              } finally {
                _iterator71.f();
              }
            }
          }]);
          return PDFNodeStream;
        }();
        exports.PDFNodeStream = PDFNodeStream;
        var BaseFullReader = /*#__PURE__*/function () {
          function BaseFullReader(stream) {
            _classCallCheck(this, BaseFullReader);
            this._url = stream.url;
            this._done = false;
            this._storedError = null;
            this.onProgress = null;
            var source = stream.source;
            this._contentLength = source.length;
            this._loaded = 0;
            this._filename = null;
            this._disableRange = source.disableRange || false;
            this._rangeChunkSize = source.rangeChunkSize;
            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }
            this._isStreamingSupported = !source.disableStream;
            this._isRangeSupported = !source.disableRange;
            this._readableStream = null;
            this._readCapability = new _util.PromiseCapability();
            this._headersCapability = new _util.PromiseCapability();
          }
          _createClass(BaseFullReader, [{
            key: "headersReady",
            get: function get() {
              return this._headersCapability.promise;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._contentLength;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }, {
            key: "read",
            value: function () {
              var _read3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {
                var _this$onProgress;
                var chunk, buffer;
                return _regeneratorRuntime().wrap(function _callee15$(_context15) {
                  while (1) switch (_context15.prev = _context15.next) {
                    case 0:
                      _context15.next = 2;
                      return this._readCapability.promise;
                    case 2:
                      if (!this._done) {
                        _context15.next = 4;
                        break;
                      }
                      return _context15.abrupt("return", {
                        value: undefined,
                        done: true
                      });
                    case 4:
                      if (!this._storedError) {
                        _context15.next = 6;
                        break;
                      }
                      throw this._storedError;
                    case 6:
                      chunk = this._readableStream.read();
                      if (!(chunk === null)) {
                        _context15.next = 10;
                        break;
                      }
                      this._readCapability = new _util.PromiseCapability();
                      return _context15.abrupt("return", this.read());
                    case 10:
                      this._loaded += chunk.length;
                      (_this$onProgress = this.onProgress) === null || _this$onProgress === void 0 ? void 0 : _this$onProgress.call(this, {
                        loaded: this._loaded,
                        total: this._contentLength
                      });
                      buffer = new Uint8Array(chunk).buffer;
                      return _context15.abrupt("return", {
                        value: buffer,
                        done: false
                      });
                    case 14:
                    case "end":
                      return _context15.stop();
                  }
                }, _callee15, this);
              }));
              function read() {
                return _read3.apply(this, arguments);
              }
              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (!this._readableStream) {
                this._error(reason);
                return;
              }
              this._readableStream.destroy(reason);
            }
          }, {
            key: "_error",
            value: function _error(reason) {
              this._storedError = reason;
              this._readCapability.resolve();
            }
          }, {
            key: "_setReadableStream",
            value: function _setReadableStream(readableStream) {
              var _this38 = this;
              this._readableStream = readableStream;
              readableStream.on("readable", function () {
                _this38._readCapability.resolve();
              });
              readableStream.on("end", function () {
                readableStream.destroy();
                _this38._done = true;
                _this38._readCapability.resolve();
              });
              readableStream.on("error", function (reason) {
                _this38._error(reason);
              });
              if (!this._isStreamingSupported && this._isRangeSupported) {
                this._error(new _util.AbortException("streaming is disabled"));
              }
              if (this._storedError) {
                this._readableStream.destroy(this._storedError);
              }
            }
          }]);
          return BaseFullReader;
        }();
        var BaseRangeReader = /*#__PURE__*/function () {
          function BaseRangeReader(stream) {
            _classCallCheck(this, BaseRangeReader);
            this._url = stream.url;
            this._done = false;
            this._storedError = null;
            this.onProgress = null;
            this._loaded = 0;
            this._readableStream = null;
            this._readCapability = new _util.PromiseCapability();
            var source = stream.source;
            this._isStreamingSupported = !source.disableStream;
          }
          _createClass(BaseRangeReader, [{
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }, {
            key: "read",
            value: function () {
              var _read4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {
                var _this$onProgress2;
                var chunk, buffer;
                return _regeneratorRuntime().wrap(function _callee16$(_context16) {
                  while (1) switch (_context16.prev = _context16.next) {
                    case 0:
                      _context16.next = 2;
                      return this._readCapability.promise;
                    case 2:
                      if (!this._done) {
                        _context16.next = 4;
                        break;
                      }
                      return _context16.abrupt("return", {
                        value: undefined,
                        done: true
                      });
                    case 4:
                      if (!this._storedError) {
                        _context16.next = 6;
                        break;
                      }
                      throw this._storedError;
                    case 6:
                      chunk = this._readableStream.read();
                      if (!(chunk === null)) {
                        _context16.next = 10;
                        break;
                      }
                      this._readCapability = new _util.PromiseCapability();
                      return _context16.abrupt("return", this.read());
                    case 10:
                      this._loaded += chunk.length;
                      (_this$onProgress2 = this.onProgress) === null || _this$onProgress2 === void 0 ? void 0 : _this$onProgress2.call(this, {
                        loaded: this._loaded
                      });
                      buffer = new Uint8Array(chunk).buffer;
                      return _context16.abrupt("return", {
                        value: buffer,
                        done: false
                      });
                    case 14:
                    case "end":
                      return _context16.stop();
                  }
                }, _callee16, this);
              }));
              function read() {
                return _read4.apply(this, arguments);
              }
              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              if (!this._readableStream) {
                this._error(reason);
                return;
              }
              this._readableStream.destroy(reason);
            }
          }, {
            key: "_error",
            value: function _error(reason) {
              this._storedError = reason;
              this._readCapability.resolve();
            }
          }, {
            key: "_setReadableStream",
            value: function _setReadableStream(readableStream) {
              var _this39 = this;
              this._readableStream = readableStream;
              readableStream.on("readable", function () {
                _this39._readCapability.resolve();
              });
              readableStream.on("end", function () {
                readableStream.destroy();
                _this39._done = true;
                _this39._readCapability.resolve();
              });
              readableStream.on("error", function (reason) {
                _this39._error(reason);
              });
              if (this._storedError) {
                this._readableStream.destroy(this._storedError);
              }
            }
          }]);
          return BaseRangeReader;
        }();
        function createRequestOptions(parsedUrl, headers) {
          return {
            protocol: parsedUrl.protocol,
            auth: parsedUrl.auth,
            host: parsedUrl.hostname,
            port: parsedUrl.port,
            path: parsedUrl.path,
            method: "GET",
            headers: headers
          };
        }
        var PDFNodeStreamFullReader = /*#__PURE__*/function (_BaseFullReader) {
          _inherits(PDFNodeStreamFullReader, _BaseFullReader);
          var _super23 = _createSuper(PDFNodeStreamFullReader);
          function PDFNodeStreamFullReader(stream) {
            var _this40;
            _classCallCheck(this, PDFNodeStreamFullReader);
            _this40 = _super23.call(this, stream);
            var handleResponse = function handleResponse(response) {
              if (response.statusCode === 404) {
                var error = new _util.MissingPDFException("Missing PDF \"".concat(_this40._url, "\"."));
                _this40._storedError = error;
                _this40._headersCapability.reject(error);
                return;
              }
              _this40._headersCapability.resolve();
              _this40._setReadableStream(response);
              var getResponseHeader = function getResponseHeader(name) {
                return _this40._readableStream.headers[name.toLowerCase()];
              };
              var _ref56 = (0, _network_utils.validateRangeRequestCapabilities)({
                  getResponseHeader: getResponseHeader,
                  isHttp: stream.isHttp,
                  rangeChunkSize: _this40._rangeChunkSize,
                  disableRange: _this40._disableRange
                }),
                allowRangeRequests = _ref56.allowRangeRequests,
                suggestedLength = _ref56.suggestedLength;
              _this40._isRangeSupported = allowRangeRequests;
              _this40._contentLength = suggestedLength || _this40._contentLength;
              _this40._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
            };
            _this40._request = null;
            if (_this40._url.protocol === "http:") {
              _this40._request = http.request(createRequestOptions(_this40._url, stream.httpHeaders), handleResponse);
            } else {
              _this40._request = https.request(createRequestOptions(_this40._url, stream.httpHeaders), handleResponse);
            }
            _this40._request.on("error", function (reason) {
              _this40._storedError = reason;
              _this40._headersCapability.reject(reason);
            });
            _this40._request.end();
            return _this40;
          }
          return _createClass(PDFNodeStreamFullReader);
        }(BaseFullReader);
        var PDFNodeStreamRangeReader = /*#__PURE__*/function (_BaseRangeReader) {
          _inherits(PDFNodeStreamRangeReader, _BaseRangeReader);
          var _super24 = _createSuper(PDFNodeStreamRangeReader);
          function PDFNodeStreamRangeReader(stream, start, end) {
            var _this41;
            _classCallCheck(this, PDFNodeStreamRangeReader);
            _this41 = _super24.call(this, stream);
            _this41._httpHeaders = {};
            for (var property in stream.httpHeaders) {
              var value = stream.httpHeaders[property];
              if (value === undefined) {
                continue;
              }
              _this41._httpHeaders[property] = value;
            }
            _this41._httpHeaders.Range = "bytes=".concat(start, "-").concat(end - 1);
            var handleResponse = function handleResponse(response) {
              if (response.statusCode === 404) {
                var error = new _util.MissingPDFException("Missing PDF \"".concat(_this41._url, "\"."));
                _this41._storedError = error;
                return;
              }
              _this41._setReadableStream(response);
            };
            _this41._request = null;
            if (_this41._url.protocol === "http:") {
              _this41._request = http.request(createRequestOptions(_this41._url, _this41._httpHeaders), handleResponse);
            } else {
              _this41._request = https.request(createRequestOptions(_this41._url, _this41._httpHeaders), handleResponse);
            }
            _this41._request.on("error", function (reason) {
              _this41._storedError = reason;
            });
            _this41._request.end();
            return _this41;
          }
          return _createClass(PDFNodeStreamRangeReader);
        }(BaseRangeReader);
        var PDFNodeStreamFsFullReader = /*#__PURE__*/function (_BaseFullReader2) {
          _inherits(PDFNodeStreamFsFullReader, _BaseFullReader2);
          var _super25 = _createSuper(PDFNodeStreamFsFullReader);
          function PDFNodeStreamFsFullReader(stream) {
            var _this42;
            _classCallCheck(this, PDFNodeStreamFsFullReader);
            _this42 = _super25.call(this, stream);
            var path = decodeURIComponent(_this42._url.path);
            if (fileUriRegex.test(_this42._url.href)) {
              path = path.replace(/^\//, "");
            }
            fs.lstat(path, function (error, stat) {
              if (error) {
                if (error.code === "ENOENT") {
                  error = new _util.MissingPDFException("Missing PDF \"".concat(path, "\"."));
                }
                _this42._storedError = error;
                _this42._headersCapability.reject(error);
                return;
              }
              _this42._contentLength = stat.size;
              _this42._setReadableStream(fs.createReadStream(path));
              _this42._headersCapability.resolve();
            });
            return _this42;
          }
          return _createClass(PDFNodeStreamFsFullReader);
        }(BaseFullReader);
        var PDFNodeStreamFsRangeReader = /*#__PURE__*/function (_BaseRangeReader2) {
          _inherits(PDFNodeStreamFsRangeReader, _BaseRangeReader2);
          var _super26 = _createSuper(PDFNodeStreamFsRangeReader);
          function PDFNodeStreamFsRangeReader(stream, start, end) {
            var _this43;
            _classCallCheck(this, PDFNodeStreamFsRangeReader);
            _this43 = _super26.call(this, stream);
            var path = decodeURIComponent(_this43._url.path);
            if (fileUriRegex.test(_this43._url.href)) {
              path = path.replace(/^\//, "");
            }
            _this43._setReadableStream(fs.createReadStream(path, {
              start: start,
              end: end - 1
            }));
            return _this43;
          }
          return _createClass(PDFNodeStreamFsRangeReader);
        }(BaseRangeReader);
        /***/
      }, /* 22 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.createResponseStatusError = createResponseStatusError;
        exports.extractFilenameFromHeader = extractFilenameFromHeader;
        exports.validateRangeRequestCapabilities = validateRangeRequestCapabilities;
        exports.validateResponseStatus = validateResponseStatus;
        var _util = __w_pdfjs_require__(1);
        var _content_disposition = __w_pdfjs_require__(23);
        var _display_utils = __w_pdfjs_require__(6);
        function validateRangeRequestCapabilities(_ref57) {
          var getResponseHeader = _ref57.getResponseHeader,
            isHttp = _ref57.isHttp,
            rangeChunkSize = _ref57.rangeChunkSize,
            disableRange = _ref57.disableRange;
          var returnValues = {
            allowRangeRequests: false,
            suggestedLength: undefined
          };
          var length = parseInt(getResponseHeader("Content-Length"), 10);
          if (!Number.isInteger(length)) {
            return returnValues;
          }
          returnValues.suggestedLength = length;
          if (length <= 2 * rangeChunkSize) {
            return returnValues;
          }
          if (disableRange || !isHttp) {
            return returnValues;
          }
          if (getResponseHeader("Accept-Ranges") !== "bytes") {
            return returnValues;
          }
          var contentEncoding = getResponseHeader("Content-Encoding") || "identity";
          if (contentEncoding !== "identity") {
            return returnValues;
          }
          returnValues.allowRangeRequests = true;
          return returnValues;
        }
        function extractFilenameFromHeader(getResponseHeader) {
          var contentDisposition = getResponseHeader("Content-Disposition");
          if (contentDisposition) {
            var filename = (0, _content_disposition.getFilenameFromContentDispositionHeader)(contentDisposition);
            if (filename.includes("%")) {
              try {
                filename = decodeURIComponent(filename);
              } catch (_unused12) {}
            }
            if ((0, _display_utils.isPdfFile)(filename)) {
              return filename;
            }
          }
          return null;
        }
        function createResponseStatusError(status, url) {
          if (status === 404 || status === 0 && url.startsWith("file:")) {
            return new _util.MissingPDFException('Missing PDF "' + url + '".');
          }
          return new _util.UnexpectedResponseException("Unexpected server response (".concat(status, ") while retrieving PDF \"").concat(url, "\"."), status);
        }
        function validateResponseStatus(status) {
          return status === 200 || status === 206;
        }

        /***/
      }, /* 23 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.getFilenameFromContentDispositionHeader = getFilenameFromContentDispositionHeader;
        var _util = __w_pdfjs_require__(1);
        function getFilenameFromContentDispositionHeader(contentDisposition) {
          var needsEncodingFixup = true;
          var tmp = toParamRegExp("filename\\*", "i").exec(contentDisposition);
          if (tmp) {
            tmp = tmp[1];
            var filename = rfc2616unquote(tmp);
            filename = unescape(filename);
            filename = rfc5987decode(filename);
            filename = rfc2047decode(filename);
            return fixupEncoding(filename);
          }
          tmp = rfc2231getparam(contentDisposition);
          if (tmp) {
            var _filename = rfc2047decode(tmp);
            return fixupEncoding(_filename);
          }
          tmp = toParamRegExp("filename", "i").exec(contentDisposition);
          if (tmp) {
            tmp = tmp[1];
            var _filename2 = rfc2616unquote(tmp);
            _filename2 = rfc2047decode(_filename2);
            return fixupEncoding(_filename2);
          }
          function toParamRegExp(attributePattern, flags) {
            return new RegExp("(?:^|;)\\s*" + attributePattern + "\\s*=\\s*" + "(" + '[^";\\s][^;\\s]*' + "|" + '"(?:[^"\\\\]|\\\\"?)+"?' + ")", flags);
          }
          function textdecode(encoding, value) {
            if (encoding) {
              if (!/^[\x00-\xFF]+$/.test(value)) {
                return value;
              }
              try {
                var decoder = new TextDecoder(encoding, {
                  fatal: true
                });
                var buffer = (0, _util.stringToBytes)(value);
                value = decoder.decode(buffer);
                needsEncodingFixup = false;
              } catch (_unused13) {}
            }
            return value;
          }
          function fixupEncoding(value) {
            if (needsEncodingFixup && /[\x80-\xff]/.test(value)) {
              value = textdecode("utf-8", value);
              if (needsEncodingFixup) {
                value = textdecode("iso-8859-1", value);
              }
            }
            return value;
          }
          function rfc2231getparam(contentDispositionStr) {
            var matches = [];
            var match;
            var iter = toParamRegExp("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
            while ((match = iter.exec(contentDispositionStr)) !== null) {
              var _match = match,
                _match2 = _slicedToArray(_match, 4),
                n = _match2[1],
                quot = _match2[2],
                part = _match2[3];
              n = parseInt(n, 10);
              if (n in matches) {
                if (n === 0) {
                  break;
                }
                continue;
              }
              matches[n] = [quot, part];
            }
            var parts = [];
            for (var _n2 = 0; _n2 < matches.length; ++_n2) {
              if (!(_n2 in matches)) {
                break;
              }
              var _matches$_n = _slicedToArray(matches[_n2], 2),
                _quot = _matches$_n[0],
                _part = _matches$_n[1];
              _part = rfc2616unquote(_part);
              if (_quot) {
                _part = unescape(_part);
                if (_n2 === 0) {
                  _part = rfc5987decode(_part);
                }
              }
              parts.push(_part);
            }
            return parts.join("");
          }
          function rfc2616unquote(value) {
            if (value.startsWith('"')) {
              var parts = value.slice(1).split('\\"');
              for (var i = 0; i < parts.length; ++i) {
                var quotindex = parts[i].indexOf('"');
                if (quotindex !== -1) {
                  parts[i] = parts[i].slice(0, quotindex);
                  parts.length = i + 1;
                }
                parts[i] = parts[i].replaceAll(/\\(.)/g, "$1");
              }
              value = parts.join('"');
            }
            return value;
          }
          function rfc5987decode(extvalue) {
            var encodingend = extvalue.indexOf("'");
            if (encodingend === -1) {
              return extvalue;
            }
            var encoding = extvalue.slice(0, encodingend);
            var langvalue = extvalue.slice(encodingend + 1);
            var value = langvalue.replace(/^[^']*'/, "");
            return textdecode(encoding, value);
          }
          function rfc2047decode(value) {
            if (!value.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(value)) {
              return value;
            }
            return value.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function (matches, charset, encoding, text) {
              if (encoding === "q" || encoding === "Q") {
                text = text.replaceAll("_", " ");
                text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function (match, hex) {
                  return String.fromCharCode(parseInt(hex, 16));
                });
                return textdecode(charset, text);
              }
              try {
                text = atob(text);
              } catch (_unused14) {}
              return textdecode(charset, text);
            });
          }
          return "";
        }

        /***/
      }, /* 24 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFNetworkStream = void 0;
        var _util = __w_pdfjs_require__(1);
        var _network_utils = __w_pdfjs_require__(22);
        ;
        var OK_RESPONSE = 200;
        var PARTIAL_CONTENT_RESPONSE = 206;
        function getArrayBuffer(xhr) {
          var data = xhr.response;
          if (typeof data !== "string") {
            return data;
          }
          return (0, _util.stringToBytes)(data).buffer;
        }
        var NetworkManager = /*#__PURE__*/function () {
          function NetworkManager(url) {
            var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            _classCallCheck(this, NetworkManager);
            this.url = url;
            this.isHttp = /^https?:/i.test(url);
            this.httpHeaders = this.isHttp && args.httpHeaders || Object.create(null);
            this.withCredentials = args.withCredentials || false;
            this.currXhrId = 0;
            this.pendingRequests = Object.create(null);
          }
          _createClass(NetworkManager, [{
            key: "requestRange",
            value: function requestRange(begin, end, listeners) {
              var args = {
                begin: begin,
                end: end
              };
              for (var prop in listeners) {
                args[prop] = listeners[prop];
              }
              return this.request(args);
            }
          }, {
            key: "requestFull",
            value: function requestFull(listeners) {
              return this.request(listeners);
            }
          }, {
            key: "request",
            value: function request(args) {
              var xhr = new XMLHttpRequest();
              var xhrId = this.currXhrId++;
              var pendingRequest = this.pendingRequests[xhrId] = {
                xhr: xhr
              };
              xhr.open("GET", this.url);
              xhr.withCredentials = this.withCredentials;
              for (var property in this.httpHeaders) {
                var value = this.httpHeaders[property];
                if (value === undefined) {
                  continue;
                }
                xhr.setRequestHeader(property, value);
              }
              if (this.isHttp && "begin" in args && "end" in args) {
                xhr.setRequestHeader("Range", "bytes=".concat(args.begin, "-").concat(args.end - 1));
                pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;
              } else {
                pendingRequest.expectedStatus = OK_RESPONSE;
              }
              xhr.responseType = "arraybuffer";
              if (args.onError) {
                xhr.onerror = function (evt) {
                  args.onError(xhr.status);
                };
              }
              xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);
              xhr.onprogress = this.onProgress.bind(this, xhrId);
              pendingRequest.onHeadersReceived = args.onHeadersReceived;
              pendingRequest.onDone = args.onDone;
              pendingRequest.onError = args.onError;
              pendingRequest.onProgress = args.onProgress;
              xhr.send(null);
              return xhrId;
            }
          }, {
            key: "onProgress",
            value: function onProgress(xhrId, evt) {
              var _pendingRequest$onPro;
              var pendingRequest = this.pendingRequests[xhrId];
              if (!pendingRequest) {
                return;
              }
              (_pendingRequest$onPro = pendingRequest.onProgress) === null || _pendingRequest$onPro === void 0 ? void 0 : _pendingRequest$onPro.call(pendingRequest, evt);
            }
          }, {
            key: "onStateChange",
            value: function onStateChange(xhrId, evt) {
              var pendingRequest = this.pendingRequests[xhrId];
              if (!pendingRequest) {
                return;
              }
              var xhr = pendingRequest.xhr;
              if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {
                pendingRequest.onHeadersReceived();
                delete pendingRequest.onHeadersReceived;
              }
              if (xhr.readyState !== 4) {
                return;
              }
              if (!(xhrId in this.pendingRequests)) {
                return;
              }
              delete this.pendingRequests[xhrId];
              if (xhr.status === 0 && this.isHttp) {
                var _pendingRequest$onErr;
                (_pendingRequest$onErr = pendingRequest.onError) === null || _pendingRequest$onErr === void 0 ? void 0 : _pendingRequest$onErr.call(pendingRequest, xhr.status);
                return;
              }
              var xhrStatus = xhr.status || OK_RESPONSE;
              var ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;
              if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {
                var _pendingRequest$onErr2;
                (_pendingRequest$onErr2 = pendingRequest.onError) === null || _pendingRequest$onErr2 === void 0 ? void 0 : _pendingRequest$onErr2.call(pendingRequest, xhr.status);
                return;
              }
              var chunk = getArrayBuffer(xhr);
              if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
                var rangeHeader = xhr.getResponseHeader("Content-Range");
                var matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(rangeHeader);
                pendingRequest.onDone({
                  begin: parseInt(matches[1], 10),
                  chunk: chunk
                });
              } else if (chunk) {
                pendingRequest.onDone({
                  begin: 0,
                  chunk: chunk
                });
              } else {
                var _pendingRequest$onErr3;
                (_pendingRequest$onErr3 = pendingRequest.onError) === null || _pendingRequest$onErr3 === void 0 ? void 0 : _pendingRequest$onErr3.call(pendingRequest, xhr.status);
              }
            }
          }, {
            key: "getRequestXhr",
            value: function getRequestXhr(xhrId) {
              return this.pendingRequests[xhrId].xhr;
            }
          }, {
            key: "isPendingRequest",
            value: function isPendingRequest(xhrId) {
              return xhrId in this.pendingRequests;
            }
          }, {
            key: "abortRequest",
            value: function abortRequest(xhrId) {
              var xhr = this.pendingRequests[xhrId].xhr;
              delete this.pendingRequests[xhrId];
              xhr.abort();
            }
          }]);
          return NetworkManager;
        }();
        var PDFNetworkStream = /*#__PURE__*/function () {
          function PDFNetworkStream(source) {
            _classCallCheck(this, PDFNetworkStream);
            this._source = source;
            this._manager = new NetworkManager(source.url, {
              httpHeaders: source.httpHeaders,
              withCredentials: source.withCredentials
            });
            this._rangeChunkSize = source.rangeChunkSize;
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }
          _createClass(PDFNetworkStream, [{
            key: "_onRangeRequestReaderClosed",
            value: function _onRangeRequestReaderClosed(reader) {
              var i = this._rangeRequestReaders.indexOf(reader);
              if (i >= 0) {
                this._rangeRequestReaders.splice(i, 1);
              }
            }
          }, {
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once.");
              this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);
              return this._fullRequestReader;
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(begin, end) {
              var reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);
              reader.onClosed = this._onRangeRequestReaderClosed.bind(this);
              this._rangeRequestReaders.push(reader);
              return reader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              var _this$_fullRequestRea10;
              (_this$_fullRequestRea10 = this._fullRequestReader) === null || _this$_fullRequestRea10 === void 0 ? void 0 : _this$_fullRequestRea10.cancel(reason);
              var _iterator72 = _createForOfIteratorHelper(this._rangeRequestReaders.slice(0)),
                _step72;
              try {
                for (_iterator72.s(); !(_step72 = _iterator72.n()).done;) {
                  var reader = _step72.value;
                  reader.cancel(reason);
                }
              } catch (err) {
                _iterator72.e(err);
              } finally {
                _iterator72.f();
              }
            }
          }]);
          return PDFNetworkStream;
        }();
        exports.PDFNetworkStream = PDFNetworkStream;
        var PDFNetworkStreamFullRequestReader = /*#__PURE__*/function () {
          function PDFNetworkStreamFullRequestReader(manager, source) {
            _classCallCheck(this, PDFNetworkStreamFullRequestReader);
            this._manager = manager;
            var args = {
              onHeadersReceived: this._onHeadersReceived.bind(this),
              onDone: this._onDone.bind(this),
              onError: this._onError.bind(this),
              onProgress: this._onProgress.bind(this)
            };
            this._url = source.url;
            this._fullRequestId = manager.requestFull(args);
            this._headersReceivedCapability = new _util.PromiseCapability();
            this._disableRange = source.disableRange || false;
            this._contentLength = source.length;
            this._rangeChunkSize = source.rangeChunkSize;
            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }
            this._isStreamingSupported = false;
            this._isRangeSupported = false;
            this._cachedChunks = [];
            this._requests = [];
            this._done = false;
            this._storedError = undefined;
            this._filename = null;
            this.onProgress = null;
          }
          _createClass(PDFNetworkStreamFullRequestReader, [{
            key: "_onHeadersReceived",
            value: function _onHeadersReceived() {
              var fullRequestXhrId = this._fullRequestId;
              var fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);
              var getResponseHeader = function getResponseHeader(name) {
                return fullRequestXhr.getResponseHeader(name);
              };
              var _ref58 = (0, _network_utils.validateRangeRequestCapabilities)({
                  getResponseHeader: getResponseHeader,
                  isHttp: this._manager.isHttp,
                  rangeChunkSize: this._rangeChunkSize,
                  disableRange: this._disableRange
                }),
                allowRangeRequests = _ref58.allowRangeRequests,
                suggestedLength = _ref58.suggestedLength;
              if (allowRangeRequests) {
                this._isRangeSupported = true;
              }
              this._contentLength = suggestedLength || this._contentLength;
              this._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
              if (this._isRangeSupported) {
                this._manager.abortRequest(fullRequestXhrId);
              }
              this._headersReceivedCapability.resolve();
            }
          }, {
            key: "_onDone",
            value: function _onDone(data) {
              if (data) {
                if (this._requests.length > 0) {
                  var requestCapability = this._requests.shift();
                  requestCapability.resolve({
                    value: data.chunk,
                    done: false
                  });
                } else {
                  this._cachedChunks.push(data.chunk);
                }
              }
              this._done = true;
              if (this._cachedChunks.length > 0) {
                return;
              }
              var _iterator73 = _createForOfIteratorHelper(this._requests),
                _step73;
              try {
                for (_iterator73.s(); !(_step73 = _iterator73.n()).done;) {
                  var _requestCapability = _step73.value;
                  _requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _iterator73.e(err);
              } finally {
                _iterator73.f();
              }
              this._requests.length = 0;
            }
          }, {
            key: "_onError",
            value: function _onError(status) {
              this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);
              this._headersReceivedCapability.reject(this._storedError);
              var _iterator74 = _createForOfIteratorHelper(this._requests),
                _step74;
              try {
                for (_iterator74.s(); !(_step74 = _iterator74.n()).done;) {
                  var requestCapability = _step74.value;
                  requestCapability.reject(this._storedError);
                }
              } catch (err) {
                _iterator74.e(err);
              } finally {
                _iterator74.f();
              }
              this._requests.length = 0;
              this._cachedChunks.length = 0;
            }
          }, {
            key: "_onProgress",
            value: function _onProgress(evt) {
              var _this$onProgress3;
              (_this$onProgress3 = this.onProgress) === null || _this$onProgress3 === void 0 ? void 0 : _this$onProgress3.call(this, {
                loaded: evt.loaded,
                total: evt.lengthComputable ? evt.total : this._contentLength
              });
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._contentLength;
            }
          }, {
            key: "headersReady",
            get: function get() {
              return this._headersReceivedCapability.promise;
            }
          }, {
            key: "read",
            value: function () {
              var _read5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {
                var chunk, requestCapability;
                return _regeneratorRuntime().wrap(function _callee17$(_context17) {
                  while (1) switch (_context17.prev = _context17.next) {
                    case 0:
                      if (!this._storedError) {
                        _context17.next = 2;
                        break;
                      }
                      throw this._storedError;
                    case 2:
                      if (!(this._cachedChunks.length > 0)) {
                        _context17.next = 5;
                        break;
                      }
                      chunk = this._cachedChunks.shift();
                      return _context17.abrupt("return", {
                        value: chunk,
                        done: false
                      });
                    case 5:
                      if (!this._done) {
                        _context17.next = 7;
                        break;
                      }
                      return _context17.abrupt("return", {
                        value: undefined,
                        done: true
                      });
                    case 7:
                      requestCapability = new _util.PromiseCapability();
                      this._requests.push(requestCapability);
                      return _context17.abrupt("return", requestCapability.promise);
                    case 10:
                    case "end":
                      return _context17.stop();
                  }
                }, _callee17, this);
              }));
              function read() {
                return _read5.apply(this, arguments);
              }
              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;
              this._headersReceivedCapability.reject(reason);
              var _iterator75 = _createForOfIteratorHelper(this._requests),
                _step75;
              try {
                for (_iterator75.s(); !(_step75 = _iterator75.n()).done;) {
                  var requestCapability = _step75.value;
                  requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _iterator75.e(err);
              } finally {
                _iterator75.f();
              }
              this._requests.length = 0;
              if (this._manager.isPendingRequest(this._fullRequestId)) {
                this._manager.abortRequest(this._fullRequestId);
              }
              this._fullRequestReader = null;
            }
          }]);
          return PDFNetworkStreamFullRequestReader;
        }();
        var PDFNetworkStreamRangeRequestReader = /*#__PURE__*/function () {
          function PDFNetworkStreamRangeRequestReader(manager, begin, end) {
            _classCallCheck(this, PDFNetworkStreamRangeRequestReader);
            this._manager = manager;
            var args = {
              onDone: this._onDone.bind(this),
              onError: this._onError.bind(this),
              onProgress: this._onProgress.bind(this)
            };
            this._url = manager.url;
            this._requestId = manager.requestRange(begin, end, args);
            this._requests = [];
            this._queuedChunk = null;
            this._done = false;
            this._storedError = undefined;
            this.onProgress = null;
            this.onClosed = null;
          }
          _createClass(PDFNetworkStreamRangeRequestReader, [{
            key: "_close",
            value: function _close() {
              var _this$onClosed;
              (_this$onClosed = this.onClosed) === null || _this$onClosed === void 0 ? void 0 : _this$onClosed.call(this, this);
            }
          }, {
            key: "_onDone",
            value: function _onDone(data) {
              var chunk = data.chunk;
              if (this._requests.length > 0) {
                var requestCapability = this._requests.shift();
                requestCapability.resolve({
                  value: chunk,
                  done: false
                });
              } else {
                this._queuedChunk = chunk;
              }
              this._done = true;
              var _iterator76 = _createForOfIteratorHelper(this._requests),
                _step76;
              try {
                for (_iterator76.s(); !(_step76 = _iterator76.n()).done;) {
                  var _requestCapability2 = _step76.value;
                  _requestCapability2.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _iterator76.e(err);
              } finally {
                _iterator76.f();
              }
              this._requests.length = 0;
              this._close();
            }
          }, {
            key: "_onError",
            value: function _onError(status) {
              this._storedError = (0, _network_utils.createResponseStatusError)(status, this._url);
              var _iterator77 = _createForOfIteratorHelper(this._requests),
                _step77;
              try {
                for (_iterator77.s(); !(_step77 = _iterator77.n()).done;) {
                  var requestCapability = _step77.value;
                  requestCapability.reject(this._storedError);
                }
              } catch (err) {
                _iterator77.e(err);
              } finally {
                _iterator77.f();
              }
              this._requests.length = 0;
              this._queuedChunk = null;
            }
          }, {
            key: "_onProgress",
            value: function _onProgress(evt) {
              if (!this.isStreamingSupported) {
                var _this$onProgress4;
                (_this$onProgress4 = this.onProgress) === null || _this$onProgress4 === void 0 ? void 0 : _this$onProgress4.call(this, {
                  loaded: evt.loaded
                });
              }
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return false;
            }
          }, {
            key: "read",
            value: function () {
              var _read6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {
                var chunk, requestCapability;
                return _regeneratorRuntime().wrap(function _callee18$(_context18) {
                  while (1) switch (_context18.prev = _context18.next) {
                    case 0:
                      if (!this._storedError) {
                        _context18.next = 2;
                        break;
                      }
                      throw this._storedError;
                    case 2:
                      if (!(this._queuedChunk !== null)) {
                        _context18.next = 6;
                        break;
                      }
                      chunk = this._queuedChunk;
                      this._queuedChunk = null;
                      return _context18.abrupt("return", {
                        value: chunk,
                        done: false
                      });
                    case 6:
                      if (!this._done) {
                        _context18.next = 8;
                        break;
                      }
                      return _context18.abrupt("return", {
                        value: undefined,
                        done: true
                      });
                    case 8:
                      requestCapability = new _util.PromiseCapability();
                      this._requests.push(requestCapability);
                      return _context18.abrupt("return", requestCapability.promise);
                    case 11:
                    case "end":
                      return _context18.stop();
                  }
                }, _callee18, this);
              }));
              function read() {
                return _read6.apply(this, arguments);
              }
              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              this._done = true;
              var _iterator78 = _createForOfIteratorHelper(this._requests),
                _step78;
              try {
                for (_iterator78.s(); !(_step78 = _iterator78.n()).done;) {
                  var requestCapability = _step78.value;
                  requestCapability.resolve({
                    value: undefined,
                    done: true
                  });
                }
              } catch (err) {
                _iterator78.e(err);
              } finally {
                _iterator78.f();
              }
              this._requests.length = 0;
              if (this._manager.isPendingRequest(this._requestId)) {
                this._manager.abortRequest(this._requestId);
              }
              this._close();
            }
          }]);
          return PDFNetworkStreamRangeRequestReader;
        }();
        /***/
      }, /* 25 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PDFFetchStream = void 0;
        var _util = __w_pdfjs_require__(1);
        var _network_utils = __w_pdfjs_require__(22);
        ;
        function createFetchOptions(headers, withCredentials, abortController) {
          return {
            method: "GET",
            headers: headers,
            signal: abortController.signal,
            mode: "cors",
            credentials: withCredentials ? "include" : "same-origin",
            redirect: "follow"
          };
        }
        function createHeaders(httpHeaders) {
          var headers = new Headers();
          for (var property in httpHeaders) {
            var value = httpHeaders[property];
            if (value === undefined) {
              continue;
            }
            headers.append(property, value);
          }
          return headers;
        }
        function getArrayBuffer(val) {
          if (val instanceof Uint8Array) {
            return val.buffer;
          }
          if (val instanceof ArrayBuffer) {
            return val;
          }
          (0, _util.warn)("getArrayBuffer - unexpected data format: ".concat(val));
          return new Uint8Array(val).buffer;
        }
        var PDFFetchStream = /*#__PURE__*/function () {
          function PDFFetchStream(source) {
            _classCallCheck(this, PDFFetchStream);
            this.source = source;
            this.isHttp = /^https?:/i.test(source.url);
            this.httpHeaders = this.isHttp && source.httpHeaders || {};
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
          }
          _createClass(PDFFetchStream, [{
            key: "_progressiveDataLength",
            get: function get() {
              var _this$_fullRequestRea11, _this$_fullRequestRea12;
              return (_this$_fullRequestRea11 = (_this$_fullRequestRea12 = this._fullRequestReader) === null || _this$_fullRequestRea12 === void 0 ? void 0 : _this$_fullRequestRea12._loaded) !== null && _this$_fullRequestRea11 !== void 0 ? _this$_fullRequestRea11 : 0;
            }
          }, {
            key: "getFullReader",
            value: function getFullReader() {
              (0, _util.assert)(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once.");
              this._fullRequestReader = new PDFFetchStreamReader(this);
              return this._fullRequestReader;
            }
          }, {
            key: "getRangeReader",
            value: function getRangeReader(begin, end) {
              if (end <= this._progressiveDataLength) {
                return null;
              }
              var reader = new PDFFetchStreamRangeReader(this, begin, end);
              this._rangeRequestReaders.push(reader);
              return reader;
            }
          }, {
            key: "cancelAllRequests",
            value: function cancelAllRequests(reason) {
              var _this$_fullRequestRea13;
              (_this$_fullRequestRea13 = this._fullRequestReader) === null || _this$_fullRequestRea13 === void 0 ? void 0 : _this$_fullRequestRea13.cancel(reason);
              var _iterator79 = _createForOfIteratorHelper(this._rangeRequestReaders.slice(0)),
                _step79;
              try {
                for (_iterator79.s(); !(_step79 = _iterator79.n()).done;) {
                  var reader = _step79.value;
                  reader.cancel(reason);
                }
              } catch (err) {
                _iterator79.e(err);
              } finally {
                _iterator79.f();
              }
            }
          }]);
          return PDFFetchStream;
        }();
        exports.PDFFetchStream = PDFFetchStream;
        var PDFFetchStreamReader = /*#__PURE__*/function () {
          function PDFFetchStreamReader(stream) {
            var _this44 = this;
            _classCallCheck(this, PDFFetchStreamReader);
            this._stream = stream;
            this._reader = null;
            this._loaded = 0;
            this._filename = null;
            var source = stream.source;
            this._withCredentials = source.withCredentials || false;
            this._contentLength = source.length;
            this._headersCapability = new _util.PromiseCapability();
            this._disableRange = source.disableRange || false;
            this._rangeChunkSize = source.rangeChunkSize;
            if (!this._rangeChunkSize && !this._disableRange) {
              this._disableRange = true;
            }
            this._abortController = new AbortController();
            this._isStreamingSupported = !source.disableStream;
            this._isRangeSupported = !source.disableRange;
            this._headers = createHeaders(this._stream.httpHeaders);
            var url = source.url;
            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function (response) {
              if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                throw (0, _network_utils.createResponseStatusError)(response.status, url);
              }
              _this44._reader = response.body.getReader();
              _this44._headersCapability.resolve();
              var getResponseHeader = function getResponseHeader(name) {
                return response.headers.get(name);
              };
              var _ref59 = (0, _network_utils.validateRangeRequestCapabilities)({
                  getResponseHeader: getResponseHeader,
                  isHttp: _this44._stream.isHttp,
                  rangeChunkSize: _this44._rangeChunkSize,
                  disableRange: _this44._disableRange
                }),
                allowRangeRequests = _ref59.allowRangeRequests,
                suggestedLength = _ref59.suggestedLength;
              _this44._isRangeSupported = allowRangeRequests;
              _this44._contentLength = suggestedLength || _this44._contentLength;
              _this44._filename = (0, _network_utils.extractFilenameFromHeader)(getResponseHeader);
              if (!_this44._isStreamingSupported && _this44._isRangeSupported) {
                _this44.cancel(new _util.AbortException("Streaming is disabled."));
              }
            }).catch(this._headersCapability.reject);
            this.onProgress = null;
          }
          _createClass(PDFFetchStreamReader, [{
            key: "headersReady",
            get: function get() {
              return this._headersCapability.promise;
            }
          }, {
            key: "filename",
            get: function get() {
              return this._filename;
            }
          }, {
            key: "contentLength",
            get: function get() {
              return this._contentLength;
            }
          }, {
            key: "isRangeSupported",
            get: function get() {
              return this._isRangeSupported;
            }
          }, {
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }, {
            key: "read",
            value: function () {
              var _read7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {
                var _this$onProgress5;
                var _yield$this$_reader$r, value, done;
                return _regeneratorRuntime().wrap(function _callee19$(_context19) {
                  while (1) switch (_context19.prev = _context19.next) {
                    case 0:
                      _context19.next = 2;
                      return this._headersCapability.promise;
                    case 2:
                      _context19.next = 4;
                      return this._reader.read();
                    case 4:
                      _yield$this$_reader$r = _context19.sent;
                      value = _yield$this$_reader$r.value;
                      done = _yield$this$_reader$r.done;
                      if (!done) {
                        _context19.next = 9;
                        break;
                      }
                      return _context19.abrupt("return", {
                        value: value,
                        done: done
                      });
                    case 9:
                      this._loaded += value.byteLength;
                      (_this$onProgress5 = this.onProgress) === null || _this$onProgress5 === void 0 ? void 0 : _this$onProgress5.call(this, {
                        loaded: this._loaded,
                        total: this._contentLength
                      });
                      return _context19.abrupt("return", {
                        value: getArrayBuffer(value),
                        done: false
                      });
                    case 12:
                    case "end":
                      return _context19.stop();
                  }
                }, _callee19, this);
              }));
              function read() {
                return _read7.apply(this, arguments);
              }
              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              var _this$_reader;
              (_this$_reader = this._reader) === null || _this$_reader === void 0 ? void 0 : _this$_reader.cancel(reason);
              this._abortController.abort();
            }
          }]);
          return PDFFetchStreamReader;
        }();
        var PDFFetchStreamRangeReader = /*#__PURE__*/function () {
          function PDFFetchStreamRangeReader(stream, begin, end) {
            var _this45 = this;
            _classCallCheck(this, PDFFetchStreamRangeReader);
            this._stream = stream;
            this._reader = null;
            this._loaded = 0;
            var source = stream.source;
            this._withCredentials = source.withCredentials || false;
            this._readCapability = new _util.PromiseCapability();
            this._isStreamingSupported = !source.disableStream;
            this._abortController = new AbortController();
            this._headers = createHeaders(this._stream.httpHeaders);
            this._headers.append("Range", "bytes=".concat(begin, "-").concat(end - 1));
            var url = source.url;
            fetch(url, createFetchOptions(this._headers, this._withCredentials, this._abortController)).then(function (response) {
              if (!(0, _network_utils.validateResponseStatus)(response.status)) {
                throw (0, _network_utils.createResponseStatusError)(response.status, url);
              }
              _this45._readCapability.resolve();
              _this45._reader = response.body.getReader();
            }).catch(this._readCapability.reject);
            this.onProgress = null;
          }
          _createClass(PDFFetchStreamRangeReader, [{
            key: "isStreamingSupported",
            get: function get() {
              return this._isStreamingSupported;
            }
          }, {
            key: "read",
            value: function () {
              var _read8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {
                var _this$onProgress6;
                var _yield$this$_reader$r2, value, done;
                return _regeneratorRuntime().wrap(function _callee20$(_context20) {
                  while (1) switch (_context20.prev = _context20.next) {
                    case 0:
                      _context20.next = 2;
                      return this._readCapability.promise;
                    case 2:
                      _context20.next = 4;
                      return this._reader.read();
                    case 4:
                      _yield$this$_reader$r2 = _context20.sent;
                      value = _yield$this$_reader$r2.value;
                      done = _yield$this$_reader$r2.done;
                      if (!done) {
                        _context20.next = 9;
                        break;
                      }
                      return _context20.abrupt("return", {
                        value: value,
                        done: done
                      });
                    case 9:
                      this._loaded += value.byteLength;
                      (_this$onProgress6 = this.onProgress) === null || _this$onProgress6 === void 0 ? void 0 : _this$onProgress6.call(this, {
                        loaded: this._loaded
                      });
                      return _context20.abrupt("return", {
                        value: getArrayBuffer(value),
                        done: false
                      });
                    case 12:
                    case "end":
                      return _context20.stop();
                  }
                }, _callee20, this);
              }));
              function read() {
                return _read8.apply(this, arguments);
              }
              return read;
            }()
          }, {
            key: "cancel",
            value: function cancel(reason) {
              var _this$_reader2;
              (_this$_reader2 = this._reader) === null || _this$_reader2 === void 0 ? void 0 : _this$_reader2.cancel(reason);
              this._abortController.abort();
            }
          }]);
          return PDFFetchStreamRangeReader;
        }();
        /***/
      }, /* 26 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.TextLayerRenderTask = void 0;
        exports.renderTextLayer = renderTextLayer;
        exports.updateTextLayer = updateTextLayer;
        var _util = __w_pdfjs_require__(1);
        var _display_utils = __w_pdfjs_require__(6);
        var MAX_TEXT_DIVS_TO_RENDER = 100000;
        var DEFAULT_FONT_SIZE = 30;
        var DEFAULT_FONT_ASCENT = 0.8;
        var ascentCache = new Map();
        function getCtx(size, isOffscreenCanvasSupported) {
          var ctx;
          if (isOffscreenCanvasSupported && _util.FeatureTest.isOffscreenCanvasSupported) {
            ctx = new OffscreenCanvas(size, size).getContext("2d", {
              alpha: false
            });
          } else {
            var canvas = document.createElement("canvas");
            canvas.width = canvas.height = size;
            ctx = canvas.getContext("2d", {
              alpha: false
            });
          }
          return ctx;
        }
        function getAscent(fontFamily, isOffscreenCanvasSupported) {
          var cachedAscent = ascentCache.get(fontFamily);
          if (cachedAscent) {
            return cachedAscent;
          }
          var ctx = getCtx(DEFAULT_FONT_SIZE, isOffscreenCanvasSupported);
          ctx.font = "".concat(DEFAULT_FONT_SIZE, "px ").concat(fontFamily);
          var metrics = ctx.measureText("");
          var ascent = metrics.fontBoundingBoxAscent;
          var descent = Math.abs(metrics.fontBoundingBoxDescent);
          if (ascent) {
            var ratio = ascent / (ascent + descent);
            ascentCache.set(fontFamily, ratio);
            ctx.canvas.width = ctx.canvas.height = 0;
            return ratio;
          }
          ctx.strokeStyle = "red";
          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
          ctx.strokeText("g", 0, 0);
          var pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
          descent = 0;
          for (var i = pixels.length - 1 - 3; i >= 0; i -= 4) {
            if (pixels[i] > 0) {
              descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);
              break;
            }
          }
          ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
          ctx.strokeText("A", 0, DEFAULT_FONT_SIZE);
          pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;
          ascent = 0;
          for (var _i13 = 0, ii = pixels.length; _i13 < ii; _i13 += 4) {
            if (pixels[_i13] > 0) {
              ascent = DEFAULT_FONT_SIZE - Math.floor(_i13 / 4 / DEFAULT_FONT_SIZE);
              break;
            }
          }
          ctx.canvas.width = ctx.canvas.height = 0;
          if (ascent) {
            var _ratio = ascent / (ascent + descent);
            ascentCache.set(fontFamily, _ratio);
            return _ratio;
          }
          ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);
          return DEFAULT_FONT_ASCENT;
        }
        function appendText(task, geom, styles) {
          var textDiv = document.createElement("span");
          var textDivProperties = {
            angle: 0,
            canvasWidth: 0,
            hasText: geom.str !== "",
            hasEOL: geom.hasEOL,
            fontSize: 0
          };
          task._textDivs.push(textDiv);
          var tx = _util.Util.transform(task._transform, geom.transform);
          var angle = Math.atan2(tx[1], tx[0]);
          var style = styles[geom.fontName];
          if (style.vertical) {
            angle += Math.PI / 2;
          }
          var fontHeight = Math.hypot(tx[2], tx[3]);
          var fontAscent = fontHeight * getAscent(style.fontFamily, task._isOffscreenCanvasSupported);
          var left, top;
          if (angle === 0) {
            left = tx[4];
            top = tx[5] - fontAscent;
          } else {
            left = tx[4] + fontAscent * Math.sin(angle);
            top = tx[5] - fontAscent * Math.cos(angle);
          }
          var scaleFactorStr = "calc(var(--scale-factor)*";
          var divStyle = textDiv.style;
          if (task._container === task._rootContainer) {
            divStyle.left = "".concat((100 * left / task._pageWidth).toFixed(2), "%");
            divStyle.top = "".concat((100 * top / task._pageHeight).toFixed(2), "%");
          } else {
            divStyle.left = "".concat(scaleFactorStr).concat(left.toFixed(2), "px)");
            divStyle.top = "".concat(scaleFactorStr).concat(top.toFixed(2), "px)");
          }
          divStyle.fontSize = "".concat(scaleFactorStr).concat(fontHeight.toFixed(2), "px)");
          divStyle.fontFamily = style.fontFamily;
          textDivProperties.fontSize = fontHeight;
          textDiv.setAttribute("role", "presentation");
          textDiv.textContent = geom.str;
          textDiv.dir = geom.dir;
          if (task._fontInspectorEnabled) {
            textDiv.dataset.fontName = geom.fontName;
          }
          if (angle !== 0) {
            textDivProperties.angle = angle * (180 / Math.PI);
          }
          var shouldScaleText = false;
          if (geom.str.length > 1) {
            shouldScaleText = true;
          } else if (geom.str !== " " && geom.transform[0] !== geom.transform[3]) {
            var absScaleX = Math.abs(geom.transform[0]),
              absScaleY = Math.abs(geom.transform[3]);
            if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {
              shouldScaleText = true;
            }
          }
          if (shouldScaleText) {
            textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;
          }
          task._textDivProperties.set(textDiv, textDivProperties);
          if (task._isReadableStream) {
            task._layoutText(textDiv);
          }
        }
        function layout(params) {
          var div = params.div,
            scale = params.scale,
            properties = params.properties,
            ctx = params.ctx,
            prevFontSize = params.prevFontSize,
            prevFontFamily = params.prevFontFamily;
          var style = div.style;
          var transform = "";
          if (properties.canvasWidth !== 0 && properties.hasText) {
            var fontFamily = style.fontFamily;
            var canvasWidth = properties.canvasWidth,
              fontSize = properties.fontSize;
            if (prevFontSize !== fontSize || prevFontFamily !== fontFamily) {
              ctx.font = "".concat(fontSize * scale, "px ").concat(fontFamily);
              params.prevFontSize = fontSize;
              params.prevFontFamily = fontFamily;
            }
            var _ctx$measureText = ctx.measureText(div.textContent),
              width = _ctx$measureText.width;
            if (width > 0) {
              transform = "scaleX(".concat(canvasWidth * scale / width, ")");
            }
          }
          if (properties.angle !== 0) {
            transform = "rotate(".concat(properties.angle, "deg) ").concat(transform);
          }
          if (transform.length > 0) {
            style.transform = transform;
          }
        }
        function render(task) {
          if (task._canceled) {
            return;
          }
          var textDivs = task._textDivs;
          var capability = task._capability;
          var textDivsLength = textDivs.length;
          if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
            capability.resolve();
            return;
          }
          if (!task._isReadableStream) {
            var _iterator80 = _createForOfIteratorHelper(textDivs),
              _step80;
            try {
              for (_iterator80.s(); !(_step80 = _iterator80.n()).done;) {
                var textDiv = _step80.value;
                task._layoutText(textDiv);
              }
            } catch (err) {
              _iterator80.e(err);
            } finally {
              _iterator80.f();
            }
          }
          capability.resolve();
        }
        var TextLayerRenderTask = /*#__PURE__*/function () {
          function TextLayerRenderTask(_ref60) {
            var _globalThis$FontInspe2,
              _this46 = this;
            var textContentSource = _ref60.textContentSource,
              container = _ref60.container,
              viewport = _ref60.viewport,
              textDivs = _ref60.textDivs,
              textDivProperties = _ref60.textDivProperties,
              textContentItemsStr = _ref60.textContentItemsStr,
              isOffscreenCanvasSupported = _ref60.isOffscreenCanvasSupported;
            _classCallCheck(this, TextLayerRenderTask);
            this._textContentSource = textContentSource;
            this._isReadableStream = textContentSource instanceof ReadableStream;
            this._container = this._rootContainer = container;
            this._textDivs = textDivs || [];
            this._textContentItemsStr = textContentItemsStr || [];
            this._isOffscreenCanvasSupported = isOffscreenCanvasSupported;
            this._fontInspectorEnabled = !!((_globalThis$FontInspe2 = globalThis.FontInspector) !== null && _globalThis$FontInspe2 !== void 0 && _globalThis$FontInspe2.enabled);
            this._reader = null;
            this._textDivProperties = textDivProperties || new WeakMap();
            this._canceled = false;
            this._capability = new _util.PromiseCapability();
            this._layoutTextParams = {
              prevFontSize: null,
              prevFontFamily: null,
              div: null,
              scale: viewport.scale * (globalThis.devicePixelRatio || 1),
              properties: null,
              ctx: getCtx(0, isOffscreenCanvasSupported)
            };
            var _viewport$rawDims2 = viewport.rawDims,
              pageWidth = _viewport$rawDims2.pageWidth,
              pageHeight = _viewport$rawDims2.pageHeight,
              pageX = _viewport$rawDims2.pageX,
              pageY = _viewport$rawDims2.pageY;
            this._transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];
            this._pageWidth = pageWidth;
            this._pageHeight = pageHeight;
            (0, _display_utils.setLayerDimensions)(container, viewport);
            this._capability.promise.finally(function () {
              _this46._layoutTextParams = null;
            }).catch(function () {});
          }
          _createClass(TextLayerRenderTask, [{
            key: "promise",
            get: function get() {
              return this._capability.promise;
            }
          }, {
            key: "cancel",
            value: function cancel() {
              this._canceled = true;
              if (this._reader) {
                this._reader.cancel(new _util.AbortException("TextLayer task cancelled.")).catch(function () {});
                this._reader = null;
              }
              this._capability.reject(new _util.AbortException("TextLayer task cancelled."));
            }
          }, {
            key: "_processItems",
            value: function _processItems(items, styleCache) {
              var _iterator81 = _createForOfIteratorHelper(items),
                _step81;
              try {
                for (_iterator81.s(); !(_step81 = _iterator81.n()).done;) {
                  var item = _step81.value;
                  if (item.str === undefined) {
                    if (item.type === "beginMarkedContentProps" || item.type === "beginMarkedContent") {
                      var parent = this._container;
                      this._container = document.createElement("span");
                      this._container.classList.add("markedContent");
                      if (item.id !== null) {
                        this._container.setAttribute("id", "".concat(item.id));
                      }
                      parent.append(this._container);
                    } else if (item.type === "endMarkedContent") {
                      this._container = this._container.parentNode;
                    }
                    continue;
                  }
                  this._textContentItemsStr.push(item.str);
                  appendText(this, item, styleCache);
                }
              } catch (err) {
                _iterator81.e(err);
              } finally {
                _iterator81.f();
              }
            }
          }, {
            key: "_layoutText",
            value: function _layoutText(textDiv) {
              var textDivProperties = this._layoutTextParams.properties = this._textDivProperties.get(textDiv);
              this._layoutTextParams.div = textDiv;
              layout(this._layoutTextParams);
              if (textDivProperties.hasText) {
                this._container.append(textDiv);
              }
              if (textDivProperties.hasEOL) {
                var br = document.createElement("br");
                br.setAttribute("role", "presentation");
                this._container.append(br);
              }
            }
          }, {
            key: "_render",
            value: function _render() {
              var _this47 = this;
              var capability = new _util.PromiseCapability();
              var styleCache = Object.create(null);
              if (this._isReadableStream) {
                var pump = function pump() {
                  _this47._reader.read().then(function (_ref61) {
                    var value = _ref61.value,
                      done = _ref61.done;
                    if (done) {
                      capability.resolve();
                      return;
                    }
                    Object.assign(styleCache, value.styles);
                    _this47._processItems(value.items, styleCache);
                    pump();
                  }, capability.reject);
                };
                this._reader = this._textContentSource.getReader();
                pump();
              } else if (this._textContentSource) {
                var _this$_textContentSou = this._textContentSource,
                  items = _this$_textContentSou.items,
                  styles = _this$_textContentSou.styles;
                this._processItems(items, styles);
                capability.resolve();
              } else {
                throw new Error('No "textContentSource" parameter specified.');
              }
              capability.promise.then(function () {
                styleCache = null;
                render(_this47);
              }, this._capability.reject);
            }
          }]);
          return TextLayerRenderTask;
        }();
        exports.TextLayerRenderTask = TextLayerRenderTask;
        function renderTextLayer(params) {
          if (!params.textContentSource && (params.textContent || params.textContentStream)) {
            (0, _display_utils.deprecated)("The TextLayerRender `textContent`/`textContentStream` parameters " + "will be removed in the future, please use `textContentSource` instead.");
            params.textContentSource = params.textContent || params.textContentStream;
          }
          var container = params.container,
            viewport = params.viewport;
          var style = getComputedStyle(container);
          var visibility = style.getPropertyValue("visibility");
          var scaleFactor = parseFloat(style.getPropertyValue("--scale-factor"));
          if (visibility === "visible" && (!scaleFactor || Math.abs(scaleFactor - viewport.scale) > 1e-5)) {
            console.error("The `--scale-factor` CSS-variable must be set, " + "to the same value as `viewport.scale`, " + "either on the `container`-element itself or higher up in the DOM.");
          }
          var task = new TextLayerRenderTask(params);
          task._render();
          return task;
        }
        function updateTextLayer(_ref62) {
          var container = _ref62.container,
            viewport = _ref62.viewport,
            textDivs = _ref62.textDivs,
            textDivProperties = _ref62.textDivProperties,
            isOffscreenCanvasSupported = _ref62.isOffscreenCanvasSupported,
            _ref62$mustRotate = _ref62.mustRotate,
            mustRotate = _ref62$mustRotate === void 0 ? true : _ref62$mustRotate,
            _ref62$mustRescale = _ref62.mustRescale,
            mustRescale = _ref62$mustRescale === void 0 ? true : _ref62$mustRescale;
          if (mustRotate) {
            (0, _display_utils.setLayerDimensions)(container, {
              rotation: viewport.rotation
            });
          }
          if (mustRescale) {
            var ctx = getCtx(0, isOffscreenCanvasSupported);
            var scale = viewport.scale * (globalThis.devicePixelRatio || 1);
            var params = {
              prevFontSize: null,
              prevFontFamily: null,
              div: null,
              scale: scale,
              properties: null,
              ctx: ctx
            };
            var _iterator82 = _createForOfIteratorHelper(textDivs),
              _step82;
            try {
              for (_iterator82.s(); !(_step82 = _iterator82.n()).done;) {
                var div = _step82.value;
                params.properties = textDivProperties.get(div);
                params.div = div;
                layout(params);
              }
            } catch (err) {
              _iterator82.e(err);
            } finally {
              _iterator82.f();
            }
          }
        }

        /***/
      }, /* 27 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.AnnotationEditorLayer = void 0;
        var _util = __w_pdfjs_require__(1);
        var _editor = __w_pdfjs_require__(4);
        var _tools = __w_pdfjs_require__(5);
        var _freetext = __w_pdfjs_require__(28);
        var _ink = __w_pdfjs_require__(33);
        var _display_utils = __w_pdfjs_require__(6);
        var _accessibilityManager = /*#__PURE__*/new WeakMap();
        var _allowClick = /*#__PURE__*/new WeakMap();
        var _annotationLayer = /*#__PURE__*/new WeakMap();
        var _boundPointerup = /*#__PURE__*/new WeakMap();
        var _boundPointerdown = /*#__PURE__*/new WeakMap();
        var _editors = /*#__PURE__*/new WeakMap();
        var _hadPointerDown = /*#__PURE__*/new WeakMap();
        var _isCleaningUp = /*#__PURE__*/new WeakMap();
        var _isDisabling = /*#__PURE__*/new WeakMap();
        var _uiManager = /*#__PURE__*/new WeakMap();
        var _changeParent = /*#__PURE__*/new WeakSet();
        var _createNewEditor = /*#__PURE__*/new WeakSet();
        var _createAndAddNewEditor = /*#__PURE__*/new WeakSet();
        var _cleanup = /*#__PURE__*/new WeakSet();
        var AnnotationEditorLayer = /*#__PURE__*/function () {
          function AnnotationEditorLayer(options) {
            _classCallCheck(this, AnnotationEditorLayer);
            _classPrivateMethodInitSpec(this, _cleanup);
            _classPrivateMethodInitSpec(this, _createAndAddNewEditor);
            _classPrivateMethodInitSpec(this, _createNewEditor);
            _classPrivateMethodInitSpec(this, _changeParent);
            _classPrivateFieldInitSpec(this, _accessibilityManager, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(this, _allowClick, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _annotationLayer, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _boundPointerup, {
              writable: true,
              value: this.pointerup.bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundPointerdown, {
              writable: true,
              value: this.pointerdown.bind(this)
            });
            _classPrivateFieldInitSpec(this, _editors, {
              writable: true,
              value: new Map()
            });
            _classPrivateFieldInitSpec(this, _hadPointerDown, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _isCleaningUp, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _isDisabling, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _uiManager, {
              writable: true,
              value: void 0
            });
            if (!AnnotationEditorLayer._initialized) {
              AnnotationEditorLayer._initialized = true;
              _freetext.FreeTextEditor.initialize(options.l10n);
              _ink.InkEditor.initialize(options.l10n);
            }
            options.uiManager.registerEditorTypes([_freetext.FreeTextEditor, _ink.InkEditor]);
            _classPrivateFieldSet(this, _uiManager, options.uiManager);
            this.pageIndex = options.pageIndex;
            this.div = options.div;
            _classPrivateFieldSet(this, _accessibilityManager, options.accessibilityManager);
            _classPrivateFieldSet(this, _annotationLayer, options.annotationLayer);
            this.viewport = options.viewport;
            _classPrivateFieldGet(this, _uiManager).addLayer(this);
          }
          _createClass(AnnotationEditorLayer, [{
            key: "isEmpty",
            get: function get() {
              return _classPrivateFieldGet(this, _editors).size === 0;
            }
          }, {
            key: "updateToolbar",
            value: function updateToolbar(mode) {
              _classPrivateFieldGet(this, _uiManager).updateToolbar(mode);
            }
          }, {
            key: "updateMode",
            value: function updateMode() {
              var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _classPrivateFieldGet(this, _uiManager).getMode();
              _classPrivateMethodGet(this, _cleanup, _cleanup2).call(this);
              if (mode === _util.AnnotationEditorType.INK) {
                this.addInkEditorIfNeeded(false);
                this.disableClick();
              } else {
                this.enableClick();
              }
              _classPrivateFieldGet(this, _uiManager).unselectAll();
              if (mode !== _util.AnnotationEditorType.NONE) {
                this.div.classList.toggle("freeTextEditing", mode === _util.AnnotationEditorType.FREETEXT);
                this.div.classList.toggle("inkEditing", mode === _util.AnnotationEditorType.INK);
                this.div.hidden = false;
              }
            }
          }, {
            key: "addInkEditorIfNeeded",
            value: function addInkEditorIfNeeded(isCommitting) {
              if (!isCommitting && _classPrivateFieldGet(this, _uiManager).getMode() !== _util.AnnotationEditorType.INK) {
                return;
              }
              if (!isCommitting) {
                var _iterator83 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _editors).values()),
                  _step83;
                try {
                  for (_iterator83.s(); !(_step83 = _iterator83.n()).done;) {
                    var _editor2 = _step83.value;
                    if (_editor2.isEmpty()) {
                      _editor2.setInBackground();
                      return;
                    }
                  }
                } catch (err) {
                  _iterator83.e(err);
                } finally {
                  _iterator83.f();
                }
              }
              var editor = _classPrivateMethodGet(this, _createAndAddNewEditor, _createAndAddNewEditor2).call(this, {
                offsetX: 0,
                offsetY: 0
              });
              editor.setInBackground();
            }
          }, {
            key: "setEditingState",
            value: function setEditingState(isEditing) {
              _classPrivateFieldGet(this, _uiManager).setEditingState(isEditing);
            }
          }, {
            key: "addCommands",
            value: function addCommands(params) {
              _classPrivateFieldGet(this, _uiManager).addCommands(params);
            }
          }, {
            key: "enable",
            value: function enable() {
              this.div.style.pointerEvents = "auto";
              var annotationElementIds = new Set();
              var _iterator84 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _editors).values()),
                _step84;
              try {
                for (_iterator84.s(); !(_step84 = _iterator84.n()).done;) {
                  var editor = _step84.value;
                  editor.enableEditing();
                  if (editor.annotationElementId) {
                    annotationElementIds.add(editor.annotationElementId);
                  }
                }
              } catch (err) {
                _iterator84.e(err);
              } finally {
                _iterator84.f();
              }
              if (!_classPrivateFieldGet(this, _annotationLayer)) {
                return;
              }
              var editables = _classPrivateFieldGet(this, _annotationLayer).getEditableAnnotations();
              var _iterator85 = _createForOfIteratorHelper(editables),
                _step85;
              try {
                for (_iterator85.s(); !(_step85 = _iterator85.n()).done;) {
                  var editable = _step85.value;
                  editable.hide();
                  if (_classPrivateFieldGet(this, _uiManager).isDeletedAnnotationElement(editable.data.id)) {
                    continue;
                  }
                  if (annotationElementIds.has(editable.data.id)) {
                    continue;
                  }
                  var _editor3 = this.deserialize(editable);
                  if (!_editor3) {
                    continue;
                  }
                  this.addOrRebuild(_editor3);
                  _editor3.enableEditing();
                }
              } catch (err) {
                _iterator85.e(err);
              } finally {
                _iterator85.f();
              }
            }
          }, {
            key: "disable",
            value: function disable() {
              _classPrivateFieldSet(this, _isDisabling, true);
              this.div.style.pointerEvents = "none";
              var hiddenAnnotationIds = new Set();
              var _iterator86 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _editors).values()),
                _step86;
              try {
                for (_iterator86.s(); !(_step86 = _iterator86.n()).done;) {
                  var _this$getEditableAnno;
                  var editor = _step86.value;
                  editor.disableEditing();
                  if (!editor.annotationElementId || editor.serialize() !== null) {
                    hiddenAnnotationIds.add(editor.annotationElementId);
                    continue;
                  }
                  (_this$getEditableAnno = this.getEditableAnnotation(editor.annotationElementId)) === null || _this$getEditableAnno === void 0 ? void 0 : _this$getEditableAnno.show();
                  editor.remove();
                }
              } catch (err) {
                _iterator86.e(err);
              } finally {
                _iterator86.f();
              }
              if (_classPrivateFieldGet(this, _annotationLayer)) {
                var editables = _classPrivateFieldGet(this, _annotationLayer).getEditableAnnotations();
                var _iterator87 = _createForOfIteratorHelper(editables),
                  _step87;
                try {
                  for (_iterator87.s(); !(_step87 = _iterator87.n()).done;) {
                    var editable = _step87.value;
                    var id = editable.data.id;
                    if (hiddenAnnotationIds.has(id) || _classPrivateFieldGet(this, _uiManager).isDeletedAnnotationElement(id)) {
                      continue;
                    }
                    editable.show();
                  }
                } catch (err) {
                  _iterator87.e(err);
                } finally {
                  _iterator87.f();
                }
              }
              _classPrivateMethodGet(this, _cleanup, _cleanup2).call(this);
              if (this.isEmpty) {
                this.div.hidden = true;
              }
              _classPrivateFieldSet(this, _isDisabling, false);
            }
          }, {
            key: "getEditableAnnotation",
            value: function getEditableAnnotation(id) {
              var _classPrivateFieldGet8;
              return ((_classPrivateFieldGet8 = _classPrivateFieldGet(this, _annotationLayer)) === null || _classPrivateFieldGet8 === void 0 ? void 0 : _classPrivateFieldGet8.getEditableAnnotation(id)) || null;
            }
          }, {
            key: "setActiveEditor",
            value: function setActiveEditor(editor) {
              var currentActive = _classPrivateFieldGet(this, _uiManager).getActive();
              if (currentActive === editor) {
                return;
              }
              _classPrivateFieldGet(this, _uiManager).setActiveEditor(editor);
            }
          }, {
            key: "enableClick",
            value: function enableClick() {
              this.div.addEventListener("pointerdown", _classPrivateFieldGet(this, _boundPointerdown));
              this.div.addEventListener("pointerup", _classPrivateFieldGet(this, _boundPointerup));
            }
          }, {
            key: "disableClick",
            value: function disableClick() {
              this.div.removeEventListener("pointerdown", _classPrivateFieldGet(this, _boundPointerdown));
              this.div.removeEventListener("pointerup", _classPrivateFieldGet(this, _boundPointerup));
            }
          }, {
            key: "attach",
            value: function attach(editor) {
              _classPrivateFieldGet(this, _editors).set(editor.id, editor);
              var annotationElementId = editor.annotationElementId;
              if (annotationElementId && _classPrivateFieldGet(this, _uiManager).isDeletedAnnotationElement(annotationElementId)) {
                _classPrivateFieldGet(this, _uiManager).removeDeletedAnnotationElement(editor);
              }
            }
          }, {
            key: "detach",
            value: function detach(editor) {
              var _classPrivateFieldGet9;
              _classPrivateFieldGet(this, _editors).delete(editor.id);
              (_classPrivateFieldGet9 = _classPrivateFieldGet(this, _accessibilityManager)) === null || _classPrivateFieldGet9 === void 0 ? void 0 : _classPrivateFieldGet9.removePointerInTextLayer(editor.contentDiv);
              if (!_classPrivateFieldGet(this, _isDisabling) && editor.annotationElementId) {
                _classPrivateFieldGet(this, _uiManager).addDeletedAnnotationElement(editor);
              }
            }
          }, {
            key: "remove",
            value: function remove(editor) {
              var _this48 = this;
              this.detach(editor);
              _classPrivateFieldGet(this, _uiManager).removeEditor(editor);
              editor.div.style.display = "none";
              setTimeout(function () {
                editor.div.style.display = "";
                editor.div.remove();
                editor.isAttachedToDOM = false;
                if (document.activeElement === document.body) {
                  _classPrivateFieldGet(_this48, _uiManager).focusMainContainer();
                }
              }, 0);
              if (!_classPrivateFieldGet(this, _isCleaningUp)) {
                this.addInkEditorIfNeeded(false);
              }
            }
          }, {
            key: "add",
            value: function add(editor) {
              _classPrivateMethodGet(this, _changeParent, _changeParent2).call(this, editor);
              _classPrivateFieldGet(this, _uiManager).addEditor(editor);
              this.attach(editor);
              if (!editor.isAttachedToDOM) {
                var div = editor.render();
                this.div.append(div);
                editor.isAttachedToDOM = true;
              }
              this.moveEditorInDOM(editor);
              editor.onceAdded();
              _classPrivateFieldGet(this, _uiManager).addToAnnotationStorage(editor);
            }
          }, {
            key: "moveEditorInDOM",
            value: function moveEditorInDOM(editor) {
              var _classPrivateFieldGet10;
              (_classPrivateFieldGet10 = _classPrivateFieldGet(this, _accessibilityManager)) === null || _classPrivateFieldGet10 === void 0 ? void 0 : _classPrivateFieldGet10.moveElementInDOM(this.div, editor.div, editor.contentDiv, true);
            }
          }, {
            key: "addOrRebuild",
            value: function addOrRebuild(editor) {
              if (editor.needsToBeRebuilt()) {
                editor.rebuild();
              } else {
                this.add(editor);
              }
            }
          }, {
            key: "getNextId",
            value: function getNextId() {
              return _classPrivateFieldGet(this, _uiManager).getId();
            }
          }, {
            key: "deserialize",
            value: function deserialize(data) {
              var _data$annotationType;
              switch ((_data$annotationType = data.annotationType) !== null && _data$annotationType !== void 0 ? _data$annotationType : data.annotationEditorType) {
                case _util.AnnotationEditorType.FREETEXT:
                  return _freetext.FreeTextEditor.deserialize(data, this, _classPrivateFieldGet(this, _uiManager));
                case _util.AnnotationEditorType.INK:
                  return _ink.InkEditor.deserialize(data, this, _classPrivateFieldGet(this, _uiManager));
              }
              return null;
            }
          }, {
            key: "setSelected",
            value: function setSelected(editor) {
              _classPrivateFieldGet(this, _uiManager).setSelected(editor);
            }
          }, {
            key: "toggleSelected",
            value: function toggleSelected(editor) {
              _classPrivateFieldGet(this, _uiManager).toggleSelected(editor);
            }
          }, {
            key: "isSelected",
            value: function isSelected(editor) {
              return _classPrivateFieldGet(this, _uiManager).isSelected(editor);
            }
          }, {
            key: "unselect",
            value: function unselect(editor) {
              _classPrivateFieldGet(this, _uiManager).unselect(editor);
            }
          }, {
            key: "pointerup",
            value: function pointerup(event) {
              var isMac = _util.FeatureTest.platform.isMac;
              if (event.button !== 0 || event.ctrlKey && isMac) {
                return;
              }
              if (event.target !== this.div) {
                return;
              }
              if (!_classPrivateFieldGet(this, _hadPointerDown)) {
                return;
              }
              _classPrivateFieldSet(this, _hadPointerDown, false);
              if (!_classPrivateFieldGet(this, _allowClick)) {
                _classPrivateFieldSet(this, _allowClick, true);
                return;
              }
              _classPrivateMethodGet(this, _createAndAddNewEditor, _createAndAddNewEditor2).call(this, event);
            }
          }, {
            key: "pointerdown",
            value: function pointerdown(event) {
              var isMac = _util.FeatureTest.platform.isMac;
              if (event.button !== 0 || event.ctrlKey && isMac) {
                return;
              }
              if (event.target !== this.div) {
                return;
              }
              _classPrivateFieldSet(this, _hadPointerDown, true);
              var editor = _classPrivateFieldGet(this, _uiManager).getActive();
              _classPrivateFieldSet(this, _allowClick, !editor || editor.isEmpty());
            }
          }, {
            key: "drop",
            value: function drop(event) {
              var id = event.dataTransfer.getData("text/plain");
              var editor = _classPrivateFieldGet(this, _uiManager).getEditor(id);
              if (!editor) {
                return;
              }
              event.preventDefault();
              event.dataTransfer.dropEffect = "move";
              _classPrivateMethodGet(this, _changeParent, _changeParent2).call(this, editor);
              var rect = this.div.getBoundingClientRect();
              var endX = event.clientX - rect.x;
              var endY = event.clientY - rect.y;
              editor.translate(endX - editor.startX, endY - editor.startY);
              this.moveEditorInDOM(editor);
              editor.div.focus();
            }
          }, {
            key: "dragover",
            value: function dragover(event) {
              event.preventDefault();
            }
          }, {
            key: "destroy",
            value: function destroy() {
              var _classPrivateFieldGet11;
              if (((_classPrivateFieldGet11 = _classPrivateFieldGet(this, _uiManager).getActive()) === null || _classPrivateFieldGet11 === void 0 ? void 0 : _classPrivateFieldGet11.parent) === this) {
                _classPrivateFieldGet(this, _uiManager).setActiveEditor(null);
              }
              var _iterator88 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _editors).values()),
                _step88;
              try {
                for (_iterator88.s(); !(_step88 = _iterator88.n()).done;) {
                  var _classPrivateFieldGet12;
                  var editor = _step88.value;
                  (_classPrivateFieldGet12 = _classPrivateFieldGet(this, _accessibilityManager)) === null || _classPrivateFieldGet12 === void 0 ? void 0 : _classPrivateFieldGet12.removePointerInTextLayer(editor.contentDiv);
                  editor.setParent(null);
                  editor.isAttachedToDOM = false;
                  editor.div.remove();
                }
              } catch (err) {
                _iterator88.e(err);
              } finally {
                _iterator88.f();
              }
              this.div = null;
              _classPrivateFieldGet(this, _editors).clear();
              _classPrivateFieldGet(this, _uiManager).removeLayer(this);
            }
          }, {
            key: "render",
            value: function render(_ref63) {
              var viewport = _ref63.viewport;
              this.viewport = viewport;
              (0, _display_utils.setLayerDimensions)(this.div, viewport);
              (0, _tools.bindEvents)(this, this.div, ["dragover", "drop"]);
              var _iterator89 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _uiManager).getEditors(this.pageIndex)),
                _step89;
              try {
                for (_iterator89.s(); !(_step89 = _iterator89.n()).done;) {
                  var editor = _step89.value;
                  this.add(editor);
                }
              } catch (err) {
                _iterator89.e(err);
              } finally {
                _iterator89.f();
              }
              this.updateMode();
            }
          }, {
            key: "update",
            value: function update(_ref64) {
              var viewport = _ref64.viewport;
              _classPrivateFieldGet(this, _uiManager).commitOrRemove();
              this.viewport = viewport;
              (0, _display_utils.setLayerDimensions)(this.div, {
                rotation: viewport.rotation
              });
              this.updateMode();
            }
          }, {
            key: "pageDimensions",
            get: function get() {
              var _this$viewport$rawDim = this.viewport.rawDims,
                pageWidth = _this$viewport$rawDim.pageWidth,
                pageHeight = _this$viewport$rawDim.pageHeight;
              return [pageWidth, pageHeight];
            }
          }]);
          return AnnotationEditorLayer;
        }();
        function _changeParent2(editor) {
          var _editor$parent;
          if (editor.parent === this) {
            return;
          }
          if (editor.annotationElementId) {
            _classPrivateFieldGet(this, _uiManager).addDeletedAnnotationElement(editor.annotationElementId);
            _editor.AnnotationEditor.deleteAnnotationElement(editor);
            editor.annotationElementId = null;
          }
          this.attach(editor);
          (_editor$parent = editor.parent) === null || _editor$parent === void 0 ? void 0 : _editor$parent.detach(editor);
          editor.setParent(this);
          if (editor.div && editor.isAttachedToDOM) {
            editor.div.remove();
            this.div.append(editor.div);
          }
        }
        function _createNewEditor2(params) {
          switch (_classPrivateFieldGet(this, _uiManager).getMode()) {
            case _util.AnnotationEditorType.FREETEXT:
              return new _freetext.FreeTextEditor(params);
            case _util.AnnotationEditorType.INK:
              return new _ink.InkEditor(params);
          }
          return null;
        }
        function _createAndAddNewEditor2(event) {
          var id = this.getNextId();
          var editor = _classPrivateMethodGet(this, _createNewEditor, _createNewEditor2).call(this, {
            parent: this,
            id: id,
            x: event.offsetX,
            y: event.offsetY,
            uiManager: _classPrivateFieldGet(this, _uiManager)
          });
          if (editor) {
            this.add(editor);
          }
          return editor;
        }
        function _cleanup2() {
          _classPrivateFieldSet(this, _isCleaningUp, true);
          var _iterator90 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _editors).values()),
            _step90;
          try {
            for (_iterator90.s(); !(_step90 = _iterator90.n()).done;) {
              var editor = _step90.value;
              if (editor.isEmpty()) {
                editor.remove();
              }
            }
          } catch (err) {
            _iterator90.e(err);
          } finally {
            _iterator90.f();
          }
          _classPrivateFieldSet(this, _isCleaningUp, false);
        }
        _defineProperty(AnnotationEditorLayer, "_initialized", false);
        exports.AnnotationEditorLayer = AnnotationEditorLayer;

        /***/
      }, /* 28 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FreeTextEditor = void 0;
        var _util = __w_pdfjs_require__(1);
        var _tools = __w_pdfjs_require__(5);
        var _editor = __w_pdfjs_require__(4);
        var _annotation_layer = __w_pdfjs_require__(29);
        var _boundEditorDivBlur = /*#__PURE__*/new WeakMap();
        var _boundEditorDivFocus = /*#__PURE__*/new WeakMap();
        var _boundEditorDivInput = /*#__PURE__*/new WeakMap();
        var _boundEditorDivKeydown = /*#__PURE__*/new WeakMap();
        var _color = /*#__PURE__*/new WeakMap();
        var _content = /*#__PURE__*/new WeakMap();
        var _editorDivId = /*#__PURE__*/new WeakMap();
        var _fontSize = /*#__PURE__*/new WeakMap();
        var _initialData = /*#__PURE__*/new WeakMap();
        var _updateFontSize = /*#__PURE__*/new WeakSet();
        var _updateColor = /*#__PURE__*/new WeakSet();
        var _extractText = /*#__PURE__*/new WeakSet();
        var _setEditorDimensions = /*#__PURE__*/new WeakSet();
        var _setContent = /*#__PURE__*/new WeakSet();
        var _hasElementChanged = /*#__PURE__*/new WeakSet();
        var _cheatInitialRect = /*#__PURE__*/new WeakSet();
        var FreeTextEditor = /*#__PURE__*/function (_editor$AnnotationEdi) {
          _inherits(FreeTextEditor, _editor$AnnotationEdi);
          var _super27 = _createSuper(FreeTextEditor);
          function FreeTextEditor(params) {
            var _this49;
            _classCallCheck(this, FreeTextEditor);
            _this49 = _super27.call(this, _objectSpread(_objectSpread({}, params), {}, {
              name: "freeTextEditor"
            }));
            _classPrivateMethodInitSpec(_assertThisInitialized(_this49), _cheatInitialRect);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this49), _hasElementChanged);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this49), _setContent);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this49), _setEditorDimensions);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this49), _extractText);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this49), _updateColor);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this49), _updateFontSize);
            _classPrivateFieldInitSpec(_assertThisInitialized(_this49), _boundEditorDivBlur, {
              writable: true,
              value: _this49.editorDivBlur.bind(_assertThisInitialized(_this49))
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this49), _boundEditorDivFocus, {
              writable: true,
              value: _this49.editorDivFocus.bind(_assertThisInitialized(_this49))
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this49), _boundEditorDivInput, {
              writable: true,
              value: _this49.editorDivInput.bind(_assertThisInitialized(_this49))
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this49), _boundEditorDivKeydown, {
              writable: true,
              value: _this49.editorDivKeydown.bind(_assertThisInitialized(_this49))
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this49), _color, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this49), _content, {
              writable: true,
              value: ""
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this49), _editorDivId, {
              writable: true,
              value: "".concat(_this49.id, "-editor")
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this49), _fontSize, {
              writable: true,
              value: void 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this49), _initialData, {
              writable: true,
              value: null
            });
            _classPrivateFieldSet(_assertThisInitialized(_this49), _color, params.color || FreeTextEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor);
            _classPrivateFieldSet(_assertThisInitialized(_this49), _fontSize, params.fontSize || FreeTextEditor._defaultFontSize);
            return _this49;
          }
          _createClass(FreeTextEditor, [{
            key: "updateParams",
            value: function updateParams(type, value) {
              switch (type) {
                case _util.AnnotationEditorParamsType.FREETEXT_SIZE:
                  _classPrivateMethodGet(this, _updateFontSize, _updateFontSize2).call(this, value);
                  break;
                case _util.AnnotationEditorParamsType.FREETEXT_COLOR:
                  _classPrivateMethodGet(this, _updateColor, _updateColor2).call(this, value);
                  break;
              }
            }
          }, {
            key: "propertiesToUpdate",
            get: function get() {
              return [[_util.AnnotationEditorParamsType.FREETEXT_SIZE, _classPrivateFieldGet(this, _fontSize)], [_util.AnnotationEditorParamsType.FREETEXT_COLOR, _classPrivateFieldGet(this, _color)]];
            }
          }, {
            key: "getInitialTranslation",
            value: function getInitialTranslation() {
              var scale = this.parentScale;
              return [-FreeTextEditor._internalPadding * scale, -(FreeTextEditor._internalPadding + _classPrivateFieldGet(this, _fontSize)) * scale];
            }
          }, {
            key: "rebuild",
            value: function rebuild() {
              _get(_getPrototypeOf(FreeTextEditor.prototype), "rebuild", this).call(this);
              if (this.div === null) {
                return;
              }
              if (!this.isAttachedToDOM) {
                this.parent.add(this);
              }
            }
          }, {
            key: "enableEditMode",
            value: function enableEditMode() {
              if (this.isInEditMode()) {
                return;
              }
              this.parent.setEditingState(false);
              this.parent.updateToolbar(_util.AnnotationEditorType.FREETEXT);
              _get(_getPrototypeOf(FreeTextEditor.prototype), "enableEditMode", this).call(this);
              this.overlayDiv.classList.remove("enabled");
              this.editorDiv.contentEditable = true;
              this.div.draggable = false;
              this.div.removeAttribute("aria-activedescendant");
              this.editorDiv.addEventListener("keydown", _classPrivateFieldGet(this, _boundEditorDivKeydown));
              this.editorDiv.addEventListener("focus", _classPrivateFieldGet(this, _boundEditorDivFocus));
              this.editorDiv.addEventListener("blur", _classPrivateFieldGet(this, _boundEditorDivBlur));
              this.editorDiv.addEventListener("input", _classPrivateFieldGet(this, _boundEditorDivInput));
            }
          }, {
            key: "disableEditMode",
            value: function disableEditMode() {
              if (!this.isInEditMode()) {
                return;
              }
              this.parent.setEditingState(true);
              _get(_getPrototypeOf(FreeTextEditor.prototype), "disableEditMode", this).call(this);
              this.overlayDiv.classList.add("enabled");
              this.editorDiv.contentEditable = false;
              this.div.setAttribute("aria-activedescendant", _classPrivateFieldGet(this, _editorDivId));
              this.div.draggable = true;
              this.editorDiv.removeEventListener("keydown", _classPrivateFieldGet(this, _boundEditorDivKeydown));
              this.editorDiv.removeEventListener("focus", _classPrivateFieldGet(this, _boundEditorDivFocus));
              this.editorDiv.removeEventListener("blur", _classPrivateFieldGet(this, _boundEditorDivBlur));
              this.editorDiv.removeEventListener("input", _classPrivateFieldGet(this, _boundEditorDivInput));
              this.div.focus({
                preventScroll: true
              });
              this.isEditing = false;
              this.parent.div.classList.add("freeTextEditing");
            }
          }, {
            key: "focusin",
            value: function focusin(event) {
              _get(_getPrototypeOf(FreeTextEditor.prototype), "focusin", this).call(this, event);
              if (event.target !== this.editorDiv) {
                this.editorDiv.focus();
              }
            }
          }, {
            key: "onceAdded",
            value: function onceAdded() {
              if (this.width) {
                _classPrivateMethodGet(this, _cheatInitialRect, _cheatInitialRect2).call(this);
                return;
              }
              this.enableEditMode();
              this.editorDiv.focus();
            }
          }, {
            key: "isEmpty",
            value: function isEmpty() {
              return !this.editorDiv || this.editorDiv.innerText.trim() === "";
            }
          }, {
            key: "remove",
            value: function remove() {
              this.isEditing = false;
              this.parent.setEditingState(true);
              this.parent.div.classList.add("freeTextEditing");
              _get(_getPrototypeOf(FreeTextEditor.prototype), "remove", this).call(this);
            }
          }, {
            key: "commit",
            value: function commit() {
              var _this50 = this;
              if (!this.isInEditMode()) {
                return;
              }
              _get(_getPrototypeOf(FreeTextEditor.prototype), "commit", this).call(this);
              this.disableEditMode();
              var savedText = _classPrivateFieldGet(this, _content);
              var newText = _classPrivateFieldSet(this, _content, _classPrivateMethodGet(this, _extractText, _extractText2).call(this).trimEnd());
              if (savedText === newText) {
                return;
              }
              var setText = function setText(text) {
                _classPrivateFieldSet(_this50, _content, text);
                if (!text) {
                  _this50.remove();
                  return;
                }
                _classPrivateMethodGet(_this50, _setContent, _setContent2).call(_this50);
                _this50.rebuild();
                _classPrivateMethodGet(_this50, _setEditorDimensions, _setEditorDimensions2).call(_this50);
              };
              this.addCommands({
                cmd: function cmd() {
                  setText(newText);
                },
                undo: function undo() {
                  setText(savedText);
                },
                mustExec: false
              });
              _classPrivateMethodGet(this, _setEditorDimensions, _setEditorDimensions2).call(this);
            }
          }, {
            key: "shouldGetKeyboardEvents",
            value: function shouldGetKeyboardEvents() {
              return this.isInEditMode();
            }
          }, {
            key: "dblclick",
            value: function dblclick(event) {
              this.enableEditMode();
              this.editorDiv.focus();
            }
          }, {
            key: "keydown",
            value: function keydown(event) {
              if (event.target === this.div && event.key === "Enter") {
                this.enableEditMode();
                this.editorDiv.focus();
              }
            }
          }, {
            key: "editorDivKeydown",
            value: function editorDivKeydown(event) {
              FreeTextEditor._keyboardManager.exec(this, event);
            }
          }, {
            key: "editorDivFocus",
            value: function editorDivFocus(event) {
              this.isEditing = true;
            }
          }, {
            key: "editorDivBlur",
            value: function editorDivBlur(event) {
              this.isEditing = false;
            }
          }, {
            key: "editorDivInput",
            value: function editorDivInput(event) {
              this.parent.div.classList.toggle("freeTextEditing", this.isEmpty());
            }
          }, {
            key: "disableEditing",
            value: function disableEditing() {
              this.editorDiv.setAttribute("role", "comment");
              this.editorDiv.removeAttribute("aria-multiline");
            }
          }, {
            key: "enableEditing",
            value: function enableEditing() {
              this.editorDiv.setAttribute("role", "textbox");
              this.editorDiv.setAttribute("aria-multiline", true);
            }
          }, {
            key: "render",
            value: function render() {
              var _this51 = this;
              if (this.div) {
                return this.div;
              }
              var baseX, baseY;
              if (this.width) {
                baseX = this.x;
                baseY = this.y;
              }
              _get(_getPrototypeOf(FreeTextEditor.prototype), "render", this).call(this);
              this.editorDiv = document.createElement("div");
              this.editorDiv.className = "internal";
              this.editorDiv.setAttribute("id", _classPrivateFieldGet(this, _editorDivId));
              this.enableEditing();
              FreeTextEditor._l10nPromise.get("editor_free_text2_aria_label").then(function (msg) {
                var _this51$editorDiv;
                return (_this51$editorDiv = _this51.editorDiv) === null || _this51$editorDiv === void 0 ? void 0 : _this51$editorDiv.setAttribute("aria-label", msg);
              });
              FreeTextEditor._l10nPromise.get("free_text2_default_content").then(function (msg) {
                var _this51$editorDiv2;
                return (_this51$editorDiv2 = _this51.editorDiv) === null || _this51$editorDiv2 === void 0 ? void 0 : _this51$editorDiv2.setAttribute("default-content", msg);
              });
              this.editorDiv.contentEditable = true;
              var style = this.editorDiv.style;
              style.fontSize = "calc(".concat(_classPrivateFieldGet(this, _fontSize), "px * var(--scale-factor))");
              style.color = _classPrivateFieldGet(this, _color);
              this.div.append(this.editorDiv);
              this.overlayDiv = document.createElement("div");
              this.overlayDiv.classList.add("overlay", "enabled");
              this.div.append(this.overlayDiv);
              (0, _tools.bindEvents)(this, this.div, ["dblclick", "keydown"]);
              if (this.width) {
                var _this$parentDimension6 = _slicedToArray(this.parentDimensions, 2),
                  parentWidth = _this$parentDimension6[0],
                  parentHeight = _this$parentDimension6[1];
                if (this.annotationElementId) {
                  var _this$getInitialTrans3 = this.getInitialTranslation(),
                    _this$getInitialTrans4 = _slicedToArray(_this$getInitialTrans3, 1),
                    tx = _this$getInitialTrans4[0];
                  this.setAt(baseX * parentWidth, baseY * parentHeight, tx, tx);
                } else {
                  this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);
                }
                _classPrivateMethodGet(this, _setContent, _setContent2).call(this);
                this.div.draggable = true;
                this.editorDiv.contentEditable = false;
              } else {
                this.div.draggable = false;
                this.editorDiv.contentEditable = true;
              }
              return this.div;
            }
          }, {
            key: "contentDiv",
            get: function get() {
              return this.editorDiv;
            }
          }, {
            key: "serialize",
            value: function serialize() {
              var isForCopying = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              if (this.isEmpty()) {
                return null;
              }
              if (this.deleted) {
                return {
                  pageIndex: this.pageIndex,
                  id: this.annotationElementId,
                  deleted: true
                };
              }
              var padding = FreeTextEditor._internalPadding * this.parentScale;
              var rect = this.getRect(padding, padding);
              var color = _editor.AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : _classPrivateFieldGet(this, _color));
              var serialized = {
                annotationType: _util.AnnotationEditorType.FREETEXT,
                color: color,
                fontSize: _classPrivateFieldGet(this, _fontSize),
                value: _classPrivateFieldGet(this, _content),
                pageIndex: this.pageIndex,
                rect: rect,
                rotation: this.rotation
              };
              if (isForCopying) {
                return serialized;
              }
              if (this.annotationElementId && !_classPrivateMethodGet(this, _hasElementChanged, _hasElementChanged2).call(this, serialized)) {
                return null;
              }
              serialized.id = this.annotationElementId;
              return serialized;
            }
          }], [{
            key: "_keyboardManager",
            get: function get() {
              return (0, _util.shadow)(this, "_keyboardManager", new _tools.KeyboardManager([[["ctrl+s", "mac+meta+s", "ctrl+p", "mac+meta+p"], FreeTextEditor.prototype.commitOrRemove, true], [["ctrl+Enter", "mac+meta+Enter", "Escape", "mac+Escape"], FreeTextEditor.prototype.commitOrRemove]]));
            }
          }, {
            key: "initialize",
            value: function initialize(l10n) {
              this._l10nPromise = new Map(["free_text2_default_content", "editor_free_text2_aria_label"].map(function (str) {
                return [str, l10n.get(str)];
              }));
              var style = getComputedStyle(document.documentElement);
              this._internalPadding = parseFloat(style.getPropertyValue("--freetext-padding"));
            }
          }, {
            key: "updateDefaultParams",
            value: function updateDefaultParams(type, value) {
              switch (type) {
                case _util.AnnotationEditorParamsType.FREETEXT_SIZE:
                  FreeTextEditor._defaultFontSize = value;
                  break;
                case _util.AnnotationEditorParamsType.FREETEXT_COLOR:
                  FreeTextEditor._defaultColor = value;
                  break;
              }
            }
          }, {
            key: "defaultPropertiesToUpdate",
            get: function get() {
              return [[_util.AnnotationEditorParamsType.FREETEXT_SIZE, FreeTextEditor._defaultFontSize], [_util.AnnotationEditorParamsType.FREETEXT_COLOR, FreeTextEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor]];
            }
          }, {
            key: "deserialize",
            value: function deserialize(data, parent, uiManager) {
              var _util$Util4;
              var initialData = null;
              if (data instanceof _annotation_layer.FreeTextAnnotationElement) {
                var _data2 = data,
                  _data2$data = _data2.data,
                  _data2$data$defaultAp = _data2$data.defaultAppearanceData,
                  fontSize = _data2$data$defaultAp.fontSize,
                  fontColor = _data2$data$defaultAp.fontColor,
                  rect = _data2$data.rect,
                  rotation = _data2$data.rotation,
                  id = _data2$data.id,
                  textContent = _data2.textContent,
                  pageNumber = _data2.parent.page.pageNumber;
                if (!textContent || textContent.length === 0) {
                  return null;
                }
                initialData = data = {
                  annotationType: _util.AnnotationEditorType.FREETEXT,
                  color: Array.from(fontColor),
                  fontSize: fontSize,
                  value: textContent.join("\n"),
                  pageIndex: pageNumber - 1,
                  rect: rect,
                  rotation: rotation,
                  id: id,
                  deleted: false
                };
              }
              var editor = _get(_getPrototypeOf(FreeTextEditor), "deserialize", this).call(this, data, parent, uiManager);
              _classPrivateFieldSet(editor, _fontSize, data.fontSize);
              _classPrivateFieldSet(editor, _color, (_util$Util4 = _util.Util).makeHexColor.apply(_util$Util4, _toConsumableArray(data.color)));
              _classPrivateFieldSet(editor, _content, data.value);
              editor.annotationElementId = data.id || null;
              _classPrivateFieldSet(editor, _initialData, initialData);
              return editor;
            }
          }]);
          return FreeTextEditor;
        }(_editor.AnnotationEditor);
        function _updateFontSize2(fontSize) {
          var _this52 = this;
          var setFontsize = function setFontsize(size) {
            _this52.editorDiv.style.fontSize = "calc(".concat(size, "px * var(--scale-factor))");
            _this52.translate(0, -(size - _classPrivateFieldGet(_this52, _fontSize)) * _this52.parentScale);
            _classPrivateFieldSet(_this52, _fontSize, size);
            _classPrivateMethodGet(_this52, _setEditorDimensions, _setEditorDimensions2).call(_this52);
          };
          var savedFontsize = _classPrivateFieldGet(this, _fontSize);
          this.addCommands({
            cmd: function cmd() {
              setFontsize(fontSize);
            },
            undo: function undo() {
              setFontsize(savedFontsize);
            },
            mustExec: true,
            type: _util.AnnotationEditorParamsType.FREETEXT_SIZE,
            overwriteIfSameType: true,
            keepUndo: true
          });
        }
        function _updateColor2(color) {
          var _this53 = this;
          var savedColor = _classPrivateFieldGet(this, _color);
          this.addCommands({
            cmd: function cmd() {
              _classPrivateFieldSet(_this53, _color, _this53.editorDiv.style.color = color);
            },
            undo: function undo() {
              _classPrivateFieldSet(_this53, _color, _this53.editorDiv.style.color = savedColor);
            },
            mustExec: true,
            type: _util.AnnotationEditorParamsType.FREETEXT_COLOR,
            overwriteIfSameType: true,
            keepUndo: true
          });
        }
        function _extractText2() {
          var divs = this.editorDiv.getElementsByTagName("div");
          if (divs.length === 0) {
            return this.editorDiv.innerText;
          }
          var buffer = [];
          var _iterator91 = _createForOfIteratorHelper(divs),
            _step91;
          try {
            for (_iterator91.s(); !(_step91 = _iterator91.n()).done;) {
              var div = _step91.value;
              buffer.push(div.innerText.replace(/\r\n?|\n/, ""));
            }
          } catch (err) {
            _iterator91.e(err);
          } finally {
            _iterator91.f();
          }
          return buffer.join("\n");
        }
        function _setEditorDimensions2() {
          var _this$parentDimension7 = _slicedToArray(this.parentDimensions, 2),
            parentWidth = _this$parentDimension7[0],
            parentHeight = _this$parentDimension7[1];
          var rect;
          if (this.isAttachedToDOM) {
            rect = this.div.getBoundingClientRect();
          } else {
            var currentLayer = this.currentLayer,
              div = this.div;
            var savedDisplay = div.style.display;
            div.style.display = "hidden";
            currentLayer.div.append(this.div);
            rect = div.getBoundingClientRect();
            div.remove();
            div.style.display = savedDisplay;
          }
          this.width = rect.width / parentWidth;
          this.height = rect.height / parentHeight;
        }
        function _setContent2() {
          this.editorDiv.replaceChildren();
          if (!_classPrivateFieldGet(this, _content)) {
            return;
          }
          var _iterator92 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _content).split("\n")),
            _step92;
          try {
            for (_iterator92.s(); !(_step92 = _iterator92.n()).done;) {
              var line = _step92.value;
              var div = document.createElement("div");
              div.append(line ? document.createTextNode(line) : document.createElement("br"));
              this.editorDiv.append(div);
            }
          } catch (err) {
            _iterator92.e(err);
          } finally {
            _iterator92.f();
          }
        }
        function _hasElementChanged2(serialized) {
          var _classPrivateFieldGet13 = _classPrivateFieldGet(this, _initialData),
            value = _classPrivateFieldGet13.value,
            fontSize = _classPrivateFieldGet13.fontSize,
            color = _classPrivateFieldGet13.color,
            rect = _classPrivateFieldGet13.rect,
            pageIndex = _classPrivateFieldGet13.pageIndex;
          return serialized.value !== value || serialized.fontSize !== fontSize || serialized.rect.some(function (x, i) {
            return Math.abs(x - rect[i]) >= 1;
          }) || serialized.color.some(function (c, i) {
            return c !== color[i];
          }) || serialized.pageIndex !== pageIndex;
        }
        function _cheatInitialRect2() {
          var _this54 = this;
          var delayed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          if (!this.annotationElementId) {
            return;
          }
          _classPrivateMethodGet(this, _setEditorDimensions, _setEditorDimensions2).call(this);
          if (!delayed && (this.width === 0 || this.height === 0)) {
            setTimeout(function () {
              return _classPrivateMethodGet(_this54, _cheatInitialRect, _cheatInitialRect2).call(_this54, true);
            }, 0);
            return;
          }
          var padding = FreeTextEditor._internalPadding * this.parentScale;
          _classPrivateFieldGet(this, _initialData).rect = this.getRect(padding, padding);
        }
        _defineProperty(FreeTextEditor, "_freeTextDefaultContent", "");
        _defineProperty(FreeTextEditor, "_l10nPromise", void 0);
        _defineProperty(FreeTextEditor, "_internalPadding", 0);
        _defineProperty(FreeTextEditor, "_defaultColor", null);
        _defineProperty(FreeTextEditor, "_defaultFontSize", 10);
        _defineProperty(FreeTextEditor, "_type", "freetext");
        exports.FreeTextEditor = FreeTextEditor;

        /***/
      }, /* 29 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InkAnnotationElement = exports.FreeTextAnnotationElement = exports.AnnotationLayer = void 0;
        var _util = __w_pdfjs_require__(1);
        var _display_utils = __w_pdfjs_require__(6);
        var _annotation_storage = __w_pdfjs_require__(3);
        var _scripting_utils = __w_pdfjs_require__(30);
        var _xfa_layer = __w_pdfjs_require__(31);
        var DEFAULT_TAB_INDEX = 1000;
        var DEFAULT_FONT_SIZE = 9;
        var GetElementsByNameSet = new WeakSet();
        function getRectDims(rect) {
          return {
            width: rect[2] - rect[0],
            height: rect[3] - rect[1]
          };
        }
        var AnnotationElementFactory = /*#__PURE__*/function () {
          function AnnotationElementFactory() {
            _classCallCheck(this, AnnotationElementFactory);
          }
          _createClass(AnnotationElementFactory, null, [{
            key: "create",
            value: function create(parameters) {
              var subtype = parameters.data.annotationType;
              switch (subtype) {
                case _util.AnnotationType.LINK:
                  return new LinkAnnotationElement(parameters);
                case _util.AnnotationType.TEXT:
                  return new TextAnnotationElement(parameters);
                case _util.AnnotationType.WIDGET:
                  var fieldType = parameters.data.fieldType;
                  switch (fieldType) {
                    case "Tx":
                      return new TextWidgetAnnotationElement(parameters);
                    case "Btn":
                      if (parameters.data.radioButton) {
                        return new RadioButtonWidgetAnnotationElement(parameters);
                      } else if (parameters.data.checkBox) {
                        return new CheckboxWidgetAnnotationElement(parameters);
                      }
                      return new PushButtonWidgetAnnotationElement(parameters);
                    case "Ch":
                      return new ChoiceWidgetAnnotationElement(parameters);
                    case "Sig":
                      return new SignatureWidgetAnnotationElement(parameters);
                  }
                  return new WidgetAnnotationElement(parameters);
                case _util.AnnotationType.POPUP:
                  return new PopupAnnotationElement(parameters);
                case _util.AnnotationType.FREETEXT:
                  return new FreeTextAnnotationElement(parameters);
                case _util.AnnotationType.LINE:
                  return new LineAnnotationElement(parameters);
                case _util.AnnotationType.SQUARE:
                  return new SquareAnnotationElement(parameters);
                case _util.AnnotationType.CIRCLE:
                  return new CircleAnnotationElement(parameters);
                case _util.AnnotationType.POLYLINE:
                  return new PolylineAnnotationElement(parameters);
                case _util.AnnotationType.CARET:
                  return new CaretAnnotationElement(parameters);
                case _util.AnnotationType.INK:
                  return new InkAnnotationElement(parameters);
                case _util.AnnotationType.POLYGON:
                  return new PolygonAnnotationElement(parameters);
                case _util.AnnotationType.HIGHLIGHT:
                  return new HighlightAnnotationElement(parameters);
                case _util.AnnotationType.UNDERLINE:
                  return new UnderlineAnnotationElement(parameters);
                case _util.AnnotationType.SQUIGGLY:
                  return new SquigglyAnnotationElement(parameters);
                case _util.AnnotationType.STRIKEOUT:
                  return new StrikeOutAnnotationElement(parameters);
                case _util.AnnotationType.STAMP:
                  return new StampAnnotationElement(parameters);
                case _util.AnnotationType.FILEATTACHMENT:
                  return new FileAttachmentAnnotationElement(parameters);
                default:
                  return new AnnotationElement(parameters);
              }
            }
          }]);
          return AnnotationElementFactory;
        }();
        var AnnotationElement = /*#__PURE__*/function () {
          function AnnotationElement(parameters) {
            var _ref65 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
              _ref65$isRenderable = _ref65.isRenderable,
              isRenderable = _ref65$isRenderable === void 0 ? false : _ref65$isRenderable,
              _ref65$ignoreBorder = _ref65.ignoreBorder,
              ignoreBorder = _ref65$ignoreBorder === void 0 ? false : _ref65$ignoreBorder,
              _ref65$createQuadrila = _ref65.createQuadrilaterals,
              createQuadrilaterals = _ref65$createQuadrila === void 0 ? false : _ref65$createQuadrila;
            _classCallCheck(this, AnnotationElement);
            this.isRenderable = isRenderable;
            this.data = parameters.data;
            this.layer = parameters.layer;
            this.linkService = parameters.linkService;
            this.downloadManager = parameters.downloadManager;
            this.imageResourcesPath = parameters.imageResourcesPath;
            this.renderForms = parameters.renderForms;
            this.svgFactory = parameters.svgFactory;
            this.annotationStorage = parameters.annotationStorage;
            this.enableScripting = parameters.enableScripting;
            this.hasJSActions = parameters.hasJSActions;
            this._fieldObjects = parameters.fieldObjects;
            this.parent = parameters.parent;
            if (isRenderable) {
              this.container = this._createContainer(ignoreBorder);
            }
            if (createQuadrilaterals) {
              this.quadrilaterals = this._createQuadrilaterals(ignoreBorder);
            }
          }
          _createClass(AnnotationElement, [{
            key: "_createContainer",
            value: function _createContainer(ignoreBorder) {
              var data = this.data,
                _this$parent2 = this.parent,
                page = _this$parent2.page,
                viewport = _this$parent2.viewport;
              var container = document.createElement("section");
              container.setAttribute("data-annotation-id", data.id);
              container.style.zIndex = this.parent.zIndex++;
              if (this.data.popupRef) {
                container.setAttribute("aria-haspopup", "dialog");
              }
              if (data.noRotate) {
                container.classList.add("norotate");
              }
              var _viewport$rawDims3 = viewport.rawDims,
                pageWidth = _viewport$rawDims3.pageWidth,
                pageHeight = _viewport$rawDims3.pageHeight,
                pageX = _viewport$rawDims3.pageX,
                pageY = _viewport$rawDims3.pageY;
              if (!data.rect || this instanceof PopupAnnotationElement) {
                var _rotation = data.rotation;
                if (!data.hasOwnCanvas && _rotation !== 0) {
                  this.setRotation(_rotation, container);
                }
                return container;
              }
              var _getRectDims = getRectDims(data.rect),
                width = _getRectDims.width,
                height = _getRectDims.height;
              var rect = _util.Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);
              if (!ignoreBorder && data.borderStyle.width > 0) {
                container.style.borderWidth = "".concat(data.borderStyle.width, "px");
                var horizontalRadius = data.borderStyle.horizontalCornerRadius;
                var verticalRadius = data.borderStyle.verticalCornerRadius;
                if (horizontalRadius > 0 || verticalRadius > 0) {
                  var radius = "calc(".concat(horizontalRadius, "px * var(--scale-factor)) / calc(").concat(verticalRadius, "px * var(--scale-factor))");
                  container.style.borderRadius = radius;
                } else if (this instanceof RadioButtonWidgetAnnotationElement) {
                  var _radius = "calc(".concat(width, "px * var(--scale-factor)) / calc(").concat(height, "px * var(--scale-factor))");
                  container.style.borderRadius = _radius;
                }
                switch (data.borderStyle.style) {
                  case _util.AnnotationBorderStyleType.SOLID:
                    container.style.borderStyle = "solid";
                    break;
                  case _util.AnnotationBorderStyleType.DASHED:
                    container.style.borderStyle = "dashed";
                    break;
                  case _util.AnnotationBorderStyleType.BEVELED:
                    (0, _util.warn)("Unimplemented border style: beveled");
                    break;
                  case _util.AnnotationBorderStyleType.INSET:
                    (0, _util.warn)("Unimplemented border style: inset");
                    break;
                  case _util.AnnotationBorderStyleType.UNDERLINE:
                    container.style.borderBottomStyle = "solid";
                    break;
                  default:
                    break;
                }
                var borderColor = data.borderColor || null;
                if (borderColor) {
                  container.style.borderColor = _util.Util.makeHexColor(borderColor[0] | 0, borderColor[1] | 0, borderColor[2] | 0);
                } else {
                  container.style.borderWidth = 0;
                }
              }
              container.style.left = "".concat(100 * (rect[0] - pageX) / pageWidth, "%");
              container.style.top = "".concat(100 * (rect[1] - pageY) / pageHeight, "%");
              var rotation = data.rotation;
              if (data.hasOwnCanvas || rotation === 0) {
                container.style.width = "".concat(100 * width / pageWidth, "%");
                container.style.height = "".concat(100 * height / pageHeight, "%");
              } else {
                this.setRotation(rotation, container);
              }
              return container;
            }
          }, {
            key: "setRotation",
            value: function setRotation(angle) {
              var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.container;
              var _this$parent$viewport3 = this.parent.viewport.rawDims,
                pageWidth = _this$parent$viewport3.pageWidth,
                pageHeight = _this$parent$viewport3.pageHeight;
              var _getRectDims2 = getRectDims(this.data.rect),
                width = _getRectDims2.width,
                height = _getRectDims2.height;
              var elementWidth, elementHeight;
              if (angle % 180 === 0) {
                elementWidth = 100 * width / pageWidth;
                elementHeight = 100 * height / pageHeight;
              } else {
                elementWidth = 100 * height / pageWidth;
                elementHeight = 100 * width / pageHeight;
              }
              container.style.width = "".concat(elementWidth, "%");
              container.style.height = "".concat(elementHeight, "%");
              container.setAttribute("data-main-rotation", (360 - angle) % 360);
            }
          }, {
            key: "_commonActions",
            get: function get() {
              var _this55 = this;
              var setColor = function setColor(jsName, styleName, event) {
                var color = event.detail[jsName];
                event.target.style[styleName] = _scripting_utils.ColorConverters["".concat(color[0], "_HTML")](color.slice(1));
              };
              return (0, _util.shadow)(this, "_commonActions", {
                display: function display(event) {
                  var hidden = event.detail.display % 2 === 1;
                  _this55.container.style.visibility = hidden ? "hidden" : "visible";
                  _this55.annotationStorage.setValue(_this55.data.id, {
                    hidden: hidden,
                    print: event.detail.display === 0 || event.detail.display === 3
                  });
                },
                print: function print(event) {
                  _this55.annotationStorage.setValue(_this55.data.id, {
                    print: event.detail.print
                  });
                },
                hidden: function hidden(event) {
                  _this55.container.style.visibility = event.detail.hidden ? "hidden" : "visible";
                  _this55.annotationStorage.setValue(_this55.data.id, {
                    hidden: event.detail.hidden
                  });
                },
                focus: function focus(event) {
                  setTimeout(function () {
                    return event.target.focus({
                      preventScroll: false
                    });
                  }, 0);
                },
                userName: function userName(event) {
                  event.target.title = event.detail.userName;
                },
                readonly: function readonly(event) {
                  if (event.detail.readonly) {
                    event.target.setAttribute("readonly", "");
                  } else {
                    event.target.removeAttribute("readonly");
                  }
                },
                required: function required(event) {
                  _this55._setRequired(event.target, event.detail.required);
                },
                bgColor: function bgColor(event) {
                  setColor("bgColor", "backgroundColor", event);
                },
                fillColor: function fillColor(event) {
                  setColor("fillColor", "backgroundColor", event);
                },
                fgColor: function fgColor(event) {
                  setColor("fgColor", "color", event);
                },
                textColor: function textColor(event) {
                  setColor("textColor", "color", event);
                },
                borderColor: function borderColor(event) {
                  setColor("borderColor", "borderColor", event);
                },
                strokeColor: function strokeColor(event) {
                  setColor("strokeColor", "borderColor", event);
                },
                rotation: function rotation(event) {
                  var angle = event.detail.rotation;
                  _this55.setRotation(angle);
                  _this55.annotationStorage.setValue(_this55.data.id, {
                    rotation: angle
                  });
                }
              });
            }
          }, {
            key: "_dispatchEventFromSandbox",
            value: function _dispatchEventFromSandbox(actions, jsEvent) {
              var commonActions = this._commonActions;
              for (var _i14 = 0, _Object$keys = Object.keys(jsEvent.detail); _i14 < _Object$keys.length; _i14++) {
                var name = _Object$keys[_i14];
                var action = actions[name] || commonActions[name];
                action === null || action === void 0 ? void 0 : action(jsEvent);
              }
            }
          }, {
            key: "_setDefaultPropertiesFromJS",
            value: function _setDefaultPropertiesFromJS(element) {
              if (!this.enableScripting) {
                return;
              }
              var storedData = this.annotationStorage.getRawValue(this.data.id);
              if (!storedData) {
                return;
              }
              var commonActions = this._commonActions;
              for (var _i15 = 0, _Object$entries3 = Object.entries(storedData); _i15 < _Object$entries3.length; _i15++) {
                var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i15], 2),
                  actionName = _Object$entries3$_i[0],
                  detail = _Object$entries3$_i[1];
                var action = commonActions[actionName];
                if (action) {
                  var eventProxy = {
                    detail: _defineProperty({}, actionName, detail),
                    target: element
                  };
                  action(eventProxy);
                  delete storedData[actionName];
                }
              }
            }
          }, {
            key: "_createQuadrilaterals",
            value: function _createQuadrilaterals() {
              var ignoreBorder = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
              if (!this.data.quadPoints) {
                return null;
              }
              var quadrilaterals = [];
              var savedRect = this.data.rect;
              var firstQuadRect = null;
              var _iterator93 = _createForOfIteratorHelper(this.data.quadPoints),
                _step93;
              try {
                for (_iterator93.s(); !(_step93 = _iterator93.n()).done;) {
                  var quadPoint = _step93.value;
                  this.data.rect = [quadPoint[2].x, quadPoint[2].y, quadPoint[1].x, quadPoint[1].y];
                  quadrilaterals.push(this._createContainer(ignoreBorder));
                  firstQuadRect || (firstQuadRect = this.data.rect);
                }
              } catch (err) {
                _iterator93.e(err);
              } finally {
                _iterator93.f();
              }
              this.data.rect = savedRect;
              this.firstQuadRect = firstQuadRect;
              return quadrilaterals;
            }
          }, {
            key: "_createPopup",
            value: function _createPopup() {
              var container = this.container,
                data = this.data;
              container.setAttribute("aria-haspopup", "dialog");
              var popup = new PopupAnnotationElement({
                data: {
                  color: data.color,
                  titleObj: data.titleObj,
                  modificationDate: data.modificationDate,
                  contentsObj: data.contentsObj,
                  richText: data.richText,
                  parentRect: this.firstQuadRect || data.rect,
                  borderStyle: 0,
                  id: "popup_".concat(data.id),
                  rotation: data.rotation
                },
                parent: this.parent,
                elements: [this]
              });
              this.parent.div.append(popup.render());
            }
          }, {
            key: "_renderQuadrilaterals",
            value: function _renderQuadrilaterals(className) {
              var _iterator94 = _createForOfIteratorHelper(this.quadrilaterals),
                _step94;
              try {
                for (_iterator94.s(); !(_step94 = _iterator94.n()).done;) {
                  var quadrilateral = _step94.value;
                  quadrilateral.classList.add(className);
                }
              } catch (err) {
                _iterator94.e(err);
              } finally {
                _iterator94.f();
              }
              return this.quadrilaterals;
            }
          }, {
            key: "render",
            value: function render() {
              (0, _util.unreachable)("Abstract method `AnnotationElement.render` called");
            }
          }, {
            key: "_getElementsByName",
            value: function _getElementsByName(name) {
              var skipId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              var fields = [];
              if (this._fieldObjects) {
                var fieldObj = this._fieldObjects[name];
                if (fieldObj) {
                  var _iterator95 = _createForOfIteratorHelper(fieldObj),
                    _step95;
                  try {
                    for (_iterator95.s(); !(_step95 = _iterator95.n()).done;) {
                      var _step95$value = _step95.value,
                        page = _step95$value.page,
                        id = _step95$value.id,
                        exportValues = _step95$value.exportValues;
                      if (page === -1) {
                        continue;
                      }
                      if (id === skipId) {
                        continue;
                      }
                      var exportValue = typeof exportValues === "string" ? exportValues : null;
                      var domElement = document.querySelector("[data-element-id=\"".concat(id, "\"]"));
                      if (domElement && !GetElementsByNameSet.has(domElement)) {
                        (0, _util.warn)("_getElementsByName - element not allowed: ".concat(id));
                        continue;
                      }
                      fields.push({
                        id: id,
                        exportValue: exportValue,
                        domElement: domElement
                      });
                    }
                  } catch (err) {
                    _iterator95.e(err);
                  } finally {
                    _iterator95.f();
                  }
                }
                return fields;
              }
              var _iterator96 = _createForOfIteratorHelper(document.getElementsByName(name)),
                _step96;
              try {
                for (_iterator96.s(); !(_step96 = _iterator96.n()).done;) {
                  var _domElement = _step96.value;
                  var _exportValue = _domElement.exportValue;
                  var _id6 = _domElement.getAttribute("data-element-id");
                  if (_id6 === skipId) {
                    continue;
                  }
                  if (!GetElementsByNameSet.has(_domElement)) {
                    continue;
                  }
                  fields.push({
                    id: _id6,
                    exportValue: _exportValue,
                    domElement: _domElement
                  });
                }
              } catch (err) {
                _iterator96.e(err);
              } finally {
                _iterator96.f();
              }
              return fields;
            }
          }, {
            key: "show",
            value: function show() {
              var _this$popup;
              if (this.container) {
                this.container.hidden = false;
              }
              (_this$popup = this.popup) === null || _this$popup === void 0 ? void 0 : _this$popup.maybeShow();
            }
          }, {
            key: "hide",
            value: function hide() {
              var _this$popup2;
              if (this.container) {
                this.container.hidden = true;
              }
              (_this$popup2 = this.popup) === null || _this$popup2 === void 0 ? void 0 : _this$popup2.forceHide();
            }
          }, {
            key: "getElementsToTriggerPopup",
            value: function getElementsToTriggerPopup() {
              return this.quadrilaterals || this.container;
            }
          }, {
            key: "addHighlightArea",
            value: function addHighlightArea() {
              var triggers = this.getElementsToTriggerPopup();
              if (Array.isArray(triggers)) {
                var _iterator97 = _createForOfIteratorHelper(triggers),
                  _step97;
                try {
                  for (_iterator97.s(); !(_step97 = _iterator97.n()).done;) {
                    var element = _step97.value;
                    element.classList.add("highlightArea");
                  }
                } catch (err) {
                  _iterator97.e(err);
                } finally {
                  _iterator97.f();
                }
              } else {
                triggers.classList.add("highlightArea");
              }
            }
          }]);
          return AnnotationElement;
        }();
        var _setInternalLink = /*#__PURE__*/new WeakSet();
        var _bindSetOCGState = /*#__PURE__*/new WeakSet();
        var LinkAnnotationElement = /*#__PURE__*/function (_AnnotationElement) {
          _inherits(LinkAnnotationElement, _AnnotationElement);
          var _super28 = _createSuper(LinkAnnotationElement);
          function LinkAnnotationElement(parameters) {
            var _this56;
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
            _classCallCheck(this, LinkAnnotationElement);
            _this56 = _super28.call(this, parameters, {
              isRenderable: true,
              ignoreBorder: !!(options !== null && options !== void 0 && options.ignoreBorder),
              createQuadrilaterals: true
            });
            _classPrivateMethodInitSpec(_assertThisInitialized(_this56), _bindSetOCGState);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this56), _setInternalLink);
            _this56.isTooltipOnly = parameters.data.isTooltipOnly;
            return _this56;
          }
          _createClass(LinkAnnotationElement, [{
            key: "render",
            value: function render() {
              var data = this.data,
                linkService = this.linkService;
              var link = document.createElement("a");
              link.setAttribute("data-element-id", data.id);
              var isBound = false;
              if (data.url) {
                linkService.addLinkAttributes(link, data.url, data.newWindow);
                isBound = true;
              } else if (data.action) {
                this._bindNamedAction(link, data.action);
                isBound = true;
              } else if (data.attachment) {
                this._bindAttachment(link, data.attachment);
                isBound = true;
              } else if (data.setOCGState) {
                _classPrivateMethodGet(this, _bindSetOCGState, _bindSetOCGState2).call(this, link, data.setOCGState);
                isBound = true;
              } else if (data.dest) {
                this._bindLink(link, data.dest);
                isBound = true;
              } else {
                if (data.actions && (data.actions.Action || data.actions["Mouse Up"] || data.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions) {
                  this._bindJSAction(link, data);
                  isBound = true;
                }
                if (data.resetForm) {
                  this._bindResetFormAction(link, data.resetForm);
                  isBound = true;
                } else if (this.isTooltipOnly && !isBound) {
                  this._bindLink(link, "");
                  isBound = true;
                }
              }
              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("linkAnnotation").map(function (quadrilateral, index) {
                  var linkElement = index === 0 ? link : link.cloneNode();
                  quadrilateral.append(linkElement);
                  return quadrilateral;
                });
              }
              this.container.classList.add("linkAnnotation");
              if (isBound) {
                this.container.append(link);
              }
              return this.container;
            }
          }, {
            key: "_bindLink",
            value: function _bindLink(link, destination) {
              var _this57 = this;
              link.href = this.linkService.getDestinationHash(destination);
              link.onclick = function () {
                if (destination) {
                  _this57.linkService.goToDestination(destination);
                }
                return false;
              };
              if (destination || destination === "") {
                _classPrivateMethodGet(this, _setInternalLink, _setInternalLink2).call(this);
              }
            }
          }, {
            key: "_bindNamedAction",
            value: function _bindNamedAction(link, action) {
              var _this58 = this;
              link.href = this.linkService.getAnchorUrl("");
              link.onclick = function () {
                _this58.linkService.executeNamedAction(action);
                return false;
              };
              _classPrivateMethodGet(this, _setInternalLink, _setInternalLink2).call(this);
            }
          }, {
            key: "_bindAttachment",
            value: function _bindAttachment(link, attachment) {
              var _this59 = this;
              link.href = this.linkService.getAnchorUrl("");
              link.onclick = function () {
                var _this59$downloadManag;
                (_this59$downloadManag = _this59.downloadManager) === null || _this59$downloadManag === void 0 ? void 0 : _this59$downloadManag.openOrDownloadData(_this59.container, attachment.content, attachment.filename);
                return false;
              };
              _classPrivateMethodGet(this, _setInternalLink, _setInternalLink2).call(this);
            }
          }, {
            key: "_bindJSAction",
            value: function _bindJSAction(link, data) {
              var _this60 = this;
              link.href = this.linkService.getAnchorUrl("");
              var map = new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);
              var _loop = function _loop() {
                var name = _Object$keys2[_i16];
                var jsName = map.get(name);
                if (!jsName) {
                  return "continue";
                }
                link[jsName] = function () {
                  var _this60$linkService$e;
                  (_this60$linkService$e = _this60.linkService.eventBus) === null || _this60$linkService$e === void 0 ? void 0 : _this60$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this60,
                    detail: {
                      id: data.id,
                      name: name
                    }
                  });
                  return false;
                };
              };
              for (var _i16 = 0, _Object$keys2 = Object.keys(data.actions); _i16 < _Object$keys2.length; _i16++) {
                var _ret = _loop();
                if (_ret === "continue") continue;
              }
              if (!link.onclick) {
                link.onclick = function () {
                  return false;
                };
              }
              _classPrivateMethodGet(this, _setInternalLink, _setInternalLink2).call(this);
            }
          }, {
            key: "_bindResetFormAction",
            value: function _bindResetFormAction(link, resetForm) {
              var _this61 = this;
              var otherClickAction = link.onclick;
              if (!otherClickAction) {
                link.href = this.linkService.getAnchorUrl("");
              }
              _classPrivateMethodGet(this, _setInternalLink, _setInternalLink2).call(this);
              if (!this._fieldObjects) {
                (0, _util.warn)("_bindResetFormAction - \"resetForm\" action not supported, " + "ensure that the `fieldObjects` parameter is provided.");
                if (!otherClickAction) {
                  link.onclick = function () {
                    return false;
                  };
                }
                return;
              }
              link.onclick = function () {
                otherClickAction === null || otherClickAction === void 0 ? void 0 : otherClickAction();
                var resetFormFields = resetForm.fields,
                  resetFormRefs = resetForm.refs,
                  include = resetForm.include;
                var allFields = [];
                if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {
                  var fieldIds = new Set(resetFormRefs);
                  var _iterator98 = _createForOfIteratorHelper(resetFormFields),
                    _step98;
                  try {
                    for (_iterator98.s(); !(_step98 = _iterator98.n()).done;) {
                      var fieldName = _step98.value;
                      var _fields = _this61._fieldObjects[fieldName] || [];
                      var _iterator100 = _createForOfIteratorHelper(_fields),
                        _step100;
                      try {
                        for (_iterator100.s(); !(_step100 = _iterator100.n()).done;) {
                          var id = _step100.value.id;
                          fieldIds.add(id);
                        }
                      } catch (err) {
                        _iterator100.e(err);
                      } finally {
                        _iterator100.f();
                      }
                    }
                  } catch (err) {
                    _iterator98.e(err);
                  } finally {
                    _iterator98.f();
                  }
                  for (var _i17 = 0, _Object$values = Object.values(_this61._fieldObjects); _i17 < _Object$values.length; _i17++) {
                    var fields = _Object$values[_i17];
                    var _iterator99 = _createForOfIteratorHelper(fields),
                      _step99;
                    try {
                      for (_iterator99.s(); !(_step99 = _iterator99.n()).done;) {
                        var field = _step99.value;
                        if (fieldIds.has(field.id) === include) {
                          allFields.push(field);
                        }
                      }
                    } catch (err) {
                      _iterator99.e(err);
                    } finally {
                      _iterator99.f();
                    }
                  }
                } else {
                  for (var _i18 = 0, _Object$values2 = Object.values(_this61._fieldObjects); _i18 < _Object$values2.length; _i18++) {
                    var _fields2 = _Object$values2[_i18];
                    allFields.push.apply(allFields, _toConsumableArray(_fields2));
                  }
                }
                var storage = _this61.annotationStorage;
                var allIds = [];
                for (var _i19 = 0, _allFields = allFields; _i19 < _allFields.length; _i19++) {
                  var _field = _allFields[_i19];
                  var _id7 = _field.id;
                  allIds.push(_id7);
                  switch (_field.type) {
                    case "text":
                      {
                        var value = _field.defaultValue || "";
                        storage.setValue(_id7, {
                          value: value
                        });
                        break;
                      }
                    case "checkbox":
                    case "radiobutton":
                      {
                        var _value = _field.defaultValue === _field.exportValues;
                        storage.setValue(_id7, {
                          value: _value
                        });
                        break;
                      }
                    case "combobox":
                    case "listbox":
                      {
                        var _value2 = _field.defaultValue || "";
                        storage.setValue(_id7, {
                          value: _value2
                        });
                        break;
                      }
                    default:
                      continue;
                  }
                  var domElement = document.querySelector("[data-element-id=\"".concat(_id7, "\"]"));
                  if (!domElement) {
                    continue;
                  } else if (!GetElementsByNameSet.has(domElement)) {
                    (0, _util.warn)("_bindResetFormAction - element not allowed: ".concat(_id7));
                    continue;
                  }
                  domElement.dispatchEvent(new Event("resetform"));
                }
                if (_this61.enableScripting) {
                  var _this61$linkService$e;
                  (_this61$linkService$e = _this61.linkService.eventBus) === null || _this61$linkService$e === void 0 ? void 0 : _this61$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this61,
                    detail: {
                      id: "app",
                      ids: allIds,
                      name: "ResetForm"
                    }
                  });
                }
                return false;
              };
            }
          }]);
          return LinkAnnotationElement;
        }(AnnotationElement);
        function _setInternalLink2() {
          this.container.setAttribute("data-internal-link", "");
        }
        function _bindSetOCGState2(link, action) {
          var _this77 = this;
          link.href = this.linkService.getAnchorUrl("");
          link.onclick = function () {
            _this77.linkService.executeSetOCGState(action);
            return false;
          };
          _classPrivateMethodGet(this, _setInternalLink, _setInternalLink2).call(this);
        }
        var TextAnnotationElement = /*#__PURE__*/function (_AnnotationElement2) {
          _inherits(TextAnnotationElement, _AnnotationElement2);
          var _super29 = _createSuper(TextAnnotationElement);
          function TextAnnotationElement(parameters) {
            var _parameters$data$titl, _parameters$data$cont, _parameters$data$rich;
            _classCallCheck(this, TextAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl = parameters.data.titleObj) !== null && _parameters$data$titl !== void 0 && _parameters$data$titl.str || (_parameters$data$cont = parameters.data.contentsObj) !== null && _parameters$data$cont !== void 0 && _parameters$data$cont.str || (_parameters$data$rich = parameters.data.richText) !== null && _parameters$data$rich !== void 0 && _parameters$data$rich.str);
            return _super29.call(this, parameters, {
              isRenderable: isRenderable
            });
          }
          _createClass(TextAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add("textAnnotation");
              var image = document.createElement("img");
              image.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg";
              image.alt = "[{{type}} Annotation]";
              image.dataset.l10nId = "text_annotation_type";
              image.dataset.l10nArgs = JSON.stringify({
                type: this.data.name
              });
              if (!this.data.popupRef) {
                this._createPopup();
              }
              this.container.append(image);
              return this.container;
            }
          }]);
          return TextAnnotationElement;
        }(AnnotationElement);
        var WidgetAnnotationElement = /*#__PURE__*/function (_AnnotationElement3) {
          _inherits(WidgetAnnotationElement, _AnnotationElement3);
          var _super30 = _createSuper(WidgetAnnotationElement);
          function WidgetAnnotationElement() {
            _classCallCheck(this, WidgetAnnotationElement);
            return _super30.apply(this, arguments);
          }
          _createClass(WidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              if (this.data.alternativeText) {
                this.container.title = this.data.alternativeText;
              }
              return this.container;
            }
          }, {
            key: "showElementAndHideCanvas",
            value: function showElementAndHideCanvas(element) {
              if (this.data.hasOwnCanvas) {
                var _element$previousSibl;
                if (((_element$previousSibl = element.previousSibling) === null || _element$previousSibl === void 0 ? void 0 : _element$previousSibl.nodeName) === "CANVAS") {
                  element.previousSibling.hidden = true;
                }
                element.hidden = false;
              }
            }
          }, {
            key: "_getKeyModifier",
            value: function _getKeyModifier(event) {
              var _util$FeatureTest$pla = _util.FeatureTest.platform,
                isWin = _util$FeatureTest$pla.isWin,
                isMac = _util$FeatureTest$pla.isMac;
              return isWin && event.ctrlKey || isMac && event.metaKey;
            }
          }, {
            key: "_setEventListener",
            value: function _setEventListener(element, baseName, eventName, valueGetter) {
              var _this62 = this;
              if (baseName.includes("mouse")) {
                element.addEventListener(baseName, function (event) {
                  var _this62$linkService$e;
                  (_this62$linkService$e = _this62.linkService.eventBus) === null || _this62$linkService$e === void 0 ? void 0 : _this62$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this62,
                    detail: {
                      id: _this62.data.id,
                      name: eventName,
                      value: valueGetter(event),
                      shift: event.shiftKey,
                      modifier: _this62._getKeyModifier(event)
                    }
                  });
                });
              } else {
                element.addEventListener(baseName, function (event) {
                  var _this62$linkService$e2;
                  (_this62$linkService$e2 = _this62.linkService.eventBus) === null || _this62$linkService$e2 === void 0 ? void 0 : _this62$linkService$e2.dispatch("dispatcheventinsandbox", {
                    source: _this62,
                    detail: {
                      id: _this62.data.id,
                      name: eventName,
                      value: valueGetter(event)
                    }
                  });
                });
              }
            }
          }, {
            key: "_setEventListeners",
            value: function _setEventListeners(element, names, getter) {
              var _iterator101 = _createForOfIteratorHelper(names),
                _step101;
              try {
                for (_iterator101.s(); !(_step101 = _iterator101.n()).done;) {
                  var _this$data$actions;
                  var _step101$value = _slicedToArray(_step101.value, 2),
                    baseName = _step101$value[0],
                    eventName = _step101$value[1];
                  if (eventName === "Action" || (_this$data$actions = this.data.actions) !== null && _this$data$actions !== void 0 && _this$data$actions[eventName]) {
                    this._setEventListener(element, baseName, eventName, getter);
                  }
                }
              } catch (err) {
                _iterator101.e(err);
              } finally {
                _iterator101.f();
              }
            }
          }, {
            key: "_setBackgroundColor",
            value: function _setBackgroundColor(element) {
              var color = this.data.backgroundColor || null;
              element.style.backgroundColor = color === null ? "transparent" : _util.Util.makeHexColor(color[0], color[1], color[2]);
            }
          }, {
            key: "_setTextStyle",
            value: function _setTextStyle(element) {
              var TEXT_ALIGNMENT = ["left", "center", "right"];
              var fontColor = this.data.defaultAppearanceData.fontColor;
              var fontSize = this.data.defaultAppearanceData.fontSize || DEFAULT_FONT_SIZE;
              var style = element.style;
              var computedFontSize;
              var BORDER_SIZE = 2;
              var roundToOneDecimal = function roundToOneDecimal(x) {
                return Math.round(10 * x) / 10;
              };
              if (this.data.multiLine) {
                var height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);
                var numberOfLines = Math.round(height / (_util.LINE_FACTOR * fontSize)) || 1;
                var lineHeight = height / numberOfLines;
                computedFontSize = Math.min(fontSize, roundToOneDecimal(lineHeight / _util.LINE_FACTOR));
              } else {
                var _height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);
                computedFontSize = Math.min(fontSize, roundToOneDecimal(_height / _util.LINE_FACTOR));
              }
              style.fontSize = "calc(".concat(computedFontSize, "px * var(--scale-factor))");
              style.color = _util.Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);
              if (this.data.textAlignment !== null) {
                style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];
              }
            }
          }, {
            key: "_setRequired",
            value: function _setRequired(element, isRequired) {
              if (isRequired) {
                element.setAttribute("required", true);
              } else {
                element.removeAttribute("required");
              }
              element.setAttribute("aria-required", isRequired);
            }
          }]);
          return WidgetAnnotationElement;
        }(AnnotationElement);
        var TextWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem) {
          _inherits(TextWidgetAnnotationElement, _WidgetAnnotationElem);
          var _super31 = _createSuper(TextWidgetAnnotationElement);
          function TextWidgetAnnotationElement(parameters) {
            _classCallCheck(this, TextWidgetAnnotationElement);
            var isRenderable = parameters.renderForms || !parameters.data.hasAppearance && !!parameters.data.fieldValue;
            return _super31.call(this, parameters, {
              isRenderable: isRenderable
            });
          }
          _createClass(TextWidgetAnnotationElement, [{
            key: "setPropertyOnSiblings",
            value: function setPropertyOnSiblings(base, key, value, keyInStorage) {
              var storage = this.annotationStorage;
              var _iterator102 = _createForOfIteratorHelper(this._getElementsByName(base.name, base.id)),
                _step102;
              try {
                for (_iterator102.s(); !(_step102 = _iterator102.n()).done;) {
                  var element = _step102.value;
                  if (element.domElement) {
                    element.domElement[key] = value;
                  }
                  storage.setValue(element.id, _defineProperty({}, keyInStorage, value));
                }
              } catch (err) {
                _iterator102.e(err);
              } finally {
                _iterator102.f();
              }
            }
          }, {
            key: "render",
            value: function render() {
              var _this63 = this;
              var storage = this.annotationStorage;
              var id = this.data.id;
              this.container.classList.add("textWidgetAnnotation");
              var element = null;
              if (this.renderForms) {
                var _this$data$textConten;
                var storedData = storage.getValue(id, {
                  value: this.data.fieldValue
                });
                var textContent = storedData.value || "";
                var maxLen = storage.getValue(id, {
                  charLimit: this.data.maxLen
                }).charLimit;
                if (maxLen && textContent.length > maxLen) {
                  textContent = textContent.slice(0, maxLen);
                }
                var fieldFormattedValues = storedData.formattedValue || ((_this$data$textConten = this.data.textContent) === null || _this$data$textConten === void 0 ? void 0 : _this$data$textConten.join("\n")) || null;
                if (fieldFormattedValues && this.data.comb) {
                  fieldFormattedValues = fieldFormattedValues.replaceAll(/\s+/g, "");
                }
                var elementData = {
                  userValue: textContent,
                  formattedValue: fieldFormattedValues,
                  lastCommittedValue: null,
                  commitKey: 1
                };
                if (this.data.multiLine) {
                  var _fieldFormattedValues;
                  element = document.createElement("textarea");
                  element.textContent = (_fieldFormattedValues = fieldFormattedValues) !== null && _fieldFormattedValues !== void 0 ? _fieldFormattedValues : textContent;
                  if (this.data.doNotScroll) {
                    element.style.overflowY = "hidden";
                  }
                } else {
                  var _fieldFormattedValues2;
                  element = document.createElement("input");
                  element.type = "text";
                  element.setAttribute("value", (_fieldFormattedValues2 = fieldFormattedValues) !== null && _fieldFormattedValues2 !== void 0 ? _fieldFormattedValues2 : textContent);
                  if (this.data.doNotScroll) {
                    element.style.overflowX = "hidden";
                  }
                }
                if (this.data.hasOwnCanvas) {
                  element.hidden = true;
                }
                GetElementsByNameSet.add(element);
                element.setAttribute("data-element-id", id);
                element.disabled = this.data.readOnly;
                element.name = this.data.baseFieldName || this.data.fieldName;
                element.tabIndex = DEFAULT_TAB_INDEX;
                this._setRequired(element, this.data.required);
                if (maxLen) {
                  element.maxLength = maxLen;
                }
                element.addEventListener("input", function (event) {
                  storage.setValue(id, {
                    value: event.target.value
                  });
                  _this63.setPropertyOnSiblings(element, "value", event.target.value, "value");
                  elementData.formattedValue = null;
                });
                element.addEventListener("resetform", function (event) {
                  var _this63$data$defaultF;
                  var defaultValue = (_this63$data$defaultF = _this63.data.defaultFieldValue) !== null && _this63$data$defaultF !== void 0 ? _this63$data$defaultF : "";
                  element.value = elementData.userValue = defaultValue;
                  elementData.formattedValue = null;
                });
                var blurListener = function blurListener(event) {
                  var formattedValue = elementData.formattedValue;
                  if (formattedValue !== null && formattedValue !== undefined) {
                    event.target.value = formattedValue;
                  }
                  event.target.scrollLeft = 0;
                };
                if (this.enableScripting && this.hasJSActions) {
                  var _this$data$actions2;
                  element.addEventListener("focus", function (event) {
                    var target = event.target;
                    if (elementData.userValue) {
                      target.value = elementData.userValue;
                    }
                    elementData.lastCommittedValue = target.value;
                    elementData.commitKey = 1;
                  });
                  element.addEventListener("updatefromsandbox", function (jsEvent) {
                    _this63.showElementAndHideCanvas(jsEvent.target);
                    var actions = {
                      value: function value(event) {
                        var _event$detail$value;
                        elementData.userValue = (_event$detail$value = event.detail.value) !== null && _event$detail$value !== void 0 ? _event$detail$value : "";
                        storage.setValue(id, {
                          value: elementData.userValue.toString()
                        });
                        event.target.value = elementData.userValue;
                      },
                      formattedValue: function formattedValue(event) {
                        var formattedValue = event.detail.formattedValue;
                        elementData.formattedValue = formattedValue;
                        if (formattedValue !== null && formattedValue !== undefined && event.target !== document.activeElement) {
                          event.target.value = formattedValue;
                        }
                        storage.setValue(id, {
                          formattedValue: formattedValue
                        });
                      },
                      selRange: function selRange(event) {
                        var _event$target;
                        (_event$target = event.target).setSelectionRange.apply(_event$target, _toConsumableArray(event.detail.selRange));
                      },
                      charLimit: function charLimit(event) {
                        var _this63$linkService$e;
                        var charLimit = event.detail.charLimit;
                        var target = event.target;
                        if (charLimit === 0) {
                          target.removeAttribute("maxLength");
                          return;
                        }
                        target.setAttribute("maxLength", charLimit);
                        var value = elementData.userValue;
                        if (!value || value.length <= charLimit) {
                          return;
                        }
                        value = value.slice(0, charLimit);
                        target.value = elementData.userValue = value;
                        storage.setValue(id, {
                          value: value
                        });
                        (_this63$linkService$e = _this63.linkService.eventBus) === null || _this63$linkService$e === void 0 ? void 0 : _this63$linkService$e.dispatch("dispatcheventinsandbox", {
                          source: _this63,
                          detail: {
                            id: id,
                            name: "Keystroke",
                            value: value,
                            willCommit: true,
                            commitKey: 1,
                            selStart: target.selectionStart,
                            selEnd: target.selectionEnd
                          }
                        });
                      }
                    };
                    _this63._dispatchEventFromSandbox(actions, jsEvent);
                  });
                  element.addEventListener("keydown", function (event) {
                    var _this63$linkService$e2;
                    elementData.commitKey = 1;
                    var commitKey = -1;
                    if (event.key === "Escape") {
                      commitKey = 0;
                    } else if (event.key === "Enter" && !_this63.data.multiLine) {
                      commitKey = 2;
                    } else if (event.key === "Tab") {
                      elementData.commitKey = 3;
                    }
                    if (commitKey === -1) {
                      return;
                    }
                    var value = event.target.value;
                    if (elementData.lastCommittedValue === value) {
                      return;
                    }
                    elementData.lastCommittedValue = value;
                    elementData.userValue = value;
                    (_this63$linkService$e2 = _this63.linkService.eventBus) === null || _this63$linkService$e2 === void 0 ? void 0 : _this63$linkService$e2.dispatch("dispatcheventinsandbox", {
                      source: _this63,
                      detail: {
                        id: id,
                        name: "Keystroke",
                        value: value,
                        willCommit: true,
                        commitKey: commitKey,
                        selStart: event.target.selectionStart,
                        selEnd: event.target.selectionEnd
                      }
                    });
                  });
                  var _blurListener = blurListener;
                  blurListener = null;
                  element.addEventListener("blur", function (event) {
                    if (!event.relatedTarget) {
                      return;
                    }
                    var value = event.target.value;
                    elementData.userValue = value;
                    if (elementData.lastCommittedValue !== value) {
                      var _this63$linkService$e3;
                      (_this63$linkService$e3 = _this63.linkService.eventBus) === null || _this63$linkService$e3 === void 0 ? void 0 : _this63$linkService$e3.dispatch("dispatcheventinsandbox", {
                        source: _this63,
                        detail: {
                          id: id,
                          name: "Keystroke",
                          value: value,
                          willCommit: true,
                          commitKey: elementData.commitKey,
                          selStart: event.target.selectionStart,
                          selEnd: event.target.selectionEnd
                        }
                      });
                    }
                    _blurListener(event);
                  });
                  if ((_this$data$actions2 = this.data.actions) !== null && _this$data$actions2 !== void 0 && _this$data$actions2.Keystroke) {
                    element.addEventListener("beforeinput", function (event) {
                      var _this63$linkService$e4;
                      elementData.lastCommittedValue = null;
                      var data = event.data,
                        target = event.target;
                      var value = target.value,
                        selectionStart = target.selectionStart,
                        selectionEnd = target.selectionEnd;
                      var selStart = selectionStart,
                        selEnd = selectionEnd;
                      switch (event.inputType) {
                        case "deleteWordBackward":
                          {
                            var match = value.substring(0, selectionStart).match(/\w*[^\w]*$/);
                            if (match) {
                              selStart -= match[0].length;
                            }
                            break;
                          }
                        case "deleteWordForward":
                          {
                            var _match3 = value.substring(selectionStart).match(/^[^\w]*\w*/);
                            if (_match3) {
                              selEnd += _match3[0].length;
                            }
                            break;
                          }
                        case "deleteContentBackward":
                          if (selectionStart === selectionEnd) {
                            selStart -= 1;
                          }
                          break;
                        case "deleteContentForward":
                          if (selectionStart === selectionEnd) {
                            selEnd += 1;
                          }
                          break;
                      }
                      event.preventDefault();
                      (_this63$linkService$e4 = _this63.linkService.eventBus) === null || _this63$linkService$e4 === void 0 ? void 0 : _this63$linkService$e4.dispatch("dispatcheventinsandbox", {
                        source: _this63,
                        detail: {
                          id: id,
                          name: "Keystroke",
                          value: value,
                          change: data || "",
                          willCommit: false,
                          selStart: selStart,
                          selEnd: selEnd
                        }
                      });
                    });
                  }
                  this._setEventListeners(element, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function (event) {
                    return event.target.value;
                  });
                }
                if (blurListener) {
                  element.addEventListener("blur", blurListener);
                }
                if (this.data.comb) {
                  var fieldWidth = this.data.rect[2] - this.data.rect[0];
                  var combWidth = fieldWidth / maxLen;
                  element.classList.add("comb");
                  element.style.letterSpacing = "calc(".concat(combWidth, "px * var(--scale-factor) - 1ch)");
                }
              } else {
                element = document.createElement("div");
                element.textContent = this.data.fieldValue;
                element.style.verticalAlign = "middle";
                element.style.display = "table-cell";
              }
              this._setTextStyle(element);
              this._setBackgroundColor(element);
              this._setDefaultPropertiesFromJS(element);
              this.container.append(element);
              return this.container;
            }
          }]);
          return TextWidgetAnnotationElement;
        }(WidgetAnnotationElement);
        var SignatureWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem2) {
          _inherits(SignatureWidgetAnnotationElement, _WidgetAnnotationElem2);
          var _super32 = _createSuper(SignatureWidgetAnnotationElement);
          function SignatureWidgetAnnotationElement(parameters) {
            _classCallCheck(this, SignatureWidgetAnnotationElement);
            return _super32.call(this, parameters, {
              isRenderable: !!parameters.data.hasOwnCanvas
            });
          }
          return _createClass(SignatureWidgetAnnotationElement);
        }(WidgetAnnotationElement);
        var CheckboxWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem3) {
          _inherits(CheckboxWidgetAnnotationElement, _WidgetAnnotationElem3);
          var _super33 = _createSuper(CheckboxWidgetAnnotationElement);
          function CheckboxWidgetAnnotationElement(parameters) {
            _classCallCheck(this, CheckboxWidgetAnnotationElement);
            return _super33.call(this, parameters, {
              isRenderable: parameters.renderForms
            });
          }
          _createClass(CheckboxWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this64 = this;
              var storage = this.annotationStorage;
              var data = this.data;
              var id = data.id;
              var value = storage.getValue(id, {
                value: data.exportValue === data.fieldValue
              }).value;
              if (typeof value === "string") {
                value = value !== "Off";
                storage.setValue(id, {
                  value: value
                });
              }
              this.container.classList.add("buttonWidgetAnnotation", "checkBox");
              var element = document.createElement("input");
              GetElementsByNameSet.add(element);
              element.setAttribute("data-element-id", id);
              element.disabled = data.readOnly;
              this._setRequired(element, this.data.required);
              element.type = "checkbox";
              element.name = data.baseFieldName || data.fieldName;
              if (value) {
                element.setAttribute("checked", true);
              }
              element.setAttribute("exportValue", data.exportValue);
              element.tabIndex = DEFAULT_TAB_INDEX;
              element.addEventListener("change", function (event) {
                var _event$target2 = event.target,
                  name = _event$target2.name,
                  checked = _event$target2.checked;
                var _iterator103 = _createForOfIteratorHelper(_this64._getElementsByName(name, id)),
                  _step103;
                try {
                  for (_iterator103.s(); !(_step103 = _iterator103.n()).done;) {
                    var checkbox = _step103.value;
                    var curChecked = checked && checkbox.exportValue === data.exportValue;
                    if (checkbox.domElement) {
                      checkbox.domElement.checked = curChecked;
                    }
                    storage.setValue(checkbox.id, {
                      value: curChecked
                    });
                  }
                } catch (err) {
                  _iterator103.e(err);
                } finally {
                  _iterator103.f();
                }
                storage.setValue(id, {
                  value: checked
                });
              });
              element.addEventListener("resetform", function (event) {
                var defaultValue = data.defaultFieldValue || "Off";
                event.target.checked = defaultValue === data.exportValue;
              });
              if (this.enableScripting && this.hasJSActions) {
                element.addEventListener("updatefromsandbox", function (jsEvent) {
                  var actions = {
                    value: function value(event) {
                      event.target.checked = event.detail.value !== "Off";
                      storage.setValue(id, {
                        value: event.target.checked
                      });
                    }
                  };
                  _this64._dispatchEventFromSandbox(actions, jsEvent);
                });
                this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function (event) {
                  return event.target.checked;
                });
              }
              this._setBackgroundColor(element);
              this._setDefaultPropertiesFromJS(element);
              this.container.append(element);
              return this.container;
            }
          }]);
          return CheckboxWidgetAnnotationElement;
        }(WidgetAnnotationElement);
        var RadioButtonWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem4) {
          _inherits(RadioButtonWidgetAnnotationElement, _WidgetAnnotationElem4);
          var _super34 = _createSuper(RadioButtonWidgetAnnotationElement);
          function RadioButtonWidgetAnnotationElement(parameters) {
            _classCallCheck(this, RadioButtonWidgetAnnotationElement);
            return _super34.call(this, parameters, {
              isRenderable: parameters.renderForms
            });
          }
          _createClass(RadioButtonWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this65 = this;
              this.container.classList.add("buttonWidgetAnnotation", "radioButton");
              var storage = this.annotationStorage;
              var data = this.data;
              var id = data.id;
              var value = storage.getValue(id, {
                value: data.fieldValue === data.buttonValue
              }).value;
              if (typeof value === "string") {
                value = value !== data.buttonValue;
                storage.setValue(id, {
                  value: value
                });
              }
              var element = document.createElement("input");
              GetElementsByNameSet.add(element);
              element.setAttribute("data-element-id", id);
              element.disabled = data.readOnly;
              this._setRequired(element, this.data.required);
              element.type = "radio";
              element.name = data.baseFieldName || data.fieldName;
              if (value) {
                element.setAttribute("checked", true);
              }
              element.tabIndex = DEFAULT_TAB_INDEX;
              element.addEventListener("change", function (event) {
                var _event$target3 = event.target,
                  name = _event$target3.name,
                  checked = _event$target3.checked;
                var _iterator104 = _createForOfIteratorHelper(_this65._getElementsByName(name, id)),
                  _step104;
                try {
                  for (_iterator104.s(); !(_step104 = _iterator104.n()).done;) {
                    var radio = _step104.value;
                    storage.setValue(radio.id, {
                      value: false
                    });
                  }
                } catch (err) {
                  _iterator104.e(err);
                } finally {
                  _iterator104.f();
                }
                storage.setValue(id, {
                  value: checked
                });
              });
              element.addEventListener("resetform", function (event) {
                var defaultValue = data.defaultFieldValue;
                event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;
              });
              if (this.enableScripting && this.hasJSActions) {
                var pdfButtonValue = data.buttonValue;
                element.addEventListener("updatefromsandbox", function (jsEvent) {
                  var actions = {
                    value: function value(event) {
                      var checked = pdfButtonValue === event.detail.value;
                      var _iterator105 = _createForOfIteratorHelper(_this65._getElementsByName(event.target.name)),
                        _step105;
                      try {
                        for (_iterator105.s(); !(_step105 = _iterator105.n()).done;) {
                          var radio = _step105.value;
                          var curChecked = checked && radio.id === id;
                          if (radio.domElement) {
                            radio.domElement.checked = curChecked;
                          }
                          storage.setValue(radio.id, {
                            value: curChecked
                          });
                        }
                      } catch (err) {
                        _iterator105.e(err);
                      } finally {
                        _iterator105.f();
                      }
                    }
                  };
                  _this65._dispatchEventFromSandbox(actions, jsEvent);
                });
                this._setEventListeners(element, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], function (event) {
                  return event.target.checked;
                });
              }
              this._setBackgroundColor(element);
              this._setDefaultPropertiesFromJS(element);
              this.container.append(element);
              return this.container;
            }
          }]);
          return RadioButtonWidgetAnnotationElement;
        }(WidgetAnnotationElement);
        var PushButtonWidgetAnnotationElement = /*#__PURE__*/function (_LinkAnnotationElemen) {
          _inherits(PushButtonWidgetAnnotationElement, _LinkAnnotationElemen);
          var _super35 = _createSuper(PushButtonWidgetAnnotationElement);
          function PushButtonWidgetAnnotationElement(parameters) {
            _classCallCheck(this, PushButtonWidgetAnnotationElement);
            return _super35.call(this, parameters, {
              ignoreBorder: parameters.data.hasAppearance
            });
          }
          _createClass(PushButtonWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this66 = this;
              var container = _get(_getPrototypeOf(PushButtonWidgetAnnotationElement.prototype), "render", this).call(this);
              container.classList.add("buttonWidgetAnnotation", "pushButton");
              if (this.data.alternativeText) {
                container.title = this.data.alternativeText;
              }
              var linkElement = container.lastChild;
              if (this.enableScripting && this.hasJSActions && linkElement) {
                this._setDefaultPropertiesFromJS(linkElement);
                linkElement.addEventListener("updatefromsandbox", function (jsEvent) {
                  _this66._dispatchEventFromSandbox({}, jsEvent);
                });
              }
              return container;
            }
          }]);
          return PushButtonWidgetAnnotationElement;
        }(LinkAnnotationElement);
        var ChoiceWidgetAnnotationElement = /*#__PURE__*/function (_WidgetAnnotationElem5) {
          _inherits(ChoiceWidgetAnnotationElement, _WidgetAnnotationElem5);
          var _super36 = _createSuper(ChoiceWidgetAnnotationElement);
          function ChoiceWidgetAnnotationElement(parameters) {
            _classCallCheck(this, ChoiceWidgetAnnotationElement);
            return _super36.call(this, parameters, {
              isRenderable: parameters.renderForms
            });
          }
          _createClass(ChoiceWidgetAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this67 = this;
              this.container.classList.add("choiceWidgetAnnotation");
              var storage = this.annotationStorage;
              var id = this.data.id;
              var storedData = storage.getValue(id, {
                value: this.data.fieldValue
              });
              var selectElement = document.createElement("select");
              GetElementsByNameSet.add(selectElement);
              selectElement.setAttribute("data-element-id", id);
              selectElement.disabled = this.data.readOnly;
              this._setRequired(selectElement, this.data.required);
              selectElement.name = this.data.baseFieldName || this.data.fieldName;
              selectElement.tabIndex = DEFAULT_TAB_INDEX;
              var addAnEmptyEntry = this.data.combo && this.data.options.length > 0;
              if (!this.data.combo) {
                selectElement.size = this.data.options.length;
                if (this.data.multiSelect) {
                  selectElement.multiple = true;
                }
              }
              selectElement.addEventListener("resetform", function (event) {
                var defaultValue = _this67.data.defaultFieldValue;
                var _iterator106 = _createForOfIteratorHelper(selectElement.options),
                  _step106;
                try {
                  for (_iterator106.s(); !(_step106 = _iterator106.n()).done;) {
                    var option = _step106.value;
                    option.selected = option.value === defaultValue;
                  }
                } catch (err) {
                  _iterator106.e(err);
                } finally {
                  _iterator106.f();
                }
              });
              var _iterator107 = _createForOfIteratorHelper(this.data.options),
                _step107;
              try {
                for (_iterator107.s(); !(_step107 = _iterator107.n()).done;) {
                  var option = _step107.value;
                  var optionElement = document.createElement("option");
                  optionElement.textContent = option.displayValue;
                  optionElement.value = option.exportValue;
                  if (storedData.value.includes(option.exportValue)) {
                    optionElement.setAttribute("selected", true);
                    addAnEmptyEntry = false;
                  }
                  selectElement.append(optionElement);
                }
              } catch (err) {
                _iterator107.e(err);
              } finally {
                _iterator107.f();
              }
              var _removeEmptyEntry = null;
              if (addAnEmptyEntry) {
                var noneOptionElement = document.createElement("option");
                noneOptionElement.value = " ";
                noneOptionElement.setAttribute("hidden", true);
                noneOptionElement.setAttribute("selected", true);
                selectElement.prepend(noneOptionElement);
                _removeEmptyEntry = function removeEmptyEntry() {
                  noneOptionElement.remove();
                  selectElement.removeEventListener("input", _removeEmptyEntry);
                  _removeEmptyEntry = null;
                };
                selectElement.addEventListener("input", _removeEmptyEntry);
              }
              var getValue = function getValue(isExport) {
                var name = isExport ? "value" : "textContent";
                var options = selectElement.options,
                  multiple = selectElement.multiple;
                if (!multiple) {
                  return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];
                }
                return Array.prototype.filter.call(options, function (option) {
                  return option.selected;
                }).map(function (option) {
                  return option[name];
                });
              };
              var selectedValues = getValue(false);
              var getItems = function getItems(event) {
                var options = event.target.options;
                return Array.prototype.map.call(options, function (option) {
                  return {
                    displayValue: option.textContent,
                    exportValue: option.value
                  };
                });
              };
              if (this.enableScripting && this.hasJSActions) {
                selectElement.addEventListener("updatefromsandbox", function (jsEvent) {
                  var actions = {
                    value: function value(event) {
                      var _removeEmptyEntry2;
                      (_removeEmptyEntry2 = _removeEmptyEntry) === null || _removeEmptyEntry2 === void 0 ? void 0 : _removeEmptyEntry2();
                      var value = event.detail.value;
                      var values = new Set(Array.isArray(value) ? value : [value]);
                      var _iterator108 = _createForOfIteratorHelper(selectElement.options),
                        _step108;
                      try {
                        for (_iterator108.s(); !(_step108 = _iterator108.n()).done;) {
                          var option = _step108.value;
                          option.selected = values.has(option.value);
                        }
                      } catch (err) {
                        _iterator108.e(err);
                      } finally {
                        _iterator108.f();
                      }
                      storage.setValue(id, {
                        value: getValue(true)
                      });
                      selectedValues = getValue(false);
                    },
                    multipleSelection: function multipleSelection(event) {
                      selectElement.multiple = true;
                    },
                    remove: function remove(event) {
                      var options = selectElement.options;
                      var index = event.detail.remove;
                      options[index].selected = false;
                      selectElement.remove(index);
                      if (options.length > 0) {
                        var i = Array.prototype.findIndex.call(options, function (option) {
                          return option.selected;
                        });
                        if (i === -1) {
                          options[0].selected = true;
                        }
                      }
                      storage.setValue(id, {
                        value: getValue(true),
                        items: getItems(event)
                      });
                      selectedValues = getValue(false);
                    },
                    clear: function clear(event) {
                      while (selectElement.length !== 0) {
                        selectElement.remove(0);
                      }
                      storage.setValue(id, {
                        value: null,
                        items: []
                      });
                      selectedValues = getValue(false);
                    },
                    insert: function insert(event) {
                      var _event$detail$insert = event.detail.insert,
                        index = _event$detail$insert.index,
                        displayValue = _event$detail$insert.displayValue,
                        exportValue = _event$detail$insert.exportValue;
                      var selectChild = selectElement.children[index];
                      var optionElement = document.createElement("option");
                      optionElement.textContent = displayValue;
                      optionElement.value = exportValue;
                      if (selectChild) {
                        selectChild.before(optionElement);
                      } else {
                        selectElement.append(optionElement);
                      }
                      storage.setValue(id, {
                        value: getValue(true),
                        items: getItems(event)
                      });
                      selectedValues = getValue(false);
                    },
                    items: function items(event) {
                      var items = event.detail.items;
                      while (selectElement.length !== 0) {
                        selectElement.remove(0);
                      }
                      var _iterator109 = _createForOfIteratorHelper(items),
                        _step109;
                      try {
                        for (_iterator109.s(); !(_step109 = _iterator109.n()).done;) {
                          var item = _step109.value;
                          var displayValue = item.displayValue,
                            exportValue = item.exportValue;
                          var optionElement = document.createElement("option");
                          optionElement.textContent = displayValue;
                          optionElement.value = exportValue;
                          selectElement.append(optionElement);
                        }
                      } catch (err) {
                        _iterator109.e(err);
                      } finally {
                        _iterator109.f();
                      }
                      if (selectElement.options.length > 0) {
                        selectElement.options[0].selected = true;
                      }
                      storage.setValue(id, {
                        value: getValue(true),
                        items: getItems(event)
                      });
                      selectedValues = getValue(false);
                    },
                    indices: function indices(event) {
                      var indices = new Set(event.detail.indices);
                      var _iterator110 = _createForOfIteratorHelper(event.target.options),
                        _step110;
                      try {
                        for (_iterator110.s(); !(_step110 = _iterator110.n()).done;) {
                          var option = _step110.value;
                          option.selected = indices.has(option.index);
                        }
                      } catch (err) {
                        _iterator110.e(err);
                      } finally {
                        _iterator110.f();
                      }
                      storage.setValue(id, {
                        value: getValue(true)
                      });
                      selectedValues = getValue(false);
                    },
                    editable: function editable(event) {
                      event.target.disabled = !event.detail.editable;
                    }
                  };
                  _this67._dispatchEventFromSandbox(actions, jsEvent);
                });
                selectElement.addEventListener("input", function (event) {
                  var _this67$linkService$e;
                  var exportValue = getValue(true);
                  storage.setValue(id, {
                    value: exportValue
                  });
                  event.preventDefault();
                  (_this67$linkService$e = _this67.linkService.eventBus) === null || _this67$linkService$e === void 0 ? void 0 : _this67$linkService$e.dispatch("dispatcheventinsandbox", {
                    source: _this67,
                    detail: {
                      id: id,
                      name: "Keystroke",
                      value: selectedValues,
                      changeEx: exportValue,
                      willCommit: false,
                      commitKey: 1,
                      keyDown: false
                    }
                  });
                });
                this._setEventListeners(selectElement, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"], ["input", "Validate"]], function (event) {
                  return event.target.value;
                });
              } else {
                selectElement.addEventListener("input", function (event) {
                  storage.setValue(id, {
                    value: getValue(true)
                  });
                });
              }
              if (this.data.combo) {
                this._setTextStyle(selectElement);
              } else {}
              this._setBackgroundColor(selectElement);
              this._setDefaultPropertiesFromJS(selectElement);
              this.container.append(selectElement);
              return this.container;
            }
          }]);
          return ChoiceWidgetAnnotationElement;
        }(WidgetAnnotationElement);
        var PopupAnnotationElement = /*#__PURE__*/function (_AnnotationElement4) {
          _inherits(PopupAnnotationElement, _AnnotationElement4);
          var _super37 = _createSuper(PopupAnnotationElement);
          function PopupAnnotationElement(parameters) {
            var _data$titleObj, _data$contentsObj, _data$richText;
            var _this68;
            _classCallCheck(this, PopupAnnotationElement);
            var data = parameters.data,
              elements = parameters.elements;
            var isRenderable = !!((_data$titleObj = data.titleObj) !== null && _data$titleObj !== void 0 && _data$titleObj.str || (_data$contentsObj = data.contentsObj) !== null && _data$contentsObj !== void 0 && _data$contentsObj.str || (_data$richText = data.richText) !== null && _data$richText !== void 0 && _data$richText.str);
            _this68 = _super37.call(this, parameters, {
              isRenderable: isRenderable
            });
            _this68.elements = elements;
            return _this68;
          }
          _createClass(PopupAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add("popupAnnotation");
              var popup = new PopupElement({
                container: this.container,
                color: this.data.color,
                titleObj: this.data.titleObj,
                modificationDate: this.data.modificationDate,
                contentsObj: this.data.contentsObj,
                richText: this.data.richText,
                rect: this.data.rect,
                parentRect: this.data.parentRect || null,
                parent: this.parent,
                elements: this.elements,
                open: this.data.open
              });
              var elementIds = [];
              var _iterator111 = _createForOfIteratorHelper(this.elements),
                _step111;
              try {
                for (_iterator111.s(); !(_step111 = _iterator111.n()).done;) {
                  var element = _step111.value;
                  element.popup = popup;
                  elementIds.push(element.data.id);
                  element.addHighlightArea();
                }
              } catch (err) {
                _iterator111.e(err);
              } finally {
                _iterator111.f();
              }
              this.container.setAttribute("aria-controls", elementIds.join(","));
              return this.container;
            }
          }]);
          return PopupAnnotationElement;
        }(AnnotationElement);
        var _dateTimePromise = /*#__PURE__*/new WeakMap();
        var _boundHide = /*#__PURE__*/new WeakMap();
        var _boundShow = /*#__PURE__*/new WeakMap();
        var _boundToggle = /*#__PURE__*/new WeakMap();
        var _color2 = /*#__PURE__*/new WeakMap();
        var _container2 = /*#__PURE__*/new WeakMap();
        var _contentsObj = /*#__PURE__*/new WeakMap();
        var _elements = /*#__PURE__*/new WeakMap();
        var _parent = /*#__PURE__*/new WeakMap();
        var _parentRect = /*#__PURE__*/new WeakMap();
        var _pinned = /*#__PURE__*/new WeakMap();
        var _popup = /*#__PURE__*/new WeakMap();
        var _rect2 = /*#__PURE__*/new WeakMap();
        var _richText = /*#__PURE__*/new WeakMap();
        var _titleObj = /*#__PURE__*/new WeakMap();
        var _wasVisible = /*#__PURE__*/new WeakMap();
        var _toggle = /*#__PURE__*/new WeakSet();
        var _show = /*#__PURE__*/new WeakSet();
        var _hide = /*#__PURE__*/new WeakSet();
        var PopupElement = /*#__PURE__*/function () {
          function PopupElement(_ref66) {
            var container = _ref66.container,
              color = _ref66.color,
              elements = _ref66.elements,
              titleObj = _ref66.titleObj,
              modificationDate = _ref66.modificationDate,
              contentsObj = _ref66.contentsObj,
              richText = _ref66.richText,
              parent = _ref66.parent,
              rect = _ref66.rect,
              parentRect = _ref66.parentRect,
              open = _ref66.open;
            _classCallCheck(this, PopupElement);
            _classPrivateMethodInitSpec(this, _hide);
            _classPrivateMethodInitSpec(this, _show);
            _classPrivateMethodInitSpec(this, _toggle);
            _classPrivateFieldInitSpec(this, _dateTimePromise, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _boundHide, {
              writable: true,
              value: _classPrivateMethodGet(this, _hide, _hide2).bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundShow, {
              writable: true,
              value: _classPrivateMethodGet(this, _show, _show2).bind(this)
            });
            _classPrivateFieldInitSpec(this, _boundToggle, {
              writable: true,
              value: _classPrivateMethodGet(this, _toggle, _toggle2).bind(this)
            });
            _classPrivateFieldInitSpec(this, _color2, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _container2, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _contentsObj, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _elements, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _parent, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _parentRect, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _pinned, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(this, _popup, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _rect2, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _richText, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _titleObj, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _wasVisible, {
              writable: true,
              value: false
            });
            _classPrivateFieldSet(this, _container2, container);
            _classPrivateFieldSet(this, _titleObj, titleObj);
            _classPrivateFieldSet(this, _contentsObj, contentsObj);
            _classPrivateFieldSet(this, _richText, richText);
            _classPrivateFieldSet(this, _parent, parent);
            _classPrivateFieldSet(this, _color2, color);
            _classPrivateFieldSet(this, _rect2, rect);
            _classPrivateFieldSet(this, _parentRect, parentRect);
            _classPrivateFieldSet(this, _elements, elements);
            var dateObject = _display_utils.PDFDateString.toDateObject(modificationDate);
            if (dateObject) {
              _classPrivateFieldSet(this, _dateTimePromise, parent.l10n.get("annotation_date_string", {
                date: dateObject.toLocaleDateString(),
                time: dateObject.toLocaleTimeString()
              }));
            }
            this.trigger = elements.flatMap(function (e) {
              return e.getElementsToTriggerPopup();
            });
            var _iterator112 = _createForOfIteratorHelper(this.trigger),
              _step112;
            try {
              for (_iterator112.s(); !(_step112 = _iterator112.n()).done;) {
                var element = _step112.value;
                element.addEventListener("click", _classPrivateFieldGet(this, _boundToggle));
                element.addEventListener("mouseenter", _classPrivateFieldGet(this, _boundShow));
                element.addEventListener("mouseleave", _classPrivateFieldGet(this, _boundHide));
              }
            } catch (err) {
              _iterator112.e(err);
            } finally {
              _iterator112.f();
            }
            _classPrivateFieldGet(this, _container2).hidden = true;
            if (open) {
              _classPrivateMethodGet(this, _toggle, _toggle2).call(this);
            }
          }
          _createClass(PopupElement, [{
            key: "render",
            value: function render() {
              if (_classPrivateFieldGet(this, _popup)) {
                return;
              }
              var _classPrivateFieldGet14 = _classPrivateFieldGet(this, _parent),
                view = _classPrivateFieldGet14.page.view,
                _classPrivateFieldGet15 = _classPrivateFieldGet14.viewport.rawDims,
                pageWidth = _classPrivateFieldGet15.pageWidth,
                pageHeight = _classPrivateFieldGet15.pageHeight,
                pageX = _classPrivateFieldGet15.pageX,
                pageY = _classPrivateFieldGet15.pageY;
              var popup = _classPrivateFieldSet(this, _popup, document.createElement("div"));
              popup.className = "popup";
              if (_classPrivateFieldGet(this, _color2)) {
                var _util$Util5;
                var baseColor = popup.style.outlineColor = (_util$Util5 = _util.Util).makeHexColor.apply(_util$Util5, _toConsumableArray(_classPrivateFieldGet(this, _color2)));
                if (CSS.supports("background-color", "color-mix(in srgb, red 30%, white)")) {
                  popup.style.backgroundColor = "color-mix(in srgb, ".concat(baseColor, " 30%, white)");
                } else {
                  var _util$Util6;
                  var BACKGROUND_ENLIGHT = 0.7;
                  popup.style.backgroundColor = (_util$Util6 = _util.Util).makeHexColor.apply(_util$Util6, _toConsumableArray(_classPrivateFieldGet(this, _color2).map(function (c) {
                    return Math.floor(BACKGROUND_ENLIGHT * (255 - c) + c);
                  })));
                }
              }
              var header = document.createElement("span");
              header.className = "header";
              var title = document.createElement("h1");
              header.append(title);
              var _classPrivateFieldGet16 = _classPrivateFieldGet(this, _titleObj);
              title.dir = _classPrivateFieldGet16.dir;
              title.textContent = _classPrivateFieldGet16.str;
              popup.append(header);
              if (_classPrivateFieldGet(this, _dateTimePromise)) {
                var modificationDate = document.createElement("span");
                modificationDate.classList.add("popupDate");
                _classPrivateFieldGet(this, _dateTimePromise).then(function (localized) {
                  modificationDate.textContent = localized;
                });
                header.append(modificationDate);
              }
              var contentsObj = _classPrivateFieldGet(this, _contentsObj);
              var richText = _classPrivateFieldGet(this, _richText);
              if (richText !== null && richText !== void 0 && richText.str && (!(contentsObj !== null && contentsObj !== void 0 && contentsObj.str) || contentsObj.str === richText.str)) {
                _xfa_layer.XfaLayer.render({
                  xfaHtml: richText.html,
                  intent: "richText",
                  div: popup
                });
                popup.lastChild.classList.add("richText", "popupContent");
              } else {
                var contents = this._formatContents(contentsObj);
                popup.append(contents);
              }
              var useParentRect = !!_classPrivateFieldGet(this, _parentRect);
              var rect = useParentRect ? _classPrivateFieldGet(this, _parentRect) : _classPrivateFieldGet(this, _rect2);
              var _iterator113 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _elements)),
                _step113;
              try {
                for (_iterator113.s(); !(_step113 = _iterator113.n()).done;) {
                  var element = _step113.value;
                  if (!rect || _util.Util.intersect(element.data.rect, rect) !== null) {
                    rect = element.data.rect;
                    useParentRect = true;
                    break;
                  }
                }
              } catch (err) {
                _iterator113.e(err);
              } finally {
                _iterator113.f();
              }
              var normalizedRect = _util.Util.normalizeRect([rect[0], view[3] - rect[1] + view[1], rect[2], view[3] - rect[3] + view[1]]);
              var HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;
              var parentWidth = useParentRect ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION : 0;
              var popupLeft = normalizedRect[0] + parentWidth;
              var popupTop = normalizedRect[1];
              var _classPrivateFieldGet17 = _classPrivateFieldGet(this, _container2),
                style = _classPrivateFieldGet17.style;
              style.left = "".concat(100 * (popupLeft - pageX) / pageWidth, "%");
              style.top = "".concat(100 * (popupTop - pageY) / pageHeight, "%");
              _classPrivateFieldGet(this, _container2).append(popup);
            }
          }, {
            key: "_formatContents",
            value: function _formatContents(_ref67) {
              var str = _ref67.str,
                dir = _ref67.dir;
              var p = document.createElement("p");
              p.classList.add("popupContent");
              p.dir = dir;
              var lines = str.split(/(?:\r\n?|\n)/);
              for (var i = 0, ii = lines.length; i < ii; ++i) {
                var line = lines[i];
                p.append(document.createTextNode(line));
                if (i < ii - 1) {
                  p.append(document.createElement("br"));
                }
              }
              return p;
            }
          }, {
            key: "forceHide",
            value: function forceHide() {
              _classPrivateFieldSet(this, _wasVisible, this.isVisible);
              if (!_classPrivateFieldGet(this, _wasVisible)) {
                return;
              }
              _classPrivateFieldGet(this, _container2).hidden = true;
            }
          }, {
            key: "maybeShow",
            value: function maybeShow() {
              if (!_classPrivateFieldGet(this, _wasVisible)) {
                return;
              }
              _classPrivateFieldSet(this, _wasVisible, false);
              _classPrivateFieldGet(this, _container2).hidden = false;
            }
          }, {
            key: "isVisible",
            get: function get() {
              return _classPrivateFieldGet(this, _container2).hidden === false;
            }
          }]);
          return PopupElement;
        }();
        function _toggle2() {
          _classPrivateFieldSet(this, _pinned, !_classPrivateFieldGet(this, _pinned));
          if (_classPrivateFieldGet(this, _pinned)) {
            _classPrivateMethodGet(this, _show, _show2).call(this);
            _classPrivateFieldGet(this, _container2).addEventListener("click", _classPrivateFieldGet(this, _boundToggle));
          } else {
            _classPrivateMethodGet(this, _hide, _hide2).call(this);
            _classPrivateFieldGet(this, _container2).removeEventListener("click", _classPrivateFieldGet(this, _boundToggle));
          }
        }
        function _show2() {
          if (!_classPrivateFieldGet(this, _popup)) {
            this.render();
          }
          if (!this.isVisible) {
            _classPrivateFieldGet(this, _container2).hidden = false;
            _classPrivateFieldGet(this, _container2).style.zIndex = parseInt(_classPrivateFieldGet(this, _container2).style.zIndex) + 1000;
          } else if (_classPrivateFieldGet(this, _pinned)) {
            _classPrivateFieldGet(this, _container2).classList.add("focused");
          }
        }
        function _hide2() {
          _classPrivateFieldGet(this, _container2).classList.remove("focused");
          if (_classPrivateFieldGet(this, _pinned)) {
            return;
          }
          _classPrivateFieldGet(this, _container2).hidden = true;
          _classPrivateFieldGet(this, _container2).style.zIndex = parseInt(_classPrivateFieldGet(this, _container2).style.zIndex) - 1000;
        }
        var FreeTextAnnotationElement = /*#__PURE__*/function (_AnnotationElement5) {
          _inherits(FreeTextAnnotationElement, _AnnotationElement5);
          var _super38 = _createSuper(FreeTextAnnotationElement);
          function FreeTextAnnotationElement(parameters) {
            var _parameters$data$titl2, _parameters$data$cont2, _parameters$data$rich2;
            var _this69;
            _classCallCheck(this, FreeTextAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl2 = parameters.data.titleObj) !== null && _parameters$data$titl2 !== void 0 && _parameters$data$titl2.str || (_parameters$data$cont2 = parameters.data.contentsObj) !== null && _parameters$data$cont2 !== void 0 && _parameters$data$cont2.str || (_parameters$data$rich2 = parameters.data.richText) !== null && _parameters$data$rich2 !== void 0 && _parameters$data$rich2.str);
            _this69 = _super38.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
            _this69.textContent = parameters.data.textContent;
            _this69.annotationEditorType = _util.AnnotationEditorType.FREETEXT;
            return _this69;
          }
          _createClass(FreeTextAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add("freeTextAnnotation");
              if (this.textContent) {
                var content = document.createElement("div");
                content.classList.add("annotationTextContent");
                content.setAttribute("role", "comment");
                var _iterator114 = _createForOfIteratorHelper(this.textContent),
                  _step114;
                try {
                  for (_iterator114.s(); !(_step114 = _iterator114.n()).done;) {
                    var line = _step114.value;
                    var lineSpan = document.createElement("span");
                    lineSpan.textContent = line;
                    content.append(lineSpan);
                  }
                } catch (err) {
                  _iterator114.e(err);
                } finally {
                  _iterator114.f();
                }
                this.container.append(content);
              }
              if (!this.data.popupRef) {
                this._createPopup();
              }
              return this.container;
            }
          }]);
          return FreeTextAnnotationElement;
        }(AnnotationElement);
        exports.FreeTextAnnotationElement = FreeTextAnnotationElement;
        var _line = /*#__PURE__*/new WeakMap();
        var LineAnnotationElement = /*#__PURE__*/function (_AnnotationElement6) {
          _inherits(LineAnnotationElement, _AnnotationElement6);
          var _super39 = _createSuper(LineAnnotationElement);
          function LineAnnotationElement(parameters) {
            var _parameters$data$titl3, _parameters$data$cont3, _parameters$data$rich3;
            var _this70;
            _classCallCheck(this, LineAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl3 = parameters.data.titleObj) !== null && _parameters$data$titl3 !== void 0 && _parameters$data$titl3.str || (_parameters$data$cont3 = parameters.data.contentsObj) !== null && _parameters$data$cont3 !== void 0 && _parameters$data$cont3.str || (_parameters$data$rich3 = parameters.data.richText) !== null && _parameters$data$rich3 !== void 0 && _parameters$data$rich3.str);
            _this70 = _super39.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this70), _line, {
              writable: true,
              value: null
            });
            return _this70;
          }
          _createClass(LineAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add("lineAnnotation");
              var data = this.data;
              var _getRectDims3 = getRectDims(data.rect),
                width = _getRectDims3.width,
                height = _getRectDims3.height;
              var svg = this.svgFactory.create(width, height, true);
              var line = _classPrivateFieldSet(this, _line, this.svgFactory.createElement("svg:line"));
              line.setAttribute("x1", data.rect[2] - data.lineCoordinates[0]);
              line.setAttribute("y1", data.rect[3] - data.lineCoordinates[1]);
              line.setAttribute("x2", data.rect[2] - data.lineCoordinates[2]);
              line.setAttribute("y2", data.rect[3] - data.lineCoordinates[3]);
              line.setAttribute("stroke-width", data.borderStyle.width || 1);
              line.setAttribute("stroke", "transparent");
              line.setAttribute("fill", "transparent");
              svg.append(line);
              this.container.append(svg);
              if (!data.popupRef) {
                this._createPopup();
              }
              return this.container;
            }
          }, {
            key: "getElementsToTriggerPopup",
            value: function getElementsToTriggerPopup() {
              return _classPrivateFieldGet(this, _line);
            }
          }, {
            key: "addHighlightArea",
            value: function addHighlightArea() {
              this.container.classList.add("highlightArea");
            }
          }]);
          return LineAnnotationElement;
        }(AnnotationElement);
        var _square = /*#__PURE__*/new WeakMap();
        var SquareAnnotationElement = /*#__PURE__*/function (_AnnotationElement7) {
          _inherits(SquareAnnotationElement, _AnnotationElement7);
          var _super40 = _createSuper(SquareAnnotationElement);
          function SquareAnnotationElement(parameters) {
            var _parameters$data$titl4, _parameters$data$cont4, _parameters$data$rich4;
            var _this71;
            _classCallCheck(this, SquareAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl4 = parameters.data.titleObj) !== null && _parameters$data$titl4 !== void 0 && _parameters$data$titl4.str || (_parameters$data$cont4 = parameters.data.contentsObj) !== null && _parameters$data$cont4 !== void 0 && _parameters$data$cont4.str || (_parameters$data$rich4 = parameters.data.richText) !== null && _parameters$data$rich4 !== void 0 && _parameters$data$rich4.str);
            _this71 = _super40.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this71), _square, {
              writable: true,
              value: null
            });
            return _this71;
          }
          _createClass(SquareAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add("squareAnnotation");
              var data = this.data;
              var _getRectDims4 = getRectDims(data.rect),
                width = _getRectDims4.width,
                height = _getRectDims4.height;
              var svg = this.svgFactory.create(width, height, true);
              var borderWidth = data.borderStyle.width;
              var square = _classPrivateFieldSet(this, _square, this.svgFactory.createElement("svg:rect"));
              square.setAttribute("x", borderWidth / 2);
              square.setAttribute("y", borderWidth / 2);
              square.setAttribute("width", width - borderWidth);
              square.setAttribute("height", height - borderWidth);
              square.setAttribute("stroke-width", borderWidth || 1);
              square.setAttribute("stroke", "transparent");
              square.setAttribute("fill", "transparent");
              svg.append(square);
              this.container.append(svg);
              if (!data.popupRef) {
                this._createPopup();
              }
              return this.container;
            }
          }, {
            key: "getElementsToTriggerPopup",
            value: function getElementsToTriggerPopup() {
              return _classPrivateFieldGet(this, _square);
            }
          }, {
            key: "addHighlightArea",
            value: function addHighlightArea() {
              this.container.classList.add("highlightArea");
            }
          }]);
          return SquareAnnotationElement;
        }(AnnotationElement);
        var _circle = /*#__PURE__*/new WeakMap();
        var CircleAnnotationElement = /*#__PURE__*/function (_AnnotationElement8) {
          _inherits(CircleAnnotationElement, _AnnotationElement8);
          var _super41 = _createSuper(CircleAnnotationElement);
          function CircleAnnotationElement(parameters) {
            var _parameters$data$titl5, _parameters$data$cont5, _parameters$data$rich5;
            var _this72;
            _classCallCheck(this, CircleAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl5 = parameters.data.titleObj) !== null && _parameters$data$titl5 !== void 0 && _parameters$data$titl5.str || (_parameters$data$cont5 = parameters.data.contentsObj) !== null && _parameters$data$cont5 !== void 0 && _parameters$data$cont5.str || (_parameters$data$rich5 = parameters.data.richText) !== null && _parameters$data$rich5 !== void 0 && _parameters$data$rich5.str);
            _this72 = _super41.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this72), _circle, {
              writable: true,
              value: null
            });
            return _this72;
          }
          _createClass(CircleAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add("circleAnnotation");
              var data = this.data;
              var _getRectDims5 = getRectDims(data.rect),
                width = _getRectDims5.width,
                height = _getRectDims5.height;
              var svg = this.svgFactory.create(width, height, true);
              var borderWidth = data.borderStyle.width;
              var circle = _classPrivateFieldSet(this, _circle, this.svgFactory.createElement("svg:ellipse"));
              circle.setAttribute("cx", width / 2);
              circle.setAttribute("cy", height / 2);
              circle.setAttribute("rx", width / 2 - borderWidth / 2);
              circle.setAttribute("ry", height / 2 - borderWidth / 2);
              circle.setAttribute("stroke-width", borderWidth || 1);
              circle.setAttribute("stroke", "transparent");
              circle.setAttribute("fill", "transparent");
              svg.append(circle);
              this.container.append(svg);
              if (!data.popupRef) {
                this._createPopup();
              }
              return this.container;
            }
          }, {
            key: "getElementsToTriggerPopup",
            value: function getElementsToTriggerPopup() {
              return _classPrivateFieldGet(this, _circle);
            }
          }, {
            key: "addHighlightArea",
            value: function addHighlightArea() {
              this.container.classList.add("highlightArea");
            }
          }]);
          return CircleAnnotationElement;
        }(AnnotationElement);
        var _polyline = /*#__PURE__*/new WeakMap();
        var PolylineAnnotationElement = /*#__PURE__*/function (_AnnotationElement9) {
          _inherits(PolylineAnnotationElement, _AnnotationElement9);
          var _super42 = _createSuper(PolylineAnnotationElement);
          function PolylineAnnotationElement(parameters) {
            var _parameters$data$titl6, _parameters$data$cont6, _parameters$data$rich6;
            var _this73;
            _classCallCheck(this, PolylineAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl6 = parameters.data.titleObj) !== null && _parameters$data$titl6 !== void 0 && _parameters$data$titl6.str || (_parameters$data$cont6 = parameters.data.contentsObj) !== null && _parameters$data$cont6 !== void 0 && _parameters$data$cont6.str || (_parameters$data$rich6 = parameters.data.richText) !== null && _parameters$data$rich6 !== void 0 && _parameters$data$rich6.str);
            _this73 = _super42.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this73), _polyline, {
              writable: true,
              value: null
            });
            _this73.containerClassName = "polylineAnnotation";
            _this73.svgElementName = "svg:polyline";
            return _this73;
          }
          _createClass(PolylineAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add(this.containerClassName);
              var data = this.data;
              var _getRectDims6 = getRectDims(data.rect),
                width = _getRectDims6.width,
                height = _getRectDims6.height;
              var svg = this.svgFactory.create(width, height, true);
              var points = [];
              var _iterator115 = _createForOfIteratorHelper(data.vertices),
                _step115;
              try {
                for (_iterator115.s(); !(_step115 = _iterator115.n()).done;) {
                  var coordinate = _step115.value;
                  var x = coordinate.x - data.rect[0];
                  var y = data.rect[3] - coordinate.y;
                  points.push(x + "," + y);
                }
              } catch (err) {
                _iterator115.e(err);
              } finally {
                _iterator115.f();
              }
              points = points.join(" ");
              var polyline = _classPrivateFieldSet(this, _polyline, this.svgFactory.createElement(this.svgElementName));
              polyline.setAttribute("points", points);
              polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
              polyline.setAttribute("stroke", "transparent");
              polyline.setAttribute("fill", "transparent");
              svg.append(polyline);
              this.container.append(svg);
              if (!data.popupRef) {
                this._createPopup(polyline, data);
              }
              return this.container;
            }
          }, {
            key: "getElementsToTriggerPopup",
            value: function getElementsToTriggerPopup() {
              return _classPrivateFieldGet(this, _polyline);
            }
          }, {
            key: "addHighlightArea",
            value: function addHighlightArea() {
              this.container.classList.add("highlightArea");
            }
          }]);
          return PolylineAnnotationElement;
        }(AnnotationElement);
        var PolygonAnnotationElement = /*#__PURE__*/function (_PolylineAnnotationEl) {
          _inherits(PolygonAnnotationElement, _PolylineAnnotationEl);
          var _super43 = _createSuper(PolygonAnnotationElement);
          function PolygonAnnotationElement(parameters) {
            var _this74;
            _classCallCheck(this, PolygonAnnotationElement);
            _this74 = _super43.call(this, parameters);
            _this74.containerClassName = "polygonAnnotation";
            _this74.svgElementName = "svg:polygon";
            return _this74;
          }
          return _createClass(PolygonAnnotationElement);
        }(PolylineAnnotationElement);
        var CaretAnnotationElement = /*#__PURE__*/function (_AnnotationElement10) {
          _inherits(CaretAnnotationElement, _AnnotationElement10);
          var _super44 = _createSuper(CaretAnnotationElement);
          function CaretAnnotationElement(parameters) {
            var _parameters$data$titl7, _parameters$data$cont7, _parameters$data$rich7;
            _classCallCheck(this, CaretAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl7 = parameters.data.titleObj) !== null && _parameters$data$titl7 !== void 0 && _parameters$data$titl7.str || (_parameters$data$cont7 = parameters.data.contentsObj) !== null && _parameters$data$cont7 !== void 0 && _parameters$data$cont7.str || (_parameters$data$rich7 = parameters.data.richText) !== null && _parameters$data$rich7 !== void 0 && _parameters$data$rich7.str);
            return _super44.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
          }
          _createClass(CaretAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add("caretAnnotation");
              if (!this.data.popupRef) {
                this._createPopup();
              }
              return this.container;
            }
          }]);
          return CaretAnnotationElement;
        }(AnnotationElement);
        var _polylines = /*#__PURE__*/new WeakMap();
        var InkAnnotationElement = /*#__PURE__*/function (_AnnotationElement11) {
          _inherits(InkAnnotationElement, _AnnotationElement11);
          var _super45 = _createSuper(InkAnnotationElement);
          function InkAnnotationElement(parameters) {
            var _parameters$data$titl8, _parameters$data$cont8, _parameters$data$rich8;
            var _this75;
            _classCallCheck(this, InkAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl8 = parameters.data.titleObj) !== null && _parameters$data$titl8 !== void 0 && _parameters$data$titl8.str || (_parameters$data$cont8 = parameters.data.contentsObj) !== null && _parameters$data$cont8 !== void 0 && _parameters$data$cont8.str || (_parameters$data$rich8 = parameters.data.richText) !== null && _parameters$data$rich8 !== void 0 && _parameters$data$rich8.str);
            _this75 = _super45.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this75), _polylines, {
              writable: true,
              value: []
            });
            _this75.containerClassName = "inkAnnotation";
            _this75.svgElementName = "svg:polyline";
            _this75.annotationEditorType = _util.AnnotationEditorType.INK;
            return _this75;
          }
          _createClass(InkAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add(this.containerClassName);
              var data = this.data;
              var _getRectDims7 = getRectDims(data.rect),
                width = _getRectDims7.width,
                height = _getRectDims7.height;
              var svg = this.svgFactory.create(width, height, true);
              var _iterator116 = _createForOfIteratorHelper(data.inkLists),
                _step116;
              try {
                for (_iterator116.s(); !(_step116 = _iterator116.n()).done;) {
                  var inkList = _step116.value;
                  var points = [];
                  var _iterator117 = _createForOfIteratorHelper(inkList),
                    _step117;
                  try {
                    for (_iterator117.s(); !(_step117 = _iterator117.n()).done;) {
                      var coordinate = _step117.value;
                      var x = coordinate.x - data.rect[0];
                      var y = data.rect[3] - coordinate.y;
                      points.push("".concat(x, ",").concat(y));
                    }
                  } catch (err) {
                    _iterator117.e(err);
                  } finally {
                    _iterator117.f();
                  }
                  points = points.join(" ");
                  var polyline = this.svgFactory.createElement(this.svgElementName);
                  _classPrivateFieldGet(this, _polylines).push(polyline);
                  polyline.setAttribute("points", points);
                  polyline.setAttribute("stroke-width", data.borderStyle.width || 1);
                  polyline.setAttribute("stroke", "transparent");
                  polyline.setAttribute("fill", "transparent");
                  if (!data.popupRef) {
                    this._createPopup(polyline, data);
                  }
                  svg.append(polyline);
                }
              } catch (err) {
                _iterator116.e(err);
              } finally {
                _iterator116.f();
              }
              this.container.append(svg);
              return this.container;
            }
          }, {
            key: "getElementsToTriggerPopup",
            value: function getElementsToTriggerPopup() {
              return _classPrivateFieldGet(this, _polylines);
            }
          }, {
            key: "addHighlightArea",
            value: function addHighlightArea() {
              this.container.classList.add("highlightArea");
            }
          }]);
          return InkAnnotationElement;
        }(AnnotationElement);
        exports.InkAnnotationElement = InkAnnotationElement;
        var HighlightAnnotationElement = /*#__PURE__*/function (_AnnotationElement12) {
          _inherits(HighlightAnnotationElement, _AnnotationElement12);
          var _super46 = _createSuper(HighlightAnnotationElement);
          function HighlightAnnotationElement(parameters) {
            var _parameters$data$titl9, _parameters$data$cont9, _parameters$data$rich9;
            _classCallCheck(this, HighlightAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl9 = parameters.data.titleObj) !== null && _parameters$data$titl9 !== void 0 && _parameters$data$titl9.str || (_parameters$data$cont9 = parameters.data.contentsObj) !== null && _parameters$data$cont9 !== void 0 && _parameters$data$cont9.str || (_parameters$data$rich9 = parameters.data.richText) !== null && _parameters$data$rich9 !== void 0 && _parameters$data$rich9.str);
            return _super46.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }
          _createClass(HighlightAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.popupRef) {
                this._createPopup();
              }
              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("highlightAnnotation");
              }
              this.container.classList.add("highlightAnnotation");
              return this.container;
            }
          }]);
          return HighlightAnnotationElement;
        }(AnnotationElement);
        var UnderlineAnnotationElement = /*#__PURE__*/function (_AnnotationElement13) {
          _inherits(UnderlineAnnotationElement, _AnnotationElement13);
          var _super47 = _createSuper(UnderlineAnnotationElement);
          function UnderlineAnnotationElement(parameters) {
            var _parameters$data$titl10, _parameters$data$cont10, _parameters$data$rich10;
            _classCallCheck(this, UnderlineAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl10 = parameters.data.titleObj) !== null && _parameters$data$titl10 !== void 0 && _parameters$data$titl10.str || (_parameters$data$cont10 = parameters.data.contentsObj) !== null && _parameters$data$cont10 !== void 0 && _parameters$data$cont10.str || (_parameters$data$rich10 = parameters.data.richText) !== null && _parameters$data$rich10 !== void 0 && _parameters$data$rich10.str);
            return _super47.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }
          _createClass(UnderlineAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.popupRef) {
                this._createPopup();
              }
              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("underlineAnnotation");
              }
              this.container.classList.add("underlineAnnotation");
              return this.container;
            }
          }]);
          return UnderlineAnnotationElement;
        }(AnnotationElement);
        var SquigglyAnnotationElement = /*#__PURE__*/function (_AnnotationElement14) {
          _inherits(SquigglyAnnotationElement, _AnnotationElement14);
          var _super48 = _createSuper(SquigglyAnnotationElement);
          function SquigglyAnnotationElement(parameters) {
            var _parameters$data$titl11, _parameters$data$cont11, _parameters$data$rich11;
            _classCallCheck(this, SquigglyAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl11 = parameters.data.titleObj) !== null && _parameters$data$titl11 !== void 0 && _parameters$data$titl11.str || (_parameters$data$cont11 = parameters.data.contentsObj) !== null && _parameters$data$cont11 !== void 0 && _parameters$data$cont11.str || (_parameters$data$rich11 = parameters.data.richText) !== null && _parameters$data$rich11 !== void 0 && _parameters$data$rich11.str);
            return _super48.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }
          _createClass(SquigglyAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.popupRef) {
                this._createPopup();
              }
              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("squigglyAnnotation");
              }
              this.container.classList.add("squigglyAnnotation");
              return this.container;
            }
          }]);
          return SquigglyAnnotationElement;
        }(AnnotationElement);
        var StrikeOutAnnotationElement = /*#__PURE__*/function (_AnnotationElement15) {
          _inherits(StrikeOutAnnotationElement, _AnnotationElement15);
          var _super49 = _createSuper(StrikeOutAnnotationElement);
          function StrikeOutAnnotationElement(parameters) {
            var _parameters$data$titl12, _parameters$data$cont12, _parameters$data$rich12;
            _classCallCheck(this, StrikeOutAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl12 = parameters.data.titleObj) !== null && _parameters$data$titl12 !== void 0 && _parameters$data$titl12.str || (_parameters$data$cont12 = parameters.data.contentsObj) !== null && _parameters$data$cont12 !== void 0 && _parameters$data$cont12.str || (_parameters$data$rich12 = parameters.data.richText) !== null && _parameters$data$rich12 !== void 0 && _parameters$data$rich12.str);
            return _super49.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true,
              createQuadrilaterals: true
            });
          }
          _createClass(StrikeOutAnnotationElement, [{
            key: "render",
            value: function render() {
              if (!this.data.popupRef) {
                this._createPopup();
              }
              if (this.quadrilaterals) {
                return this._renderQuadrilaterals("strikeoutAnnotation");
              }
              this.container.classList.add("strikeoutAnnotation");
              return this.container;
            }
          }]);
          return StrikeOutAnnotationElement;
        }(AnnotationElement);
        var StampAnnotationElement = /*#__PURE__*/function (_AnnotationElement16) {
          _inherits(StampAnnotationElement, _AnnotationElement16);
          var _super50 = _createSuper(StampAnnotationElement);
          function StampAnnotationElement(parameters) {
            var _parameters$data$titl13, _parameters$data$cont13, _parameters$data$rich13;
            _classCallCheck(this, StampAnnotationElement);
            var isRenderable = !!(parameters.data.popupRef || (_parameters$data$titl13 = parameters.data.titleObj) !== null && _parameters$data$titl13 !== void 0 && _parameters$data$titl13.str || (_parameters$data$cont13 = parameters.data.contentsObj) !== null && _parameters$data$cont13 !== void 0 && _parameters$data$cont13.str || (_parameters$data$rich13 = parameters.data.richText) !== null && _parameters$data$rich13 !== void 0 && _parameters$data$rich13.str);
            return _super50.call(this, parameters, {
              isRenderable: isRenderable,
              ignoreBorder: true
            });
          }
          _createClass(StampAnnotationElement, [{
            key: "render",
            value: function render() {
              this.container.classList.add("stampAnnotation");
              if (!this.data.popupRef) {
                this._createPopup();
              }
              return this.container;
            }
          }]);
          return StampAnnotationElement;
        }(AnnotationElement);
        var _trigger = /*#__PURE__*/new WeakMap();
        var FileAttachmentAnnotationElement = /*#__PURE__*/function (_AnnotationElement17) {
          _inherits(FileAttachmentAnnotationElement, _AnnotationElement17);
          var _super51 = _createSuper(FileAttachmentAnnotationElement);
          function FileAttachmentAnnotationElement(parameters) {
            var _this76$linkService$e;
            var _this76;
            _classCallCheck(this, FileAttachmentAnnotationElement);
            _this76 = _super51.call(this, parameters, {
              isRenderable: true
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this76), _trigger, {
              writable: true,
              value: null
            });
            var _this76$data$file = _this76.data.file,
              filename = _this76$data$file.filename,
              content = _this76$data$file.content;
            _this76.filename = (0, _display_utils.getFilenameFromUrl)(filename, true);
            _this76.content = content;
            (_this76$linkService$e = _this76.linkService.eventBus) === null || _this76$linkService$e === void 0 ? void 0 : _this76$linkService$e.dispatch("fileattachmentannotation", {
              source: _assertThisInitialized(_this76),
              filename: filename,
              content: content
            });
            return _this76;
          }
          _createClass(FileAttachmentAnnotationElement, [{
            key: "render",
            value: function render() {
              var _this$data$titleObj, _this$data$contentsOb;
              this.container.classList.add("fileAttachmentAnnotation");
              var trigger;
              if (this.data.hasAppearance) {
                trigger = document.createElement("div");
              } else {
                trigger = document.createElement("img");
                trigger.src = "".concat(this.imageResourcesPath, "annotation-").concat(/paperclip/i.test(this.data.name) ? "paperclip" : "pushpin", ".svg");
              }
              trigger.classList.add("popupTriggerArea");
              trigger.addEventListener("dblclick", this._download.bind(this));
              _classPrivateFieldSet(this, _trigger, trigger);
              if (!this.data.popupRef && ((_this$data$titleObj = this.data.titleObj) !== null && _this$data$titleObj !== void 0 && _this$data$titleObj.str || (_this$data$contentsOb = this.data.contentsObj) !== null && _this$data$contentsOb !== void 0 && _this$data$contentsOb.str || this.data.richText)) {
                this._createPopup();
              }
              this.container.append(trigger);
              return this.container;
            }
          }, {
            key: "getElementsToTriggerPopup",
            value: function getElementsToTriggerPopup() {
              return _classPrivateFieldGet(this, _trigger);
            }
          }, {
            key: "addHighlightArea",
            value: function addHighlightArea() {
              this.container.classList.add("highlightArea");
            }
          }, {
            key: "_download",
            value: function _download() {
              var _this$downloadManager;
              (_this$downloadManager = this.downloadManager) === null || _this$downloadManager === void 0 ? void 0 : _this$downloadManager.openOrDownloadData(this.container, this.content, this.filename);
            }
          }]);
          return FileAttachmentAnnotationElement;
        }(AnnotationElement);
        var _accessibilityManager2 = /*#__PURE__*/new WeakMap();
        var _annotationCanvasMap = /*#__PURE__*/new WeakMap();
        var _editableAnnotations = /*#__PURE__*/new WeakMap();
        var _appendElement = /*#__PURE__*/new WeakSet();
        var _setAnnotationCanvasMap = /*#__PURE__*/new WeakSet();
        var AnnotationLayer = /*#__PURE__*/function () {
          function AnnotationLayer(_ref68) {
            var div = _ref68.div,
              accessibilityManager = _ref68.accessibilityManager,
              annotationCanvasMap = _ref68.annotationCanvasMap,
              l10n = _ref68.l10n,
              page = _ref68.page,
              viewport = _ref68.viewport;
            _classCallCheck(this, AnnotationLayer);
            _classPrivateMethodInitSpec(this, _setAnnotationCanvasMap);
            _classPrivateMethodInitSpec(this, _appendElement);
            _classPrivateFieldInitSpec(this, _accessibilityManager2, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _annotationCanvasMap, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(this, _editableAnnotations, {
              writable: true,
              value: new Map()
            });
            this.div = div;
            _classPrivateFieldSet(this, _accessibilityManager2, accessibilityManager);
            _classPrivateFieldSet(this, _annotationCanvasMap, annotationCanvasMap);
            this.l10n = l10n;
            this.page = page;
            this.viewport = viewport;
            this.zIndex = 0;
            var _w_pdfjs_require__4 = __w_pdfjs_require__(32),
              NullL10n = _w_pdfjs_require__4.NullL10n;
            this.l10n || (this.l10n = NullL10n);
          }
          _createClass(AnnotationLayer, [{
            key: "render",
            value: function () {
              var _render2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(params) {
                var annotations, layer, popupToElements, elementParams, _iterator118, _step118, data, isPopupAnnotation, _getRectDims8, width, height, elements, element, _elements2, rendered, _iterator119, _step119, renderedElement;
                return _regeneratorRuntime().wrap(function _callee21$(_context21) {
                  while (1) switch (_context21.prev = _context21.next) {
                    case 0:
                      annotations = params.annotations;
                      layer = this.div;
                      (0, _display_utils.setLayerDimensions)(layer, this.viewport);
                      popupToElements = new Map();
                      elementParams = {
                        data: null,
                        layer: layer,
                        linkService: params.linkService,
                        downloadManager: params.downloadManager,
                        imageResourcesPath: params.imageResourcesPath || "",
                        renderForms: params.renderForms !== false,
                        svgFactory: new _display_utils.DOMSVGFactory(),
                        annotationStorage: params.annotationStorage || new _annotation_storage.AnnotationStorage(),
                        enableScripting: params.enableScripting === true,
                        hasJSActions: params.hasJSActions,
                        fieldObjects: params.fieldObjects,
                        parent: this,
                        elements: null
                      };
                      _iterator118 = _createForOfIteratorHelper(annotations);
                      _context21.prev = 6;
                      _iterator118.s();
                    case 8:
                      if ((_step118 = _iterator118.n()).done) {
                        _context21.next = 34;
                        break;
                      }
                      data = _step118.value;
                      if (!data.noHTML) {
                        _context21.next = 12;
                        break;
                      }
                      return _context21.abrupt("continue", 32);
                    case 12:
                      isPopupAnnotation = data.annotationType === _util.AnnotationType.POPUP;
                      if (isPopupAnnotation) {
                        _context21.next = 19;
                        break;
                      }
                      _getRectDims8 = getRectDims(data.rect), width = _getRectDims8.width, height = _getRectDims8.height;
                      if (!(width <= 0 || height <= 0)) {
                        _context21.next = 17;
                        break;
                      }
                      return _context21.abrupt("continue", 32);
                    case 17:
                      _context21.next = 23;
                      break;
                    case 19:
                      elements = popupToElements.get(data.id);
                      if (elements) {
                        _context21.next = 22;
                        break;
                      }
                      return _context21.abrupt("continue", 32);
                    case 22:
                      elementParams.elements = elements;
                    case 23:
                      elementParams.data = data;
                      element = AnnotationElementFactory.create(elementParams);
                      if (element.isRenderable) {
                        _context21.next = 27;
                        break;
                      }
                      return _context21.abrupt("continue", 32);
                    case 27:
                      if (!isPopupAnnotation && data.popupRef) {
                        _elements2 = popupToElements.get(data.popupRef);
                        if (!_elements2) {
                          popupToElements.set(data.popupRef, [element]);
                        } else {
                          _elements2.push(element);
                        }
                      }
                      if (element.annotationEditorType > 0) {
                        _classPrivateFieldGet(this, _editableAnnotations).set(element.data.id, element);
                      }
                      rendered = element.render();
                      if (data.hidden) {
                        rendered.style.visibility = "hidden";
                      }
                      if (Array.isArray(rendered)) {
                        _iterator119 = _createForOfIteratorHelper(rendered);
                        try {
                          for (_iterator119.s(); !(_step119 = _iterator119.n()).done;) {
                            renderedElement = _step119.value;
                            _classPrivateMethodGet(this, _appendElement, _appendElement2).call(this, renderedElement, data.id);
                          }
                        } catch (err) {
                          _iterator119.e(err);
                        } finally {
                          _iterator119.f();
                        }
                      } else {
                        _classPrivateMethodGet(this, _appendElement, _appendElement2).call(this, rendered, data.id);
                      }
                    case 32:
                      _context21.next = 8;
                      break;
                    case 34:
                      _context21.next = 39;
                      break;
                    case 36:
                      _context21.prev = 36;
                      _context21.t0 = _context21["catch"](6);
                      _iterator118.e(_context21.t0);
                    case 39:
                      _context21.prev = 39;
                      _iterator118.f();
                      return _context21.finish(39);
                    case 42:
                      _classPrivateMethodGet(this, _setAnnotationCanvasMap, _setAnnotationCanvasMap2).call(this);
                      _context21.next = 45;
                      return this.l10n.translate(layer);
                    case 45:
                    case "end":
                      return _context21.stop();
                  }
                }, _callee21, this, [[6, 36, 39, 42]]);
              }));
              function render(_x11) {
                return _render2.apply(this, arguments);
              }
              return render;
            }()
          }, {
            key: "update",
            value: function update(_ref69) {
              var viewport = _ref69.viewport;
              var layer = this.div;
              this.viewport = viewport;
              (0, _display_utils.setLayerDimensions)(layer, {
                rotation: viewport.rotation
              });
              _classPrivateMethodGet(this, _setAnnotationCanvasMap, _setAnnotationCanvasMap2).call(this);
              layer.hidden = false;
            }
          }, {
            key: "getEditableAnnotations",
            value: function getEditableAnnotations() {
              return Array.from(_classPrivateFieldGet(this, _editableAnnotations).values());
            }
          }, {
            key: "getEditableAnnotation",
            value: function getEditableAnnotation(id) {
              return _classPrivateFieldGet(this, _editableAnnotations).get(id);
            }
          }]);
          return AnnotationLayer;
        }();
        function _appendElement2(element, id) {
          var _classPrivateFieldGet18;
          var contentElement = element.firstChild || element;
          contentElement.id = "".concat(_display_utils.AnnotationPrefix).concat(id);
          this.div.append(element);
          (_classPrivateFieldGet18 = _classPrivateFieldGet(this, _accessibilityManager2)) === null || _classPrivateFieldGet18 === void 0 ? void 0 : _classPrivateFieldGet18.moveElementInDOM(this.div, element, contentElement, false);
        }
        function _setAnnotationCanvasMap2() {
          if (!_classPrivateFieldGet(this, _annotationCanvasMap)) {
            return;
          }
          var layer = this.div;
          var _iterator120 = _createForOfIteratorHelper(_classPrivateFieldGet(this, _annotationCanvasMap)),
            _step120;
          try {
            for (_iterator120.s(); !(_step120 = _iterator120.n()).done;) {
              var _step120$value = _slicedToArray(_step120.value, 2),
                id = _step120$value[0],
                canvas = _step120$value[1];
              var element = layer.querySelector("[data-annotation-id=\"".concat(id, "\"]"));
              if (!element) {
                continue;
              }
              var firstChild = element.firstChild;
              if (!firstChild) {
                element.append(canvas);
              } else if (firstChild.nodeName === "CANVAS") {
                firstChild.replaceWith(canvas);
              } else {
                firstChild.before(canvas);
              }
            }
          } catch (err) {
            _iterator120.e(err);
          } finally {
            _iterator120.f();
          }
          _classPrivateFieldGet(this, _annotationCanvasMap).clear();
        }
        exports.AnnotationLayer = AnnotationLayer;

        /***/
      }, /* 30 */
      /***/function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ColorConverters = void 0;
        function makeColorComp(n) {
          return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, "0");
        }
        var ColorConverters = /*#__PURE__*/function () {
          function ColorConverters() {
            _classCallCheck(this, ColorConverters);
          }
          _createClass(ColorConverters, null, [{
            key: "CMYK_G",
            value: function CMYK_G(_ref70) {
              var _ref71 = _slicedToArray(_ref70, 4),
                c = _ref71[0],
                y = _ref71[1],
                m = _ref71[2],
                k = _ref71[3];
              return ["G", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];
            }
          }, {
            key: "G_CMYK",
            value: function G_CMYK(_ref72) {
              var _ref73 = _slicedToArray(_ref72, 1),
                g = _ref73[0];
              return ["CMYK", 0, 0, 0, 1 - g];
            }
          }, {
            key: "G_RGB",
            value: function G_RGB(_ref74) {
              var _ref75 = _slicedToArray(_ref74, 1),
                g = _ref75[0];
              return ["RGB", g, g, g];
            }
          }, {
            key: "G_HTML",
            value: function G_HTML(_ref76) {
              var _ref77 = _slicedToArray(_ref76, 1),
                g = _ref77[0];
              var G = makeColorComp(g);
              return "#".concat(G).concat(G).concat(G);
            }
          }, {
            key: "RGB_G",
            value: function RGB_G(_ref78) {
              var _ref79 = _slicedToArray(_ref78, 3),
                r = _ref79[0],
                g = _ref79[1],
                b = _ref79[2];
              return ["G", 0.3 * r + 0.59 * g + 0.11 * b];
            }
          }, {
            key: "RGB_HTML",
            value: function RGB_HTML(_ref80) {
              var _ref81 = _slicedToArray(_ref80, 3),
                r = _ref81[0],
                g = _ref81[1],
                b = _ref81[2];
              var R = makeColorComp(r);
              var G = makeColorComp(g);
              var B = makeColorComp(b);
              return "#".concat(R).concat(G).concat(B);
            }
          }, {
            key: "T_HTML",
            value: function T_HTML() {
              return "#00000000";
            }
          }, {
            key: "CMYK_RGB",
            value: function CMYK_RGB(_ref82) {
              var _ref83 = _slicedToArray(_ref82, 4),
                c = _ref83[0],
                y = _ref83[1],
                m = _ref83[2],
                k = _ref83[3];
              return ["RGB", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];
            }
          }, {
            key: "CMYK_HTML",
            value: function CMYK_HTML(components) {
              var rgb = this.CMYK_RGB(components).slice(1);
              return this.RGB_HTML(rgb);
            }
          }, {
            key: "RGB_CMYK",
            value: function RGB_CMYK(_ref84) {
              var _ref85 = _slicedToArray(_ref84, 3),
                r = _ref85[0],
                g = _ref85[1],
                b = _ref85[2];
              var c = 1 - r;
              var m = 1 - g;
              var y = 1 - b;
              var k = Math.min(c, m, y);
              return ["CMYK", c, m, y, k];
            }
          }]);
          return ColorConverters;
        }();
        exports.ColorConverters = ColorConverters;

        /***/
      }, /* 31 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.XfaLayer = void 0;
        var _xfa_text = __w_pdfjs_require__(19);
        var XfaLayer = /*#__PURE__*/function () {
          function XfaLayer() {
            _classCallCheck(this, XfaLayer);
          }
          _createClass(XfaLayer, null, [{
            key: "setupStorage",
            value: function setupStorage(html, id, element, storage, intent) {
              var storedData = storage.getValue(id, {
                value: null
              });
              switch (element.name) {
                case "textarea":
                  if (storedData.value !== null) {
                    html.textContent = storedData.value;
                  }
                  if (intent === "print") {
                    break;
                  }
                  html.addEventListener("input", function (event) {
                    storage.setValue(id, {
                      value: event.target.value
                    });
                  });
                  break;
                case "input":
                  if (element.attributes.type === "radio" || element.attributes.type === "checkbox") {
                    if (storedData.value === element.attributes.xfaOn) {
                      html.setAttribute("checked", true);
                    } else if (storedData.value === element.attributes.xfaOff) {
                      html.removeAttribute("checked");
                    }
                    if (intent === "print") {
                      break;
                    }
                    html.addEventListener("change", function (event) {
                      storage.setValue(id, {
                        value: event.target.checked ? event.target.getAttribute("xfaOn") : event.target.getAttribute("xfaOff")
                      });
                    });
                  } else {
                    if (storedData.value !== null) {
                      html.setAttribute("value", storedData.value);
                    }
                    if (intent === "print") {
                      break;
                    }
                    html.addEventListener("input", function (event) {
                      storage.setValue(id, {
                        value: event.target.value
                      });
                    });
                  }
                  break;
                case "select":
                  if (storedData.value !== null) {
                    var _iterator121 = _createForOfIteratorHelper(element.children),
                      _step121;
                    try {
                      for (_iterator121.s(); !(_step121 = _iterator121.n()).done;) {
                        var option = _step121.value;
                        if (option.attributes.value === storedData.value) {
                          option.attributes.selected = true;
                        }
                      }
                    } catch (err) {
                      _iterator121.e(err);
                    } finally {
                      _iterator121.f();
                    }
                  }
                  html.addEventListener("input", function (event) {
                    var options = event.target.options;
                    var value = options.selectedIndex === -1 ? "" : options[options.selectedIndex].value;
                    storage.setValue(id, {
                      value: value
                    });
                  });
                  break;
              }
            }
          }, {
            key: "setAttributes",
            value: function setAttributes(_ref86) {
              var html = _ref86.html,
                element = _ref86.element,
                _ref86$storage = _ref86.storage,
                storage = _ref86$storage === void 0 ? null : _ref86$storage,
                intent = _ref86.intent,
                linkService = _ref86.linkService;
              var attributes = element.attributes;
              var isHTMLAnchorElement = html instanceof HTMLAnchorElement;
              if (attributes.type === "radio") {
                attributes.name = "".concat(attributes.name, "-").concat(intent);
              }
              for (var _i20 = 0, _Object$entries4 = Object.entries(attributes); _i20 < _Object$entries4.length; _i20++) {
                var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i20], 2),
                  key = _Object$entries4$_i[0],
                  value = _Object$entries4$_i[1];
                if (value === null || value === undefined) {
                  continue;
                }
                switch (key) {
                  case "class":
                    if (value.length) {
                      html.setAttribute(key, value.join(" "));
                    }
                    break;
                  case "dataId":
                    break;
                  case "id":
                    html.setAttribute("data-element-id", value);
                    break;
                  case "style":
                    Object.assign(html.style, value);
                    break;
                  case "textContent":
                    html.textContent = value;
                    break;
                  default:
                    if (!isHTMLAnchorElement || key !== "href" && key !== "newWindow") {
                      html.setAttribute(key, value);
                    }
                }
              }
              if (isHTMLAnchorElement) {
                linkService.addLinkAttributes(html, attributes.href, attributes.newWindow);
              }
              if (storage && attributes.dataId) {
                this.setupStorage(html, attributes.dataId, element, storage);
              }
            }
          }, {
            key: "render",
            value: function render(parameters) {
              var storage = parameters.annotationStorage;
              var linkService = parameters.linkService;
              var root = parameters.xfaHtml;
              var intent = parameters.intent || "display";
              var rootHtml = document.createElement(root.name);
              if (root.attributes) {
                this.setAttributes({
                  html: rootHtml,
                  element: root,
                  intent: intent,
                  linkService: linkService
                });
              }
              var stack = [[root, -1, rootHtml]];
              var rootDiv = parameters.div;
              rootDiv.append(rootHtml);
              if (parameters.viewport) {
                var transform = "matrix(".concat(parameters.viewport.transform.join(","), ")");
                rootDiv.style.transform = transform;
              }
              if (intent !== "richText") {
                rootDiv.setAttribute("class", "xfaLayer xfaFont");
              }
              var textDivs = [];
              while (stack.length > 0) {
                var _child$attributes;
                var _stack$at = stack.at(-1),
                  _stack$at2 = _slicedToArray(_stack$at, 3),
                  parent = _stack$at2[0],
                  i = _stack$at2[1],
                  html = _stack$at2[2];
                if (i + 1 === parent.children.length) {
                  stack.pop();
                  continue;
                }
                var child = parent.children[++stack.at(-1)[1]];
                if (child === null) {
                  continue;
                }
                var name = child.name;
                if (name === "#text") {
                  var node = document.createTextNode(child.value);
                  textDivs.push(node);
                  html.append(node);
                  continue;
                }
                var childHtml = void 0;
                if (child !== null && child !== void 0 && (_child$attributes = child.attributes) !== null && _child$attributes !== void 0 && _child$attributes.xmlns) {
                  childHtml = document.createElementNS(child.attributes.xmlns, name);
                } else {
                  childHtml = document.createElement(name);
                }
                html.append(childHtml);
                if (child.attributes) {
                  this.setAttributes({
                    html: childHtml,
                    element: child,
                    storage: storage,
                    intent: intent,
                    linkService: linkService
                  });
                }
                if (child.children && child.children.length > 0) {
                  stack.push([child, -1, childHtml]);
                } else if (child.value) {
                  var _node = document.createTextNode(child.value);
                  if (_xfa_text.XfaText.shouldBuildText(name)) {
                    textDivs.push(_node);
                  }
                  childHtml.append(_node);
                }
              }
              var _iterator122 = _createForOfIteratorHelper(rootDiv.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea")),
                _step122;
              try {
                for (_iterator122.s(); !(_step122 = _iterator122.n()).done;) {
                  var el = _step122.value;
                  el.setAttribute("readOnly", true);
                }
              } catch (err) {
                _iterator122.e(err);
              } finally {
                _iterator122.f();
              }
              return {
                textDivs: textDivs
              };
            }
          }, {
            key: "update",
            value: function update(parameters) {
              var transform = "matrix(".concat(parameters.viewport.transform.join(","), ")");
              parameters.div.style.transform = transform;
              parameters.div.hidden = false;
            }
          }]);
          return XfaLayer;
        }();
        exports.XfaLayer = XfaLayer;

        /***/
      }, /* 32 */
      /***/function (__unused_webpack_module, exports) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NullL10n = void 0;
        exports.getL10nFallback = getL10nFallback;
        var DEFAULT_L10N_STRINGS = {
          of_pages: "of {{pagesCount}}",
          page_of_pages: "({{pageNumber}} of {{pagesCount}})",
          document_properties_kb: "{{size_kb}} KB ({{size_b}} bytes)",
          document_properties_mb: "{{size_mb}} MB ({{size_b}} bytes)",
          document_properties_date_string: "{{date}}, {{time}}",
          document_properties_page_size_unit_inches: "in",
          document_properties_page_size_unit_millimeters: "mm",
          document_properties_page_size_orientation_portrait: "portrait",
          document_properties_page_size_orientation_landscape: "landscape",
          document_properties_page_size_name_a3: "A3",
          document_properties_page_size_name_a4: "A4",
          document_properties_page_size_name_letter: "Letter",
          document_properties_page_size_name_legal: "Legal",
          document_properties_page_size_dimension_string: "{{width}} × {{height}} {{unit}} ({{orientation}})",
          document_properties_page_size_dimension_name_string: "{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})",
          document_properties_linearized_yes: "Yes",
          document_properties_linearized_no: "No",
          additional_layers: "Additional Layers",
          page_landmark: "Page {{page}}",
          thumb_page_title: "Page {{page}}",
          thumb_page_canvas: "Thumbnail of Page {{page}}",
          find_reached_top: "Reached top of document, continued from bottom",
          find_reached_bottom: "Reached end of document, continued from top",
          "find_match_count[one]": "{{current}} of {{total}} match",
          "find_match_count[other]": "{{current}} of {{total}} matches",
          "find_match_count_limit[one]": "More than {{limit}} match",
          "find_match_count_limit[other]": "More than {{limit}} matches",
          find_not_found: "Phrase not found",
          page_scale_width: "Page Width",
          page_scale_fit: "Page Fit",
          page_scale_auto: "Automatic Zoom",
          page_scale_actual: "Actual Size",
          page_scale_percent: "{{scale}}%",
          loading_error: "An error occurred while loading the PDF.",
          invalid_file_error: "Invalid or corrupted PDF file.",
          missing_file_error: "Missing PDF file.",
          unexpected_response_error: "Unexpected server response.",
          rendering_error: "An error occurred while rendering the page.",
          annotation_date_string: "{{date}}, {{time}}",
          printing_not_supported: "Warning: Printing is not fully supported by this browser.",
          printing_not_ready: "Warning: The PDF is not fully loaded for printing.",
          web_fonts_disabled: "Web fonts are disabled: unable to use embedded PDF fonts.",
          free_text2_default_content: "Start typing…",
          editor_free_text2_aria_label: "Text Editor",
          editor_ink2_aria_label: "Draw Editor",
          editor_ink_canvas_aria_label: "User-created image"
        };
        {
          DEFAULT_L10N_STRINGS.print_progress_percent = "{{progress}}%";
        }
        function getL10nFallback(key, args) {
          switch (key) {
            case "find_match_count":
              key = "find_match_count[".concat(args.total === 1 ? "one" : "other", "]");
              break;
            case "find_match_count_limit":
              key = "find_match_count_limit[".concat(args.limit === 1 ? "one" : "other", "]");
              break;
          }
          return DEFAULT_L10N_STRINGS[key] || "";
        }
        function formatL10nValue(text, args) {
          if (!args) {
            return text;
          }
          return text.replaceAll(/\{\{\s*(\w+)\s*\}\}/g, function (all, name) {
            return name in args ? args[name] : "{{" + name + "}}";
          });
        }
        var NullL10n = {
          getLanguage: function getLanguage() {
            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
              return _regeneratorRuntime().wrap(function _callee22$(_context22) {
                while (1) switch (_context22.prev = _context22.next) {
                  case 0:
                    return _context22.abrupt("return", "en-us");
                  case 1:
                  case "end":
                    return _context22.stop();
                }
              }, _callee22);
            }))();
          },
          getDirection: function getDirection() {
            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {
              return _regeneratorRuntime().wrap(function _callee23$(_context23) {
                while (1) switch (_context23.prev = _context23.next) {
                  case 0:
                    return _context23.abrupt("return", "ltr");
                  case 1:
                  case "end":
                    return _context23.stop();
                }
              }, _callee23);
            }))();
          },
          get: function get(key) {
            var _arguments = arguments;
            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {
              var args, fallback;
              return _regeneratorRuntime().wrap(function _callee24$(_context24) {
                while (1) switch (_context24.prev = _context24.next) {
                  case 0:
                    args = _arguments.length > 1 && _arguments[1] !== undefined ? _arguments[1] : null;
                    fallback = _arguments.length > 2 && _arguments[2] !== undefined ? _arguments[2] : getL10nFallback(key, args);
                    return _context24.abrupt("return", formatL10nValue(fallback, args));
                  case 3:
                  case "end":
                    return _context24.stop();
                }
              }, _callee24);
            }))();
          },
          translate: function translate(element) {
            return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {
              return _regeneratorRuntime().wrap(function _callee25$(_context25) {
                while (1) switch (_context25.prev = _context25.next) {
                  case 0:
                  case "end":
                    return _context25.stop();
                }
              }, _callee25);
            }))();
          }
        };
        exports.NullL10n = NullL10n;

        /***/
      }, /* 33 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InkEditor = void 0;
        var _util = __w_pdfjs_require__(1);
        var _editor = __w_pdfjs_require__(4);
        var _annotation_layer = __w_pdfjs_require__(29);
        var _tools = __w_pdfjs_require__(5);
        var RESIZER_SIZE = 16;
        var _aspectRatio = /*#__PURE__*/new WeakMap();
        var _baseHeight = /*#__PURE__*/new WeakMap();
        var _baseWidth = /*#__PURE__*/new WeakMap();
        var _boundCanvasContextMenu = /*#__PURE__*/new WeakMap();
        var _boundCanvasPointermove = /*#__PURE__*/new WeakMap();
        var _boundCanvasPointerleave = /*#__PURE__*/new WeakMap();
        var _boundCanvasPointerup = /*#__PURE__*/new WeakMap();
        var _boundCanvasPointerdown = /*#__PURE__*/new WeakMap();
        var _currentPath2D = /*#__PURE__*/new WeakMap();
        var _disableEditing = /*#__PURE__*/new WeakMap();
        var _hasSomethingToDraw = /*#__PURE__*/new WeakMap();
        var _isCanvasInitialized = /*#__PURE__*/new WeakMap();
        var _observer = /*#__PURE__*/new WeakMap();
        var _realWidth = /*#__PURE__*/new WeakMap();
        var _realHeight = /*#__PURE__*/new WeakMap();
        var _requestFrameCallback = /*#__PURE__*/new WeakMap();
        var _updateThickness = /*#__PURE__*/new WeakSet();
        var _updateColor3 = /*#__PURE__*/new WeakSet();
        var _updateOpacity = /*#__PURE__*/new WeakSet();
        var _getInitialBBox = /*#__PURE__*/new WeakSet();
        var _setStroke = /*#__PURE__*/new WeakSet();
        var _startDrawing = /*#__PURE__*/new WeakSet();
        var _draw = /*#__PURE__*/new WeakSet();
        var _endPath = /*#__PURE__*/new WeakSet();
        var _stopDrawing = /*#__PURE__*/new WeakSet();
        var _drawPoints = /*#__PURE__*/new WeakSet();
        var _makeBezierCurve = /*#__PURE__*/new WeakSet();
        var _generateBezierPoints = /*#__PURE__*/new WeakSet();
        var _redraw = /*#__PURE__*/new WeakSet();
        var _endDrawing = /*#__PURE__*/new WeakSet();
        var _createCanvas2 = /*#__PURE__*/new WeakSet();
        var _createObserver = /*#__PURE__*/new WeakSet();
        var _setCanvasDims = /*#__PURE__*/new WeakSet();
        var _setScaleFactor = /*#__PURE__*/new WeakSet();
        var _updateTransform = /*#__PURE__*/new WeakSet();
        var _serializePaths = /*#__PURE__*/new WeakSet();
        var _getBbox = /*#__PURE__*/new WeakSet();
        var _getPadding = /*#__PURE__*/new WeakSet();
        var _fitToContent = /*#__PURE__*/new WeakSet();
        var _setMinDims = /*#__PURE__*/new WeakSet();
        var InkEditor = /*#__PURE__*/function (_editor$AnnotationEdi2) {
          _inherits(InkEditor, _editor$AnnotationEdi2);
          var _super52 = _createSuper(InkEditor);
          function InkEditor(params) {
            var _this78;
            _classCallCheck(this, InkEditor);
            _this78 = _super52.call(this, _objectSpread(_objectSpread({}, params), {}, {
              name: "inkEditor"
            }));
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _setMinDims);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _fitToContent);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _getPadding);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _getBbox);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _serializePaths);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _updateTransform);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _setScaleFactor);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _setCanvasDims);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _createObserver);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _createCanvas2);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _endDrawing);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _redraw);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _generateBezierPoints);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _makeBezierCurve);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _drawPoints);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _stopDrawing);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _endPath);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _draw);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _startDrawing);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _setStroke);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _getInitialBBox);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _updateOpacity);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _updateColor3);
            _classPrivateMethodInitSpec(_assertThisInitialized(_this78), _updateThickness);
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _aspectRatio, {
              writable: true,
              value: 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _baseHeight, {
              writable: true,
              value: 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _baseWidth, {
              writable: true,
              value: 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _boundCanvasContextMenu, {
              writable: true,
              value: _this78.canvasContextMenu.bind(_assertThisInitialized(_this78))
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _boundCanvasPointermove, {
              writable: true,
              value: _this78.canvasPointermove.bind(_assertThisInitialized(_this78))
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _boundCanvasPointerleave, {
              writable: true,
              value: _this78.canvasPointerleave.bind(_assertThisInitialized(_this78))
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _boundCanvasPointerup, {
              writable: true,
              value: _this78.canvasPointerup.bind(_assertThisInitialized(_this78))
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _boundCanvasPointerdown, {
              writable: true,
              value: _this78.canvasPointerdown.bind(_assertThisInitialized(_this78))
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _currentPath2D, {
              writable: true,
              value: new Path2D()
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _disableEditing, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _hasSomethingToDraw, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _isCanvasInitialized, {
              writable: true,
              value: false
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _observer, {
              writable: true,
              value: null
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _realWidth, {
              writable: true,
              value: 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _realHeight, {
              writable: true,
              value: 0
            });
            _classPrivateFieldInitSpec(_assertThisInitialized(_this78), _requestFrameCallback, {
              writable: true,
              value: null
            });
            _this78.color = params.color || null;
            _this78.thickness = params.thickness || null;
            _this78.opacity = params.opacity || null;
            _this78.paths = [];
            _this78.bezierPath2D = [];
            _this78.allRawPaths = [];
            _this78.currentPath = [];
            _this78.scaleFactor = 1;
            _this78.translationX = _this78.translationY = 0;
            _this78.x = 0;
            _this78.y = 0;
            return _this78;
          }
          _createClass(InkEditor, [{
            key: "updateParams",
            value: function updateParams(type, value) {
              switch (type) {
                case _util.AnnotationEditorParamsType.INK_THICKNESS:
                  _classPrivateMethodGet(this, _updateThickness, _updateThickness2).call(this, value);
                  break;
                case _util.AnnotationEditorParamsType.INK_COLOR:
                  _classPrivateMethodGet(this, _updateColor3, _updateColor4).call(this, value);
                  break;
                case _util.AnnotationEditorParamsType.INK_OPACITY:
                  _classPrivateMethodGet(this, _updateOpacity, _updateOpacity2).call(this, value);
                  break;
              }
            }
          }, {
            key: "propertiesToUpdate",
            get: function get() {
              var _this$opacity;
              return [[_util.AnnotationEditorParamsType.INK_THICKNESS, this.thickness || InkEditor._defaultThickness], [_util.AnnotationEditorParamsType.INK_COLOR, this.color || InkEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor], [_util.AnnotationEditorParamsType.INK_OPACITY, Math.round(100 * ((_this$opacity = this.opacity) !== null && _this$opacity !== void 0 ? _this$opacity : InkEditor._defaultOpacity))]];
            }
          }, {
            key: "rebuild",
            value: function rebuild() {
              _get(_getPrototypeOf(InkEditor.prototype), "rebuild", this).call(this);
              if (this.div === null) {
                return;
              }
              if (!this.canvas) {
                _classPrivateMethodGet(this, _createCanvas2, _createCanvas3).call(this);
                _classPrivateMethodGet(this, _createObserver, _createObserver2).call(this);
              }
              if (!this.isAttachedToDOM) {
                this.parent.add(this);
                _classPrivateMethodGet(this, _setCanvasDims, _setCanvasDims2).call(this);
              }
              _classPrivateMethodGet(this, _fitToContent, _fitToContent2).call(this);
            }
          }, {
            key: "remove",
            value: function remove() {
              if (this.canvas === null) {
                return;
              }
              if (!this.isEmpty()) {
                this.commit();
              }
              this.canvas.width = this.canvas.height = 0;
              this.canvas.remove();
              this.canvas = null;
              _classPrivateFieldGet(this, _observer).disconnect();
              _classPrivateFieldSet(this, _observer, null);
              _get(_getPrototypeOf(InkEditor.prototype), "remove", this).call(this);
            }
          }, {
            key: "setParent",
            value: function setParent(parent) {
              if (!this.parent && parent) {
                this._uiManager.removeShouldRescale(this);
              } else if (this.parent && parent === null) {
                this._uiManager.addShouldRescale(this);
              }
              _get(_getPrototypeOf(InkEditor.prototype), "setParent", this).call(this, parent);
            }
          }, {
            key: "onScaleChanging",
            value: function onScaleChanging() {
              var _this$parentDimension8 = _slicedToArray(this.parentDimensions, 2),
                parentWidth = _this$parentDimension8[0],
                parentHeight = _this$parentDimension8[1];
              var width = this.width * parentWidth;
              var height = this.height * parentHeight;
              this.setDimensions(width, height);
            }
          }, {
            key: "enableEditMode",
            value: function enableEditMode() {
              if (_classPrivateFieldGet(this, _disableEditing) || this.canvas === null) {
                return;
              }
              _get(_getPrototypeOf(InkEditor.prototype), "enableEditMode", this).call(this);
              this.div.draggable = false;
              this.canvas.addEventListener("pointerdown", _classPrivateFieldGet(this, _boundCanvasPointerdown));
            }
          }, {
            key: "disableEditMode",
            value: function disableEditMode() {
              if (!this.isInEditMode() || this.canvas === null) {
                return;
              }
              _get(_getPrototypeOf(InkEditor.prototype), "disableEditMode", this).call(this);
              this.div.draggable = !this.isEmpty();
              this.div.classList.remove("editing");
              this.canvas.removeEventListener("pointerdown", _classPrivateFieldGet(this, _boundCanvasPointerdown));
            }
          }, {
            key: "onceAdded",
            value: function onceAdded() {
              this.div.draggable = !this.isEmpty();
            }
          }, {
            key: "isEmpty",
            value: function isEmpty() {
              return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0;
            }
          }, {
            key: "commit",
            value: function commit() {
              if (_classPrivateFieldGet(this, _disableEditing)) {
                return;
              }
              _get(_getPrototypeOf(InkEditor.prototype), "commit", this).call(this);
              this.isEditing = false;
              this.disableEditMode();
              this.setInForeground();
              _classPrivateFieldSet(this, _disableEditing, true);
              this.div.classList.add("disabled");
              _classPrivateMethodGet(this, _fitToContent, _fitToContent2).call(this, true);
              this.parent.addInkEditorIfNeeded(true);
              this.parent.moveEditorInDOM(this);
              this.div.focus({
                preventScroll: true
              });
            }
          }, {
            key: "focusin",
            value: function focusin(event) {
              _get(_getPrototypeOf(InkEditor.prototype), "focusin", this).call(this, event);
              this.enableEditMode();
            }
          }, {
            key: "canvasPointerdown",
            value: function canvasPointerdown(event) {
              if (event.button !== 0 || !this.isInEditMode() || _classPrivateFieldGet(this, _disableEditing)) {
                return;
              }
              this.setInForeground();
              event.preventDefault();
              if (event.type !== "mouse") {
                this.div.focus();
              }
              _classPrivateMethodGet(this, _startDrawing, _startDrawing2).call(this, event.offsetX, event.offsetY);
            }
          }, {
            key: "canvasContextMenu",
            value: function canvasContextMenu(event) {
              event.preventDefault();
            }
          }, {
            key: "canvasPointermove",
            value: function canvasPointermove(event) {
              event.preventDefault();
              _classPrivateMethodGet(this, _draw, _draw2).call(this, event.offsetX, event.offsetY);
            }
          }, {
            key: "canvasPointerup",
            value: function canvasPointerup(event) {
              event.preventDefault();
              _classPrivateMethodGet(this, _endDrawing, _endDrawing2).call(this, event);
            }
          }, {
            key: "canvasPointerleave",
            value: function canvasPointerleave(event) {
              _classPrivateMethodGet(this, _endDrawing, _endDrawing2).call(this, event);
            }
          }, {
            key: "render",
            value: function render() {
              var _this79 = this;
              if (this.div) {
                return this.div;
              }
              var baseX, baseY;
              if (this.width) {
                baseX = this.x;
                baseY = this.y;
              }
              _get(_getPrototypeOf(InkEditor.prototype), "render", this).call(this);
              InkEditor._l10nPromise.get("editor_ink2_aria_label").then(function (msg) {
                var _this79$div;
                return (_this79$div = _this79.div) === null || _this79$div === void 0 ? void 0 : _this79$div.setAttribute("aria-label", msg);
              });
              var _classPrivateMethodGe = _classPrivateMethodGet(this, _getInitialBBox, _getInitialBBox2).call(this),
                _classPrivateMethodGe2 = _slicedToArray(_classPrivateMethodGe, 4),
                x = _classPrivateMethodGe2[0],
                y = _classPrivateMethodGe2[1],
                w = _classPrivateMethodGe2[2],
                h = _classPrivateMethodGe2[3];
              this.setAt(x, y, 0, 0);
              this.setDims(w, h);
              _classPrivateMethodGet(this, _createCanvas2, _createCanvas3).call(this);
              if (this.width) {
                var _this$parentDimension9 = _slicedToArray(this.parentDimensions, 2),
                  parentWidth = _this$parentDimension9[0],
                  parentHeight = _this$parentDimension9[1];
                this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);
                _classPrivateFieldSet(this, _isCanvasInitialized, true);
                _classPrivateMethodGet(this, _setCanvasDims, _setCanvasDims2).call(this);
                this.setDims(this.width * parentWidth, this.height * parentHeight);
                _classPrivateMethodGet(this, _redraw, _redraw2).call(this);
                _classPrivateMethodGet(this, _setMinDims, _setMinDims2).call(this);
                this.div.classList.add("disabled");
              } else {
                this.div.classList.add("editing");
                this.enableEditMode();
              }
              _classPrivateMethodGet(this, _createObserver, _createObserver2).call(this);
              return this.div;
            }
          }, {
            key: "setDimensions",
            value: function setDimensions(width, height) {
              var roundedWidth = Math.round(width);
              var roundedHeight = Math.round(height);
              if (_classPrivateFieldGet(this, _realWidth) === roundedWidth && _classPrivateFieldGet(this, _realHeight) === roundedHeight) {
                return;
              }
              _classPrivateFieldSet(this, _realWidth, roundedWidth);
              _classPrivateFieldSet(this, _realHeight, roundedHeight);
              this.canvas.style.visibility = "hidden";
              if (_classPrivateFieldGet(this, _aspectRatio) && Math.abs(_classPrivateFieldGet(this, _aspectRatio) - width / height) > 1e-2) {
                height = Math.ceil(width / _classPrivateFieldGet(this, _aspectRatio));
                this.setDims(width, height);
              }
              var _this$parentDimension10 = _slicedToArray(this.parentDimensions, 2),
                parentWidth = _this$parentDimension10[0],
                parentHeight = _this$parentDimension10[1];
              this.width = width / parentWidth;
              this.height = height / parentHeight;
              if (_classPrivateFieldGet(this, _disableEditing)) {
                _classPrivateMethodGet(this, _setScaleFactor, _setScaleFactor2).call(this, width, height);
              }
              _classPrivateMethodGet(this, _setCanvasDims, _setCanvasDims2).call(this);
              _classPrivateMethodGet(this, _redraw, _redraw2).call(this);
              this.canvas.style.visibility = "visible";
              this.fixDims();
            }
          }, {
            key: "serialize",
            value: function serialize() {
              if (this.isEmpty()) {
                return null;
              }
              var rect = this.getRect(0, 0);
              var color = _editor.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);
              return {
                annotationType: _util.AnnotationEditorType.INK,
                color: color,
                thickness: this.thickness,
                opacity: this.opacity,
                paths: _classPrivateMethodGet(this, _serializePaths, _serializePaths2).call(this, this.scaleFactor / this.parentScale, this.translationX, this.translationY, rect),
                pageIndex: this.pageIndex,
                rect: rect,
                rotation: this.rotation
              };
            }
          }], [{
            key: "initialize",
            value: function initialize(l10n) {
              this._l10nPromise = new Map(["editor_ink_canvas_aria_label", "editor_ink2_aria_label"].map(function (str) {
                return [str, l10n.get(str)];
              }));
            }
          }, {
            key: "updateDefaultParams",
            value: function updateDefaultParams(type, value) {
              switch (type) {
                case _util.AnnotationEditorParamsType.INK_THICKNESS:
                  InkEditor._defaultThickness = value;
                  break;
                case _util.AnnotationEditorParamsType.INK_COLOR:
                  InkEditor._defaultColor = value;
                  break;
                case _util.AnnotationEditorParamsType.INK_OPACITY:
                  InkEditor._defaultOpacity = value / 100;
                  break;
              }
            }
          }, {
            key: "defaultPropertiesToUpdate",
            get: function get() {
              return [[_util.AnnotationEditorParamsType.INK_THICKNESS, InkEditor._defaultThickness], [_util.AnnotationEditorParamsType.INK_COLOR, InkEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor], [_util.AnnotationEditorParamsType.INK_OPACITY, Math.round(InkEditor._defaultOpacity * 100)]];
            }
          }, {
            key: "deserialize",
            value: function deserialize(data, parent, uiManager) {
              var _util$Util7;
              if (data instanceof _annotation_layer.InkAnnotationElement) {
                return null;
              }
              var editor = _get(_getPrototypeOf(InkEditor), "deserialize", this).call(this, data, parent, uiManager);
              editor.thickness = data.thickness;
              editor.color = (_util$Util7 = _util.Util).makeHexColor.apply(_util$Util7, _toConsumableArray(data.color));
              editor.opacity = data.opacity;
              var _editor$pageDimension2 = _slicedToArray(editor.pageDimensions, 2),
                pageWidth = _editor$pageDimension2[0],
                pageHeight = _editor$pageDimension2[1];
              var width = editor.width * pageWidth;
              var height = editor.height * pageHeight;
              var scaleFactor = editor.parentScale;
              var padding = data.thickness / 2;
              _classPrivateFieldSet(editor, _aspectRatio, width / height);
              _classPrivateFieldSet(editor, _disableEditing, true);
              _classPrivateFieldSet(editor, _realWidth, Math.round(width));
              _classPrivateFieldSet(editor, _realHeight, Math.round(height));
              var paths = data.paths,
                rect = data.rect,
                rotation = data.rotation;
              var _iterator123 = _createForOfIteratorHelper(paths),
                _step123;
              try {
                for (_iterator123.s(); !(_step123 = _iterator123.n()).done;) {
                  var bezier = _step123.value.bezier;
                  bezier = _classStaticPrivateMethodGet(InkEditor, InkEditor, _fromPDFCoordinates).call(InkEditor, bezier, rect, rotation);
                  var path = [];
                  editor.paths.push(path);
                  var p0 = scaleFactor * (bezier[0] - padding);
                  var p1 = scaleFactor * (bezier[1] - padding);
                  for (var i = 2, ii = bezier.length; i < ii; i += 6) {
                    var p10 = scaleFactor * (bezier[i] - padding);
                    var p11 = scaleFactor * (bezier[i + 1] - padding);
                    var p20 = scaleFactor * (bezier[i + 2] - padding);
                    var p21 = scaleFactor * (bezier[i + 3] - padding);
                    var p30 = scaleFactor * (bezier[i + 4] - padding);
                    var p31 = scaleFactor * (bezier[i + 5] - padding);
                    path.push([[p0, p1], [p10, p11], [p20, p21], [p30, p31]]);
                    p0 = p30;
                    p1 = p31;
                  }
                  var path2D = _classStaticPrivateMethodGet(this, InkEditor, _buildPath2D).call(this, path);
                  editor.bezierPath2D.push(path2D);
                }
              } catch (err) {
                _iterator123.e(err);
              } finally {
                _iterator123.f();
              }
              var bbox = _classPrivateMethodGet(editor, _getBbox, _getBbox2).call(editor);
              _classPrivateFieldSet(editor, _baseWidth, Math.max(RESIZER_SIZE, bbox[2] - bbox[0]));
              _classPrivateFieldSet(editor, _baseHeight, Math.max(RESIZER_SIZE, bbox[3] - bbox[1]));
              _classPrivateMethodGet(editor, _setScaleFactor, _setScaleFactor2).call(editor, width, height);
              return editor;
            }
          }]);
          return InkEditor;
        }(_editor.AnnotationEditor);
        function _updateThickness2(thickness) {
          var _this80 = this;
          var savedThickness = this.thickness;
          this.addCommands({
            cmd: function cmd() {
              _this80.thickness = thickness;
              _classPrivateMethodGet(_this80, _fitToContent, _fitToContent2).call(_this80);
            },
            undo: function undo() {
              _this80.thickness = savedThickness;
              _classPrivateMethodGet(_this80, _fitToContent, _fitToContent2).call(_this80);
            },
            mustExec: true,
            type: _util.AnnotationEditorParamsType.INK_THICKNESS,
            overwriteIfSameType: true,
            keepUndo: true
          });
        }
        function _updateColor4(color) {
          var _this81 = this;
          var savedColor = this.color;
          this.addCommands({
            cmd: function cmd() {
              _this81.color = color;
              _classPrivateMethodGet(_this81, _redraw, _redraw2).call(_this81);
            },
            undo: function undo() {
              _this81.color = savedColor;
              _classPrivateMethodGet(_this81, _redraw, _redraw2).call(_this81);
            },
            mustExec: true,
            type: _util.AnnotationEditorParamsType.INK_COLOR,
            overwriteIfSameType: true,
            keepUndo: true
          });
        }
        function _updateOpacity2(opacity) {
          var _this82 = this;
          opacity /= 100;
          var savedOpacity = this.opacity;
          this.addCommands({
            cmd: function cmd() {
              _this82.opacity = opacity;
              _classPrivateMethodGet(_this82, _redraw, _redraw2).call(_this82);
            },
            undo: function undo() {
              _this82.opacity = savedOpacity;
              _classPrivateMethodGet(_this82, _redraw, _redraw2).call(_this82);
            },
            mustExec: true,
            type: _util.AnnotationEditorParamsType.INK_OPACITY,
            overwriteIfSameType: true,
            keepUndo: true
          });
        }
        function _getInitialBBox2() {
          var parentRotation = this.parentRotation,
            _this$parentDimension11 = _slicedToArray(this.parentDimensions, 2),
            width = _this$parentDimension11[0],
            height = _this$parentDimension11[1];
          switch (parentRotation) {
            case 90:
              return [0, height, height, width];
            case 180:
              return [width, height, width, height];
            case 270:
              return [width, 0, height, width];
            default:
              return [0, 0, width, height];
          }
        }
        function _setStroke2() {
          var ctx = this.ctx,
            color = this.color,
            opacity = this.opacity,
            thickness = this.thickness,
            parentScale = this.parentScale,
            scaleFactor = this.scaleFactor;
          ctx.lineWidth = thickness * parentScale / scaleFactor;
          ctx.lineCap = "round";
          ctx.lineJoin = "round";
          ctx.miterLimit = 10;
          ctx.strokeStyle = "".concat(color).concat((0, _tools.opacityToHex)(opacity));
        }
        function _startDrawing2(x, y) {
          var _this83 = this;
          this.canvas.addEventListener("contextmenu", _classPrivateFieldGet(this, _boundCanvasContextMenu));
          this.canvas.addEventListener("pointerleave", _classPrivateFieldGet(this, _boundCanvasPointerleave));
          this.canvas.addEventListener("pointermove", _classPrivateFieldGet(this, _boundCanvasPointermove));
          this.canvas.addEventListener("pointerup", _classPrivateFieldGet(this, _boundCanvasPointerup));
          this.canvas.removeEventListener("pointerdown", _classPrivateFieldGet(this, _boundCanvasPointerdown));
          this.isEditing = true;
          if (!_classPrivateFieldGet(this, _isCanvasInitialized)) {
            var _this$opacity2;
            _classPrivateFieldSet(this, _isCanvasInitialized, true);
            _classPrivateMethodGet(this, _setCanvasDims, _setCanvasDims2).call(this);
            this.thickness || (this.thickness = InkEditor._defaultThickness);
            this.color || (this.color = InkEditor._defaultColor || _editor.AnnotationEditor._defaultLineColor);
            (_this$opacity2 = this.opacity) !== null && _this$opacity2 !== void 0 ? _this$opacity2 : this.opacity = InkEditor._defaultOpacity;
          }
          this.currentPath.push([x, y]);
          _classPrivateFieldSet(this, _hasSomethingToDraw, false);
          _classPrivateMethodGet(this, _setStroke, _setStroke2).call(this);
          _classPrivateFieldSet(this, _requestFrameCallback, function () {
            _classPrivateMethodGet(_this83, _drawPoints, _drawPoints2).call(_this83);
            if (_classPrivateFieldGet(_this83, _requestFrameCallback)) {
              window.requestAnimationFrame(_classPrivateFieldGet(_this83, _requestFrameCallback));
            }
          });
          window.requestAnimationFrame(_classPrivateFieldGet(this, _requestFrameCallback));
        }
        function _draw2(x, y) {
          var _classPrivateMethodGe3;
          var _this$currentPath$at = this.currentPath.at(-1),
            _this$currentPath$at2 = _slicedToArray(_this$currentPath$at, 2),
            lastX = _this$currentPath$at2[0],
            lastY = _this$currentPath$at2[1];
          if (this.currentPath.length > 1 && x === lastX && y === lastY) {
            return;
          }
          var currentPath = this.currentPath;
          var path2D = _classPrivateFieldGet(this, _currentPath2D);
          currentPath.push([x, y]);
          _classPrivateFieldSet(this, _hasSomethingToDraw, true);
          if (currentPath.length <= 2) {
            var _path2D;
            (_path2D = path2D).moveTo.apply(_path2D, _toConsumableArray(currentPath[0]));
            path2D.lineTo(x, y);
            return;
          }
          if (currentPath.length === 3) {
            var _path2D2;
            _classPrivateFieldSet(this, _currentPath2D, path2D = new Path2D());
            (_path2D2 = path2D).moveTo.apply(_path2D2, _toConsumableArray(currentPath[0]));
          }
          (_classPrivateMethodGe3 = _classPrivateMethodGet(this, _makeBezierCurve, _makeBezierCurve2)).call.apply(_classPrivateMethodGe3, [this, path2D].concat(_toConsumableArray(currentPath.at(-3)), _toConsumableArray(currentPath.at(-2)), [x, y]));
        }
        function _endPath2() {
          var _classPrivateFieldGet19;
          if (this.currentPath.length === 0) {
            return;
          }
          var lastPoint = this.currentPath.at(-1);
          (_classPrivateFieldGet19 = _classPrivateFieldGet(this, _currentPath2D)).lineTo.apply(_classPrivateFieldGet19, _toConsumableArray(lastPoint));
        }
        function _stopDrawing2(x, y) {
          var _this84 = this;
          _classPrivateFieldSet(this, _requestFrameCallback, null);
          x = Math.min(Math.max(x, 0), this.canvas.width);
          y = Math.min(Math.max(y, 0), this.canvas.height);
          _classPrivateMethodGet(this, _draw, _draw2).call(this, x, y);
          _classPrivateMethodGet(this, _endPath, _endPath2).call(this);
          var bezier;
          if (this.currentPath.length !== 1) {
            bezier = _classPrivateMethodGet(this, _generateBezierPoints, _generateBezierPoints2).call(this);
          } else {
            var xy = [x, y];
            bezier = [[xy, xy.slice(), xy.slice(), xy]];
          }
          var path2D = _classPrivateFieldGet(this, _currentPath2D);
          var currentPath = this.currentPath;
          this.currentPath = [];
          _classPrivateFieldSet(this, _currentPath2D, new Path2D());
          var cmd = function cmd() {
            _this84.allRawPaths.push(currentPath);
            _this84.paths.push(bezier);
            _this84.bezierPath2D.push(path2D);
            _this84.rebuild();
          };
          var undo = function undo() {
            _this84.allRawPaths.pop();
            _this84.paths.pop();
            _this84.bezierPath2D.pop();
            if (_this84.paths.length === 0) {
              _this84.remove();
            } else {
              if (!_this84.canvas) {
                _classPrivateMethodGet(_this84, _createCanvas2, _createCanvas3).call(_this84);
                _classPrivateMethodGet(_this84, _createObserver, _createObserver2).call(_this84);
              }
              _classPrivateMethodGet(_this84, _fitToContent, _fitToContent2).call(_this84);
            }
          };
          this.addCommands({
            cmd: cmd,
            undo: undo,
            mustExec: true
          });
        }
        function _drawPoints2() {
          if (!_classPrivateFieldGet(this, _hasSomethingToDraw)) {
            return;
          }
          _classPrivateFieldSet(this, _hasSomethingToDraw, false);
          var thickness = Math.ceil(this.thickness * this.parentScale);
          var lastPoints = this.currentPath.slice(-3);
          var x = lastPoints.map(function (xy) {
            return xy[0];
          });
          var y = lastPoints.map(function (xy) {
            return xy[1];
          });
          var xMin = Math.min.apply(Math, _toConsumableArray(x)) - thickness;
          var xMax = Math.max.apply(Math, _toConsumableArray(x)) + thickness;
          var yMin = Math.min.apply(Math, _toConsumableArray(y)) - thickness;
          var yMax = Math.max.apply(Math, _toConsumableArray(y)) + thickness;
          var ctx = this.ctx;
          ctx.save();
          ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
          var _iterator124 = _createForOfIteratorHelper(this.bezierPath2D),
            _step124;
          try {
            for (_iterator124.s(); !(_step124 = _iterator124.n()).done;) {
              var path = _step124.value;
              ctx.stroke(path);
            }
          } catch (err) {
            _iterator124.e(err);
          } finally {
            _iterator124.f();
          }
          ctx.stroke(_classPrivateFieldGet(this, _currentPath2D));
          ctx.restore();
        }
        function _makeBezierCurve2(path2D, x0, y0, x1, y1, x2, y2) {
          var prevX = (x0 + x1) / 2;
          var prevY = (y0 + y1) / 2;
          var x3 = (x1 + x2) / 2;
          var y3 = (y1 + y2) / 2;
          path2D.bezierCurveTo(prevX + 2 * (x1 - prevX) / 3, prevY + 2 * (y1 - prevY) / 3, x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3, x3, y3);
        }
        function _generateBezierPoints2() {
          var path = this.currentPath;
          if (path.length <= 2) {
            return [[path[0], path[0], path.at(-1), path.at(-1)]];
          }
          var bezierPoints = [];
          var i;
          var _path$ = _slicedToArray(path[0], 2),
            x0 = _path$[0],
            y0 = _path$[1];
          for (i = 1; i < path.length - 2; i++) {
            var _path$i = _slicedToArray(path[i], 2),
              _x12 = _path$i[0],
              _y = _path$i[1];
            var _path = _slicedToArray(path[i + 1], 2),
              _x13 = _path[0],
              _y2 = _path[1];
            var x3 = (_x12 + _x13) / 2;
            var y3 = (_y + _y2) / 2;
            var _control = [x0 + 2 * (_x12 - x0) / 3, y0 + 2 * (_y - y0) / 3];
            var _control2 = [x3 + 2 * (_x12 - x3) / 3, y3 + 2 * (_y - y3) / 3];
            bezierPoints.push([[x0, y0], _control, _control2, [x3, y3]]);
            x0 = x3;
            y0 = y3;
          }
          var _path$i2 = _slicedToArray(path[i], 2),
            x1 = _path$i2[0],
            y1 = _path$i2[1];
          var _path2 = _slicedToArray(path[i + 1], 2),
            x2 = _path2[0],
            y2 = _path2[1];
          var control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];
          var control2 = [x2 + 2 * (x1 - x2) / 3, y2 + 2 * (y1 - y2) / 3];
          bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);
          return bezierPoints;
        }
        function _redraw2() {
          if (this.isEmpty()) {
            _classPrivateMethodGet(this, _updateTransform, _updateTransform2).call(this);
            return;
          }
          _classPrivateMethodGet(this, _setStroke, _setStroke2).call(this);
          var canvas = this.canvas,
            ctx = this.ctx;
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.clearRect(0, 0, canvas.width, canvas.height);
          _classPrivateMethodGet(this, _updateTransform, _updateTransform2).call(this);
          var _iterator125 = _createForOfIteratorHelper(this.bezierPath2D),
            _step125;
          try {
            for (_iterator125.s(); !(_step125 = _iterator125.n()).done;) {
              var path = _step125.value;
              ctx.stroke(path);
            }
          } catch (err) {
            _iterator125.e(err);
          } finally {
            _iterator125.f();
          }
        }
        function _endDrawing2(event) {
          var _this85 = this;
          this.canvas.removeEventListener("pointerleave", _classPrivateFieldGet(this, _boundCanvasPointerleave));
          this.canvas.removeEventListener("pointermove", _classPrivateFieldGet(this, _boundCanvasPointermove));
          this.canvas.removeEventListener("pointerup", _classPrivateFieldGet(this, _boundCanvasPointerup));
          this.canvas.addEventListener("pointerdown", _classPrivateFieldGet(this, _boundCanvasPointerdown));
          setTimeout(function () {
            _this85.canvas.removeEventListener("contextmenu", _classPrivateFieldGet(_this85, _boundCanvasContextMenu));
          }, 10);
          _classPrivateMethodGet(this, _stopDrawing, _stopDrawing2).call(this, event.offsetX, event.offsetY);
          this.addToAnnotationStorage();
          this.setInBackground();
        }
        function _createCanvas3() {
          var _this86 = this;
          this.canvas = document.createElement("canvas");
          this.canvas.width = this.canvas.height = 0;
          this.canvas.className = "inkEditorCanvas";
          InkEditor._l10nPromise.get("editor_ink_canvas_aria_label").then(function (msg) {
            var _this86$canvas;
            return (_this86$canvas = _this86.canvas) === null || _this86$canvas === void 0 ? void 0 : _this86$canvas.setAttribute("aria-label", msg);
          });
          this.div.append(this.canvas);
          this.ctx = this.canvas.getContext("2d");
        }
        function _createObserver2() {
          var _this87 = this;
          _classPrivateFieldSet(this, _observer, new ResizeObserver(function (entries) {
            var rect = entries[0].contentRect;
            if (rect.width && rect.height) {
              _this87.setDimensions(rect.width, rect.height);
            }
          }));
          _classPrivateFieldGet(this, _observer).observe(this.div);
        }
        function _setCanvasDims2() {
          if (!_classPrivateFieldGet(this, _isCanvasInitialized)) {
            return;
          }
          var _this$parentDimension12 = _slicedToArray(this.parentDimensions, 2),
            parentWidth = _this$parentDimension12[0],
            parentHeight = _this$parentDimension12[1];
          this.canvas.width = Math.ceil(this.width * parentWidth);
          this.canvas.height = Math.ceil(this.height * parentHeight);
          _classPrivateMethodGet(this, _updateTransform, _updateTransform2).call(this);
        }
        function _setScaleFactor2(width, height) {
          var padding = _classPrivateMethodGet(this, _getPadding, _getPadding2).call(this);
          var scaleFactorW = (width - padding) / _classPrivateFieldGet(this, _baseWidth);
          var scaleFactorH = (height - padding) / _classPrivateFieldGet(this, _baseHeight);
          this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);
        }
        function _updateTransform2() {
          var padding = _classPrivateMethodGet(this, _getPadding, _getPadding2).call(this) / 2;
          this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + padding, this.translationY * this.scaleFactor + padding);
        }
        function _buildPath2D(bezier) {
          var path2D = new Path2D();
          for (var i = 0, ii = bezier.length; i < ii; i++) {
            var _bezier$i = _slicedToArray(bezier[i], 4),
              first = _bezier$i[0],
              control1 = _bezier$i[1],
              control2 = _bezier$i[2],
              second = _bezier$i[3];
            if (i === 0) {
              path2D.moveTo.apply(path2D, _toConsumableArray(first));
            }
            path2D.bezierCurveTo(control1[0], control1[1], control2[0], control2[1], second[0], second[1]);
          }
          return path2D;
        }
        function _toPDFCoordinates(points, rect, rotation) {
          var _rect3 = _slicedToArray(rect, 4),
            blX = _rect3[0],
            blY = _rect3[1],
            trX = _rect3[2],
            trY = _rect3[3];
          switch (rotation) {
            case 0:
              for (var i = 0, ii = points.length; i < ii; i += 2) {
                points[i] += blX;
                points[i + 1] = trY - points[i + 1];
              }
              break;
            case 90:
              for (var _i21 = 0, _ii2 = points.length; _i21 < _ii2; _i21 += 2) {
                var x = points[_i21];
                points[_i21] = points[_i21 + 1] + blX;
                points[_i21 + 1] = x + blY;
              }
              break;
            case 180:
              for (var _i22 = 0, _ii3 = points.length; _i22 < _ii3; _i22 += 2) {
                points[_i22] = trX - points[_i22];
                points[_i22 + 1] += blY;
              }
              break;
            case 270:
              for (var _i23 = 0, _ii4 = points.length; _i23 < _ii4; _i23 += 2) {
                var _x14 = points[_i23];
                points[_i23] = trX - points[_i23 + 1];
                points[_i23 + 1] = trY - _x14;
              }
              break;
            default:
              throw new Error("Invalid rotation");
          }
          return points;
        }
        function _fromPDFCoordinates(points, rect, rotation) {
          var _rect4 = _slicedToArray(rect, 4),
            blX = _rect4[0],
            blY = _rect4[1],
            trX = _rect4[2],
            trY = _rect4[3];
          switch (rotation) {
            case 0:
              for (var i = 0, ii = points.length; i < ii; i += 2) {
                points[i] -= blX;
                points[i + 1] = trY - points[i + 1];
              }
              break;
            case 90:
              for (var _i24 = 0, _ii5 = points.length; _i24 < _ii5; _i24 += 2) {
                var x = points[_i24];
                points[_i24] = points[_i24 + 1] - blY;
                points[_i24 + 1] = x - blX;
              }
              break;
            case 180:
              for (var _i25 = 0, _ii6 = points.length; _i25 < _ii6; _i25 += 2) {
                points[_i25] = trX - points[_i25];
                points[_i25 + 1] -= blY;
              }
              break;
            case 270:
              for (var _i26 = 0, _ii7 = points.length; _i26 < _ii7; _i26 += 2) {
                var _x15 = points[_i26];
                points[_i26] = trY - points[_i26 + 1];
                points[_i26 + 1] = trX - _x15;
              }
              break;
            default:
              throw new Error("Invalid rotation");
          }
          return points;
        }
        function _serializePaths2(s, tx, ty, rect) {
          var paths = [];
          var padding = this.thickness / 2;
          var shiftX = s * tx + padding;
          var shiftY = s * ty + padding;
          var _iterator126 = _createForOfIteratorHelper(this.paths),
            _step126;
          try {
            for (_iterator126.s(); !(_step126 = _iterator126.n()).done;) {
              var bezier = _step126.value;
              var buffer = [];
              var points = [];
              for (var j = 0, jj = bezier.length; j < jj; j++) {
                var _bezier$j = _slicedToArray(bezier[j], 4),
                  first = _bezier$j[0],
                  control1 = _bezier$j[1],
                  control2 = _bezier$j[2],
                  second = _bezier$j[3];
                var p10 = s * first[0] + shiftX;
                var p11 = s * first[1] + shiftY;
                var p20 = s * control1[0] + shiftX;
                var p21 = s * control1[1] + shiftY;
                var p30 = s * control2[0] + shiftX;
                var p31 = s * control2[1] + shiftY;
                var p40 = s * second[0] + shiftX;
                var p41 = s * second[1] + shiftY;
                if (j === 0) {
                  buffer.push(p10, p11);
                  points.push(p10, p11);
                }
                buffer.push(p20, p21, p30, p31, p40, p41);
                points.push(p20, p21);
                if (j === jj - 1) {
                  points.push(p40, p41);
                }
              }
              paths.push({
                bezier: _classStaticPrivateMethodGet(InkEditor, InkEditor, _toPDFCoordinates).call(InkEditor, buffer, rect, this.rotation),
                points: _classStaticPrivateMethodGet(InkEditor, InkEditor, _toPDFCoordinates).call(InkEditor, points, rect, this.rotation)
              });
            }
          } catch (err) {
            _iterator126.e(err);
          } finally {
            _iterator126.f();
          }
          return paths;
        }
        function _getBbox2() {
          var xMin = Infinity;
          var xMax = -Infinity;
          var yMin = Infinity;
          var yMax = -Infinity;
          var _iterator127 = _createForOfIteratorHelper(this.paths),
            _step127;
          try {
            for (_iterator127.s(); !(_step127 = _iterator127.n()).done;) {
              var path = _step127.value;
              var _iterator128 = _createForOfIteratorHelper(path),
                _step128;
              try {
                for (_iterator128.s(); !(_step128 = _iterator128.n()).done;) {
                  var _util$Util8;
                  var _step128$value = _slicedToArray(_step128.value, 4),
                    first = _step128$value[0],
                    control1 = _step128$value[1],
                    control2 = _step128$value[2],
                    second = _step128$value[3];
                  var bbox = (_util$Util8 = _util.Util).bezierBoundingBox.apply(_util$Util8, _toConsumableArray(first).concat(_toConsumableArray(control1), _toConsumableArray(control2), _toConsumableArray(second)));
                  xMin = Math.min(xMin, bbox[0]);
                  yMin = Math.min(yMin, bbox[1]);
                  xMax = Math.max(xMax, bbox[2]);
                  yMax = Math.max(yMax, bbox[3]);
                }
              } catch (err) {
                _iterator128.e(err);
              } finally {
                _iterator128.f();
              }
            }
          } catch (err) {
            _iterator127.e(err);
          } finally {
            _iterator127.f();
          }
          return [xMin, yMin, xMax, yMax];
        }
        function _getPadding2() {
          return _classPrivateFieldGet(this, _disableEditing) ? Math.ceil(this.thickness * this.parentScale) : 0;
        }
        function _fitToContent2() {
          var firstTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          if (this.isEmpty()) {
            return;
          }
          if (!_classPrivateFieldGet(this, _disableEditing)) {
            _classPrivateMethodGet(this, _redraw, _redraw2).call(this);
            return;
          }
          var bbox = _classPrivateMethodGet(this, _getBbox, _getBbox2).call(this);
          var padding = _classPrivateMethodGet(this, _getPadding, _getPadding2).call(this);
          _classPrivateFieldSet(this, _baseWidth, Math.max(RESIZER_SIZE, bbox[2] - bbox[0]));
          _classPrivateFieldSet(this, _baseHeight, Math.max(RESIZER_SIZE, bbox[3] - bbox[1]));
          var width = Math.ceil(padding + _classPrivateFieldGet(this, _baseWidth) * this.scaleFactor);
          var height = Math.ceil(padding + _classPrivateFieldGet(this, _baseHeight) * this.scaleFactor);
          var _this$parentDimension13 = _slicedToArray(this.parentDimensions, 2),
            parentWidth = _this$parentDimension13[0],
            parentHeight = _this$parentDimension13[1];
          this.width = width / parentWidth;
          this.height = height / parentHeight;
          _classPrivateFieldSet(this, _aspectRatio, width / height);
          _classPrivateMethodGet(this, _setMinDims, _setMinDims2).call(this);
          var prevTranslationX = this.translationX;
          var prevTranslationY = this.translationY;
          this.translationX = -bbox[0];
          this.translationY = -bbox[1];
          _classPrivateMethodGet(this, _setCanvasDims, _setCanvasDims2).call(this);
          _classPrivateMethodGet(this, _redraw, _redraw2).call(this);
          _classPrivateFieldSet(this, _realWidth, width);
          _classPrivateFieldSet(this, _realHeight, height);
          this.setDims(width, height);
          var unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;
          this.translate(prevTranslationX - this.translationX - unscaledPadding, prevTranslationY - this.translationY - unscaledPadding);
        }
        function _setMinDims2() {
          var style = this.div.style;
          if (_classPrivateFieldGet(this, _aspectRatio) >= 1) {
            style.minHeight = "".concat(RESIZER_SIZE, "px");
            style.minWidth = "".concat(Math.round(_classPrivateFieldGet(this, _aspectRatio) * RESIZER_SIZE), "px");
          } else {
            style.minWidth = "".concat(RESIZER_SIZE, "px");
            style.minHeight = "".concat(Math.round(RESIZER_SIZE / _classPrivateFieldGet(this, _aspectRatio)), "px");
          }
        }
        _defineProperty(InkEditor, "_defaultColor", null);
        _defineProperty(InkEditor, "_defaultOpacity", 1);
        _defineProperty(InkEditor, "_defaultThickness", 1);
        _defineProperty(InkEditor, "_l10nPromise", void 0);
        _defineProperty(InkEditor, "_type", "ink");
        exports.InkEditor = InkEditor;

        /***/
      }, /* 34 */
      /***/function (__unused_webpack_module, exports, __w_pdfjs_require__) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SVGGraphics = void 0;
        var _display_utils = __w_pdfjs_require__(6);
        var _util = __w_pdfjs_require__(1);
        var _is_node = __w_pdfjs_require__(10);
        ;
        var SVG_DEFAULTS = {
          fontStyle: "normal",
          fontWeight: "normal",
          fillColor: "#000000"
        };
        var XML_NS = "http://www.w3.org/XML/1998/namespace";
        var XLINK_NS = "http://www.w3.org/1999/xlink";
        var LINE_CAP_STYLES = ["butt", "round", "square"];
        var LINE_JOIN_STYLES = ["miter", "round", "bevel"];
        var createObjectURL = function createObjectURL(data) {
          var contentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
          var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
          if (URL.createObjectURL && typeof Blob !== "undefined" && !forceDataSchema) {
            return URL.createObjectURL(new Blob([data], {
              type: contentType
            }));
          }
          var digits = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var buffer = "data:".concat(contentType, ";base64,");
          for (var i = 0, ii = data.length; i < ii; i += 3) {
            var b1 = data[i] & 0xff;
            var b2 = data[i + 1] & 0xff;
            var b3 = data[i + 2] & 0xff;
            var d1 = b1 >> 2,
              d2 = (b1 & 3) << 4 | b2 >> 4;
            var d3 = i + 1 < ii ? (b2 & 0xf) << 2 | b3 >> 6 : 64;
            var d4 = i + 2 < ii ? b3 & 0x3f : 64;
            buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];
          }
          return buffer;
        };
        var convertImgDataToPng = function () {
          var PNG_HEADER = new Uint8Array([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a]);
          var CHUNK_WRAPPER_SIZE = 12;
          var crcTable = new Int32Array(256);
          for (var i = 0; i < 256; i++) {
            var c = i;
            for (var h = 0; h < 8; h++) {
              if (c & 1) {
                c = 0xedb88320 ^ c >> 1 & 0x7fffffff;
              } else {
                c = c >> 1 & 0x7fffffff;
              }
            }
            crcTable[i] = c;
          }
          function crc32(data, start, end) {
            var crc = -1;
            for (var _i27 = start; _i27 < end; _i27++) {
              var a = (crc ^ data[_i27]) & 0xff;
              var b = crcTable[a];
              crc = crc >>> 8 ^ b;
            }
            return crc ^ -1;
          }
          function writePngChunk(type, body, data, offset) {
            var p = offset;
            var len = body.length;
            data[p] = len >> 24 & 0xff;
            data[p + 1] = len >> 16 & 0xff;
            data[p + 2] = len >> 8 & 0xff;
            data[p + 3] = len & 0xff;
            p += 4;
            data[p] = type.charCodeAt(0) & 0xff;
            data[p + 1] = type.charCodeAt(1) & 0xff;
            data[p + 2] = type.charCodeAt(2) & 0xff;
            data[p + 3] = type.charCodeAt(3) & 0xff;
            p += 4;
            data.set(body, p);
            p += body.length;
            var crc = crc32(data, offset + 4, p);
            data[p] = crc >> 24 & 0xff;
            data[p + 1] = crc >> 16 & 0xff;
            data[p + 2] = crc >> 8 & 0xff;
            data[p + 3] = crc & 0xff;
          }
          function adler32(data, start, end) {
            var a = 1;
            var b = 0;
            for (var _i28 = start; _i28 < end; ++_i28) {
              a = (a + (data[_i28] & 0xff)) % 65521;
              b = (b + a) % 65521;
            }
            return b << 16 | a;
          }
          function deflateSync(literals) {
            if (!_is_node.isNodeJS) {
              return deflateSyncUncompressed(literals);
            }
            try {
              var input;
              if (parseInt(process.versions.node) >= 8) {
                input = literals;
              } else {
                input = Buffer.from(literals);
              }
              var output = require("zlib").deflateSync(input, {
                level: 9
              });
              return output instanceof Uint8Array ? output : new Uint8Array(output);
            } catch (e) {
              (0, _util.warn)("Not compressing PNG because zlib.deflateSync is unavailable: " + e);
            }
            return deflateSyncUncompressed(literals);
          }
          function deflateSyncUncompressed(literals) {
            var len = literals.length;
            var maxBlockLength = 0xffff;
            var deflateBlocks = Math.ceil(len / maxBlockLength);
            var idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);
            var pi = 0;
            idat[pi++] = 0x78;
            idat[pi++] = 0x9c;
            var pos = 0;
            while (len > maxBlockLength) {
              idat[pi++] = 0x00;
              idat[pi++] = 0xff;
              idat[pi++] = 0xff;
              idat[pi++] = 0x00;
              idat[pi++] = 0x00;
              idat.set(literals.subarray(pos, pos + maxBlockLength), pi);
              pi += maxBlockLength;
              pos += maxBlockLength;
              len -= maxBlockLength;
            }
            idat[pi++] = 0x01;
            idat[pi++] = len & 0xff;
            idat[pi++] = len >> 8 & 0xff;
            idat[pi++] = ~len & 0xffff & 0xff;
            idat[pi++] = (~len & 0xffff) >> 8 & 0xff;
            idat.set(literals.subarray(pos), pi);
            pi += literals.length - pos;
            var adler = adler32(literals, 0, literals.length);
            idat[pi++] = adler >> 24 & 0xff;
            idat[pi++] = adler >> 16 & 0xff;
            idat[pi++] = adler >> 8 & 0xff;
            idat[pi++] = adler & 0xff;
            return idat;
          }
          function encode(imgData, kind, forceDataSchema, isMask) {
            var width = imgData.width;
            var height = imgData.height;
            var bitDepth, colorType, lineSize;
            var bytes = imgData.data;
            switch (kind) {
              case _util.ImageKind.GRAYSCALE_1BPP:
                colorType = 0;
                bitDepth = 1;
                lineSize = width + 7 >> 3;
                break;
              case _util.ImageKind.RGB_24BPP:
                colorType = 2;
                bitDepth = 8;
                lineSize = width * 3;
                break;
              case _util.ImageKind.RGBA_32BPP:
                colorType = 6;
                bitDepth = 8;
                lineSize = width * 4;
                break;
              default:
                throw new Error("invalid format");
            }
            var literals = new Uint8Array((1 + lineSize) * height);
            var offsetLiterals = 0,
              offsetBytes = 0;
            for (var y = 0; y < height; ++y) {
              literals[offsetLiterals++] = 0;
              literals.set(bytes.subarray(offsetBytes, offsetBytes + lineSize), offsetLiterals);
              offsetBytes += lineSize;
              offsetLiterals += lineSize;
            }
            if (kind === _util.ImageKind.GRAYSCALE_1BPP && isMask) {
              offsetLiterals = 0;
              for (var _y3 = 0; _y3 < height; _y3++) {
                offsetLiterals++;
                for (var _i29 = 0; _i29 < lineSize; _i29++) {
                  literals[offsetLiterals++] ^= 0xff;
                }
              }
            }
            var ihdr = new Uint8Array([width >> 24 & 0xff, width >> 16 & 0xff, width >> 8 & 0xff, width & 0xff, height >> 24 & 0xff, height >> 16 & 0xff, height >> 8 & 0xff, height & 0xff, bitDepth, colorType, 0x00, 0x00, 0x00]);
            var idat = deflateSync(literals);
            var pngLength = PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;
            var data = new Uint8Array(pngLength);
            var offset = 0;
            data.set(PNG_HEADER, offset);
            offset += PNG_HEADER.length;
            writePngChunk("IHDR", ihdr, data, offset);
            offset += CHUNK_WRAPPER_SIZE + ihdr.length;
            writePngChunk("IDATA", idat, data, offset);
            offset += CHUNK_WRAPPER_SIZE + idat.length;
            writePngChunk("IEND", new Uint8Array(0), data, offset);
            return createObjectURL(data, "image/png", forceDataSchema);
          }
          return function convertImgDataToPng(imgData, forceDataSchema, isMask) {
            var kind = imgData.kind === undefined ? _util.ImageKind.GRAYSCALE_1BPP : imgData.kind;
            return encode(imgData, kind, forceDataSchema, isMask);
          };
        }();
        var SVGExtraState = /*#__PURE__*/function () {
          function SVGExtraState() {
            _classCallCheck(this, SVGExtraState);
            this.fontSizeScale = 1;
            this.fontWeight = SVG_DEFAULTS.fontWeight;
            this.fontSize = 0;
            this.textMatrix = _util.IDENTITY_MATRIX;
            this.fontMatrix = _util.FONT_IDENTITY_MATRIX;
            this.leading = 0;
            this.textRenderingMode = _util.TextRenderingMode.FILL;
            this.textMatrixScale = 1;
            this.x = 0;
            this.y = 0;
            this.lineX = 0;
            this.lineY = 0;
            this.charSpacing = 0;
            this.wordSpacing = 0;
            this.textHScale = 1;
            this.textRise = 0;
            this.fillColor = SVG_DEFAULTS.fillColor;
            this.strokeColor = "#000000";
            this.fillAlpha = 1;
            this.strokeAlpha = 1;
            this.lineWidth = 1;
            this.lineJoin = "";
            this.lineCap = "";
            this.miterLimit = 0;
            this.dashArray = [];
            this.dashPhase = 0;
            this.dependencies = [];
            this.activeClipUrl = null;
            this.clipGroup = null;
            this.maskId = "";
          }
          _createClass(SVGExtraState, [{
            key: "clone",
            value: function clone() {
              return Object.create(this);
            }
          }, {
            key: "setCurrentPoint",
            value: function setCurrentPoint(x, y) {
              this.x = x;
              this.y = y;
            }
          }]);
          return SVGExtraState;
        }();
        function opListToTree(opList) {
          var opTree = [];
          var tmp = [];
          var _iterator129 = _createForOfIteratorHelper(opList),
            _step129;
          try {
            for (_iterator129.s(); !(_step129 = _iterator129.n()).done;) {
              var opListElement = _step129.value;
              if (opListElement.fn === "save") {
                opTree.push({
                  fnId: 92,
                  fn: "group",
                  items: []
                });
                tmp.push(opTree);
                opTree = opTree.at(-1).items;
                continue;
              }
              if (opListElement.fn === "restore") {
                opTree = tmp.pop();
              } else {
                opTree.push(opListElement);
              }
            }
          } catch (err) {
            _iterator129.e(err);
          } finally {
            _iterator129.f();
          }
          return opTree;
        }
        function pf(value) {
          if (Number.isInteger(value)) {
            return value.toString();
          }
          var s = value.toFixed(10);
          var i = s.length - 1;
          if (s[i] !== "0") {
            return s;
          }
          do {
            i--;
          } while (s[i] === "0");
          return s.substring(0, s[i] === "." ? i : i + 1);
        }
        function pm(m) {
          if (m[4] === 0 && m[5] === 0) {
            if (m[1] === 0 && m[2] === 0) {
              if (m[0] === 1 && m[3] === 1) {
                return "";
              }
              return "scale(".concat(pf(m[0]), " ").concat(pf(m[3]), ")");
            }
            if (m[0] === m[3] && m[1] === -m[2]) {
              var a = Math.acos(m[0]) * 180 / Math.PI;
              return "rotate(".concat(pf(a), ")");
            }
          } else {
            if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {
              return "translate(".concat(pf(m[4]), " ").concat(pf(m[5]), ")");
            }
          }
          return "matrix(".concat(pf(m[0]), " ").concat(pf(m[1]), " ").concat(pf(m[2]), " ").concat(pf(m[3]), " ").concat(pf(m[4]), " ") + "".concat(pf(m[5]), ")");
        }
        var clipCount = 0;
        var maskCount = 0;
        var shadingCount = 0;
        var SVGGraphics = /*#__PURE__*/function () {
          function SVGGraphics(commonObjs, objs) {
            var forceDataSchema = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
            _classCallCheck(this, SVGGraphics);
            (0, _display_utils.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future.");
            this.svgFactory = new _display_utils.DOMSVGFactory();
            this.current = new SVGExtraState();
            this.transformMatrix = _util.IDENTITY_MATRIX;
            this.transformStack = [];
            this.extraStack = [];
            this.commonObjs = commonObjs;
            this.objs = objs;
            this.pendingClip = null;
            this.pendingEOFill = false;
            this.embedFonts = false;
            this.embeddedFonts = Object.create(null);
            this.cssStyle = null;
            this.forceDataSchema = !!forceDataSchema;
            this._operatorIdMapping = [];
            for (var op in _util.OPS) {
              this._operatorIdMapping[_util.OPS[op]] = op;
            }
          }
          _createClass(SVGGraphics, [{
            key: "getObject",
            value: function getObject(data) {
              var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
              if (typeof data === "string") {
                return data.startsWith("g_") ? this.commonObjs.get(data) : this.objs.get(data);
              }
              return fallback;
            }
          }, {
            key: "save",
            value: function save() {
              this.transformStack.push(this.transformMatrix);
              var old = this.current;
              this.extraStack.push(old);
              this.current = old.clone();
            }
          }, {
            key: "restore",
            value: function restore() {
              this.transformMatrix = this.transformStack.pop();
              this.current = this.extraStack.pop();
              this.pendingClip = null;
              this.tgrp = null;
            }
          }, {
            key: "group",
            value: function group(items) {
              this.save();
              this.executeOpTree(items);
              this.restore();
            }
          }, {
            key: "loadDependencies",
            value: function loadDependencies(operatorList) {
              var _this88 = this;
              var fnArray = operatorList.fnArray;
              var argsArray = operatorList.argsArray;
              for (var i = 0, ii = fnArray.length; i < ii; i++) {
                if (fnArray[i] !== _util.OPS.dependency) {
                  continue;
                }
                var _iterator130 = _createForOfIteratorHelper(argsArray[i]),
                  _step130;
                try {
                  var _loop2 = function _loop2() {
                    var obj = _step130.value;
                    var objsPool = obj.startsWith("g_") ? _this88.commonObjs : _this88.objs;
                    var promise = new Promise(function (resolve) {
                      objsPool.get(obj, resolve);
                    });
                    _this88.current.dependencies.push(promise);
                  };
                  for (_iterator130.s(); !(_step130 = _iterator130.n()).done;) {
                    _loop2();
                  }
                } catch (err) {
                  _iterator130.e(err);
                } finally {
                  _iterator130.f();
                }
              }
              return Promise.all(this.current.dependencies);
            }
          }, {
            key: "transform",
            value: function transform(a, b, c, d, e, f) {
              var transformMatrix = [a, b, c, d, e, f];
              this.transformMatrix = _util.Util.transform(this.transformMatrix, transformMatrix);
              this.tgrp = null;
            }
          }, {
            key: "getSVG",
            value: function getSVG(operatorList, viewport) {
              var _this89 = this;
              this.viewport = viewport;
              var svgElement = this._initialize(viewport);
              return this.loadDependencies(operatorList).then(function () {
                _this89.transformMatrix = _util.IDENTITY_MATRIX;
                _this89.executeOpTree(_this89.convertOpList(operatorList));
                return svgElement;
              });
            }
          }, {
            key: "convertOpList",
            value: function convertOpList(operatorList) {
              var operatorIdMapping = this._operatorIdMapping;
              var argsArray = operatorList.argsArray;
              var fnArray = operatorList.fnArray;
              var opList = [];
              for (var i = 0, ii = fnArray.length; i < ii; i++) {
                var fnId = fnArray[i];
                opList.push({
                  fnId: fnId,
                  fn: operatorIdMapping[fnId],
                  args: argsArray[i]
                });
              }
              return opListToTree(opList);
            }
          }, {
            key: "executeOpTree",
            value: function executeOpTree(opTree) {
              var _iterator131 = _createForOfIteratorHelper(opTree),
                _step131;
              try {
                for (_iterator131.s(); !(_step131 = _iterator131.n()).done;) {
                  var opTreeElement = _step131.value;
                  var fn = opTreeElement.fn;
                  var fnId = opTreeElement.fnId;
                  var args = opTreeElement.args;
                  switch (fnId | 0) {
                    case _util.OPS.beginText:
                      this.beginText();
                      break;
                    case _util.OPS.dependency:
                      break;
                    case _util.OPS.setLeading:
                      this.setLeading(args);
                      break;
                    case _util.OPS.setLeadingMoveText:
                      this.setLeadingMoveText(args[0], args[1]);
                      break;
                    case _util.OPS.setFont:
                      this.setFont(args);
                      break;
                    case _util.OPS.showText:
                      this.showText(args[0]);
                      break;
                    case _util.OPS.showSpacedText:
                      this.showText(args[0]);
                      break;
                    case _util.OPS.endText:
                      this.endText();
                      break;
                    case _util.OPS.moveText:
                      this.moveText(args[0], args[1]);
                      break;
                    case _util.OPS.setCharSpacing:
                      this.setCharSpacing(args[0]);
                      break;
                    case _util.OPS.setWordSpacing:
                      this.setWordSpacing(args[0]);
                      break;
                    case _util.OPS.setHScale:
                      this.setHScale(args[0]);
                      break;
                    case _util.OPS.setTextMatrix:
                      this.setTextMatrix(args[0], args[1], args[2], args[3], args[4], args[5]);
                      break;
                    case _util.OPS.setTextRise:
                      this.setTextRise(args[0]);
                      break;
                    case _util.OPS.setTextRenderingMode:
                      this.setTextRenderingMode(args[0]);
                      break;
                    case _util.OPS.setLineWidth:
                      this.setLineWidth(args[0]);
                      break;
                    case _util.OPS.setLineJoin:
                      this.setLineJoin(args[0]);
                      break;
                    case _util.OPS.setLineCap:
                      this.setLineCap(args[0]);
                      break;
                    case _util.OPS.setMiterLimit:
                      this.setMiterLimit(args[0]);
                      break;
                    case _util.OPS.setFillRGBColor:
                      this.setFillRGBColor(args[0], args[1], args[2]);
                      break;
                    case _util.OPS.setStrokeRGBColor:
                      this.setStrokeRGBColor(args[0], args[1], args[2]);
                      break;
                    case _util.OPS.setStrokeColorN:
                      this.setStrokeColorN(args);
                      break;
                    case _util.OPS.setFillColorN:
                      this.setFillColorN(args);
                      break;
                    case _util.OPS.shadingFill:
                      this.shadingFill(args[0]);
                      break;
                    case _util.OPS.setDash:
                      this.setDash(args[0], args[1]);
                      break;
                    case _util.OPS.setRenderingIntent:
                      this.setRenderingIntent(args[0]);
                      break;
                    case _util.OPS.setFlatness:
                      this.setFlatness(args[0]);
                      break;
                    case _util.OPS.setGState:
                      this.setGState(args[0]);
                      break;
                    case _util.OPS.fill:
                      this.fill();
                      break;
                    case _util.OPS.eoFill:
                      this.eoFill();
                      break;
                    case _util.OPS.stroke:
                      this.stroke();
                      break;
                    case _util.OPS.fillStroke:
                      this.fillStroke();
                      break;
                    case _util.OPS.eoFillStroke:
                      this.eoFillStroke();
                      break;
                    case _util.OPS.clip:
                      this.clip("nonzero");
                      break;
                    case _util.OPS.eoClip:
                      this.clip("evenodd");
                      break;
                    case _util.OPS.paintSolidColorImageMask:
                      this.paintSolidColorImageMask();
                      break;
                    case _util.OPS.paintImageXObject:
                      this.paintImageXObject(args[0]);
                      break;
                    case _util.OPS.paintInlineImageXObject:
                      this.paintInlineImageXObject(args[0]);
                      break;
                    case _util.OPS.paintImageMaskXObject:
                      this.paintImageMaskXObject(args[0]);
                      break;
                    case _util.OPS.paintFormXObjectBegin:
                      this.paintFormXObjectBegin(args[0], args[1]);
                      break;
                    case _util.OPS.paintFormXObjectEnd:
                      this.paintFormXObjectEnd();
                      break;
                    case _util.OPS.closePath:
                      this.closePath();
                      break;
                    case _util.OPS.closeStroke:
                      this.closeStroke();
                      break;
                    case _util.OPS.closeFillStroke:
                      this.closeFillStroke();
                      break;
                    case _util.OPS.closeEOFillStroke:
                      this.closeEOFillStroke();
                      break;
                    case _util.OPS.nextLine:
                      this.nextLine();
                      break;
                    case _util.OPS.transform:
                      this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);
                      break;
                    case _util.OPS.constructPath:
                      this.constructPath(args[0], args[1]);
                      break;
                    case _util.OPS.endPath:
                      this.endPath();
                      break;
                    case 92:
                      this.group(opTreeElement.items);
                      break;
                    default:
                      (0, _util.warn)("Unimplemented operator ".concat(fn));
                      break;
                  }
                }
              } catch (err) {
                _iterator131.e(err);
              } finally {
                _iterator131.f();
              }
            }
          }, {
            key: "setWordSpacing",
            value: function setWordSpacing(wordSpacing) {
              this.current.wordSpacing = wordSpacing;
            }
          }, {
            key: "setCharSpacing",
            value: function setCharSpacing(charSpacing) {
              this.current.charSpacing = charSpacing;
            }
          }, {
            key: "nextLine",
            value: function nextLine() {
              this.moveText(0, this.current.leading);
            }
          }, {
            key: "setTextMatrix",
            value: function setTextMatrix(a, b, c, d, e, f) {
              var current = this.current;
              current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];
              current.textMatrixScale = Math.hypot(a, b);
              current.x = current.lineX = 0;
              current.y = current.lineY = 0;
              current.xcoords = [];
              current.ycoords = [];
              current.tspan = this.svgFactory.createElement("svg:tspan");
              current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
              current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
              current.tspan.setAttributeNS(null, "y", pf(-current.y));
              current.txtElement = this.svgFactory.createElement("svg:text");
              current.txtElement.append(current.tspan);
            }
          }, {
            key: "beginText",
            value: function beginText() {
              var current = this.current;
              current.x = current.lineX = 0;
              current.y = current.lineY = 0;
              current.textMatrix = _util.IDENTITY_MATRIX;
              current.lineMatrix = _util.IDENTITY_MATRIX;
              current.textMatrixScale = 1;
              current.tspan = this.svgFactory.createElement("svg:tspan");
              current.txtElement = this.svgFactory.createElement("svg:text");
              current.txtgrp = this.svgFactory.createElement("svg:g");
              current.xcoords = [];
              current.ycoords = [];
            }
          }, {
            key: "moveText",
            value: function moveText(x, y) {
              var current = this.current;
              current.x = current.lineX += x;
              current.y = current.lineY += y;
              current.xcoords = [];
              current.ycoords = [];
              current.tspan = this.svgFactory.createElement("svg:tspan");
              current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
              current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
              current.tspan.setAttributeNS(null, "y", pf(-current.y));
            }
          }, {
            key: "showText",
            value: function showText(glyphs) {
              var current = this.current;
              var font = current.font;
              var fontSize = current.fontSize;
              if (fontSize === 0) {
                return;
              }
              var fontSizeScale = current.fontSizeScale;
              var charSpacing = current.charSpacing;
              var wordSpacing = current.wordSpacing;
              var fontDirection = current.fontDirection;
              var textHScale = current.textHScale * fontDirection;
              var vertical = font.vertical;
              var spacingDir = vertical ? 1 : -1;
              var defaultVMetrics = font.defaultVMetrics;
              var widthAdvanceScale = fontSize * current.fontMatrix[0];
              var x = 0;
              var _iterator132 = _createForOfIteratorHelper(glyphs),
                _step132;
              try {
                for (_iterator132.s(); !(_step132 = _iterator132.n()).done;) {
                  var glyph = _step132.value;
                  if (glyph === null) {
                    x += fontDirection * wordSpacing;
                    continue;
                  } else if (typeof glyph === "number") {
                    x += spacingDir * glyph * fontSize / 1000;
                    continue;
                  }
                  var spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                  var character = glyph.fontChar;
                  var scaledX = void 0,
                    scaledY = void 0;
                  var width = glyph.width;
                  if (vertical) {
                    var vx = void 0;
                    var vmetric = glyph.vmetric || defaultVMetrics;
                    vx = glyph.vmetric ? vmetric[1] : width * 0.5;
                    vx = -vx * widthAdvanceScale;
                    var vy = vmetric[2] * widthAdvanceScale;
                    width = vmetric ? -vmetric[0] : width;
                    scaledX = vx / fontSizeScale;
                    scaledY = (x + vy) / fontSizeScale;
                  } else {
                    scaledX = x / fontSizeScale;
                    scaledY = 0;
                  }
                  if (glyph.isInFont || font.missingFile) {
                    current.xcoords.push(current.x + scaledX);
                    if (vertical) {
                      current.ycoords.push(-current.y + scaledY);
                    }
                    current.tspan.textContent += character;
                  } else {}
                  var charWidth = void 0;
                  if (vertical) {
                    charWidth = width * widthAdvanceScale - spacing * fontDirection;
                  } else {
                    charWidth = width * widthAdvanceScale + spacing * fontDirection;
                  }
                  x += charWidth;
                }
              } catch (err) {
                _iterator132.e(err);
              } finally {
                _iterator132.f();
              }
              current.tspan.setAttributeNS(null, "x", current.xcoords.map(pf).join(" "));
              if (vertical) {
                current.tspan.setAttributeNS(null, "y", current.ycoords.map(pf).join(" "));
              } else {
                current.tspan.setAttributeNS(null, "y", pf(-current.y));
              }
              if (vertical) {
                current.y -= x;
              } else {
                current.x += x * textHScale;
              }
              current.tspan.setAttributeNS(null, "font-family", current.fontFamily);
              current.tspan.setAttributeNS(null, "font-size", "".concat(pf(current.fontSize), "px"));
              if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {
                current.tspan.setAttributeNS(null, "font-style", current.fontStyle);
              }
              if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {
                current.tspan.setAttributeNS(null, "font-weight", current.fontWeight);
              }
              var fillStrokeMode = current.textRenderingMode & _util.TextRenderingMode.FILL_STROKE_MASK;
              if (fillStrokeMode === _util.TextRenderingMode.FILL || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                if (current.fillColor !== SVG_DEFAULTS.fillColor) {
                  current.tspan.setAttributeNS(null, "fill", current.fillColor);
                }
                if (current.fillAlpha < 1) {
                  current.tspan.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                }
              } else if (current.textRenderingMode === _util.TextRenderingMode.ADD_TO_PATH) {
                current.tspan.setAttributeNS(null, "fill", "transparent");
              } else {
                current.tspan.setAttributeNS(null, "fill", "none");
              }
              if (fillStrokeMode === _util.TextRenderingMode.STROKE || fillStrokeMode === _util.TextRenderingMode.FILL_STROKE) {
                var lineWidthScale = 1 / (current.textMatrixScale || 1);
                this._setStrokeAttributes(current.tspan, lineWidthScale);
              }
              var textMatrix = current.textMatrix;
              if (current.textRise !== 0) {
                textMatrix = textMatrix.slice();
                textMatrix[5] += current.textRise;
              }
              current.txtElement.setAttributeNS(null, "transform", "".concat(pm(textMatrix), " scale(").concat(pf(textHScale), ", -1)"));
              current.txtElement.setAttributeNS(XML_NS, "xml:space", "preserve");
              current.txtElement.append(current.tspan);
              current.txtgrp.append(current.txtElement);
              this._ensureTransformGroup().append(current.txtElement);
            }
          }, {
            key: "setLeadingMoveText",
            value: function setLeadingMoveText(x, y) {
              this.setLeading(-y);
              this.moveText(x, y);
            }
          }, {
            key: "addFontStyle",
            value: function addFontStyle(fontObj) {
              if (!fontObj.data) {
                throw new Error("addFontStyle: No font data available, " + 'ensure that the "fontExtraProperties" API parameter is set.');
              }
              if (!this.cssStyle) {
                this.cssStyle = this.svgFactory.createElement("svg:style");
                this.cssStyle.setAttributeNS(null, "type", "text/css");
                this.defs.append(this.cssStyle);
              }
              var url = createObjectURL(fontObj.data, fontObj.mimetype, this.forceDataSchema);
              this.cssStyle.textContent += "@font-face { font-family: \"".concat(fontObj.loadedName, "\";") + " src: url(".concat(url, "); }\n");
            }
          }, {
            key: "setFont",
            value: function setFont(details) {
              var current = this.current;
              var fontObj = this.commonObjs.get(details[0]);
              var size = details[1];
              current.font = fontObj;
              if (this.embedFonts && !fontObj.missingFile && !this.embeddedFonts[fontObj.loadedName]) {
                this.addFontStyle(fontObj);
                this.embeddedFonts[fontObj.loadedName] = fontObj;
              }
              current.fontMatrix = fontObj.fontMatrix || _util.FONT_IDENTITY_MATRIX;
              var bold = "normal";
              if (fontObj.black) {
                bold = "900";
              } else if (fontObj.bold) {
                bold = "bold";
              }
              var italic = fontObj.italic ? "italic" : "normal";
              if (size < 0) {
                size = -size;
                current.fontDirection = -1;
              } else {
                current.fontDirection = 1;
              }
              current.fontSize = size;
              current.fontFamily = fontObj.loadedName;
              current.fontWeight = bold;
              current.fontStyle = italic;
              current.tspan = this.svgFactory.createElement("svg:tspan");
              current.tspan.setAttributeNS(null, "y", pf(-current.y));
              current.xcoords = [];
              current.ycoords = [];
            }
          }, {
            key: "endText",
            value: function endText() {
              var _current$txtElement;
              var current = this.current;
              if (current.textRenderingMode & _util.TextRenderingMode.ADD_TO_PATH_FLAG && (_current$txtElement = current.txtElement) !== null && _current$txtElement !== void 0 && _current$txtElement.hasChildNodes()) {
                current.element = current.txtElement;
                this.clip("nonzero");
                this.endPath();
              }
            }
          }, {
            key: "setLineWidth",
            value: function setLineWidth(width) {
              if (width > 0) {
                this.current.lineWidth = width;
              }
            }
          }, {
            key: "setLineCap",
            value: function setLineCap(style) {
              this.current.lineCap = LINE_CAP_STYLES[style];
            }
          }, {
            key: "setLineJoin",
            value: function setLineJoin(style) {
              this.current.lineJoin = LINE_JOIN_STYLES[style];
            }
          }, {
            key: "setMiterLimit",
            value: function setMiterLimit(limit) {
              this.current.miterLimit = limit;
            }
          }, {
            key: "setStrokeAlpha",
            value: function setStrokeAlpha(strokeAlpha) {
              this.current.strokeAlpha = strokeAlpha;
            }
          }, {
            key: "setStrokeRGBColor",
            value: function setStrokeRGBColor(r, g, b) {
              this.current.strokeColor = _util.Util.makeHexColor(r, g, b);
            }
          }, {
            key: "setFillAlpha",
            value: function setFillAlpha(fillAlpha) {
              this.current.fillAlpha = fillAlpha;
            }
          }, {
            key: "setFillRGBColor",
            value: function setFillRGBColor(r, g, b) {
              this.current.fillColor = _util.Util.makeHexColor(r, g, b);
              this.current.tspan = this.svgFactory.createElement("svg:tspan");
              this.current.xcoords = [];
              this.current.ycoords = [];
            }
          }, {
            key: "setStrokeColorN",
            value: function setStrokeColorN(args) {
              this.current.strokeColor = this._makeColorN_Pattern(args);
            }
          }, {
            key: "setFillColorN",
            value: function setFillColorN(args) {
              this.current.fillColor = this._makeColorN_Pattern(args);
            }
          }, {
            key: "shadingFill",
            value: function shadingFill(args) {
              var _this$viewport = this.viewport,
                width = _this$viewport.width,
                height = _this$viewport.height;
              var inv = _util.Util.inverseTransform(this.transformMatrix);
              var _util$Util$getAxialAl3 = _util.Util.getAxialAlignedBoundingBox([0, 0, width, height], inv),
                _util$Util$getAxialAl4 = _slicedToArray(_util$Util$getAxialAl3, 4),
                x0 = _util$Util$getAxialAl4[0],
                y0 = _util$Util$getAxialAl4[1],
                x1 = _util$Util$getAxialAl4[2],
                y1 = _util$Util$getAxialAl4[3];
              var rect = this.svgFactory.createElement("svg:rect");
              rect.setAttributeNS(null, "x", x0);
              rect.setAttributeNS(null, "y", y0);
              rect.setAttributeNS(null, "width", x1 - x0);
              rect.setAttributeNS(null, "height", y1 - y0);
              rect.setAttributeNS(null, "fill", this._makeShadingPattern(args));
              if (this.current.fillAlpha < 1) {
                rect.setAttributeNS(null, "fill-opacity", this.current.fillAlpha);
              }
              this._ensureTransformGroup().append(rect);
            }
          }, {
            key: "_makeColorN_Pattern",
            value: function _makeColorN_Pattern(args) {
              if (args[0] === "TilingPattern") {
                return this._makeTilingPattern(args);
              }
              return this._makeShadingPattern(args);
            }
          }, {
            key: "_makeTilingPattern",
            value: function _makeTilingPattern(args) {
              var color = args[1];
              var operatorList = args[2];
              var matrix = args[3] || _util.IDENTITY_MATRIX;
              var _args$ = _slicedToArray(args[4], 4),
                x0 = _args$[0],
                y0 = _args$[1],
                x1 = _args$[2],
                y1 = _args$[3];
              var xstep = args[5];
              var ystep = args[6];
              var paintType = args[7];
              var tilingId = "shading".concat(shadingCount++);
              var _util$Util$normalizeR = _util.Util.normalizeRect([].concat(_toConsumableArray(_util.Util.applyTransform([x0, y0], matrix)), _toConsumableArray(_util.Util.applyTransform([x1, y1], matrix)))),
                _util$Util$normalizeR2 = _slicedToArray(_util$Util$normalizeR, 4),
                tx0 = _util$Util$normalizeR2[0],
                ty0 = _util$Util$normalizeR2[1],
                tx1 = _util$Util$normalizeR2[2],
                ty1 = _util$Util$normalizeR2[3];
              var _util$Util$singularVa3 = _util.Util.singularValueDecompose2dScale(matrix),
                _util$Util$singularVa4 = _slicedToArray(_util$Util$singularVa3, 2),
                xscale = _util$Util$singularVa4[0],
                yscale = _util$Util$singularVa4[1];
              var txstep = xstep * xscale;
              var tystep = ystep * yscale;
              var tiling = this.svgFactory.createElement("svg:pattern");
              tiling.setAttributeNS(null, "id", tilingId);
              tiling.setAttributeNS(null, "patternUnits", "userSpaceOnUse");
              tiling.setAttributeNS(null, "width", txstep);
              tiling.setAttributeNS(null, "height", tystep);
              tiling.setAttributeNS(null, "x", "".concat(tx0));
              tiling.setAttributeNS(null, "y", "".concat(ty0));
              var svg = this.svg;
              var transformMatrix = this.transformMatrix;
              var fillColor = this.current.fillColor;
              var strokeColor = this.current.strokeColor;
              var bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);
              this.svg = bbox;
              this.transformMatrix = matrix;
              if (paintType === 2) {
                var _util$Util9;
                var cssColor = (_util$Util9 = _util.Util).makeHexColor.apply(_util$Util9, _toConsumableArray(color));
                this.current.fillColor = cssColor;
                this.current.strokeColor = cssColor;
              }
              this.executeOpTree(this.convertOpList(operatorList));
              this.svg = svg;
              this.transformMatrix = transformMatrix;
              this.current.fillColor = fillColor;
              this.current.strokeColor = strokeColor;
              tiling.append(bbox.childNodes[0]);
              this.defs.append(tiling);
              return "url(#".concat(tilingId, ")");
            }
          }, {
            key: "_makeShadingPattern",
            value: function _makeShadingPattern(args) {
              if (typeof args === "string") {
                args = this.objs.get(args);
              }
              switch (args[0]) {
                case "RadialAxial":
                  var shadingId = "shading".concat(shadingCount++);
                  var colorStops = args[3];
                  var gradient;
                  switch (args[1]) {
                    case "axial":
                      var point0 = args[4];
                      var point1 = args[5];
                      gradient = this.svgFactory.createElement("svg:linearGradient");
                      gradient.setAttributeNS(null, "id", shadingId);
                      gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                      gradient.setAttributeNS(null, "x1", point0[0]);
                      gradient.setAttributeNS(null, "y1", point0[1]);
                      gradient.setAttributeNS(null, "x2", point1[0]);
                      gradient.setAttributeNS(null, "y2", point1[1]);
                      break;
                    case "radial":
                      var focalPoint = args[4];
                      var circlePoint = args[5];
                      var focalRadius = args[6];
                      var circleRadius = args[7];
                      gradient = this.svgFactory.createElement("svg:radialGradient");
                      gradient.setAttributeNS(null, "id", shadingId);
                      gradient.setAttributeNS(null, "gradientUnits", "userSpaceOnUse");
                      gradient.setAttributeNS(null, "cx", circlePoint[0]);
                      gradient.setAttributeNS(null, "cy", circlePoint[1]);
                      gradient.setAttributeNS(null, "r", circleRadius);
                      gradient.setAttributeNS(null, "fx", focalPoint[0]);
                      gradient.setAttributeNS(null, "fy", focalPoint[1]);
                      gradient.setAttributeNS(null, "fr", focalRadius);
                      break;
                    default:
                      throw new Error("Unknown RadialAxial type: ".concat(args[1]));
                  }
                  var _iterator133 = _createForOfIteratorHelper(colorStops),
                    _step133;
                  try {
                    for (_iterator133.s(); !(_step133 = _iterator133.n()).done;) {
                      var colorStop = _step133.value;
                      var stop = this.svgFactory.createElement("svg:stop");
                      stop.setAttributeNS(null, "offset", colorStop[0]);
                      stop.setAttributeNS(null, "stop-color", colorStop[1]);
                      gradient.append(stop);
                    }
                  } catch (err) {
                    _iterator133.e(err);
                  } finally {
                    _iterator133.f();
                  }
                  this.defs.append(gradient);
                  return "url(#".concat(shadingId, ")");
                case "Mesh":
                  (0, _util.warn)("Unimplemented pattern Mesh");
                  return null;
                case "Dummy":
                  return "hotpink";
                default:
                  throw new Error("Unknown IR type: ".concat(args[0]));
              }
            }
          }, {
            key: "setDash",
            value: function setDash(dashArray, dashPhase) {
              this.current.dashArray = dashArray;
              this.current.dashPhase = dashPhase;
            }
          }, {
            key: "constructPath",
            value: function constructPath(ops, args) {
              var current = this.current;
              var x = current.x,
                y = current.y;
              var d = [];
              var j = 0;
              var _iterator134 = _createForOfIteratorHelper(ops),
                _step134;
              try {
                for (_iterator134.s(); !(_step134 = _iterator134.n()).done;) {
                  var op = _step134.value;
                  switch (op | 0) {
                    case _util.OPS.rectangle:
                      x = args[j++];
                      y = args[j++];
                      var width = args[j++];
                      var height = args[j++];
                      var xw = x + width;
                      var yh = y + height;
                      d.push("M", pf(x), pf(y), "L", pf(xw), pf(y), "L", pf(xw), pf(yh), "L", pf(x), pf(yh), "Z");
                      break;
                    case _util.OPS.moveTo:
                      x = args[j++];
                      y = args[j++];
                      d.push("M", pf(x), pf(y));
                      break;
                    case _util.OPS.lineTo:
                      x = args[j++];
                      y = args[j++];
                      d.push("L", pf(x), pf(y));
                      break;
                    case _util.OPS.curveTo:
                      x = args[j + 4];
                      y = args[j + 5];
                      d.push("C", pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]), pf(x), pf(y));
                      j += 6;
                      break;
                    case _util.OPS.curveTo2:
                      d.push("C", pf(x), pf(y), pf(args[j]), pf(args[j + 1]), pf(args[j + 2]), pf(args[j + 3]));
                      x = args[j + 2];
                      y = args[j + 3];
                      j += 4;
                      break;
                    case _util.OPS.curveTo3:
                      x = args[j + 2];
                      y = args[j + 3];
                      d.push("C", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));
                      j += 4;
                      break;
                    case _util.OPS.closePath:
                      d.push("Z");
                      break;
                  }
                }
              } catch (err) {
                _iterator134.e(err);
              } finally {
                _iterator134.f();
              }
              d = d.join(" ");
              if (current.path && ops.length > 0 && ops[0] !== _util.OPS.rectangle && ops[0] !== _util.OPS.moveTo) {
                d = current.path.getAttributeNS(null, "d") + d;
              } else {
                current.path = this.svgFactory.createElement("svg:path");
                this._ensureTransformGroup().append(current.path);
              }
              current.path.setAttributeNS(null, "d", d);
              current.path.setAttributeNS(null, "fill", "none");
              current.element = current.path;
              current.setCurrentPoint(x, y);
            }
          }, {
            key: "endPath",
            value: function endPath() {
              var current = this.current;
              current.path = null;
              if (!this.pendingClip) {
                return;
              }
              if (!current.element) {
                this.pendingClip = null;
                return;
              }
              var clipId = "clippath".concat(clipCount++);
              var clipPath = this.svgFactory.createElement("svg:clipPath");
              clipPath.setAttributeNS(null, "id", clipId);
              clipPath.setAttributeNS(null, "transform", pm(this.transformMatrix));
              var clipElement = current.element.cloneNode(true);
              if (this.pendingClip === "evenodd") {
                clipElement.setAttributeNS(null, "clip-rule", "evenodd");
              } else {
                clipElement.setAttributeNS(null, "clip-rule", "nonzero");
              }
              this.pendingClip = null;
              clipPath.append(clipElement);
              this.defs.append(clipPath);
              if (current.activeClipUrl) {
                current.clipGroup = null;
                var _iterator135 = _createForOfIteratorHelper(this.extraStack),
                  _step135;
                try {
                  for (_iterator135.s(); !(_step135 = _iterator135.n()).done;) {
                    var prev = _step135.value;
                    prev.clipGroup = null;
                  }
                } catch (err) {
                  _iterator135.e(err);
                } finally {
                  _iterator135.f();
                }
                clipPath.setAttributeNS(null, "clip-path", current.activeClipUrl);
              }
              current.activeClipUrl = "url(#".concat(clipId, ")");
              this.tgrp = null;
            }
          }, {
            key: "clip",
            value: function clip(type) {
              this.pendingClip = type;
            }
          }, {
            key: "closePath",
            value: function closePath() {
              var current = this.current;
              if (current.path) {
                var d = "".concat(current.path.getAttributeNS(null, "d"), "Z");
                current.path.setAttributeNS(null, "d", d);
              }
            }
          }, {
            key: "setLeading",
            value: function setLeading(leading) {
              this.current.leading = -leading;
            }
          }, {
            key: "setTextRise",
            value: function setTextRise(textRise) {
              this.current.textRise = textRise;
            }
          }, {
            key: "setTextRenderingMode",
            value: function setTextRenderingMode(textRenderingMode) {
              this.current.textRenderingMode = textRenderingMode;
            }
          }, {
            key: "setHScale",
            value: function setHScale(scale) {
              this.current.textHScale = scale / 100;
            }
          }, {
            key: "setRenderingIntent",
            value: function setRenderingIntent(intent) {}
          }, {
            key: "setFlatness",
            value: function setFlatness(flatness) {}
          }, {
            key: "setGState",
            value: function setGState(states) {
              var _iterator136 = _createForOfIteratorHelper(states),
                _step136;
              try {
                for (_iterator136.s(); !(_step136 = _iterator136.n()).done;) {
                  var _step136$value = _slicedToArray(_step136.value, 2),
                    key = _step136$value[0],
                    value = _step136$value[1];
                  switch (key) {
                    case "LW":
                      this.setLineWidth(value);
                      break;
                    case "LC":
                      this.setLineCap(value);
                      break;
                    case "LJ":
                      this.setLineJoin(value);
                      break;
                    case "ML":
                      this.setMiterLimit(value);
                      break;
                    case "D":
                      this.setDash(value[0], value[1]);
                      break;
                    case "RI":
                      this.setRenderingIntent(value);
                      break;
                    case "FL":
                      this.setFlatness(value);
                      break;
                    case "Font":
                      this.setFont(value);
                      break;
                    case "CA":
                      this.setStrokeAlpha(value);
                      break;
                    case "ca":
                      this.setFillAlpha(value);
                      break;
                    default:
                      (0, _util.warn)("Unimplemented graphic state operator ".concat(key));
                      break;
                  }
                }
              } catch (err) {
                _iterator136.e(err);
              } finally {
                _iterator136.f();
              }
            }
          }, {
            key: "fill",
            value: function fill() {
              var current = this.current;
              if (current.element) {
                current.element.setAttributeNS(null, "fill", current.fillColor);
                current.element.setAttributeNS(null, "fill-opacity", current.fillAlpha);
                this.endPath();
              }
            }
          }, {
            key: "stroke",
            value: function stroke() {
              var current = this.current;
              if (current.element) {
                this._setStrokeAttributes(current.element);
                current.element.setAttributeNS(null, "fill", "none");
                this.endPath();
              }
            }
          }, {
            key: "_setStrokeAttributes",
            value: function _setStrokeAttributes(element) {
              var lineWidthScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
              var current = this.current;
              var dashArray = current.dashArray;
              if (lineWidthScale !== 1 && dashArray.length > 0) {
                dashArray = dashArray.map(function (value) {
                  return lineWidthScale * value;
                });
              }
              element.setAttributeNS(null, "stroke", current.strokeColor);
              element.setAttributeNS(null, "stroke-opacity", current.strokeAlpha);
              element.setAttributeNS(null, "stroke-miterlimit", pf(current.miterLimit));
              element.setAttributeNS(null, "stroke-linecap", current.lineCap);
              element.setAttributeNS(null, "stroke-linejoin", current.lineJoin);
              element.setAttributeNS(null, "stroke-width", pf(lineWidthScale * current.lineWidth) + "px");
              element.setAttributeNS(null, "stroke-dasharray", dashArray.map(pf).join(" "));
              element.setAttributeNS(null, "stroke-dashoffset", pf(lineWidthScale * current.dashPhase) + "px");
            }
          }, {
            key: "eoFill",
            value: function eoFill() {
              var _this$current$element;
              (_this$current$element = this.current.element) === null || _this$current$element === void 0 ? void 0 : _this$current$element.setAttributeNS(null, "fill-rule", "evenodd");
              this.fill();
            }
          }, {
            key: "fillStroke",
            value: function fillStroke() {
              this.stroke();
              this.fill();
            }
          }, {
            key: "eoFillStroke",
            value: function eoFillStroke() {
              var _this$current$element2;
              (_this$current$element2 = this.current.element) === null || _this$current$element2 === void 0 ? void 0 : _this$current$element2.setAttributeNS(null, "fill-rule", "evenodd");
              this.fillStroke();
            }
          }, {
            key: "closeStroke",
            value: function closeStroke() {
              this.closePath();
              this.stroke();
            }
          }, {
            key: "closeFillStroke",
            value: function closeFillStroke() {
              this.closePath();
              this.fillStroke();
            }
          }, {
            key: "closeEOFillStroke",
            value: function closeEOFillStroke() {
              this.closePath();
              this.eoFillStroke();
            }
          }, {
            key: "paintSolidColorImageMask",
            value: function paintSolidColorImageMask() {
              var rect = this.svgFactory.createElement("svg:rect");
              rect.setAttributeNS(null, "x", "0");
              rect.setAttributeNS(null, "y", "0");
              rect.setAttributeNS(null, "width", "1px");
              rect.setAttributeNS(null, "height", "1px");
              rect.setAttributeNS(null, "fill", this.current.fillColor);
              this._ensureTransformGroup().append(rect);
            }
          }, {
            key: "paintImageXObject",
            value: function paintImageXObject(objId) {
              var imgData = this.getObject(objId);
              if (!imgData) {
                (0, _util.warn)("Dependent image with object ID ".concat(objId, " is not ready yet"));
                return;
              }
              this.paintInlineImageXObject(imgData);
            }
          }, {
            key: "paintInlineImageXObject",
            value: function paintInlineImageXObject(imgData, mask) {
              var width = imgData.width;
              var height = imgData.height;
              var imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);
              var cliprect = this.svgFactory.createElement("svg:rect");
              cliprect.setAttributeNS(null, "x", "0");
              cliprect.setAttributeNS(null, "y", "0");
              cliprect.setAttributeNS(null, "width", pf(width));
              cliprect.setAttributeNS(null, "height", pf(height));
              this.current.element = cliprect;
              this.clip("nonzero");
              var imgEl = this.svgFactory.createElement("svg:image");
              imgEl.setAttributeNS(XLINK_NS, "xlink:href", imgSrc);
              imgEl.setAttributeNS(null, "x", "0");
              imgEl.setAttributeNS(null, "y", pf(-height));
              imgEl.setAttributeNS(null, "width", pf(width) + "px");
              imgEl.setAttributeNS(null, "height", pf(height) + "px");
              imgEl.setAttributeNS(null, "transform", "scale(".concat(pf(1 / width), " ").concat(pf(-1 / height), ")"));
              if (mask) {
                mask.append(imgEl);
              } else {
                this._ensureTransformGroup().append(imgEl);
              }
            }
          }, {
            key: "paintImageMaskXObject",
            value: function paintImageMaskXObject(img) {
              var imgData = this.getObject(img.data, img);
              if (imgData.bitmap) {
                (0, _util.warn)("paintImageMaskXObject: ImageBitmap support is not implemented, " + "ensure that the `isOffscreenCanvasSupported` API parameter is disabled.");
                return;
              }
              var current = this.current;
              var width = imgData.width;
              var height = imgData.height;
              var fillColor = current.fillColor;
              current.maskId = "mask".concat(maskCount++);
              var mask = this.svgFactory.createElement("svg:mask");
              mask.setAttributeNS(null, "id", current.maskId);
              var rect = this.svgFactory.createElement("svg:rect");
              rect.setAttributeNS(null, "x", "0");
              rect.setAttributeNS(null, "y", "0");
              rect.setAttributeNS(null, "width", pf(width));
              rect.setAttributeNS(null, "height", pf(height));
              rect.setAttributeNS(null, "fill", fillColor);
              rect.setAttributeNS(null, "mask", "url(#".concat(current.maskId, ")"));
              this.defs.append(mask);
              this._ensureTransformGroup().append(rect);
              this.paintInlineImageXObject(imgData, mask);
            }
          }, {
            key: "paintFormXObjectBegin",
            value: function paintFormXObjectBegin(matrix, bbox) {
              if (Array.isArray(matrix) && matrix.length === 6) {
                this.transform(matrix[0], matrix[1], matrix[2], matrix[3], matrix[4], matrix[5]);
              }
              if (bbox) {
                var width = bbox[2] - bbox[0];
                var height = bbox[3] - bbox[1];
                var cliprect = this.svgFactory.createElement("svg:rect");
                cliprect.setAttributeNS(null, "x", bbox[0]);
                cliprect.setAttributeNS(null, "y", bbox[1]);
                cliprect.setAttributeNS(null, "width", pf(width));
                cliprect.setAttributeNS(null, "height", pf(height));
                this.current.element = cliprect;
                this.clip("nonzero");
                this.endPath();
              }
            }
          }, {
            key: "paintFormXObjectEnd",
            value: function paintFormXObjectEnd() {}
          }, {
            key: "_initialize",
            value: function _initialize(viewport) {
              var svg = this.svgFactory.create(viewport.width, viewport.height);
              var definitions = this.svgFactory.createElement("svg:defs");
              svg.append(definitions);
              this.defs = definitions;
              var rootGroup = this.svgFactory.createElement("svg:g");
              rootGroup.setAttributeNS(null, "transform", pm(viewport.transform));
              svg.append(rootGroup);
              this.svg = rootGroup;
              return svg;
            }
          }, {
            key: "_ensureClipGroup",
            value: function _ensureClipGroup() {
              if (!this.current.clipGroup) {
                var clipGroup = this.svgFactory.createElement("svg:g");
                clipGroup.setAttributeNS(null, "clip-path", this.current.activeClipUrl);
                this.svg.append(clipGroup);
                this.current.clipGroup = clipGroup;
              }
              return this.current.clipGroup;
            }
          }, {
            key: "_ensureTransformGroup",
            value: function _ensureTransformGroup() {
              if (!this.tgrp) {
                this.tgrp = this.svgFactory.createElement("svg:g");
                this.tgrp.setAttributeNS(null, "transform", pm(this.transformMatrix));
                if (this.current.activeClipUrl) {
                  this._ensureClipGroup().append(this.tgrp);
                } else {
                  this.svg.append(this.tgrp);
                }
              }
              return this.tgrp;
            }
          }]);
          return SVGGraphics;
        }();
        exports.SVGGraphics = SVGGraphics;

        /***/
      }
      /******/];
      /************************************************************************/
      /******/ // The module cache
      /******/
      var __webpack_module_cache__ = {};
      /******/
      /******/ // The require function
      /******/
      function __w_pdfjs_require__(moduleId) {
        /******/ // Check if module is in cache
        /******/var cachedModule = __webpack_module_cache__[moduleId];
        /******/
        if (cachedModule !== undefined) {
          /******/return cachedModule.exports;
          /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/
        var module = __webpack_module_cache__[moduleId] = {
          /******/ // no module.id needed
          /******/ // no module.loaded needed
          /******/exports: {}
          /******/
        };
        /******/
        /******/ // Execute the module function
        /******/
        __webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);
        /******/
        /******/ // Return the exports of the module
        /******/
        return module.exports;
        /******/
      }
      /******/
      /************************************************************************/
      var __webpack_exports__ = {};
      // This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
      (function () {
        var exports = __webpack_exports__;
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        Object.defineProperty(exports, "AbortException", {
          enumerable: true,
          get: function get() {
            return _util.AbortException;
          }
        });
        Object.defineProperty(exports, "AnnotationEditorLayer", {
          enumerable: true,
          get: function get() {
            return _annotation_editor_layer.AnnotationEditorLayer;
          }
        });
        Object.defineProperty(exports, "AnnotationEditorParamsType", {
          enumerable: true,
          get: function get() {
            return _util.AnnotationEditorParamsType;
          }
        });
        Object.defineProperty(exports, "AnnotationEditorType", {
          enumerable: true,
          get: function get() {
            return _util.AnnotationEditorType;
          }
        });
        Object.defineProperty(exports, "AnnotationEditorUIManager", {
          enumerable: true,
          get: function get() {
            return _tools.AnnotationEditorUIManager;
          }
        });
        Object.defineProperty(exports, "AnnotationLayer", {
          enumerable: true,
          get: function get() {
            return _annotation_layer.AnnotationLayer;
          }
        });
        Object.defineProperty(exports, "AnnotationMode", {
          enumerable: true,
          get: function get() {
            return _util.AnnotationMode;
          }
        });
        Object.defineProperty(exports, "CMapCompressionType", {
          enumerable: true,
          get: function get() {
            return _util.CMapCompressionType;
          }
        });
        Object.defineProperty(exports, "FeatureTest", {
          enumerable: true,
          get: function get() {
            return _util.FeatureTest;
          }
        });
        Object.defineProperty(exports, "GlobalWorkerOptions", {
          enumerable: true,
          get: function get() {
            return _worker_options.GlobalWorkerOptions;
          }
        });
        Object.defineProperty(exports, "ImageKind", {
          enumerable: true,
          get: function get() {
            return _util.ImageKind;
          }
        });
        Object.defineProperty(exports, "InvalidPDFException", {
          enumerable: true,
          get: function get() {
            return _util.InvalidPDFException;
          }
        });
        Object.defineProperty(exports, "MissingPDFException", {
          enumerable: true,
          get: function get() {
            return _util.MissingPDFException;
          }
        });
        Object.defineProperty(exports, "OPS", {
          enumerable: true,
          get: function get() {
            return _util.OPS;
          }
        });
        Object.defineProperty(exports, "PDFDataRangeTransport", {
          enumerable: true,
          get: function get() {
            return _api.PDFDataRangeTransport;
          }
        });
        Object.defineProperty(exports, "PDFDateString", {
          enumerable: true,
          get: function get() {
            return _display_utils.PDFDateString;
          }
        });
        Object.defineProperty(exports, "PDFWorker", {
          enumerable: true,
          get: function get() {
            return _api.PDFWorker;
          }
        });
        Object.defineProperty(exports, "PasswordResponses", {
          enumerable: true,
          get: function get() {
            return _util.PasswordResponses;
          }
        });
        Object.defineProperty(exports, "PermissionFlag", {
          enumerable: true,
          get: function get() {
            return _util.PermissionFlag;
          }
        });
        Object.defineProperty(exports, "PixelsPerInch", {
          enumerable: true,
          get: function get() {
            return _display_utils.PixelsPerInch;
          }
        });
        Object.defineProperty(exports, "PromiseCapability", {
          enumerable: true,
          get: function get() {
            return _util.PromiseCapability;
          }
        });
        Object.defineProperty(exports, "RenderingCancelledException", {
          enumerable: true,
          get: function get() {
            return _display_utils.RenderingCancelledException;
          }
        });
        exports.SVGGraphics = void 0;
        Object.defineProperty(exports, "UnexpectedResponseException", {
          enumerable: true,
          get: function get() {
            return _util.UnexpectedResponseException;
          }
        });
        Object.defineProperty(exports, "Util", {
          enumerable: true,
          get: function get() {
            return _util.Util;
          }
        });
        Object.defineProperty(exports, "VerbosityLevel", {
          enumerable: true,
          get: function get() {
            return _util.VerbosityLevel;
          }
        });
        Object.defineProperty(exports, "XfaLayer", {
          enumerable: true,
          get: function get() {
            return _xfa_layer.XfaLayer;
          }
        });
        Object.defineProperty(exports, "build", {
          enumerable: true,
          get: function get() {
            return _api.build;
          }
        });
        Object.defineProperty(exports, "createValidAbsoluteUrl", {
          enumerable: true,
          get: function get() {
            return _util.createValidAbsoluteUrl;
          }
        });
        Object.defineProperty(exports, "getDocument", {
          enumerable: true,
          get: function get() {
            return _api.getDocument;
          }
        });
        Object.defineProperty(exports, "getFilenameFromUrl", {
          enumerable: true,
          get: function get() {
            return _display_utils.getFilenameFromUrl;
          }
        });
        Object.defineProperty(exports, "getPdfFilenameFromUrl", {
          enumerable: true,
          get: function get() {
            return _display_utils.getPdfFilenameFromUrl;
          }
        });
        Object.defineProperty(exports, "getXfaPageViewport", {
          enumerable: true,
          get: function get() {
            return _display_utils.getXfaPageViewport;
          }
        });
        Object.defineProperty(exports, "isDataScheme", {
          enumerable: true,
          get: function get() {
            return _display_utils.isDataScheme;
          }
        });
        Object.defineProperty(exports, "isPdfFile", {
          enumerable: true,
          get: function get() {
            return _display_utils.isPdfFile;
          }
        });
        Object.defineProperty(exports, "loadScript", {
          enumerable: true,
          get: function get() {
            return _display_utils.loadScript;
          }
        });
        Object.defineProperty(exports, "normalizeUnicode", {
          enumerable: true,
          get: function get() {
            return _util.normalizeUnicode;
          }
        });
        Object.defineProperty(exports, "renderTextLayer", {
          enumerable: true,
          get: function get() {
            return _text_layer.renderTextLayer;
          }
        });
        Object.defineProperty(exports, "setLayerDimensions", {
          enumerable: true,
          get: function get() {
            return _display_utils.setLayerDimensions;
          }
        });
        Object.defineProperty(exports, "shadow", {
          enumerable: true,
          get: function get() {
            return _util.shadow;
          }
        });
        Object.defineProperty(exports, "updateTextLayer", {
          enumerable: true,
          get: function get() {
            return _text_layer.updateTextLayer;
          }
        });
        Object.defineProperty(exports, "version", {
          enumerable: true,
          get: function get() {
            return _api.version;
          }
        });
        var _util = __w_pdfjs_require__(1);
        var _api = __w_pdfjs_require__(2);
        var _display_utils = __w_pdfjs_require__(6);
        var _text_layer = __w_pdfjs_require__(26);
        var _annotation_editor_layer = __w_pdfjs_require__(27);
        var _tools = __w_pdfjs_require__(5);
        var _annotation_layer = __w_pdfjs_require__(29);
        var _worker_options = __w_pdfjs_require__(14);
        var _xfa_layer = __w_pdfjs_require__(31);
        var pdfjsVersion = '3.8.162';
        var pdfjsBuild = '2c74323e3';
        var SVGGraphics = __w_pdfjs_require__(34).SVGGraphics;
        exports.SVGGraphics = SVGGraphics;
      })();

      /******/
      return __webpack_exports__;
      /******/
    }()
  );
});
},{"fs":"../node_modules/parcel-bundler/src/builtins/_empty.js","canvas":"../node_modules/parcel-bundler/src/builtins/_empty.js","http":"../node_modules/parcel-bundler/src/builtins/_empty.js","https":"../node_modules/parcel-bundler/src/builtins/_empty.js","url":"../node_modules/parcel-bundler/src/builtins/_empty.js","zlib":"../node_modules/parcel-bundler/src/builtins/_empty.js","buffer":"../node_modules/buffer/index.js","process":"../node_modules/process/browser.js"}],"../node_modules/@babel/runtime/helpers/typeof.js":[function(require,module,exports) {
function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
},{}],"../node_modules/fflate/esm/browser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Zlib = exports.Unzlib = exports.Inflate = exports.Gzip = exports.Gunzip = exports.Deflate = exports.Decompress = exports.Compress = exports.AsyncZlib = exports.AsyncUnzlib = exports.AsyncInflate = exports.AsyncGzip = exports.AsyncGunzip = exports.AsyncDeflate = exports.AsyncDecompress = exports.AsyncCompress = void 0;
exports.decompress = decompress;
exports.decompressSync = decompressSync;
exports.deflate = deflate;
exports.deflateSync = deflateSync;
exports.gunzip = gunzip;
exports.gunzipSync = gunzipSync;
exports.compress = exports.gzip = gzip;
exports.compressSync = exports.gzipSync = gzipSync;
exports.inflate = inflate;
exports.inflateSync = inflateSync;
exports.strFromU8 = strFromU8;
exports.strToU8 = strToU8;
exports.unzip = unzip;
exports.unzipSync = unzipSync;
exports.unzlib = unzlib;
exports.unzlibSync = unzlibSync;
exports.zip = zip;
exports.zipSync = zipSync;
exports.zlib = zlib;
exports.zlibSync = zlibSync;
// DEFLATE is a complex format; to read this code, you should probably check the RFC first:
// https://tools.ietf.org/html/rfc1951
// You may also wish to take a look at the guide I made about this program:
// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad
// Much of the following code is similar to that of UZIP.js:
// https://github.com/photopea/UZIP.js
// Many optimizations have been made, so the bundle size is ultimately smaller but performance is similar.
// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint
// is better for memory in most engines (I *think*).
var ch2 = {};
var wk = function (c, id, msg, transfer, cb) {
  var u = ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([c], {
    type: 'text/javascript'
  })));
  var w = new Worker(u);
  w.onerror = function (e) {
    return cb(e.error, null);
  };
  w.onmessage = function (e) {
    return cb(null, e.data);
  };
  w.postMessage(msg, transfer);
  return w;
};

// aliases for shorter compressed code (most minifers don't do this)
var u8 = Uint8Array,
  u16 = Uint16Array,
  u32 = Uint32Array;
// fixed length extra bits
var fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */0, 0, /* impossible */0]);
// fixed distance extra bits
// see fleb note
var fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */0, 0]);
// code length index map
var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
// get base, reverse index map from extra bits
var freb = function (eb, start) {
  var b = new u16(31);
  for (var i = 0; i < 31; ++i) {
    b[i] = start += 1 << eb[i - 1];
  }
  // numbers here are at max 18 bits
  var r = new u32(b[30]);
  for (var i = 1; i < 30; ++i) {
    for (var j = b[i]; j < b[i + 1]; ++j) {
      r[j] = j - b[i] << 5 | i;
    }
  }
  return [b, r];
};
var _a = freb(fleb, 2),
  fl = _a[0],
  revfl = _a[1];
// we can ignore the fact that the other numbers are wrong; they never happen anyway
fl[28] = 258, revfl[258] = 28;
var _b = freb(fdeb, 0),
  fd = _b[0],
  revfd = _b[1];
// map of value to reverse (assuming 16 bits)
var rev = new u16(32768);
for (var i = 0; i < 32768; ++i) {
  // reverse table algorithm from SO
  var x = (i & 0xAAAA) >>> 1 | (i & 0x5555) << 1;
  x = (x & 0xCCCC) >>> 2 | (x & 0x3333) << 2;
  x = (x & 0xF0F0) >>> 4 | (x & 0x0F0F) << 4;
  rev[i] = ((x & 0xFF00) >>> 8 | (x & 0x00FF) << 8) >>> 1;
}
// create huffman tree from u8 "map": index -> code length for code index
// mb (max bits) must be at most 15
// TODO: optimize/split up?
var hMap = function (cd, mb, r) {
  var s = cd.length;
  // index
  var i = 0;
  // u16 "map": index -> # of codes with bit length = index
  var l = new u16(mb);
  // length of cd must be 288 (total # of codes)
  for (; i < s; ++i) ++l[cd[i] - 1];
  // u16 "map": index -> minimum code for bit length = index
  var le = new u16(mb);
  for (i = 0; i < mb; ++i) {
    le[i] = le[i - 1] + l[i - 1] << 1;
  }
  var co;
  if (r) {
    // u16 "map": index -> number of actual bits, symbol for code
    co = new u16(1 << mb);
    // bits to remove for reverser
    var rvb = 15 - mb;
    for (i = 0; i < s; ++i) {
      // ignore 0 lengths
      if (cd[i]) {
        // num encoding both symbol and bits read
        var sv = i << 4 | cd[i];
        // free bits
        var r_1 = mb - cd[i];
        // start value
        var v = le[cd[i] - 1]++ << r_1;
        // m is end value
        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {
          // every 16 bit value starting with the code yields the same result
          co[rev[v] >>> rvb] = sv;
        }
      }
    }
  } else {
    co = new u16(s);
    for (i = 0; i < s; ++i) co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];
  }
  return co;
};
// fixed length tree
var flt = new u8(288);
for (var i = 0; i < 144; ++i) flt[i] = 8;
for (var i = 144; i < 256; ++i) flt[i] = 9;
for (var i = 256; i < 280; ++i) flt[i] = 7;
for (var i = 280; i < 288; ++i) flt[i] = 8;
// fixed distance tree
var fdt = new u8(32);
for (var i = 0; i < 32; ++i) fdt[i] = 5;
// fixed length map
var flm = /*#__PURE__*/hMap(flt, 9, 0),
  flrm = /*#__PURE__*/hMap(flt, 9, 1);
// fixed distance map
var fdm = /*#__PURE__*/hMap(fdt, 5, 0),
  fdrm = /*#__PURE__*/hMap(fdt, 5, 1);
// find max of array
var max = function (a) {
  var m = a[0];
  for (var i = 1; i < a.length; ++i) {
    if (a[i] > m) m = a[i];
  }
  return m;
};
// read d, starting at bit p and mask with m
var bits = function (d, p, m) {
  var o = p / 8 >> 0;
  return (d[o] | d[o + 1] << 8) >>> (p & 7) & m;
};
// read d, starting at bit p continuing for at least 16 bits
var bits16 = function (d, p) {
  var o = p / 8 >> 0;
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >>> (p & 7);
};
// get end of byte
var shft = function (p) {
  return (p / 8 >> 0) + (p & 7 && 1);
};
// typed array slice - allows garbage collector to free original reference,
// while being more compatible than .slice
var slc = function (v, s, e) {
  if (s == null || s < 0) s = 0;
  if (e == null || e > v.length) e = v.length;
  // can't use .constructor in case user-supplied
  var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);
  n.set(v.subarray(s, e));
  return n;
};
// expands raw DEFLATE data
var inflt = function (dat, buf, st) {
  // source length
  var sl = dat.length;
  // have to estimate size
  var noBuf = !buf || st;
  // no state
  var noSt = !st || st.i;
  if (!st) st = {};
  // Assumes roughly 33% compression ratio average
  if (!buf) buf = new u8(sl * 3);
  // ensure buffer can fit at least l elements
  var cbuf = function (l) {
    var bl = buf.length;
    // need to increase size to fit
    if (l > bl) {
      // Double or set to necessary, whichever is greater
      var nbuf = new u8(Math.max(bl * 2, l));
      nbuf.set(buf);
      buf = nbuf;
    }
  };
  //  last chunk         bitpos           bytes
  var final = st.f || 0,
    pos = st.p || 0,
    bt = st.b || 0,
    lm = st.l,
    dm = st.d,
    lbt = st.m,
    dbt = st.n;
  // total bits
  var tbts = sl * 8;
  do {
    if (!lm) {
      // BFINAL - this is only 1 when last chunk is next
      st.f = final = bits(dat, pos, 1);
      // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman
      var type = bits(dat, pos + 1, 3);
      pos += 3;
      if (!type) {
        // go to end of byte boundary
        var s = shft(pos) + 4,
          l = dat[s - 4] | dat[s - 3] << 8,
          t = s + l;
        if (t > sl) {
          if (noSt) throw 'unexpected EOF';
          break;
        }
        // ensure size
        if (noBuf) cbuf(bt + l);
        // Copy over uncompressed data
        buf.set(dat.subarray(s, t), bt);
        // Get new bitpos, update byte count
        st.b = bt += l, st.p = pos = t * 8;
        continue;
      } else if (type == 1) lm = flrm, dm = fdrm, lbt = 9, dbt = 5;else if (type == 2) {
        //  literal                            lengths
        var hLit = bits(dat, pos, 31) + 257,
          hcLen = bits(dat, pos + 10, 15) + 4;
        var tl = hLit + bits(dat, pos + 5, 31) + 1;
        pos += 14;
        // length+distance tree
        var ldt = new u8(tl);
        // code length tree
        var clt = new u8(19);
        for (var i = 0; i < hcLen; ++i) {
          // use index map to get real code
          clt[clim[i]] = bits(dat, pos + i * 3, 7);
        }
        pos += hcLen * 3;
        // code lengths bits
        var clb = max(clt),
          clbmsk = (1 << clb) - 1;
        if (!noSt && pos + tl * (clb + 7) > tbts) break;
        // code lengths map
        var clm = hMap(clt, clb, 1);
        for (var i = 0; i < tl;) {
          var r = clm[bits(dat, pos, clbmsk)];
          // bits read
          pos += r & 15;
          // symbol
          var s = r >>> 4;
          // code length to copy
          if (s < 16) {
            ldt[i++] = s;
          } else {
            //  copy   count
            var c = 0,
              n = 0;
            if (s == 16) n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];else if (s == 17) n = 3 + bits(dat, pos, 7), pos += 3;else if (s == 18) n = 11 + bits(dat, pos, 127), pos += 7;
            while (n--) ldt[i++] = c;
          }
        }
        //    length tree                 distance tree
        var lt = ldt.subarray(0, hLit),
          dt = ldt.subarray(hLit);
        // max length bits
        lbt = max(lt);
        // max dist bits
        dbt = max(dt);
        lm = hMap(lt, lbt, 1);
        dm = hMap(dt, dbt, 1);
      } else throw 'invalid block type';
      if (pos > tbts) throw 'unexpected EOF';
    }
    // Make sure the buffer can hold this + the largest possible addition
    // Maximum chunk size (practically, theoretically infinite) is 2^17;
    if (noBuf) cbuf(bt + 131072);
    var lms = (1 << lbt) - 1,
      dms = (1 << dbt) - 1;
    var mxa = lbt + dbt + 18;
    while (noSt || pos + mxa < tbts) {
      // bits read, code
      var c = lm[bits16(dat, pos) & lms],
        sym = c >>> 4;
      pos += c & 15;
      if (pos > tbts) throw 'unexpected EOF';
      if (!c) throw 'invalid length/literal';
      if (sym < 256) buf[bt++] = sym;else if (sym == 256) {
        lm = null;
        break;
      } else {
        var add = sym - 254;
        // no extra bits needed if less
        if (sym > 264) {
          // index
          var i = sym - 257,
            b = fleb[i];
          add = bits(dat, pos, (1 << b) - 1) + fl[i];
          pos += b;
        }
        // dist
        var d = dm[bits16(dat, pos) & dms],
          dsym = d >>> 4;
        if (!d) throw 'invalid distance';
        pos += d & 15;
        var dt = fd[dsym];
        if (dsym > 3) {
          var b = fdeb[dsym];
          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;
        }
        if (pos > tbts) throw 'unexpected EOF';
        if (noBuf) cbuf(bt + 131072);
        var end = bt + add;
        for (; bt < end; bt += 4) {
          buf[bt] = buf[bt - dt];
          buf[bt + 1] = buf[bt + 1 - dt];
          buf[bt + 2] = buf[bt + 2 - dt];
          buf[bt + 3] = buf[bt + 3 - dt];
        }
        bt = end;
      }
    }
    st.l = lm, st.p = pos, st.b = bt;
    if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;
  } while (!final);
  return bt == buf.length ? buf : slc(buf, 0, bt);
};
// starting at p, write the minimum number of bits that can hold v to d
var wbits = function (d, p, v) {
  v <<= p & 7;
  var o = p / 8 >> 0;
  d[o] |= v;
  d[o + 1] |= v >>> 8;
};
// starting at p, write the minimum number of bits (>8) that can hold v to d
var wbits16 = function (d, p, v) {
  v <<= p & 7;
  var o = p / 8 >> 0;
  d[o] |= v;
  d[o + 1] |= v >>> 8;
  d[o + 2] |= v >>> 16;
};
// creates code lengths from a frequency table
var hTree = function (d, mb) {
  // Need extra info to make a tree
  var t = [];
  for (var i = 0; i < d.length; ++i) {
    if (d[i]) t.push({
      s: i,
      f: d[i]
    });
  }
  var s = t.length;
  var t2 = t.slice();
  if (!s) return [new u8(0), 0];
  if (s == 1) {
    var v = new u8(t[0].s + 1);
    v[t[0].s] = 1;
    return [v, 1];
  }
  t.sort(function (a, b) {
    return a.f - b.f;
  });
  // after i2 reaches last ind, will be stopped
  // freq must be greater than largest possible number of symbols
  t.push({
    s: -1,
    f: 25001
  });
  var l = t[0],
    r = t[1],
    i0 = 0,
    i1 = 1,
    i2 = 2;
  t[0] = {
    s: -1,
    f: l.f + r.f,
    l: l,
    r: r
  };
  // efficient algorithm from UZIP.js
  // i0 is lookbehind, i2 is lookahead - after processing two low-freq
  // symbols that combined have high freq, will start processing i2 (high-freq,
  // non-composite) symbols instead
  // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/
  while (i1 != s - 1) {
    l = t[t[i0].f < t[i2].f ? i0++ : i2++];
    r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];
    t[i1++] = {
      s: -1,
      f: l.f + r.f,
      l: l,
      r: r
    };
  }
  var maxSym = t2[0].s;
  for (var i = 1; i < s; ++i) {
    if (t2[i].s > maxSym) maxSym = t2[i].s;
  }
  // code lengths
  var tr = new u16(maxSym + 1);
  // max bits in tree
  var mbt = ln(t[i1 - 1], tr, 0);
  if (mbt > mb) {
    // more algorithms from UZIP.js
    // TODO: find out how this code works (debt)
    //  ind    debt
    var i = 0,
      dt = 0;
    //    left            cost
    var lft = mbt - mb,
      cst = 1 << lft;
    t2.sort(function (a, b) {
      return tr[b.s] - tr[a.s] || a.f - b.f;
    });
    for (; i < s; ++i) {
      var i2_1 = t2[i].s;
      if (tr[i2_1] > mb) {
        dt += cst - (1 << mbt - tr[i2_1]);
        tr[i2_1] = mb;
      } else break;
    }
    dt >>>= lft;
    while (dt > 0) {
      var i2_2 = t2[i].s;
      if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;else ++i;
    }
    for (; i >= 0 && dt; --i) {
      var i2_3 = t2[i].s;
      if (tr[i2_3] == mb) {
        --tr[i2_3];
        ++dt;
      }
    }
    mbt = mb;
  }
  return [new u8(tr), mbt];
};
// get the max length and assign length codes
var ln = function (n, l, d) {
  return n.s == -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;
};
// length codes generation
var lc = function (c) {
  var s = c.length;
  // Note that the semicolon was intentional
  while (s && !c[--s]);
  var cl = new u16(++s);
  //  ind      num         streak
  var cli = 0,
    cln = c[0],
    cls = 1;
  var w = function (v) {
    cl[cli++] = v;
  };
  for (var i = 1; i <= s; ++i) {
    if (c[i] == cln && i != s) ++cls;else {
      if (!cln && cls > 2) {
        for (; cls > 138; cls -= 138) w(32754);
        if (cls > 2) {
          w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);
          cls = 0;
        }
      } else if (cls > 3) {
        w(cln), --cls;
        for (; cls > 6; cls -= 6) w(8304);
        if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;
      }
      while (cls--) w(cln);
      cls = 1;
      cln = c[i];
    }
  }
  return [cl.subarray(0, cli), s];
};
// calculate the length of output from tree, code lengths
var clen = function (cf, cl) {
  var l = 0;
  for (var i = 0; i < cl.length; ++i) l += cf[i] * cl[i];
  return l;
};
// writes a fixed block
// returns the new bit pos
var wfblk = function (out, pos, dat) {
  // no need to write 00 as type: TypedArray defaults to 0
  var s = dat.length;
  var o = shft(pos + 2);
  out[o] = s & 255;
  out[o + 1] = s >>> 8;
  out[o + 2] = out[o] ^ 255;
  out[o + 3] = out[o + 1] ^ 255;
  for (var i = 0; i < s; ++i) out[o + i + 4] = dat[i];
  return (o + 4 + s) * 8;
};
// writes a block
var wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {
  wbits(out, p++, final);
  ++lf[256];
  var _a = hTree(lf, 15),
    dlt = _a[0],
    mlb = _a[1];
  var _b = hTree(df, 15),
    ddt = _b[0],
    mdb = _b[1];
  var _c = lc(dlt),
    lclt = _c[0],
    nlc = _c[1];
  var _d = lc(ddt),
    lcdt = _d[0],
    ndc = _d[1];
  var lcfreq = new u16(19);
  for (var i = 0; i < lclt.length; ++i) lcfreq[lclt[i] & 31]++;
  for (var i = 0; i < lcdt.length; ++i) lcfreq[lcdt[i] & 31]++;
  var _e = hTree(lcfreq, 7),
    lct = _e[0],
    mlcb = _e[1];
  var nlcc = 19;
  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc);
  var flen = bl + 5 << 3;
  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;
  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);
  if (flen <= ftlen && flen <= dtlen) return wfblk(out, p, dat.subarray(bs, bs + bl));
  var lm, ll, dm, dl;
  wbits(out, p, 1 + (dtlen < ftlen)), p += 2;
  if (dtlen < ftlen) {
    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;
    var llm = hMap(lct, mlcb, 0);
    wbits(out, p, nlc - 257);
    wbits(out, p + 5, ndc - 1);
    wbits(out, p + 10, nlcc - 4);
    p += 14;
    for (var i = 0; i < nlcc; ++i) wbits(out, p + 3 * i, lct[clim[i]]);
    p += 3 * nlcc;
    var lcts = [lclt, lcdt];
    for (var it = 0; it < 2; ++it) {
      var clct = lcts[it];
      for (var i = 0; i < clct.length; ++i) {
        var len = clct[i] & 31;
        wbits(out, p, llm[len]), p += lct[len];
        if (len > 15) wbits(out, p, clct[i] >>> 5 & 127), p += clct[i] >>> 12;
      }
    }
  } else {
    lm = flm, ll = flt, dm = fdm, dl = fdt;
  }
  for (var i = 0; i < li; ++i) {
    if (syms[i] > 255) {
      var len = syms[i] >>> 18 & 31;
      wbits16(out, p, lm[len + 257]), p += ll[len + 257];
      if (len > 7) wbits(out, p, syms[i] >>> 23 & 31), p += fleb[len];
      var dst = syms[i] & 31;
      wbits16(out, p, dm[dst]), p += dl[dst];
      if (dst > 3) wbits16(out, p, syms[i] >>> 5 & 8191), p += fdeb[dst];
    } else {
      wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];
    }
  }
  wbits16(out, p, lm[256]);
  return p + ll[256];
};
// deflate options (nice << 13) | chain
var deo = /*#__PURE__*/new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);
// empty
var et = /*#__PURE__*/new u8(0);
// compresses data into a raw DEFLATE buffer
var dflt = function (dat, lvl, plvl, pre, post, lst) {
  var s = dat.length;
  var o = new u8(pre + s + 5 * (1 + Math.floor(s / 7000)) + post);
  // writing to this writes to the output buffer
  var w = o.subarray(pre, o.length - post);
  var pos = 0;
  if (!lvl || s < 8) {
    for (var i = 0; i <= s; i += 65535) {
      // end
      var e = i + 65535;
      if (e < s) {
        // write full block
        pos = wfblk(w, pos, dat.subarray(i, e));
      } else {
        // write final block
        w[i] = lst;
        pos = wfblk(w, pos, dat.subarray(i, s));
      }
    }
  } else {
    var opt = deo[lvl - 1];
    var n = opt >>> 13,
      c = opt & 8191;
    var msk_1 = (1 << plvl) - 1;
    //    prev 2-byte val map    curr 2-byte val map
    var prev = new u16(32768),
      head = new u16(msk_1 + 1);
    var bs1_1 = Math.ceil(plvl / 3),
      bs2_1 = 2 * bs1_1;
    var hsh = function (i) {
      return (dat[i] ^ dat[i + 1] << bs1_1 ^ dat[i + 2] << bs2_1) & msk_1;
    };
    // 24576 is an arbitrary number of maximum symbols per block
    // 424 buffer for last block
    var syms = new u32(25000);
    // length/literal freq   distance freq
    var lf = new u16(288),
      df = new u16(32);
    //  l/lcnt  exbits  index  l/lind  waitdx  bitpos
    var lc_1 = 0,
      eb = 0,
      i = 0,
      li = 0,
      wi = 0,
      bs = 0;
    for (; i < s; ++i) {
      // hash value
      var hv = hsh(i);
      // index mod 32768
      var imod = i & 32767;
      // previous index with this value
      var pimod = head[hv];
      prev[imod] = pimod;
      head[hv] = imod;
      // We always should modify head and prev, but only add symbols if
      // this data is not yet processed ("wait" for wait index)
      if (wi <= i) {
        // bytes remaining
        var rem = s - i;
        if ((lc_1 > 7000 || li > 24576) && rem > 423) {
          pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);
          li = lc_1 = eb = 0, bs = i;
          for (var j = 0; j < 286; ++j) lf[j] = 0;
          for (var j = 0; j < 30; ++j) df[j] = 0;
        }
        //  len    dist   chain
        var l = 2,
          d = 0,
          ch_1 = c,
          dif = imod - pimod & 32767;
        if (rem > 2 && hv == hsh(i - dif)) {
          var maxn = Math.min(n, rem) - 1;
          var maxd = Math.min(32767, i);
          // max possible length
          // not capped at dif because decompressors implement "rolling" index population
          var ml = Math.min(258, rem);
          while (dif <= maxd && --ch_1 && imod != pimod) {
            if (dat[i + l] == dat[i + l - dif]) {
              var nl = 0;
              for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl);
              if (nl > l) {
                l = nl, d = dif;
                // break out early when we reach "nice" (we are satisfied enough)
                if (nl > maxn) break;
                // now, find the rarest 2-byte sequence within this
                // length of literals and search for that instead.
                // Much faster than just using the start
                var mmd = Math.min(dif, nl - 2);
                var md = 0;
                for (var j = 0; j < mmd; ++j) {
                  var ti = i - dif + j + 32768 & 32767;
                  var pti = prev[ti];
                  var cd = ti - pti + 32768 & 32767;
                  if (cd > md) md = cd, pimod = ti;
                }
              }
            }
            // check the previous match
            imod = pimod, pimod = prev[imod];
            dif += imod - pimod + 32768 & 32767;
          }
        }
        // d will be nonzero only when a match was found
        if (d) {
          // store both dist and len data in one Uint32
          // Make sure this is recognized as a len/dist with 28th bit (2^28)
          syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];
          var lin = revfl[l] & 31,
            din = revfd[d] & 31;
          eb += fleb[lin] + fdeb[din];
          ++lf[257 + lin];
          ++df[din];
          wi = i + l;
          ++lc_1;
        } else {
          syms[li++] = dat[i];
          ++lf[dat[i]];
        }
      }
    }
    pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);
    // this is the easiest way to avoid needing to maintain state
    if (!lst) pos = wfblk(w, pos, et);
  }
  return slc(o, 0, pre + shft(pos) + post);
};
// CRC32 table
var crct = /*#__PURE__*/function () {
  var t = new u32(256);
  for (var i = 0; i < 256; ++i) {
    var c = i,
      k = 9;
    while (--k) c = (c & 1 && 0xEDB88320) ^ c >>> 1;
    t[i] = c;
  }
  return t;
}();
// CRC32
var crc = function () {
  var c = 0xFFFFFFFF;
  return {
    p: function (d) {
      // closures have awful performance
      var cr = c;
      for (var i = 0; i < d.length; ++i) cr = crct[cr & 255 ^ d[i]] ^ cr >>> 8;
      c = cr;
    },
    d: function () {
      return c ^ 0xFFFFFFFF;
    }
  };
};
// Alder32
var adler = function () {
  var a = 1,
    b = 0;
  return {
    p: function (d) {
      // closures have awful performance
      var n = a,
        m = b;
      var l = d.length;
      for (var i = 0; i != l;) {
        var e = Math.min(i + 5552, l);
        for (; i < e; ++i) n += d[i], m += n;
        n %= 65521, m %= 65521;
      }
      a = n, b = m;
    },
    d: function () {
      return (a >>> 8 << 16 | (b & 255) << 8 | b >>> 8) + ((a & 255) << 23) * 2;
    }
  };
};
;
// deflate with opts
var dopt = function (dat, opt, pre, post, st) {
  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);
};
// Walmart object spread
var mrg = function (a, b) {
  var o = {};
  for (var k in a) o[k] = a[k];
  for (var k in b) o[k] = b[k];
  return o;
};
// worker clone
// This is possibly the craziest part of the entire codebase, despite how simple it may seem.
// The only parameter to this function is a closure that returns an array of variables outside of the function scope.
// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.
// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).
// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.
// This took me three weeks to figure out how to do.
var wcln = function (fn, fnStr, td) {
  var dt = fn();
  var st = fn.toString();
  var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/ /g, '').split(',');
  for (var i = 0; i < dt.length; ++i) {
    var v = dt[i],
      k = ks[i];
    if (typeof v == 'function') {
      fnStr += ';' + k + '=';
      var st_1 = v.toString();
      if (v.prototype) {
        // for global objects
        if (st_1.indexOf('[native code]') != -1) {
          var spInd = st_1.indexOf(' ', 8) + 1;
          fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));
        } else {
          fnStr += st_1;
          for (var t in v.prototype) fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();
        }
      } else fnStr += st_1;
    } else td[k] = v;
  }
  return [fnStr, td];
};
var ch = [];
// clone bufs
var cbfs = function (v) {
  var tl = [];
  for (var k in v) {
    if (v[k] instanceof u8 || v[k] instanceof u16 || v[k] instanceof u32) tl.push((v[k] = new v[k].constructor(v[k])).buffer);
  }
  return tl;
};
// use a worker to execute code
var wrkr = function (fns, init, id, cb) {
  var _a;
  if (!ch[id]) {
    var fnStr = '',
      td_1 = {},
      m = fns.length - 1;
    for (var i = 0; i < m; ++i) _a = wcln(fns[i], fnStr, td_1), fnStr = _a[0], td_1 = _a[1];
    ch[id] = wcln(fns[m], fnStr, td_1);
  }
  var td = mrg({}, ch[id][1]);
  return wk(ch[id][0] + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);
};
// base async inflate fn
var bInflt = function () {
  return [u8, u16, u32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, hMap, max, bits, bits16, shft, slc, inflt, inflateSync, pbf, gu8];
};
var bDflt = function () {
  return [u8, u16, u32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf];
};
// gzip extra
var gze = function () {
  return [gzh, gzhl, wbytes, crc, crct];
};
// gunzip extra
var guze = function () {
  return [gzs, gzl];
};
// zlib extra
var zle = function () {
  return [zlh, wbytes, adler];
};
// unzlib extra
var zule = function () {
  return [zlv];
};
// post buf
var pbf = function (msg) {
  return postMessage(msg, [msg.buffer]);
};
// get u8
var gu8 = function (o) {
  return o && o.size && new u8(o.size);
};
// async helper
var cbify = function (dat, opts, fns, init, id, cb) {
  var w = wrkr(fns, init, id, function (err, dat) {
    w.terminate();
    cb(err, dat);
  });
  if (!opts.consume) dat = new u8(dat);
  w.postMessage([dat, opts], [dat.buffer]);
  return function () {
    w.terminate();
  };
};
// auto stream
var astrm = function (strm) {
  strm.ondata = function (dat, final) {
    return postMessage([dat, final], [dat.buffer]);
  };
  return function (ev) {
    return strm.push(ev.data[0], ev.data[1]);
  };
};
// async stream attach
var astrmify = function (fns, strm, opts, init, id) {
  var t;
  var w = wrkr(fns, init, id, function (err, dat) {
    if (err) w.terminate(), strm.ondata.call(strm, err);else {
      if (dat[1]) w.terminate();
      strm.ondata.call(strm, err, dat[0], dat[1]);
    }
  });
  w.postMessage(opts);
  strm.push = function (d, f) {
    if (t) throw 'stream finished';
    if (!strm.ondata) throw 'no stream handler';
    w.postMessage([d, t = f], [d.buffer]);
  };
  strm.terminate = function () {
    w.terminate();
  };
};
// read 2 bytes
var b2 = function (d, b) {
  return d[b] | d[b + 1] << 8;
};
// read 4 bytes
var b4 = function (d, b) {
  return (d[b] | d[b + 1] << 8 | d[b + 2] << 16) + (d[b + 3] << 23) * 2;
};
// write bytes
var wbytes = function (d, b, v) {
  for (; v; ++b) d[b] = v, v >>>= 8;
};
// gzip header
var gzh = function (c, o) {
  var fn = o.filename;
  c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix
  if (o.mtime != 0) wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));
  if (fn) {
    c[3] = 8;
    for (var i = 0; i <= fn.length; ++i) c[i + 10] = fn.charCodeAt(i);
  }
};
// gzip footer: -8 to -4 = CRC, -4 to -0 is length
// gzip start
var gzs = function (d) {
  if (d[0] != 31 || d[1] != 139 || d[2] != 8) throw 'invalid gzip data';
  var flg = d[3];
  var st = 10;
  if (flg & 4) st += d[10] | (d[11] << 8) + 2;
  for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++]);
  return st + (flg & 2);
};
// gzip length
var gzl = function (d) {
  var l = d.length;
  return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16) + 2 * (d[l - 1] << 23);
};
// gzip header length
var gzhl = function (o) {
  return 10 + (o.filename && o.filename.length + 1 || 0);
};
// zlib header
var zlh = function (c, o) {
  var lv = o.level,
    fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;
  c[0] = 120, c[1] = fl << 6 | (fl ? 32 - 2 * fl : 1);
};
// zlib valid
var zlv = function (d) {
  if ((d[0] & 15) != 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31) throw 'invalid zlib data';
  if (d[1] & 32) throw 'invalid zlib data: preset dictionaries not supported';
};
function AsyncCmpStrm(opts, cb) {
  if (!cb && typeof opts == 'function') cb = opts, opts = {};
  this.ondata = cb;
  return opts;
}
// zlib footer: -4 to -0 is Adler32
/**
 * Streaming DEFLATE compression
 */
var Deflate = /*#__PURE__*/function () {
  function Deflate(opts, cb) {
    if (!cb && typeof opts == 'function') cb = opts, opts = {};
    this.ondata = cb;
    this.o = opts || {};
  }
  Deflate.prototype.p = function (c, f) {
    this.ondata(dopt(c, this.o, 0, 0, !f), f);
  };
  /**
   * Pushes a chunk to be deflated
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */
  Deflate.prototype.push = function (chunk, final) {
    if (this.d) throw 'stream finished';
    if (!this.ondata) throw 'no stream handler';
    this.d = final;
    this.p(chunk, final || false);
  };
  return Deflate;
}();
exports.Deflate = Deflate;
/**
 * Asynchronous streaming DEFLATE compression
 */
var AsyncDeflate = /*#__PURE__*/function () {
  function AsyncDeflate(opts, cb) {
    astrmify([bDflt, function () {
      return [astrm, Deflate];
    }], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
      var strm = new Deflate(ev.data);
      onmessage = astrm(strm);
    }, 6);
  }
  return AsyncDeflate;
}();
exports.AsyncDeflate = AsyncDeflate;
function deflate(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bDflt], function (ev) {
    return pbf(deflateSync(ev.data[0], ev.data[1]));
  }, 0, cb);
}
/**
 * Compresses data with DEFLATE without any wrapper
 * @param data The data to compress
 * @param opts The compression options
 * @returns The deflated version of the data
 */
function deflateSync(data, opts) {
  if (opts === void 0) {
    opts = {};
  }
  return dopt(data, opts, 0, 0);
}
/**
 * Streaming DEFLATE decompression
 */
var Inflate = /*#__PURE__*/function () {
  /**
   * Creates an inflation stream
   * @param cb The callback to call whenever data is inflated
   */
  function Inflate(cb) {
    this.s = {};
    this.p = new u8(0);
    this.ondata = cb;
  }
  Inflate.prototype.e = function (c) {
    if (this.d) throw 'stream finished';
    if (!this.ondata) throw 'no stream handler';
    var l = this.p.length;
    var n = new u8(l + c.length);
    n.set(this.p), n.set(c, l), this.p = n;
  };
  Inflate.prototype.c = function (final) {
    this.d = this.s.i = final || false;
    var bts = this.s.b;
    var dt = inflt(this.p, this.o, this.s);
    this.ondata(slc(dt, bts, this.s.b), this.d);
    this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;
    this.p = slc(this.p, this.s.p / 8 >> 0), this.s.p &= 7;
  };
  /**
   * Pushes a chunk to be inflated
   * @param chunk The chunk to push
   * @param final Whether this is the final chunk
   */
  Inflate.prototype.push = function (chunk, final) {
    this.e(chunk), this.c(final);
  };
  return Inflate;
}();
exports.Inflate = Inflate;
/**
 * Asynchronous streaming DEFLATE decompression
 */
var AsyncInflate = /*#__PURE__*/function () {
  /**
   * Creates an asynchronous inflation stream
   * @param cb The callback to call whenever data is deflated
   */
  function AsyncInflate(cb) {
    this.ondata = cb;
    astrmify([bInflt, function () {
      return [astrm, Inflate];
    }], this, 0, function () {
      var strm = new Inflate();
      onmessage = astrm(strm);
    }, 7);
  }
  return AsyncInflate;
}();
exports.AsyncInflate = AsyncInflate;
function inflate(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bInflt], function (ev) {
    return pbf(inflateSync(ev.data[0], gu8(ev.data[1])));
  }, 1, cb);
}
/**
 * Expands DEFLATE data with no wrapper
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function inflateSync(data, out) {
  return inflt(data, out);
}
// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.
/**
 * Streaming GZIP compression
 */
var Gzip = /*#__PURE__*/function () {
  function Gzip(opts, cb) {
    this.c = crc();
    this.l = 0;
    this.v = 1;
    Deflate.call(this, opts, cb);
  }
  /**
   * Pushes a chunk to be GZIPped
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */
  Gzip.prototype.push = function (chunk, final) {
    Deflate.prototype.push.call(this, chunk, final);
  };
  Gzip.prototype.p = function (c, f) {
    this.c.p(c);
    this.l += c.length;
    var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, !f);
    if (this.v) gzh(raw, this.o), this.v = 0;
    if (f) wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);
    this.ondata(raw, f);
  };
  return Gzip;
}();
exports.Compress = exports.Gzip = Gzip;
/**
 * Asynchronous streaming GZIP compression
 */
var AsyncGzip = /*#__PURE__*/function () {
  function AsyncGzip(opts, cb) {
    astrmify([bDflt, gze, function () {
      return [astrm, Deflate, Gzip];
    }], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
      var strm = new Gzip(ev.data);
      onmessage = astrm(strm);
    }, 8);
  }
  return AsyncGzip;
}();
exports.AsyncCompress = exports.AsyncGzip = AsyncGzip;
function gzip(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bDflt, gze, function () {
    return [gzipSync];
  }], function (ev) {
    return pbf(gzipSync(ev.data[0], ev.data[1]));
  }, 2, cb);
}
/**
 * Compresses data with GZIP
 * @param data The data to compress
 * @param opts The compression options
 * @returns The gzipped version of the data
 */
function gzipSync(data, opts) {
  if (opts === void 0) {
    opts = {};
  }
  var c = crc(),
    l = data.length;
  c.p(data);
  var d = dopt(data, opts, gzhl(opts), 8),
    s = d.length;
  return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;
}
/**
 * Streaming GZIP decompression
 */
var Gunzip = /*#__PURE__*/function () {
  /**
   * Creates a GUNZIP stream
   * @param cb The callback to call whenever data is inflated
   */
  function Gunzip(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  /**
   * Pushes a chunk to be GUNZIPped
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */
  Gunzip.prototype.push = function (chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      var s = gzs(this.p);
      if (s >= this.p.length && !final) return;
      this.p = this.p.subarray(s), this.v = 0;
    }
    if (final) {
      if (this.p.length < 8) throw 'invalid gzip stream';
      this.p = this.p.subarray(0, -8);
    }
    // necessary to prevent TS from using the closure value
    // This allows for workerization to function correctly
    Inflate.prototype.c.call(this, final);
  };
  return Gunzip;
}();
exports.Gunzip = Gunzip;
/**
 * Asynchronous streaming GZIP decompression
 */
var AsyncGunzip = /*#__PURE__*/function () {
  /**
   * Creates an asynchronous GUNZIP stream
   * @param cb The callback to call whenever data is deflated
   */
  function AsyncGunzip(cb) {
    this.ondata = cb;
    astrmify([bInflt, guze, function () {
      return [astrm, Inflate, Gunzip];
    }], this, 0, function () {
      var strm = new Gunzip();
      onmessage = astrm(strm);
    }, 9);
  }
  return AsyncGunzip;
}();
exports.AsyncGunzip = AsyncGunzip;
function gunzip(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bInflt, guze, function () {
    return [gunzipSync];
  }], function (ev) {
    return pbf(gunzipSync(ev.data[0]));
  }, 3, cb);
}
/**
 * Expands GZIP data
 * @param data The data to decompress
 * @param out Where to write the data. GZIP already encodes the output size, so providing this doesn't save memory.
 * @returns The decompressed version of the data
 */
function gunzipSync(data, out) {
  return inflt(data.subarray(gzs(data), -8), out || new u8(gzl(data)));
}
/**
 * Streaming Zlib compression
 */
var Zlib = /*#__PURE__*/function () {
  function Zlib(opts, cb) {
    this.c = adler();
    this.v = 1;
    Deflate.call(this, opts, cb);
  }
  /**
   * Pushes a chunk to be zlibbed
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */
  Zlib.prototype.push = function (chunk, final) {
    Deflate.prototype.push.call(this, chunk, final);
  };
  Zlib.prototype.p = function (c, f) {
    this.c.p(c);
    var raw = dopt(c, this.o, this.v && 2, f && 4, !f);
    if (this.v) zlh(raw, this.o), this.v = 0;
    if (f) wbytes(raw, raw.length - 4, this.c.d());
    this.ondata(raw, f);
  };
  return Zlib;
}();
exports.Zlib = Zlib;
/**
 * Asynchronous streaming Zlib compression
 */
var AsyncZlib = /*#__PURE__*/function () {
  function AsyncZlib(opts, cb) {
    astrmify([bDflt, zle, function () {
      return [astrm, Deflate, Zlib];
    }], this, AsyncCmpStrm.call(this, opts, cb), function (ev) {
      var strm = new Zlib(ev.data);
      onmessage = astrm(strm);
    }, 10);
  }
  return AsyncZlib;
}();
exports.AsyncZlib = AsyncZlib;
function zlib(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bDflt, zle, function () {
    return [zlibSync];
  }], function (ev) {
    return pbf(zlibSync(ev.data[0], ev.data[1]));
  }, 4, cb);
}
/**
 * Compress data with Zlib
 * @param data The data to compress
 * @param opts The compression options
 * @returns The zlib-compressed version of the data
 */
function zlibSync(data, opts) {
  if (opts === void 0) {
    opts = {};
  }
  var a = adler();
  a.p(data);
  var d = dopt(data, opts, 2, 4);
  return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;
}
/**
 * Streaming Zlib decompression
 */
var Unzlib = /*#__PURE__*/function () {
  /**
   * Creates a Zlib decompression stream
   * @param cb The callback to call whenever data is inflated
   */
  function Unzlib(cb) {
    this.v = 1;
    Inflate.call(this, cb);
  }
  /**
   * Pushes a chunk to be unzlibbed
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */
  Unzlib.prototype.push = function (chunk, final) {
    Inflate.prototype.e.call(this, chunk);
    if (this.v) {
      if (this.p.length < 2 && !final) return;
      this.p = this.p.subarray(2), this.v = 0;
    }
    if (final) {
      if (this.p.length < 4) throw 'invalid zlib stream';
      this.p = this.p.subarray(0, -4);
    }
    // necessary to prevent TS from using the closure value
    // This allows for workerization to function correctly
    Inflate.prototype.c.call(this, final);
  };
  return Unzlib;
}();
exports.Unzlib = Unzlib;
/**
 * Asynchronous streaming Zlib decompression
 */
var AsyncUnzlib = /*#__PURE__*/function () {
  /**
   * Creates an asynchronous Zlib decompression stream
   * @param cb The callback to call whenever data is deflated
   */
  function AsyncUnzlib(cb) {
    this.ondata = cb;
    astrmify([bInflt, zule, function () {
      return [astrm, Inflate, Unzlib];
    }], this, 0, function () {
      var strm = new Unzlib();
      onmessage = astrm(strm);
    }, 11);
  }
  return AsyncUnzlib;
}();
exports.AsyncUnzlib = AsyncUnzlib;
function unzlib(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return cbify(data, opts, [bInflt, zule, function () {
    return [unzlibSync];
  }], function (ev) {
    return pbf(unzlibSync(ev.data[0], gu8(ev.data[1])));
  }, 5, cb);
}
/**
 * Expands Zlib data
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function unzlibSync(data, out) {
  return inflt((zlv(data), data.subarray(2, -4)), out);
}
// Default algorithm for compression (used because having a known output size allows faster decompression)

// Default algorithm for compression (used because having a known output size allows faster decompression)

/**
 * Streaming GZIP, Zlib, or raw DEFLATE decompression
 */
var Decompress = /*#__PURE__*/function () {
  /**
   * Creates a decompression stream
   * @param cb The callback to call whenever data is decompressed
   */
  function Decompress(cb) {
    this.G = Gunzip;
    this.I = Inflate;
    this.Z = Unzlib;
    this.ondata = cb;
  }
  /**
   * Pushes a chunk to be decompressed
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */
  Decompress.prototype.push = function (chunk, final) {
    if (!this.ondata) throw 'no stream handler';
    if (!this.s) {
      if (this.p && this.p.length) {
        var n = new u8(this.p.length + chunk.length);
        n.set(this.p), n.set(chunk, this.p.length);
      } else this.p = chunk;
      if (this.p.length > 2) {
        var _this_1 = this;
        var cb = function () {
          _this_1.ondata.apply(_this_1, arguments);
        };
        this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(cb) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(cb) : new this.Z(cb);
        this.s.push(this.p, final);
        this.p = null;
      }
    } else this.s.push(chunk, final);
  };
  return Decompress;
}();
exports.Decompress = Decompress;
/**
 * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression
 */
var AsyncDecompress = /*#__PURE__*/function () {
  /**
  * Creates an asynchronous decompression stream
  * @param cb The callback to call whenever data is decompressed
  */
  function AsyncDecompress(cb) {
    this.G = AsyncGunzip;
    this.I = AsyncInflate;
    this.Z = AsyncUnzlib;
    this.ondata = cb;
  }
  /**
   * Pushes a chunk to be decompressed
   * @param chunk The chunk to push
   * @param final Whether this is the last chunk
   */
  AsyncDecompress.prototype.push = function (chunk, final) {
    Decompress.prototype.push.call(this, chunk, final);
  };
  return AsyncDecompress;
}();
exports.AsyncDecompress = AsyncDecompress;
function decompress(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzip(data, opts, cb) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflate(data, opts, cb) : unzlib(data, opts, cb);
}
/**
 * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format
 * @param data The data to decompress
 * @param out Where to write the data. Saves memory if you know the decompressed size and provide an output buffer of that length.
 * @returns The decompressed version of the data
 */
function decompressSync(data, out) {
  return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzipSync(data, out) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflateSync(data, out) : unzlibSync(data, out);
}
// flatten a directory structure
var fltn = function (d, p, t, o) {
  for (var k in d) {
    var val = d[k],
      n = p + k;
    if (val instanceof u8) t[n] = [val, o];else if (Array.isArray(val)) t[n] = [val[0], mrg(o, val[1])];else fltn(val, n + '/', t, o);
  }
};
/**
 * Converts a string into a Uint8Array for use with compression/decompression methods
 * @param str The string to encode
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless decoding a binary string.
 * @returns The string encoded in UTF-8/Latin-1 binary
 */
function strToU8(str, latin1) {
  var l = str.length;
  if (!latin1 && typeof TextEncoder != 'undefined') return new TextEncoder().encode(str);
  var ar = new u8(str.length + (str.length >>> 1));
  var ai = 0;
  var w = function (v) {
    ar[ai++] = v;
  };
  for (var i = 0; i < l; ++i) {
    if (ai + 5 > ar.length) {
      var n = new u8(ai + 8 + (l - i << 1));
      n.set(ar);
      ar = n;
    }
    var c = str.charCodeAt(i);
    if (c < 128 || latin1) w(c);else if (c < 2048) w(192 | c >>> 6), w(128 | c & 63);else if (c > 55295 && c < 57344) c = 65536 + (c & 1023 << 10) | str.charCodeAt(++i) & 1023, w(240 | c >>> 18), w(128 | c >>> 12 & 63), w(128 | c >>> 6 & 63), w(128 | c & 63);else w(224 | c >>> 12), w(128 | c >>> 6 & 63), w(128 | c & 63);
  }
  return slc(ar, 0, ai);
}
/**
 * Converts a Uint8Array to a string
 * @param dat The data to decode to string
 * @param latin1 Whether or not to interpret the data as Latin-1. This should
 *               not need to be true unless encoding to binary string.
 * @returns The original UTF-8/Latin-1 string
 */
function strFromU8(dat, latin1) {
  var r = '';
  if (!latin1 && typeof TextDecoder != 'undefined') return new TextDecoder().decode(dat);
  for (var i = 0; i < dat.length;) {
    var c = dat[i++];
    if (c < 128 || latin1) r += String.fromCharCode(c);else if (c < 224) r += String.fromCharCode((c & 31) << 6 | dat[i++] & 63);else if (c < 240) r += String.fromCharCode((c & 15) << 12 | (dat[i++] & 63) << 6 | dat[i++] & 63);else c = ((c & 15) << 18 | (dat[i++] & 63) << 12 | (dat[i++] & 63) << 6 | dat[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);
  }
  return r;
}
;
// skip local zip header
var slzh = function (d, b) {
  return b + 30 + b2(d, b + 26) + b2(d, b + 28);
};
// read zip header
var zh = function (d, b, z) {
  var fnl = b2(d, b + 28),
    fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)),
    es = b + 46 + fnl;
  var _a = z ? z64e(d, es) : [b4(d, b + 20), b4(d, b + 24), b4(d, b + 42)],
    sc = _a[0],
    su = _a[1],
    off = _a[2];
  return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];
};
// read zip64 extra field
var z64e = function (d, b) {
  for (; b2(d, b) != 1; b += 4 + b2(d, b + 2));
  return [b4(d, b + 12), b4(d, b + 4), b4(d, b + 20)];
};
// write zip header
var wzh = function (d, b, c, cmp, su, fn, u, o, ce, t) {
  var fl = fn.length,
    l = cmp.length;
  wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;
  if (ce != null) d[b] = 20, b += 2;
  d[b] = 20, b += 2; // spec compliance? what's that?
  d[b++] = t == 8 && (o.level == 1 ? 6 : o.level < 6 ? 4 : o.level == 9 ? 2 : 0), d[b++] = u && 8;
  d[b] = t, b += 2;
  var dt = new Date(o.mtime || Date.now()),
    y = dt.getFullYear() - 1980;
  if (y < 0 || y > 119) throw 'date not in range 1980-2099';
  wbytes(d, b, (y << 24) * 2 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >>> 1);
  b += 4;
  wbytes(d, b, c);
  wbytes(d, b + 4, l);
  wbytes(d, b + 8, su);
  wbytes(d, b + 12, fl), b += 16; // skip extra field, comment
  if (ce != null) wbytes(d, b += 10, ce), b += 4;
  d.set(fn, b);
  b += fl;
  if (ce == null) d.set(cmp, b);
};
// write zip footer (end of central directory)
var wzf = function (o, b, c, d, e) {
  wbytes(o, b, 0x6054B50); // skip disk
  wbytes(o, b + 8, c);
  wbytes(o, b + 10, c);
  wbytes(o, b + 12, d);
  wbytes(o, b + 16, e);
};
function zip(data, opts, cb) {
  if (!cb) cb = opts, opts = {};
  if (typeof cb != 'function') throw 'no callback';
  var r = {};
  fltn(data, '', r, opts);
  var k = Object.keys(r);
  var lft = k.length,
    o = 0,
    tot = 0;
  var slft = lft,
    files = new Array(lft);
  var term = [];
  var tAll = function () {
    for (var i = 0; i < term.length; ++i) term[i]();
  };
  var cbf = function () {
    var out = new u8(tot + 22),
      oe = o,
      cdl = tot - o;
    tot = 0;
    for (var i = 0; i < slft; ++i) {
      var f = files[i];
      try {
        wzh(out, tot, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
        wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, tot, f.t), o += 46 + f.n.length, tot += 30 + f.n.length + f.d.length;
      } catch (e) {
        return cb(e, null);
      }
    }
    wzf(out, o, files.length, cdl, oe);
    cb(null, out);
  };
  if (!lft) cbf();
  var _loop_1 = function (i) {
    var fn = k[i];
    var _a = r[fn],
      file = _a[0],
      p = _a[1];
    var c = crc(),
      m = file.length;
    c.p(file);
    var n = strToU8(fn),
      s = n.length;
    var t = p.level == 0 ? 0 : 8;
    var cbl = function (e, d) {
      if (e) {
        tAll();
        cb(e, null);
      } else {
        var l = d.length;
        files[i] = {
          t: t,
          d: d,
          m: m,
          c: c.d(),
          u: fn.length != l,
          n: n,
          p: p
        };
        o += 30 + s + l;
        tot += 76 + 2 * s + l;
        if (! --lft) cbf();
      }
    };
    if (n.length > 65535) cbl('filename too long', null);
    if (!t) cbl(null, file);else if (m < 160000) {
      try {
        cbl(null, deflateSync(file, p));
      } catch (e) {
        cbl(e, null);
      }
    } else term.push(deflate(file, p, cbl));
  };
  // Cannot use lft because it can decrease
  for (var i = 0; i < slft; ++i) {
    _loop_1(i);
  }
  return tAll;
}
/**
 * Synchronously creates a ZIP file. Prefer using `zip` for better performance
 * with more than one file.
 * @param data The directory structure for the ZIP archive
 * @param opts The main options, merged with per-file options
 * @returns The generated ZIP archive
 */
function zipSync(data, opts) {
  if (opts === void 0) {
    opts = {};
  }
  var r = {};
  var files = [];
  fltn(data, '', r, opts);
  var o = 0;
  var tot = 0;
  for (var fn in r) {
    var _a = r[fn],
      file = _a[0],
      p = _a[1];
    var t = p.level == 0 ? 0 : 8;
    var n = strToU8(fn),
      s = n.length;
    if (n.length > 65535) throw 'filename too long';
    var d = t ? deflateSync(file, p) : file,
      l = d.length;
    var c = crc();
    c.p(file);
    files.push({
      t: t,
      d: d,
      m: file.length,
      c: c.d(),
      u: fn.length != s,
      n: n,
      o: o,
      p: p
    });
    o += 30 + s + l;
    tot += 76 + 2 * s + l;
  }
  var out = new u8(tot + 22),
    oe = o,
    cdl = tot - o;
  for (var i = 0; i < files.length; ++i) {
    var f = files[i];
    wzh(out, f.o, f.c, f.d, f.m, f.n, f.u, f.p, null, f.t);
    wzh(out, o, f.c, f.d, f.m, f.n, f.u, f.p, f.o, f.t), o += 46 + f.n.length;
  }
  wzf(out, o, files.length, cdl, oe);
  return out;
}
/**
 * Asynchronously decompresses a ZIP archive
 * @param data The raw compressed ZIP file
 * @param cb The callback to call with the decompressed files
 * @returns A function that can be used to immediately terminate the unzipping
 */
function unzip(data, cb) {
  if (typeof cb != 'function') throw 'no callback';
  var term = [];
  var tAll = function () {
    for (var i = 0; i < term.length; ++i) term[i]();
  };
  var files = {};
  var e = data.length - 22;
  for (; b4(data, e) != 0x6054B50; --e) {
    if (!e || data.length - e > 65558) {
      cb('invalid zip file', null);
      return;
    }
  }
  ;
  var lft = b2(data, e + 8);
  if (!lft) cb(null, {});
  var c = lft;
  var o = b4(data, e + 16);
  var z = o == 4294967295;
  if (z) {
    e = b4(data, e - 12);
    if (b4(data, e) != 0x6064B50) throw 'invalid zip file';
    c = lft = b4(data, e + 32);
    o = b4(data, e + 48);
  }
  var _loop_2 = function (i) {
    var _a = zh(data, o, z),
      c_1 = _a[0],
      sc = _a[1],
      su = _a[2],
      fn = _a[3],
      no = _a[4],
      off = _a[5],
      b = slzh(data, off);
    o = no;
    var cbl = function (e, d) {
      if (e) {
        tAll();
        cb(e, null);
      } else {
        files[fn] = d;
        if (! --lft) cb(null, files);
      }
    };
    if (!c_1) cbl(null, slc(data, b, b + sc));else if (c_1 == 8) {
      var infl = data.subarray(b, b + sc);
      if (sc < 320000) {
        try {
          cbl(null, inflateSync(infl, new u8(su)));
        } catch (e) {
          cbl(e, null);
        }
      } else term.push(inflate(infl, {
        size: su
      }, cbl));
    } else cbl('unknown compression type ' + c_1, null);
  };
  for (var i = 0; i < c; ++i) {
    _loop_2(i);
  }
  return tAll;
}
/**
 * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better
 * performance with more than one file.
 * @param data The raw compressed ZIP file
 * @returns The decompressed files
 */
function unzipSync(data) {
  var files = {};
  var e = data.length - 22;
  for (; b4(data, e) != 0x6054B50; --e) {
    if (!e || data.length - e > 65558) throw 'invalid zip file';
  }
  ;
  var c = b2(data, e + 8);
  if (!c) return {};
  var o = b4(data, e + 16);
  var z = o == 4294967295;
  if (z) {
    e = b4(data, e - 12);
    if (b4(data, e) != 0x6064B50) throw 'invalid zip file';
    c = b4(data, e + 32);
    o = b4(data, e + 48);
  }
  for (var i = 0; i < c; ++i) {
    var _a = zh(data, o, z),
      c_2 = _a[0],
      sc = _a[1],
      su = _a[2],
      fn = _a[3],
      no = _a[4],
      off = _a[5],
      b = slzh(data, off);
    o = no;
    if (!c_2) files[fn] = slc(data, b, b + sc);else if (c_2 == 8) files[fn] = inflateSync(data.subarray(b, b + sc), new u8(su));else throw 'unknown compression type ' + c_2;
  }
  return files;
}
},{}],"../node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;
function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }
  return bundleURL;
}
function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);
    if (matches) {
      return getBaseURL(matches[0]);
    }
  }
  return '/';
}
function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)?\/[^/]+(?:\?.*)?$/, '$1') + '/';
}
exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../node_modules/parcel-bundler/src/builtins/bundle-loader.js":[function(require,module,exports) {
var getBundleURL = require('./bundle-url').getBundleURL;
function loadBundlesLazy(bundles) {
  if (!Array.isArray(bundles)) {
    bundles = [bundles];
  }
  var id = bundles[bundles.length - 1];
  try {
    return Promise.resolve(require(id));
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      return new LazyPromise(function (resolve, reject) {
        loadBundles(bundles.slice(0, -1)).then(function () {
          return require(id);
        }).then(resolve, reject);
      });
    }
    throw err;
  }
}
function loadBundles(bundles) {
  return Promise.all(bundles.map(loadBundle));
}
var bundleLoaders = {};
function registerBundleLoader(type, loader) {
  bundleLoaders[type] = loader;
}
module.exports = exports = loadBundlesLazy;
exports.load = loadBundles;
exports.register = registerBundleLoader;
var bundles = {};
function loadBundle(bundle) {
  var id;
  if (Array.isArray(bundle)) {
    id = bundle[1];
    bundle = bundle[0];
  }
  if (bundles[bundle]) {
    return bundles[bundle];
  }
  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();
  var bundleLoader = bundleLoaders[type];
  if (bundleLoader) {
    return bundles[bundle] = bundleLoader(getBundleURL() + bundle).then(function (resolved) {
      if (resolved) {
        module.bundle.register(id, resolved);
      }
      return resolved;
    }).catch(function (e) {
      delete bundles[bundle];
      throw e;
    });
  }
}
function LazyPromise(executor) {
  this.executor = executor;
  this.promise = null;
}
LazyPromise.prototype.then = function (onSuccess, onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.then(onSuccess, onError);
};
LazyPromise.prototype.catch = function (onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.catch(onError);
};
},{"./bundle-url":"../node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"../node_modules/jspdf/dist/jspdf.es.min.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AcroFormTextField = exports.AcroFormRadioButton = exports.AcroFormPushButton = exports.AcroFormPasswordField = exports.AcroFormListBox = exports.AcroFormEditBox = exports.AcroFormComboBox = exports.AcroFormChoiceField = exports.AcroFormCheckBox = exports.AcroFormButton = exports.AcroFormAppearance = exports.AcroForm = void 0;
exports.GState = j;
exports.ShadingPattern = B;
exports.TilingPattern = M;
exports.default = void 0;
exports.jsPDF = E;
var _typeof = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _fflate = require("fflate");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/** @license
 *
 * jsPDF - PDF Document creation from JavaScript
 * Version 2.5.1 Built on 2022-01-28T15:37:57.791Z
 *                      CommitID 00000000
 *
 * Copyright (c) 2010-2021 James Hall <james@parall.ax>, https://github.com/MrRio/jsPDF
 *               2015-2021 yWorks GmbH, http://www.yworks.com
 *               2015-2021 Lukas Holländer <lukas.hollaender@yworks.com>, https://github.com/HackbrettXXX
 *               2016-2018 Aras Abbasi <aras.abbasi@gmail.com>
 *               2010 Aaron Spike, https://github.com/acspike
 *               2012 Willow Systems Corporation, https://github.com/willowsystems
 *               2012 Pablo Hess, https://github.com/pablohess
 *               2012 Florian Jenett, https://github.com/fjenett
 *               2013 Warren Weckesser, https://github.com/warrenweckesser
 *               2013 Youssef Beddad, https://github.com/lifof
 *               2013 Lee Driscoll, https://github.com/lsdriscoll
 *               2013 Stefan Slonevskiy, https://github.com/stefslon
 *               2013 Jeremy Morel, https://github.com/jmorel
 *               2013 Christoph Hartmann, https://github.com/chris-rock
 *               2014 Juan Pablo Gaviria, https://github.com/juanpgaviria
 *               2014 James Makes, https://github.com/dollaruw
 *               2014 Diego Casorran, https://github.com/diegocr
 *               2014 Steven Spungin, https://github.com/Flamenco
 *               2014 Kenneth Glassey, https://github.com/Gavvers
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Contributor(s):
 *    siefkenj, ahwolf, rickygu, Midnith, saintclair, eaparango,
 *    kim3er, mfo, alnorth, Flamenco
 */

var n = function () {
  return "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this;
}();
function i() {
  n.console && "function" == typeof n.console.log && n.console.log.apply(n.console, arguments);
}
var a = {
  log: i,
  warn: function (t) {
    n.console && ("function" == typeof n.console.warn ? n.console.warn.apply(n.console, arguments) : i.call(null, arguments));
  },
  error: function (t) {
    n.console && ("function" == typeof n.console.error ? n.console.error.apply(n.console, arguments) : i(t));
  }
};
function o(t, e, r) {
  var n = new XMLHttpRequest();
  n.open("GET", t), n.responseType = "blob", n.onload = function () {
    l(n.response, e, r);
  }, n.onerror = function () {
    a.error("could not download file");
  }, n.send();
}
function s(t) {
  var e = new XMLHttpRequest();
  e.open("HEAD", t, !1);
  try {
    e.send();
  } catch (t) {}
  return e.status >= 200 && e.status <= 299;
}
function c(t) {
  try {
    t.dispatchEvent(new MouseEvent("click"));
  } catch (r) {
    var e = document.createEvent("MouseEvents");
    e.initMouseEvent("click", !0, !0, window, 0, 0, 0, 80, 20, !1, !1, !1, !1, 0, null), t.dispatchEvent(e);
  }
}
var u,
  h,
  l = n.saveAs || ("object" !== ("undefined" == typeof window ? "undefined" : (0, _typeof.default)(window)) || window !== n ? function () {} : "undefined" != typeof HTMLAnchorElement && "download" in HTMLAnchorElement.prototype ? function (t, e, r) {
    var i = n.URL || n.webkitURL,
      a = document.createElement("a");
    e = e || t.name || "download", a.download = e, a.rel = "noopener", "string" == typeof t ? (a.href = t, a.origin !== location.origin ? s(a.href) ? o(t, e, r) : c(a, a.target = "_blank") : c(a)) : (a.href = i.createObjectURL(t), setTimeout(function () {
      i.revokeObjectURL(a.href);
    }, 4e4), setTimeout(function () {
      c(a);
    }, 0));
  } : "msSaveOrOpenBlob" in navigator ? function (e, r, n) {
    if (r = r || e.name || "download", "string" == typeof e) {
      if (s(e)) o(e, r, n);else {
        var i = document.createElement("a");
        i.href = e, i.target = "_blank", setTimeout(function () {
          c(i);
        });
      }
    } else navigator.msSaveOrOpenBlob(function (e, r) {
      return void 0 === r ? r = {
        autoBom: !1
      } : "object" !== (0, _typeof.default)(r) && (a.warn("Deprecated: Expected third argument to be a object"), r = {
        autoBom: !r
      }), r.autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type) ? new Blob([String.fromCharCode(65279), e], {
        type: e.type
      }) : e;
    }(e, n), r);
  } : function (e, r, i, a) {
    if ((a = a || open("", "_blank")) && (a.document.title = a.document.body.innerText = "downloading..."), "string" == typeof e) return o(e, r, i);
    var s = "application/octet-stream" === e.type,
      c = /constructor/i.test(n.HTMLElement) || n.safari,
      u = /CriOS\/[\d]+/.test(navigator.userAgent);
    if ((u || s && c) && "object" === ("undefined" == typeof FileReader ? "undefined" : (0, _typeof.default)(FileReader))) {
      var h = new FileReader();
      h.onloadend = function () {
        var t = h.result;
        t = u ? t : t.replace(/^data:[^;]*;/, "data:attachment/file;"), a ? a.location.href = t : location = t, a = null;
      }, h.readAsDataURL(e);
    } else {
      var l = n.URL || n.webkitURL,
        f = l.createObjectURL(e);
      a ? a.location = f : location.href = f, a = null, setTimeout(function () {
        l.revokeObjectURL(f);
      }, 4e4);
    }
  });
/**
 * A class to parse color values
 * @author Stoyan Stefanov <sstoo@gmail.com>
 * {@link   http://www.phpied.com/rgb-color-parser-in-javascript/}
 * @license Use it if you like it
 */
function f(t) {
  var e;
  t = t || "", this.ok = !1, "#" == t.charAt(0) && (t = t.substr(1, 6));
  t = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "00ffff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000000",
    blanchedalmond: "ffebcd",
    blue: "0000ff",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "00ffff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dodgerblue: "1e90ff",
    feldspar: "d19275",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "ff00ff",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgrey: "d3d3d3",
    lightgreen: "90ee90",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslateblue: "8470ff",
    lightslategray: "778899",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "00ff00",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "ff00ff",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370d8",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "d87093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    red: "ff0000",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    violetred: "d02090",
    wheat: "f5deb3",
    white: "ffffff",
    whitesmoke: "f5f5f5",
    yellow: "ffff00",
    yellowgreen: "9acd32"
  }[t = (t = t.replace(/ /g, "")).toLowerCase()] || t;
  for (var r = [{
      re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
      example: ["rgb(123, 234, 45)", "rgb(255,234,245)"],
      process: function (t) {
        return [parseInt(t[1]), parseInt(t[2]), parseInt(t[3])];
      }
    }, {
      re: /^(\w{2})(\w{2})(\w{2})$/,
      example: ["#00ff00", "336699"],
      process: function (t) {
        return [parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16)];
      }
    }, {
      re: /^(\w{1})(\w{1})(\w{1})$/,
      example: ["#fb0", "f0f"],
      process: function (t) {
        return [parseInt(t[1] + t[1], 16), parseInt(t[2] + t[2], 16), parseInt(t[3] + t[3], 16)];
      }
    }], n = 0; n < r.length; n++) {
    var i = r[n].re,
      a = r[n].process,
      o = i.exec(t);
    o && (e = a(o), this.r = e[0], this.g = e[1], this.b = e[2], this.ok = !0);
  }
  this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r, this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g, this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b, this.toRGB = function () {
    return "rgb(" + this.r + ", " + this.g + ", " + this.b + ")";
  }, this.toHex = function () {
    var t = this.r.toString(16),
      e = this.g.toString(16),
      r = this.b.toString(16);
    return 1 == t.length && (t = "0" + t), 1 == e.length && (e = "0" + e), 1 == r.length && (r = "0" + r), "#" + t + e + r;
  };
}
/**
 * @license
 * Joseph Myers does not specify a particular license for his work.
 *
 * Author: Joseph Myers
 * Accessed from: http://www.myersdaily.org/joseph/javascript/md5.js
 *
 * Modified by: Owen Leong
 */
function d(t, e) {
  var r = t[0],
    n = t[1],
    i = t[2],
    a = t[3];
  r = g(r, n, i, a, e[0], 7, -680876936), a = g(a, r, n, i, e[1], 12, -389564586), i = g(i, a, r, n, e[2], 17, 606105819), n = g(n, i, a, r, e[3], 22, -1044525330), r = g(r, n, i, a, e[4], 7, -176418897), a = g(a, r, n, i, e[5], 12, 1200080426), i = g(i, a, r, n, e[6], 17, -1473231341), n = g(n, i, a, r, e[7], 22, -45705983), r = g(r, n, i, a, e[8], 7, 1770035416), a = g(a, r, n, i, e[9], 12, -1958414417), i = g(i, a, r, n, e[10], 17, -42063), n = g(n, i, a, r, e[11], 22, -1990404162), r = g(r, n, i, a, e[12], 7, 1804603682), a = g(a, r, n, i, e[13], 12, -40341101), i = g(i, a, r, n, e[14], 17, -1502002290), r = m(r, n = g(n, i, a, r, e[15], 22, 1236535329), i, a, e[1], 5, -165796510), a = m(a, r, n, i, e[6], 9, -1069501632), i = m(i, a, r, n, e[11], 14, 643717713), n = m(n, i, a, r, e[0], 20, -373897302), r = m(r, n, i, a, e[5], 5, -701558691), a = m(a, r, n, i, e[10], 9, 38016083), i = m(i, a, r, n, e[15], 14, -660478335), n = m(n, i, a, r, e[4], 20, -405537848), r = m(r, n, i, a, e[9], 5, 568446438), a = m(a, r, n, i, e[14], 9, -1019803690), i = m(i, a, r, n, e[3], 14, -187363961), n = m(n, i, a, r, e[8], 20, 1163531501), r = m(r, n, i, a, e[13], 5, -1444681467), a = m(a, r, n, i, e[2], 9, -51403784), i = m(i, a, r, n, e[7], 14, 1735328473), r = v(r, n = m(n, i, a, r, e[12], 20, -1926607734), i, a, e[5], 4, -378558), a = v(a, r, n, i, e[8], 11, -2022574463), i = v(i, a, r, n, e[11], 16, 1839030562), n = v(n, i, a, r, e[14], 23, -35309556), r = v(r, n, i, a, e[1], 4, -1530992060), a = v(a, r, n, i, e[4], 11, 1272893353), i = v(i, a, r, n, e[7], 16, -155497632), n = v(n, i, a, r, e[10], 23, -1094730640), r = v(r, n, i, a, e[13], 4, 681279174), a = v(a, r, n, i, e[0], 11, -358537222), i = v(i, a, r, n, e[3], 16, -722521979), n = v(n, i, a, r, e[6], 23, 76029189), r = v(r, n, i, a, e[9], 4, -640364487), a = v(a, r, n, i, e[12], 11, -421815835), i = v(i, a, r, n, e[15], 16, 530742520), r = b(r, n = v(n, i, a, r, e[2], 23, -995338651), i, a, e[0], 6, -198630844), a = b(a, r, n, i, e[7], 10, 1126891415), i = b(i, a, r, n, e[14], 15, -1416354905), n = b(n, i, a, r, e[5], 21, -57434055), r = b(r, n, i, a, e[12], 6, 1700485571), a = b(a, r, n, i, e[3], 10, -1894986606), i = b(i, a, r, n, e[10], 15, -1051523), n = b(n, i, a, r, e[1], 21, -2054922799), r = b(r, n, i, a, e[8], 6, 1873313359), a = b(a, r, n, i, e[15], 10, -30611744), i = b(i, a, r, n, e[6], 15, -1560198380), n = b(n, i, a, r, e[13], 21, 1309151649), r = b(r, n, i, a, e[4], 6, -145523070), a = b(a, r, n, i, e[11], 10, -1120210379), i = b(i, a, r, n, e[2], 15, 718787259), n = b(n, i, a, r, e[9], 21, -343485551), t[0] = _(r, t[0]), t[1] = _(n, t[1]), t[2] = _(i, t[2]), t[3] = _(a, t[3]);
}
function p(t, e, r, n, i, a) {
  return e = _(_(e, t), _(n, a)), _(e << i | e >>> 32 - i, r);
}
function g(t, e, r, n, i, a, o) {
  return p(e & r | ~e & n, t, e, i, a, o);
}
function m(t, e, r, n, i, a, o) {
  return p(e & n | r & ~n, t, e, i, a, o);
}
function v(t, e, r, n, i, a, o) {
  return p(e ^ r ^ n, t, e, i, a, o);
}
function b(t, e, r, n, i, a, o) {
  return p(r ^ (e | ~n), t, e, i, a, o);
}
function y(t) {
  var e,
    r = t.length,
    n = [1732584193, -271733879, -1732584194, 271733878];
  for (e = 64; e <= t.length; e += 64) d(n, w(t.substring(e - 64, e)));
  t = t.substring(e - 64);
  var i = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  for (e = 0; e < t.length; e++) i[e >> 2] |= t.charCodeAt(e) << (e % 4 << 3);
  if (i[e >> 2] |= 128 << (e % 4 << 3), e > 55) for (d(n, i), e = 0; e < 16; e++) i[e] = 0;
  return i[14] = 8 * r, d(n, i), n;
}
function w(t) {
  var e,
    r = [];
  for (e = 0; e < 64; e += 4) r[e >> 2] = t.charCodeAt(e) + (t.charCodeAt(e + 1) << 8) + (t.charCodeAt(e + 2) << 16) + (t.charCodeAt(e + 3) << 24);
  return r;
}
u = n.atob.bind(n), h = n.btoa.bind(n);
var N = "0123456789abcdef".split("");
function L(t) {
  for (var e = "", r = 0; r < 4; r++) e += N[t >> 8 * r + 4 & 15] + N[t >> 8 * r & 15];
  return e;
}
function A(t) {
  return String.fromCharCode((255 & t) >> 0, (65280 & t) >> 8, (16711680 & t) >> 16, (4278190080 & t) >> 24);
}
function x(t) {
  return y(t).map(A).join("");
}
var S = "5d41402abc4b2a76b9719d911017c592" != function (t) {
  for (var e = 0; e < t.length; e++) t[e] = L(t[e]);
  return t.join("");
}(y("hello"));
function _(t, e) {
  if (S) {
    var r = (65535 & t) + (65535 & e);
    return (t >> 16) + (e >> 16) + (r >> 16) << 16 | 65535 & r;
  }
  return t + e & 4294967295;
}
/**
 * @license
 * FPDF is released under a permissive license: there is no usage restriction.
 * You may embed it freely in your application (commercial or not), with or
 * without modifications.
 *
 * Reference: http://www.fpdf.org/en/script/script37.php
 */
function P(t, e) {
  var r, n, i, a;
  if (t !== r) {
    for (var o = (i = t, a = 1 + (256 / t.length >> 0), new Array(a + 1).join(i)), s = [], c = 0; c < 256; c++) s[c] = c;
    var u = 0;
    for (c = 0; c < 256; c++) {
      var h = s[c];
      u = (u + h + o.charCodeAt(c)) % 256, s[c] = s[u], s[u] = h;
    }
    r = t, n = s;
  } else s = n;
  var l = e.length,
    f = 0,
    d = 0,
    p = "";
  for (c = 0; c < l; c++) d = (d + (h = s[f = (f + 1) % 256])) % 256, s[f] = s[d], s[d] = h, o = s[(s[f] + s[d]) % 256], p += String.fromCharCode(e.charCodeAt(c) ^ o);
  return p;
}
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 * Author: Owen Leong (@owenl131)
 * Date: 15 Oct 2020
 * References:
 * https://www.cs.cmu.edu/~dst/Adobe/Gallery/anon21jul01-pdf-encryption.txt
 * https://github.com/foliojs/pdfkit/blob/master/lib/security.js
 * http://www.fpdf.org/en/script/script37.php
 */
var k = {
  print: 4,
  modify: 8,
  copy: 16,
  "annot-forms": 32
};
function I(t, e, r, n) {
  this.v = 1, this.r = 2;
  var i = 192;
  t.forEach(function (t) {
    if (void 0 !== k.perm) throw new Error("Invalid permission: " + t);
    i += k[t];
  }), this.padding = "(¿N^NuAd\0NVÿú\b..\0¶Ðh>/\f©þdSiz";
  var a = (e + this.padding).substr(0, 32),
    o = (r + this.padding).substr(0, 32);
  this.O = this.processOwnerPassword(a, o), this.P = -(1 + (255 ^ i)), this.encryptionKey = x(a + this.O + this.lsbFirstWord(this.P) + this.hexToBytes(n)).substr(0, 5), this.U = P(this.encryptionKey, this.padding);
}
function F(t) {
  if (/[^\u0000-\u00ff]/.test(t)) throw new Error("Invalid PDF Name Object: " + t + ", Only accept ASCII characters.");
  for (var e = "", r = t.length, n = 0; n < r; n++) {
    var i = t.charCodeAt(n);
    if (i < 33 || 35 === i || 37 === i || 40 === i || 41 === i || 47 === i || 60 === i || 62 === i || 91 === i || 93 === i || 123 === i || 125 === i || i > 126) e += "#" + ("0" + i.toString(16)).slice(-2);else e += t[n];
  }
  return e;
}
function C(e) {
  if ("object" !== (0, _typeof.default)(e)) throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");
  var r = {};
  this.subscribe = function (t, e, n) {
    if (n = n || !1, "string" != typeof t || "function" != typeof e || "boolean" != typeof n) throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");
    r.hasOwnProperty(t) || (r[t] = {});
    var i = Math.random().toString(35);
    return r[t][i] = [e, !!n], i;
  }, this.unsubscribe = function (t) {
    for (var e in r) if (r[e][t]) return delete r[e][t], 0 === Object.keys(r[e]).length && delete r[e], !0;
    return !1;
  }, this.publish = function (t) {
    if (r.hasOwnProperty(t)) {
      var i = Array.prototype.slice.call(arguments, 1),
        o = [];
      for (var s in r[t]) {
        var c = r[t][s];
        try {
          c[0].apply(e, i);
        } catch (t) {
          n.console && a.error("jsPDF PubSub Error", t.message, t);
        }
        c[1] && o.push(s);
      }
      o.length && o.forEach(this.unsubscribe);
    }
  }, this.getTopics = function () {
    return r;
  };
}
function j(t) {
  if (!(this instanceof j)) return new j(t);
  var e = "opacity,stroke-opacity".split(",");
  for (var r in t) t.hasOwnProperty(r) && e.indexOf(r) >= 0 && (this[r] = t[r]);
  this.id = "", this.objectNumber = -1;
}
function O(t, e) {
  this.gState = t, this.matrix = e, this.id = "", this.objectNumber = -1;
}
function B(t, e, r, n, i) {
  if (!(this instanceof B)) return new B(t, e, r, n, i);
  this.type = "axial" === t ? 2 : 3, this.coords = e, this.colors = r, O.call(this, n, i);
}
function M(t, e, r, n, i) {
  if (!(this instanceof M)) return new M(t, e, r, n, i);
  this.boundingBox = t, this.xStep = e, this.yStep = r, this.stream = "", this.cloneIndex = 0, O.call(this, n, i);
}
function E(e) {
  var r,
    i = "string" == typeof arguments[0] ? arguments[0] : "p",
    o = arguments[1],
    s = arguments[2],
    c = arguments[3],
    u = [],
    d = 1,
    p = 16,
    g = "S",
    m = null;
  "object" === (0, _typeof.default)(e = e || {}) && (i = e.orientation, o = e.unit || o, s = e.format || s, c = e.compress || e.compressPdf || c, null !== (m = e.encryption || null) && (m.userPassword = m.userPassword || "", m.ownerPassword = m.ownerPassword || "", m.userPermissions = m.userPermissions || []), d = "number" == typeof e.userUnit ? Math.abs(e.userUnit) : 1, void 0 !== e.precision && (r = e.precision), void 0 !== e.floatPrecision && (p = e.floatPrecision), g = e.defaultPathOperation || "S"), u = e.filters || (!0 === c ? ["FlateEncode"] : u), o = o || "mm", i = ("" + (i || "P")).toLowerCase();
  var v = e.putOnlyUsedFonts || !1,
    b = {},
    y = {
      internal: {},
      __private__: {}
    };
  y.__private__.PubSub = C;
  var w = "1.3",
    N = y.__private__.getPdfVersion = function () {
      return w;
    };
  y.__private__.setPdfVersion = function (t) {
    w = t;
  };
  var L = {
    a0: [2383.94, 3370.39],
    a1: [1683.78, 2383.94],
    a2: [1190.55, 1683.78],
    a3: [841.89, 1190.55],
    a4: [595.28, 841.89],
    a5: [419.53, 595.28],
    a6: [297.64, 419.53],
    a7: [209.76, 297.64],
    a8: [147.4, 209.76],
    a9: [104.88, 147.4],
    a10: [73.7, 104.88],
    b0: [2834.65, 4008.19],
    b1: [2004.09, 2834.65],
    b2: [1417.32, 2004.09],
    b3: [1000.63, 1417.32],
    b4: [708.66, 1000.63],
    b5: [498.9, 708.66],
    b6: [354.33, 498.9],
    b7: [249.45, 354.33],
    b8: [175.75, 249.45],
    b9: [124.72, 175.75],
    b10: [87.87, 124.72],
    c0: [2599.37, 3676.54],
    c1: [1836.85, 2599.37],
    c2: [1298.27, 1836.85],
    c3: [918.43, 1298.27],
    c4: [649.13, 918.43],
    c5: [459.21, 649.13],
    c6: [323.15, 459.21],
    c7: [229.61, 323.15],
    c8: [161.57, 229.61],
    c9: [113.39, 161.57],
    c10: [79.37, 113.39],
    dl: [311.81, 623.62],
    letter: [612, 792],
    "government-letter": [576, 756],
    legal: [612, 1008],
    "junior-legal": [576, 360],
    ledger: [1224, 792],
    tabloid: [792, 1224],
    "credit-card": [153, 243]
  };
  y.__private__.getPageFormats = function () {
    return L;
  };
  var A = y.__private__.getPageFormat = function (t) {
    return L[t];
  };
  s = s || "a4";
  var x = {
      COMPAT: "compat",
      ADVANCED: "advanced"
    },
    S = x.COMPAT;
  function _() {
    this.saveGraphicsState(), lt(new Vt(_t, 0, 0, -_t, 0, Rr() * _t).toString() + " cm"), this.setFontSize(this.getFontSize() / _t), g = "n", S = x.ADVANCED;
  }
  function P() {
    this.restoreGraphicsState(), g = "S", S = x.COMPAT;
  }
  var k = y.__private__.combineFontStyleAndFontWeight = function (t, e) {
    if ("bold" == t && "normal" == e || "bold" == t && 400 == e || "normal" == t && "italic" == e || "bold" == t && "italic" == e) throw new Error("Invalid Combination of fontweight and fontstyle");
    return e && (t = 400 == e || "normal" === e ? "italic" === t ? "italic" : "normal" : 700 != e && "bold" !== e || "normal" !== t ? (700 == e ? "bold" : e) + "" + t : "bold"), t;
  };
  y.advancedAPI = function (t) {
    var e = S === x.COMPAT;
    return e && _.call(this), "function" != typeof t || (t(this), e && P.call(this)), this;
  }, y.compatAPI = function (t) {
    var e = S === x.ADVANCED;
    return e && P.call(this), "function" != typeof t || (t(this), e && _.call(this)), this;
  }, y.isAdvancedAPI = function () {
    return S === x.ADVANCED;
  };
  var O,
    q = function (t) {
      if (S !== x.ADVANCED) throw new Error(t + " is only available in 'advanced' API mode. You need to call advancedAPI() first.");
    },
    D = y.roundToPrecision = y.__private__.roundToPrecision = function (t, e) {
      var n = r || e;
      if (isNaN(t) || isNaN(n)) throw new Error("Invalid argument passed to jsPDF.roundToPrecision");
      return t.toFixed(n).replace(/0+$/, "");
    };
  O = y.hpf = y.__private__.hpf = "number" == typeof p ? function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
    return D(t, p);
  } : "smart" === p ? function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
    return D(t, t > -1 && t < 1 ? 16 : 5);
  } : function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.hpf");
    return D(t, 16);
  };
  var R = y.f2 = y.__private__.f2 = function (t) {
      if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f2");
      return D(t, 2);
    },
    T = y.__private__.f3 = function (t) {
      if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.f3");
      return D(t, 3);
    },
    U = y.scale = y.__private__.scale = function (t) {
      if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.scale");
      return S === x.COMPAT ? t * _t : S === x.ADVANCED ? t : void 0;
    },
    z = function (t) {
      return S === x.COMPAT ? Rr() - t : S === x.ADVANCED ? t : void 0;
    },
    H = function (t) {
      return U(z(t));
    };
  y.__private__.setPrecision = y.setPrecision = function (t) {
    "number" == typeof parseInt(t, 10) && (r = parseInt(t, 10));
  };
  var W,
    V = "00000000000000000000000000000000",
    G = y.__private__.getFileId = function () {
      return V;
    },
    Y = y.__private__.setFileId = function (t) {
      return V = void 0 !== t && /^[a-fA-F0-9]{32}$/.test(t) ? t.toUpperCase() : V.split("").map(function () {
        return "ABCDEF0123456789".charAt(Math.floor(16 * Math.random()));
      }).join(""), null !== m && (Ye = new I(m.userPermissions, m.userPassword, m.ownerPassword, V)), V;
    };
  y.setFileId = function (t) {
    return Y(t), this;
  }, y.getFileId = function () {
    return G();
  };
  var J = y.__private__.convertDateToPDFDate = function (t) {
      var e = t.getTimezoneOffset(),
        r = e < 0 ? "+" : "-",
        n = Math.floor(Math.abs(e / 60)),
        i = Math.abs(e % 60),
        a = [r, Q(n), "'", Q(i), "'"].join("");
      return ["D:", t.getFullYear(), Q(t.getMonth() + 1), Q(t.getDate()), Q(t.getHours()), Q(t.getMinutes()), Q(t.getSeconds()), a].join("");
    },
    X = y.__private__.convertPDFDateToDate = function (t) {
      var e = parseInt(t.substr(2, 4), 10),
        r = parseInt(t.substr(6, 2), 10) - 1,
        n = parseInt(t.substr(8, 2), 10),
        i = parseInt(t.substr(10, 2), 10),
        a = parseInt(t.substr(12, 2), 10),
        o = parseInt(t.substr(14, 2), 10);
      return new Date(e, r, n, i, a, o, 0);
    },
    K = y.__private__.setCreationDate = function (t) {
      var e;
      if (void 0 === t && (t = new Date()), t instanceof Date) e = J(t);else {
        if (!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t)) throw new Error("Invalid argument passed to jsPDF.setCreationDate");
        e = t;
      }
      return W = e;
    },
    Z = y.__private__.getCreationDate = function (t) {
      var e = W;
      return "jsDate" === t && (e = X(W)), e;
    };
  y.setCreationDate = function (t) {
    return K(t), this;
  }, y.getCreationDate = function (t) {
    return Z(t);
  };
  var $,
    Q = y.__private__.padd2 = function (t) {
      return ("0" + parseInt(t)).slice(-2);
    },
    tt = y.__private__.padd2Hex = function (t) {
      return ("00" + (t = t.toString())).substr(t.length);
    },
    et = 0,
    rt = [],
    nt = [],
    it = 0,
    at = [],
    ot = [],
    st = !1,
    ct = nt,
    ut = function () {
      et = 0, it = 0, nt = [], rt = [], at = [], Qt = Kt(), te = Kt();
    };
  y.__private__.setCustomOutputDestination = function (t) {
    st = !0, ct = t;
  };
  var ht = function (t) {
    st || (ct = t);
  };
  y.__private__.resetCustomOutputDestination = function () {
    st = !1, ct = nt;
  };
  var lt = y.__private__.out = function (t) {
      return t = t.toString(), it += t.length + 1, ct.push(t), ct;
    },
    ft = y.__private__.write = function (t) {
      return lt(1 === arguments.length ? t.toString() : Array.prototype.join.call(arguments, " "));
    },
    dt = y.__private__.getArrayBuffer = function (t) {
      for (var e = t.length, r = new ArrayBuffer(e), n = new Uint8Array(r); e--;) n[e] = t.charCodeAt(e);
      return r;
    },
    pt = [["Helvetica", "helvetica", "normal", "WinAnsiEncoding"], ["Helvetica-Bold", "helvetica", "bold", "WinAnsiEncoding"], ["Helvetica-Oblique", "helvetica", "italic", "WinAnsiEncoding"], ["Helvetica-BoldOblique", "helvetica", "bolditalic", "WinAnsiEncoding"], ["Courier", "courier", "normal", "WinAnsiEncoding"], ["Courier-Bold", "courier", "bold", "WinAnsiEncoding"], ["Courier-Oblique", "courier", "italic", "WinAnsiEncoding"], ["Courier-BoldOblique", "courier", "bolditalic", "WinAnsiEncoding"], ["Times-Roman", "times", "normal", "WinAnsiEncoding"], ["Times-Bold", "times", "bold", "WinAnsiEncoding"], ["Times-Italic", "times", "italic", "WinAnsiEncoding"], ["Times-BoldItalic", "times", "bolditalic", "WinAnsiEncoding"], ["ZapfDingbats", "zapfdingbats", "normal", null], ["Symbol", "symbol", "normal", null]];
  y.__private__.getStandardFonts = function () {
    return pt;
  };
  var gt = e.fontSize || 16;
  y.__private__.setFontSize = y.setFontSize = function (t) {
    return gt = S === x.ADVANCED ? t / _t : t, this;
  };
  var mt,
    vt = y.__private__.getFontSize = y.getFontSize = function () {
      return S === x.COMPAT ? gt : gt * _t;
    },
    bt = e.R2L || !1;
  y.__private__.setR2L = y.setR2L = function (t) {
    return bt = t, this;
  }, y.__private__.getR2L = y.getR2L = function () {
    return bt;
  };
  var yt,
    wt = y.__private__.setZoomMode = function (t) {
      var e = [void 0, null, "fullwidth", "fullheight", "fullpage", "original"];
      if (/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(t)) mt = t;else if (isNaN(t)) {
        if (-1 === e.indexOf(t)) throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "' + t + '" is not recognized.');
        mt = t;
      } else mt = parseInt(t, 10);
    };
  y.__private__.getZoomMode = function () {
    return mt;
  };
  var Nt,
    Lt = y.__private__.setPageMode = function (t) {
      if (-1 == [void 0, null, "UseNone", "UseOutlines", "UseThumbs", "FullScreen"].indexOf(t)) throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "' + t + '" is not recognized.');
      yt = t;
    };
  y.__private__.getPageMode = function () {
    return yt;
  };
  var At = y.__private__.setLayoutMode = function (t) {
    if (-1 == [void 0, null, "continuous", "single", "twoleft", "tworight", "two"].indexOf(t)) throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "' + t + '" is not recognized.');
    Nt = t;
  };
  y.__private__.getLayoutMode = function () {
    return Nt;
  }, y.__private__.setDisplayMode = y.setDisplayMode = function (t, e, r) {
    return wt(t), At(e), Lt(r), this;
  };
  var xt = {
    title: "",
    subject: "",
    author: "",
    keywords: "",
    creator: ""
  };
  y.__private__.getDocumentProperty = function (t) {
    if (-1 === Object.keys(xt).indexOf(t)) throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");
    return xt[t];
  }, y.__private__.getDocumentProperties = function () {
    return xt;
  }, y.__private__.setDocumentProperties = y.setProperties = y.setDocumentProperties = function (t) {
    for (var e in xt) xt.hasOwnProperty(e) && t[e] && (xt[e] = t[e]);
    return this;
  }, y.__private__.setDocumentProperty = function (t, e) {
    if (-1 === Object.keys(xt).indexOf(t)) throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");
    return xt[t] = e;
  };
  var St,
    _t,
    Pt,
    kt,
    It,
    Ft = {},
    Ct = {},
    jt = [],
    Ot = {},
    Bt = {},
    Mt = {},
    Et = {},
    qt = null,
    Dt = 0,
    Rt = [],
    Tt = new C(y),
    Ut = e.hotfixes || [],
    zt = {},
    Ht = {},
    Wt = [],
    Vt = function t(e, r, n, i, a, o) {
      if (!(this instanceof t)) return new t(e, r, n, i, a, o);
      isNaN(e) && (e = 1), isNaN(r) && (r = 0), isNaN(n) && (n = 0), isNaN(i) && (i = 1), isNaN(a) && (a = 0), isNaN(o) && (o = 0), this._matrix = [e, r, n, i, a, o];
    };
  Object.defineProperty(Vt.prototype, "sx", {
    get: function () {
      return this._matrix[0];
    },
    set: function (t) {
      this._matrix[0] = t;
    }
  }), Object.defineProperty(Vt.prototype, "shy", {
    get: function () {
      return this._matrix[1];
    },
    set: function (t) {
      this._matrix[1] = t;
    }
  }), Object.defineProperty(Vt.prototype, "shx", {
    get: function () {
      return this._matrix[2];
    },
    set: function (t) {
      this._matrix[2] = t;
    }
  }), Object.defineProperty(Vt.prototype, "sy", {
    get: function () {
      return this._matrix[3];
    },
    set: function (t) {
      this._matrix[3] = t;
    }
  }), Object.defineProperty(Vt.prototype, "tx", {
    get: function () {
      return this._matrix[4];
    },
    set: function (t) {
      this._matrix[4] = t;
    }
  }), Object.defineProperty(Vt.prototype, "ty", {
    get: function () {
      return this._matrix[5];
    },
    set: function (t) {
      this._matrix[5] = t;
    }
  }), Object.defineProperty(Vt.prototype, "a", {
    get: function () {
      return this._matrix[0];
    },
    set: function (t) {
      this._matrix[0] = t;
    }
  }), Object.defineProperty(Vt.prototype, "b", {
    get: function () {
      return this._matrix[1];
    },
    set: function (t) {
      this._matrix[1] = t;
    }
  }), Object.defineProperty(Vt.prototype, "c", {
    get: function () {
      return this._matrix[2];
    },
    set: function (t) {
      this._matrix[2] = t;
    }
  }), Object.defineProperty(Vt.prototype, "d", {
    get: function () {
      return this._matrix[3];
    },
    set: function (t) {
      this._matrix[3] = t;
    }
  }), Object.defineProperty(Vt.prototype, "e", {
    get: function () {
      return this._matrix[4];
    },
    set: function (t) {
      this._matrix[4] = t;
    }
  }), Object.defineProperty(Vt.prototype, "f", {
    get: function () {
      return this._matrix[5];
    },
    set: function (t) {
      this._matrix[5] = t;
    }
  }), Object.defineProperty(Vt.prototype, "rotation", {
    get: function () {
      return Math.atan2(this.shx, this.sx);
    }
  }), Object.defineProperty(Vt.prototype, "scaleX", {
    get: function () {
      return this.decompose().scale.sx;
    }
  }), Object.defineProperty(Vt.prototype, "scaleY", {
    get: function () {
      return this.decompose().scale.sy;
    }
  }), Object.defineProperty(Vt.prototype, "isIdentity", {
    get: function () {
      return 1 === this.sx && 0 === this.shy && 0 === this.shx && 1 === this.sy && 0 === this.tx && 0 === this.ty;
    }
  }), Vt.prototype.join = function (t) {
    return [this.sx, this.shy, this.shx, this.sy, this.tx, this.ty].map(O).join(t);
  }, Vt.prototype.multiply = function (t) {
    var e = t.sx * this.sx + t.shy * this.shx,
      r = t.sx * this.shy + t.shy * this.sy,
      n = t.shx * this.sx + t.sy * this.shx,
      i = t.shx * this.shy + t.sy * this.sy,
      a = t.tx * this.sx + t.ty * this.shx + this.tx,
      o = t.tx * this.shy + t.ty * this.sy + this.ty;
    return new Vt(e, r, n, i, a, o);
  }, Vt.prototype.decompose = function () {
    var t = this.sx,
      e = this.shy,
      r = this.shx,
      n = this.sy,
      i = this.tx,
      a = this.ty,
      o = Math.sqrt(t * t + e * e),
      s = (t /= o) * r + (e /= o) * n;
    r -= t * s, n -= e * s;
    var c = Math.sqrt(r * r + n * n);
    return s /= c, t * (n /= c) < e * (r /= c) && (t = -t, e = -e, s = -s, o = -o), {
      scale: new Vt(o, 0, 0, c, 0, 0),
      translate: new Vt(1, 0, 0, 1, i, a),
      rotate: new Vt(t, e, -e, t, 0, 0),
      skew: new Vt(1, 0, s, 1, 0, 0)
    };
  }, Vt.prototype.toString = function (t) {
    return this.join(" ");
  }, Vt.prototype.inversed = function () {
    var t = this.sx,
      e = this.shy,
      r = this.shx,
      n = this.sy,
      i = this.tx,
      a = this.ty,
      o = 1 / (t * n - e * r),
      s = n * o,
      c = -e * o,
      u = -r * o,
      h = t * o;
    return new Vt(s, c, u, h, -s * i - u * a, -c * i - h * a);
  }, Vt.prototype.applyToPoint = function (t) {
    var e = t.x * this.sx + t.y * this.shx + this.tx,
      r = t.x * this.shy + t.y * this.sy + this.ty;
    return new Cr(e, r);
  }, Vt.prototype.applyToRectangle = function (t) {
    var e = this.applyToPoint(t),
      r = this.applyToPoint(new Cr(t.x + t.w, t.y + t.h));
    return new jr(e.x, e.y, r.x - e.x, r.y - e.y);
  }, Vt.prototype.clone = function () {
    var t = this.sx,
      e = this.shy,
      r = this.shx,
      n = this.sy,
      i = this.tx,
      a = this.ty;
    return new Vt(t, e, r, n, i, a);
  }, y.Matrix = Vt;
  var Gt = y.matrixMult = function (t, e) {
      return e.multiply(t);
    },
    Yt = new Vt(1, 0, 0, 1, 0, 0);
  y.unitMatrix = y.identityMatrix = Yt;
  var Jt = function (t, e) {
    if (!Bt[t]) {
      var r = (e instanceof B ? "Sh" : "P") + (Object.keys(Ot).length + 1).toString(10);
      e.id = r, Bt[t] = r, Ot[r] = e, Tt.publish("addPattern", e);
    }
  };
  y.ShadingPattern = B, y.TilingPattern = M, y.addShadingPattern = function (t, e) {
    return q("addShadingPattern()"), Jt(t, e), this;
  }, y.beginTilingPattern = function (t) {
    q("beginTilingPattern()"), Br(t.boundingBox[0], t.boundingBox[1], t.boundingBox[2] - t.boundingBox[0], t.boundingBox[3] - t.boundingBox[1], t.matrix);
  }, y.endTilingPattern = function (t, e) {
    q("endTilingPattern()"), e.stream = ot[$].join("\n"), Jt(t, e), Tt.publish("endTilingPattern", e), Wt.pop().restore();
  };
  var Xt = y.__private__.newObject = function () {
      var t = Kt();
      return Zt(t, !0), t;
    },
    Kt = y.__private__.newObjectDeferred = function () {
      return et++, rt[et] = function () {
        return it;
      }, et;
    },
    Zt = function (t, e) {
      return e = "boolean" == typeof e && e, rt[t] = it, e && lt(t + " 0 obj"), t;
    },
    $t = y.__private__.newAdditionalObject = function () {
      var t = {
        objId: Kt(),
        content: ""
      };
      return at.push(t), t;
    },
    Qt = Kt(),
    te = Kt(),
    ee = y.__private__.decodeColorString = function (t) {
      var e = t.split(" ");
      if (2 !== e.length || "g" !== e[1] && "G" !== e[1]) {
        if (5 === e.length && ("k" === e[4] || "K" === e[4])) {
          e = [(1 - e[0]) * (1 - e[3]), (1 - e[1]) * (1 - e[3]), (1 - e[2]) * (1 - e[3]), "r"];
        }
      } else {
        var r = parseFloat(e[0]);
        e = [r, r, r, "r"];
      }
      for (var n = "#", i = 0; i < 3; i++) n += ("0" + Math.floor(255 * parseFloat(e[i])).toString(16)).slice(-2);
      return n;
    },
    re = y.__private__.encodeColorString = function (e) {
      var r;
      "string" == typeof e && (e = {
        ch1: e
      });
      var n = e.ch1,
        i = e.ch2,
        a = e.ch3,
        o = e.ch4,
        s = "draw" === e.pdfColorType ? ["G", "RG", "K"] : ["g", "rg", "k"];
      if ("string" == typeof n && "#" !== n.charAt(0)) {
        var c = new f(n);
        if (c.ok) n = c.toHex();else if (!/^\d*\.?\d*$/.test(n)) throw new Error('Invalid color "' + n + '" passed to jsPDF.encodeColorString.');
      }
      if ("string" == typeof n && /^#[0-9A-Fa-f]{3}$/.test(n) && (n = "#" + n[1] + n[1] + n[2] + n[2] + n[3] + n[3]), "string" == typeof n && /^#[0-9A-Fa-f]{6}$/.test(n)) {
        var u = parseInt(n.substr(1), 16);
        n = u >> 16 & 255, i = u >> 8 & 255, a = 255 & u;
      }
      if (void 0 === i || void 0 === o && n === i && i === a) {
        if ("string" == typeof n) r = n + " " + s[0];else switch (e.precision) {
          case 2:
            r = R(n / 255) + " " + s[0];
            break;
          case 3:
          default:
            r = T(n / 255) + " " + s[0];
        }
      } else if (void 0 === o || "object" === (0, _typeof.default)(o)) {
        if (o && !isNaN(o.a) && 0 === o.a) return r = ["1.", "1.", "1.", s[1]].join(" ");
        if ("string" == typeof n) r = [n, i, a, s[1]].join(" ");else switch (e.precision) {
          case 2:
            r = [R(n / 255), R(i / 255), R(a / 255), s[1]].join(" ");
            break;
          default:
          case 3:
            r = [T(n / 255), T(i / 255), T(a / 255), s[1]].join(" ");
        }
      } else if ("string" == typeof n) r = [n, i, a, o, s[2]].join(" ");else switch (e.precision) {
        case 2:
          r = [R(n), R(i), R(a), R(o), s[2]].join(" ");
          break;
        case 3:
        default:
          r = [T(n), T(i), T(a), T(o), s[2]].join(" ");
      }
      return r;
    },
    ne = y.__private__.getFilters = function () {
      return u;
    },
    ie = y.__private__.putStream = function (t) {
      var e = (t = t || {}).data || "",
        r = t.filters || ne(),
        n = t.alreadyAppliedFilters || [],
        i = t.addLength1 || !1,
        a = e.length,
        o = t.objectId,
        s = function (t) {
          return t;
        };
      if (null !== m && void 0 === o) throw new Error("ObjectId must be passed to putStream for file encryption");
      null !== m && (s = Ye.encryptor(o, 0));
      var c = {};
      !0 === r && (r = ["FlateEncode"]);
      var u = t.additionalKeyValues || [],
        h = (c = void 0 !== E.API.processDataByFilters ? E.API.processDataByFilters(e, r) : {
          data: e,
          reverseChain: []
        }).reverseChain + (Array.isArray(n) ? n.join(" ") : n.toString());
      if (0 !== c.data.length && (u.push({
        key: "Length",
        value: c.data.length
      }), !0 === i && u.push({
        key: "Length1",
        value: a
      })), 0 != h.length) if (h.split("/").length - 1 == 1) u.push({
        key: "Filter",
        value: h
      });else {
        u.push({
          key: "Filter",
          value: "[" + h + "]"
        });
        for (var l = 0; l < u.length; l += 1) if ("DecodeParms" === u[l].key) {
          for (var f = [], d = 0; d < c.reverseChain.split("/").length - 1; d += 1) f.push("null");
          f.push(u[l].value), u[l].value = "[" + f.join(" ") + "]";
        }
      }
      lt("<<");
      for (var p = 0; p < u.length; p++) lt("/" + u[p].key + " " + u[p].value);
      lt(">>"), 0 !== c.data.length && (lt("stream"), lt(s(c.data)), lt("endstream"));
    },
    ae = y.__private__.putPage = function (t) {
      var e = t.number,
        r = t.data,
        n = t.objId,
        i = t.contentsObjId;
      Zt(n, !0), lt("<</Type /Page"), lt("/Parent " + t.rootDictionaryObjId + " 0 R"), lt("/Resources " + t.resourceDictionaryObjId + " 0 R"), lt("/MediaBox [" + parseFloat(O(t.mediaBox.bottomLeftX)) + " " + parseFloat(O(t.mediaBox.bottomLeftY)) + " " + O(t.mediaBox.topRightX) + " " + O(t.mediaBox.topRightY) + "]"), null !== t.cropBox && lt("/CropBox [" + O(t.cropBox.bottomLeftX) + " " + O(t.cropBox.bottomLeftY) + " " + O(t.cropBox.topRightX) + " " + O(t.cropBox.topRightY) + "]"), null !== t.bleedBox && lt("/BleedBox [" + O(t.bleedBox.bottomLeftX) + " " + O(t.bleedBox.bottomLeftY) + " " + O(t.bleedBox.topRightX) + " " + O(t.bleedBox.topRightY) + "]"), null !== t.trimBox && lt("/TrimBox [" + O(t.trimBox.bottomLeftX) + " " + O(t.trimBox.bottomLeftY) + " " + O(t.trimBox.topRightX) + " " + O(t.trimBox.topRightY) + "]"), null !== t.artBox && lt("/ArtBox [" + O(t.artBox.bottomLeftX) + " " + O(t.artBox.bottomLeftY) + " " + O(t.artBox.topRightX) + " " + O(t.artBox.topRightY) + "]"), "number" == typeof t.userUnit && 1 !== t.userUnit && lt("/UserUnit " + t.userUnit), Tt.publish("putPage", {
        objId: n,
        pageContext: Rt[e],
        pageNumber: e,
        page: r
      }), lt("/Contents " + i + " 0 R"), lt(">>"), lt("endobj");
      var a = r.join("\n");
      return S === x.ADVANCED && (a += "\nQ"), Zt(i, !0), ie({
        data: a,
        filters: ne(),
        objectId: i
      }), lt("endobj"), n;
    },
    oe = y.__private__.putPages = function () {
      var t,
        e,
        r = [];
      for (t = 1; t <= Dt; t++) Rt[t].objId = Kt(), Rt[t].contentsObjId = Kt();
      for (t = 1; t <= Dt; t++) r.push(ae({
        number: t,
        data: ot[t],
        objId: Rt[t].objId,
        contentsObjId: Rt[t].contentsObjId,
        mediaBox: Rt[t].mediaBox,
        cropBox: Rt[t].cropBox,
        bleedBox: Rt[t].bleedBox,
        trimBox: Rt[t].trimBox,
        artBox: Rt[t].artBox,
        userUnit: Rt[t].userUnit,
        rootDictionaryObjId: Qt,
        resourceDictionaryObjId: te
      }));
      Zt(Qt, !0), lt("<</Type /Pages");
      var n = "/Kids [";
      for (e = 0; e < Dt; e++) n += r[e] + " 0 R ";
      lt(n + "]"), lt("/Count " + Dt), lt(">>"), lt("endobj"), Tt.publish("postPutPages");
    },
    se = function (t) {
      Tt.publish("putFont", {
        font: t,
        out: lt,
        newObject: Xt,
        putStream: ie
      }), !0 !== t.isAlreadyPutted && (t.objectNumber = Xt(), lt("<<"), lt("/Type /Font"), lt("/BaseFont /" + F(t.postScriptName)), lt("/Subtype /Type1"), "string" == typeof t.encoding && lt("/Encoding /" + t.encoding), lt("/FirstChar 32"), lt("/LastChar 255"), lt(">>"), lt("endobj"));
    },
    ce = function () {
      for (var t in Ft) Ft.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && se(Ft[t]);
    },
    ue = function (t) {
      t.objectNumber = Xt();
      var e = [];
      e.push({
        key: "Type",
        value: "/XObject"
      }), e.push({
        key: "Subtype",
        value: "/Form"
      }), e.push({
        key: "BBox",
        value: "[" + [O(t.x), O(t.y), O(t.x + t.width), O(t.y + t.height)].join(" ") + "]"
      }), e.push({
        key: "Matrix",
        value: "[" + t.matrix.toString() + "]"
      });
      var r = t.pages[1].join("\n");
      ie({
        data: r,
        additionalKeyValues: e,
        objectId: t.objectNumber
      }), lt("endobj");
    },
    he = function () {
      for (var t in zt) zt.hasOwnProperty(t) && ue(zt[t]);
    },
    le = function (t, e) {
      var r,
        n = [],
        i = 1 / (e - 1);
      for (r = 0; r < 1; r += i) n.push(r);
      if (n.push(1), 0 != t[0].offset) {
        var a = {
          offset: 0,
          color: t[0].color
        };
        t.unshift(a);
      }
      if (1 != t[t.length - 1].offset) {
        var o = {
          offset: 1,
          color: t[t.length - 1].color
        };
        t.push(o);
      }
      for (var s = "", c = 0, u = 0; u < n.length; u++) {
        for (r = n[u]; r > t[c + 1].offset;) c++;
        var h = t[c].offset,
          l = (r - h) / (t[c + 1].offset - h),
          f = t[c].color,
          d = t[c + 1].color;
        s += tt(Math.round((1 - l) * f[0] + l * d[0]).toString(16)) + tt(Math.round((1 - l) * f[1] + l * d[1]).toString(16)) + tt(Math.round((1 - l) * f[2] + l * d[2]).toString(16));
      }
      return s.trim();
    },
    fe = function (t, e) {
      e || (e = 21);
      var r = Xt(),
        n = le(t.colors, e),
        i = [];
      i.push({
        key: "FunctionType",
        value: "0"
      }), i.push({
        key: "Domain",
        value: "[0.0 1.0]"
      }), i.push({
        key: "Size",
        value: "[" + e + "]"
      }), i.push({
        key: "BitsPerSample",
        value: "8"
      }), i.push({
        key: "Range",
        value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
      }), i.push({
        key: "Decode",
        value: "[0.0 1.0 0.0 1.0 0.0 1.0]"
      }), ie({
        data: n,
        additionalKeyValues: i,
        alreadyAppliedFilters: ["/ASCIIHexDecode"],
        objectId: r
      }), lt("endobj"), t.objectNumber = Xt(), lt("<< /ShadingType " + t.type), lt("/ColorSpace /DeviceRGB");
      var a = "/Coords [" + O(parseFloat(t.coords[0])) + " " + O(parseFloat(t.coords[1])) + " ";
      2 === t.type ? a += O(parseFloat(t.coords[2])) + " " + O(parseFloat(t.coords[3])) : a += O(parseFloat(t.coords[2])) + " " + O(parseFloat(t.coords[3])) + " " + O(parseFloat(t.coords[4])) + " " + O(parseFloat(t.coords[5])), lt(a += "]"), t.matrix && lt("/Matrix [" + t.matrix.toString() + "]"), lt("/Function " + r + " 0 R"), lt("/Extend [true true]"), lt(">>"), lt("endobj");
    },
    de = function (t, e) {
      var r = Kt(),
        n = Xt();
      e.push({
        resourcesOid: r,
        objectOid: n
      }), t.objectNumber = n;
      var i = [];
      i.push({
        key: "Type",
        value: "/Pattern"
      }), i.push({
        key: "PatternType",
        value: "1"
      }), i.push({
        key: "PaintType",
        value: "1"
      }), i.push({
        key: "TilingType",
        value: "1"
      }), i.push({
        key: "BBox",
        value: "[" + t.boundingBox.map(O).join(" ") + "]"
      }), i.push({
        key: "XStep",
        value: O(t.xStep)
      }), i.push({
        key: "YStep",
        value: O(t.yStep)
      }), i.push({
        key: "Resources",
        value: r + " 0 R"
      }), t.matrix && i.push({
        key: "Matrix",
        value: "[" + t.matrix.toString() + "]"
      }), ie({
        data: t.stream,
        additionalKeyValues: i,
        objectId: t.objectNumber
      }), lt("endobj");
    },
    pe = function (t) {
      var e;
      for (e in Ot) Ot.hasOwnProperty(e) && (Ot[e] instanceof B ? fe(Ot[e]) : Ot[e] instanceof M && de(Ot[e], t));
    },
    ge = function (t) {
      for (var e in t.objectNumber = Xt(), lt("<<"), t) switch (e) {
        case "opacity":
          lt("/ca " + R(t[e]));
          break;
        case "stroke-opacity":
          lt("/CA " + R(t[e]));
      }
      lt(">>"), lt("endobj");
    },
    me = function () {
      var t;
      for (t in Mt) Mt.hasOwnProperty(t) && ge(Mt[t]);
    },
    ve = function () {
      for (var t in lt("/XObject <<"), zt) zt.hasOwnProperty(t) && zt[t].objectNumber >= 0 && lt("/" + t + " " + zt[t].objectNumber + " 0 R");
      Tt.publish("putXobjectDict"), lt(">>");
    },
    be = function () {
      Ye.oid = Xt(), lt("<<"), lt("/Filter /Standard"), lt("/V " + Ye.v), lt("/R " + Ye.r), lt("/U <" + Ye.toHexString(Ye.U) + ">"), lt("/O <" + Ye.toHexString(Ye.O) + ">"), lt("/P " + Ye.P), lt(">>"), lt("endobj");
    },
    ye = function () {
      for (var t in lt("/Font <<"), Ft) Ft.hasOwnProperty(t) && (!1 === v || !0 === v && b.hasOwnProperty(t)) && lt("/" + t + " " + Ft[t].objectNumber + " 0 R");
      lt(">>");
    },
    we = function () {
      if (Object.keys(Ot).length > 0) {
        for (var t in lt("/Shading <<"), Ot) Ot.hasOwnProperty(t) && Ot[t] instanceof B && Ot[t].objectNumber >= 0 && lt("/" + t + " " + Ot[t].objectNumber + " 0 R");
        Tt.publish("putShadingPatternDict"), lt(">>");
      }
    },
    Ne = function (t) {
      if (Object.keys(Ot).length > 0) {
        for (var e in lt("/Pattern <<"), Ot) Ot.hasOwnProperty(e) && Ot[e] instanceof y.TilingPattern && Ot[e].objectNumber >= 0 && Ot[e].objectNumber < t && lt("/" + e + " " + Ot[e].objectNumber + " 0 R");
        Tt.publish("putTilingPatternDict"), lt(">>");
      }
    },
    Le = function () {
      if (Object.keys(Mt).length > 0) {
        var t;
        for (t in lt("/ExtGState <<"), Mt) Mt.hasOwnProperty(t) && Mt[t].objectNumber >= 0 && lt("/" + t + " " + Mt[t].objectNumber + " 0 R");
        Tt.publish("putGStateDict"), lt(">>");
      }
    },
    Ae = function (t) {
      Zt(t.resourcesOid, !0), lt("<<"), lt("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"), ye(), we(), Ne(t.objectOid), Le(), ve(), lt(">>"), lt("endobj");
    },
    xe = function () {
      var t = [];
      ce(), me(), he(), pe(t), Tt.publish("putResources"), t.forEach(Ae), Ae({
        resourcesOid: te,
        objectOid: Number.MAX_SAFE_INTEGER
      }), Tt.publish("postPutResources");
    },
    Se = function () {
      Tt.publish("putAdditionalObjects");
      for (var t = 0; t < at.length; t++) {
        var e = at[t];
        Zt(e.objId, !0), lt(e.content), lt("endobj");
      }
      Tt.publish("postPutAdditionalObjects");
    },
    _e = function (t) {
      Ct[t.fontName] = Ct[t.fontName] || {}, Ct[t.fontName][t.fontStyle] = t.id;
    },
    Pe = function (t, e, r, n, i) {
      var a = {
        id: "F" + (Object.keys(Ft).length + 1).toString(10),
        postScriptName: t,
        fontName: e,
        fontStyle: r,
        encoding: n,
        isStandardFont: i || !1,
        metadata: {}
      };
      return Tt.publish("addFont", {
        font: a,
        instance: this
      }), Ft[a.id] = a, _e(a), a.id;
    },
    ke = function (t) {
      for (var e = 0, r = pt.length; e < r; e++) {
        var n = Pe.call(this, t[e][0], t[e][1], t[e][2], pt[e][3], !0);
        !1 === v && (b[n] = !0);
        var i = t[e][0].split("-");
        _e({
          id: n,
          fontName: i[0],
          fontStyle: i[1] || ""
        });
      }
      Tt.publish("addFonts", {
        fonts: Ft,
        dictionary: Ct
      });
    },
    Ie = function (t) {
      return t.foo = function () {
        try {
          return t.apply(this, arguments);
        } catch (t) {
          var e = t.stack || "";
          ~e.indexOf(" at ") && (e = e.split(" at ")[1]);
          var r = "Error in function " + e.split("\n")[0].split("<")[0] + ": " + t.message;
          if (!n.console) throw new Error(r);
          n.console.error(r, t), n.alert && alert(r);
        }
      }, t.foo.bar = t, t.foo;
    },
    Fe = function (t, e) {
      var r, n, i, a, o, s, c, u, h;
      if (i = (e = e || {}).sourceEncoding || "Unicode", o = e.outputEncoding, (e.autoencode || o) && Ft[St].metadata && Ft[St].metadata[i] && Ft[St].metadata[i].encoding && (a = Ft[St].metadata[i].encoding, !o && Ft[St].encoding && (o = Ft[St].encoding), !o && a.codePages && (o = a.codePages[0]), "string" == typeof o && (o = a[o]), o)) {
        for (c = !1, s = [], r = 0, n = t.length; r < n; r++) (u = o[t.charCodeAt(r)]) ? s.push(String.fromCharCode(u)) : s.push(t[r]), s[r].charCodeAt(0) >> 8 && (c = !0);
        t = s.join("");
      }
      for (r = t.length; void 0 === c && 0 !== r;) t.charCodeAt(r - 1) >> 8 && (c = !0), r--;
      if (!c) return t;
      for (s = e.noBOM ? [] : [254, 255], r = 0, n = t.length; r < n; r++) {
        if ((h = (u = t.charCodeAt(r)) >> 8) >> 8) throw new Error("Character at position " + r + " of string '" + t + "' exceeds 16bits. Cannot be encoded into UCS-2 BE");
        s.push(h), s.push(u - (h << 8));
      }
      return String.fromCharCode.apply(void 0, s);
    },
    Ce = y.__private__.pdfEscape = y.pdfEscape = function (t, e) {
      return Fe(t, e).replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
    },
    je = y.__private__.beginPage = function (t) {
      ot[++Dt] = [], Rt[Dt] = {
        objId: 0,
        contentsObjId: 0,
        userUnit: Number(d),
        artBox: null,
        bleedBox: null,
        cropBox: null,
        trimBox: null,
        mediaBox: {
          bottomLeftX: 0,
          bottomLeftY: 0,
          topRightX: Number(t[0]),
          topRightY: Number(t[1])
        }
      }, Me(Dt), ht(ot[$]);
    },
    Oe = function (t, e) {
      var r, n, o;
      switch (i = e || i, "string" == typeof t && (r = A(t.toLowerCase()), Array.isArray(r) && (n = r[0], o = r[1])), Array.isArray(t) && (n = t[0] * _t, o = t[1] * _t), isNaN(n) && (n = s[0], o = s[1]), (n > 14400 || o > 14400) && (a.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"), n = Math.min(14400, n), o = Math.min(14400, o)), s = [n, o], i.substr(0, 1)) {
        case "l":
          o > n && (s = [o, n]);
          break;
        case "p":
          n > o && (s = [o, n]);
      }
      je(s), pr(fr), lt(Lr), 0 !== kr && lt(kr + " J"), 0 !== Ir && lt(Ir + " j"), Tt.publish("addPage", {
        pageNumber: Dt
      });
    },
    Be = function (t) {
      t > 0 && t <= Dt && (ot.splice(t, 1), Rt.splice(t, 1), Dt--, $ > Dt && ($ = Dt), this.setPage($));
    },
    Me = function (t) {
      t > 0 && t <= Dt && ($ = t);
    },
    Ee = y.__private__.getNumberOfPages = y.getNumberOfPages = function () {
      return ot.length - 1;
    },
    qe = function (t, e, r) {
      var n,
        i = void 0;
      return r = r || {}, t = void 0 !== t ? t : Ft[St].fontName, e = void 0 !== e ? e : Ft[St].fontStyle, n = t.toLowerCase(), void 0 !== Ct[n] && void 0 !== Ct[n][e] ? i = Ct[n][e] : void 0 !== Ct[t] && void 0 !== Ct[t][e] ? i = Ct[t][e] : !1 === r.disableWarning && a.warn("Unable to look up font label for font '" + t + "', '" + e + "'. Refer to getFontList() for available fonts."), i || r.noFallback || null == (i = Ct.times[e]) && (i = Ct.times.normal), i;
    },
    De = y.__private__.putInfo = function () {
      var t = Xt(),
        e = function (t) {
          return t;
        };
      for (var r in null !== m && (e = Ye.encryptor(t, 0)), lt("<<"), lt("/Producer (" + Ce(e("jsPDF " + E.version)) + ")"), xt) xt.hasOwnProperty(r) && xt[r] && lt("/" + r.substr(0, 1).toUpperCase() + r.substr(1) + " (" + Ce(e(xt[r])) + ")");
      lt("/CreationDate (" + Ce(e(W)) + ")"), lt(">>"), lt("endobj");
    },
    Re = y.__private__.putCatalog = function (t) {
      var e = (t = t || {}).rootDictionaryObjId || Qt;
      switch (Xt(), lt("<<"), lt("/Type /Catalog"), lt("/Pages " + e + " 0 R"), mt || (mt = "fullwidth"), mt) {
        case "fullwidth":
          lt("/OpenAction [3 0 R /FitH null]");
          break;
        case "fullheight":
          lt("/OpenAction [3 0 R /FitV null]");
          break;
        case "fullpage":
          lt("/OpenAction [3 0 R /Fit]");
          break;
        case "original":
          lt("/OpenAction [3 0 R /XYZ null null 1]");
          break;
        default:
          var r = "" + mt;
          "%" === r.substr(r.length - 1) && (mt = parseInt(mt) / 100), "number" == typeof mt && lt("/OpenAction [3 0 R /XYZ null null " + R(mt) + "]");
      }
      switch (Nt || (Nt = "continuous"), Nt) {
        case "continuous":
          lt("/PageLayout /OneColumn");
          break;
        case "single":
          lt("/PageLayout /SinglePage");
          break;
        case "two":
        case "twoleft":
          lt("/PageLayout /TwoColumnLeft");
          break;
        case "tworight":
          lt("/PageLayout /TwoColumnRight");
      }
      yt && lt("/PageMode /" + yt), Tt.publish("putCatalog"), lt(">>"), lt("endobj");
    },
    Te = y.__private__.putTrailer = function () {
      lt("trailer"), lt("<<"), lt("/Size " + (et + 1)), lt("/Root " + et + " 0 R"), lt("/Info " + (et - 1) + " 0 R"), null !== m && lt("/Encrypt " + Ye.oid + " 0 R"), lt("/ID [ <" + V + "> <" + V + "> ]"), lt(">>");
    },
    Ue = y.__private__.putHeader = function () {
      lt("%PDF-" + w), lt("%ºß¬à");
    },
    ze = y.__private__.putXRef = function () {
      var t = "0000000000";
      lt("xref"), lt("0 " + (et + 1)), lt("0000000000 65535 f ");
      for (var e = 1; e <= et; e++) {
        "function" == typeof rt[e] ? lt((t + rt[e]()).slice(-10) + " 00000 n ") : void 0 !== rt[e] ? lt((t + rt[e]).slice(-10) + " 00000 n ") : lt("0000000000 00000 n ");
      }
    },
    He = y.__private__.buildDocument = function () {
      ut(), ht(nt), Tt.publish("buildDocument"), Ue(), oe(), Se(), xe(), null !== m && be(), De(), Re();
      var t = it;
      return ze(), Te(), lt("startxref"), lt("" + t), lt("%%EOF"), ht(ot[$]), nt.join("\n");
    },
    We = y.__private__.getBlob = function (t) {
      return new Blob([dt(t)], {
        type: "application/pdf"
      });
    },
    Ve = y.output = y.__private__.output = Ie(function (t, e) {
      switch ("string" == typeof (e = e || {}) ? e = {
        filename: e
      } : e.filename = e.filename || "generated.pdf", t) {
        case void 0:
          return He();
        case "save":
          y.save(e.filename);
          break;
        case "arraybuffer":
          return dt(He());
        case "blob":
          return We(He());
        case "bloburi":
        case "bloburl":
          if (void 0 !== n.URL && "function" == typeof n.URL.createObjectURL) return n.URL && n.URL.createObjectURL(We(He())) || void 0;
          a.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");
          break;
        case "datauristring":
        case "dataurlstring":
          var r = "",
            i = He();
          try {
            r = h(i);
          } catch (t) {
            r = h(unescape(encodeURIComponent(i)));
          }
          return "data:application/pdf;filename=" + e.filename + ";base64," + r;
        case "pdfobjectnewwindow":
          if ("[object Window]" === Object.prototype.toString.call(n)) {
            var o = "https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js",
              s = ' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';
            e.pdfObjectUrl && (o = e.pdfObjectUrl, s = "");
            var c = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="' + o + '"' + s + '><\/script><script >PDFObject.embed("' + this.output("dataurlstring") + '", ' + JSON.stringify(e) + ");<\/script></body></html>",
              u = n.open();
            return null !== u && u.document.write(c), u;
          }
          throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");
        case "pdfjsnewwindow":
          if ("[object Window]" === Object.prototype.toString.call(n)) {
            var l = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="' + (e.pdfJsUrl || "examples/PDF.js/web/viewer.html") + "?file=&downloadName=" + e.filename + '" width="500px" height="400px" /></body></html>',
              f = n.open();
            if (null !== f) {
              f.document.write(l);
              var d = this;
              f.document.documentElement.querySelector("#pdfViewer").onload = function () {
                f.document.title = e.filename, f.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(d.output("bloburl"));
              };
            }
            return f;
          }
          throw new Error("The option pdfjsnewwindow just works in a browser-environment.");
        case "dataurlnewwindow":
          if ("[object Window]" !== Object.prototype.toString.call(n)) throw new Error("The option dataurlnewwindow just works in a browser-environment.");
          var p = '<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="' + this.output("datauristring", e) + '"></iframe></body></html>',
            g = n.open();
          if (null !== g && (g.document.write(p), g.document.title = e.filename), g || "undefined" == typeof safari) return g;
          break;
        case "datauri":
        case "dataurl":
          return n.document.location.href = this.output("datauristring", e);
        default:
          return null;
      }
    }),
    Ge = function (t) {
      return !0 === Array.isArray(Ut) && Ut.indexOf(t) > -1;
    };
  switch (o) {
    case "pt":
      _t = 1;
      break;
    case "mm":
      _t = 72 / 25.4;
      break;
    case "cm":
      _t = 72 / 2.54;
      break;
    case "in":
      _t = 72;
      break;
    case "px":
      _t = 1 == Ge("px_scaling") ? .75 : 96 / 72;
      break;
    case "pc":
    case "em":
      _t = 12;
      break;
    case "ex":
      _t = 6;
      break;
    default:
      if ("number" != typeof o) throw new Error("Invalid unit: " + o);
      _t = o;
  }
  var Ye = null;
  K(), Y();
  var Je = function (t) {
      return null !== m ? Ye.encryptor(t, 0) : function (t) {
        return t;
      };
    },
    Xe = y.__private__.getPageInfo = y.getPageInfo = function (t) {
      if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfo");
      return {
        objId: Rt[t].objId,
        pageNumber: t,
        pageContext: Rt[t]
      };
    },
    Ke = y.__private__.getPageInfoByObjId = function (t) {
      if (isNaN(t) || t % 1 != 0) throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");
      for (var e in Rt) if (Rt[e].objId === t) break;
      return Xe(e);
    },
    Ze = y.__private__.getCurrentPageInfo = y.getCurrentPageInfo = function () {
      return {
        objId: Rt[$].objId,
        pageNumber: $,
        pageContext: Rt[$]
      };
    };
  y.addPage = function () {
    return Oe.apply(this, arguments), this;
  }, y.setPage = function () {
    return Me.apply(this, arguments), ht.call(this, ot[$]), this;
  }, y.insertPage = function (t) {
    return this.addPage(), this.movePage($, t), this;
  }, y.movePage = function (t, e) {
    var r, n;
    if (t > e) {
      r = ot[t], n = Rt[t];
      for (var i = t; i > e; i--) ot[i] = ot[i - 1], Rt[i] = Rt[i - 1];
      ot[e] = r, Rt[e] = n, this.setPage(e);
    } else if (t < e) {
      r = ot[t], n = Rt[t];
      for (var a = t; a < e; a++) ot[a] = ot[a + 1], Rt[a] = Rt[a + 1];
      ot[e] = r, Rt[e] = n, this.setPage(e);
    }
    return this;
  }, y.deletePage = function () {
    return Be.apply(this, arguments), this;
  }, y.__private__.text = y.text = function (e, r, n, i, a) {
    var o,
      s,
      c,
      u,
      h,
      l,
      f,
      d,
      p,
      g = (i = i || {}).scope || this;
    if ("number" == typeof e && "number" == typeof r && ("string" == typeof n || Array.isArray(n))) {
      var m = n;
      n = r, r = e, e = m;
    }
    if (arguments[3] instanceof Vt == !1 ? (c = arguments[4], u = arguments[5], "object" === (0, _typeof.default)(f = arguments[3]) && null !== f || ("string" == typeof c && (u = c, c = null), "string" == typeof f && (u = f, f = null), "number" == typeof f && (c = f, f = null), i = {
      flags: f,
      angle: c,
      align: u
    })) : (q("The transform parameter of text() with a Matrix value"), p = a), isNaN(r) || isNaN(n) || null == e) throw new Error("Invalid arguments passed to jsPDF.text");
    if (0 === e.length) return g;
    var v = "",
      y = !1,
      w = "number" == typeof i.lineHeightFactor ? i.lineHeightFactor : lr,
      N = g.internal.scaleFactor;
    function L(t) {
      return t = t.split("\t").join(Array(i.TabLen || 9).join(" ")), Ce(t, f);
    }
    function A(t) {
      for (var e, r = t.concat(), n = [], i = r.length; i--;) "string" == typeof (e = r.shift()) ? n.push(e) : Array.isArray(t) && (1 === e.length || void 0 === e[1] && void 0 === e[2]) ? n.push(e[0]) : n.push([e[0], e[1], e[2]]);
      return n;
    }
    function _(t, e) {
      var r;
      if ("string" == typeof t) r = e(t)[0];else if (Array.isArray(t)) {
        for (var n, i, a = t.concat(), o = [], s = a.length; s--;) "string" == typeof (n = a.shift()) ? o.push(e(n)[0]) : Array.isArray(n) && "string" == typeof n[0] && (i = e(n[0], n[1], n[2]), o.push([i[0], i[1], i[2]]));
        r = o;
      }
      return r;
    }
    var P = !1,
      k = !0;
    if ("string" == typeof e) P = !0;else if (Array.isArray(e)) {
      var I = e.concat();
      s = [];
      for (var F, C = I.length; C--;) ("string" != typeof (F = I.shift()) || Array.isArray(F) && "string" != typeof F[0]) && (k = !1);
      P = k;
    }
    if (!1 === P) throw new Error('Type of text must be string or Array. "' + e + '" is not recognized.');
    "string" == typeof e && (e = e.match(/[\r?\n]/) ? e.split(/\r\n|\r|\n/g) : [e]);
    var j = gt / g.internal.scaleFactor,
      B = j * (w - 1);
    switch (i.baseline) {
      case "bottom":
        n -= B;
        break;
      case "top":
        n += j - B;
        break;
      case "hanging":
        n += j - 2 * B;
        break;
      case "middle":
        n += j / 2 - B;
    }
    if ((l = i.maxWidth || 0) > 0 && ("string" == typeof e ? e = g.splitTextToSize(e, l) : "[object Array]" === Object.prototype.toString.call(e) && (e = e.reduce(function (t, e) {
      return t.concat(g.splitTextToSize(e, l));
    }, []))), o = {
      text: e,
      x: r,
      y: n,
      options: i,
      mutex: {
        pdfEscape: Ce,
        activeFontKey: St,
        fonts: Ft,
        activeFontSize: gt
      }
    }, Tt.publish("preProcessText", o), e = o.text, c = (i = o.options).angle, p instanceof Vt == !1 && c && "number" == typeof c) {
      c *= Math.PI / 180, 0 === i.rotationDirection && (c = -c), S === x.ADVANCED && (c = -c);
      var M = Math.cos(c),
        E = Math.sin(c);
      p = new Vt(M, E, -E, M, 0, 0);
    } else c && c instanceof Vt && (p = c);
    S !== x.ADVANCED || p || (p = Yt), void 0 !== (h = i.charSpace || _r) && (v += O(U(h)) + " Tc\n", this.setCharSpace(this.getCharSpace() || 0)), void 0 !== (d = i.horizontalScale) && (v += O(100 * d) + " Tz\n");
    i.lang;
    var D = -1,
      R = void 0 !== i.renderingMode ? i.renderingMode : i.stroke,
      T = g.internal.getCurrentPageInfo().pageContext;
    switch (R) {
      case 0:
      case !1:
      case "fill":
        D = 0;
        break;
      case 1:
      case !0:
      case "stroke":
        D = 1;
        break;
      case 2:
      case "fillThenStroke":
        D = 2;
        break;
      case 3:
      case "invisible":
        D = 3;
        break;
      case 4:
      case "fillAndAddForClipping":
        D = 4;
        break;
      case 5:
      case "strokeAndAddPathForClipping":
        D = 5;
        break;
      case 6:
      case "fillThenStrokeAndAddToPathForClipping":
        D = 6;
        break;
      case 7:
      case "addToPathForClipping":
        D = 7;
    }
    var z = void 0 !== T.usedRenderingMode ? T.usedRenderingMode : -1;
    -1 !== D ? v += D + " Tr\n" : -1 !== z && (v += "0 Tr\n"), -1 !== D && (T.usedRenderingMode = D), u = i.align || "left";
    var H,
      W = gt * w,
      V = g.internal.pageSize.getWidth(),
      G = Ft[St];
    h = i.charSpace || _r, l = i.maxWidth || 0, f = Object.assign({
      autoencode: !0,
      noBOM: !0
    }, i.flags);
    var Y = [];
    if ("[object Array]" === Object.prototype.toString.call(e)) {
      var J;
      s = A(e), "left" !== u && (H = s.map(function (t) {
        return g.getStringUnitWidth(t, {
          font: G,
          charSpace: h,
          fontSize: gt,
          doKerning: !1
        }) * gt / N;
      }));
      var X,
        K = 0;
      if ("right" === u) {
        r -= H[0], e = [], C = s.length;
        for (var Z = 0; Z < C; Z++) 0 === Z ? (X = br(r), J = yr(n)) : (X = U(K - H[Z]), J = -W), e.push([s[Z], X, J]), K = H[Z];
      } else if ("center" === u) {
        r -= H[0] / 2, e = [], C = s.length;
        for (var $ = 0; $ < C; $++) 0 === $ ? (X = br(r), J = yr(n)) : (X = U((K - H[$]) / 2), J = -W), e.push([s[$], X, J]), K = H[$];
      } else if ("left" === u) {
        e = [], C = s.length;
        for (var Q = 0; Q < C; Q++) e.push(s[Q]);
      } else {
        if ("justify" !== u) throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');
        e = [], C = s.length, l = 0 !== l ? l : V;
        for (var tt = 0; tt < C; tt++) J = 0 === tt ? yr(n) : -W, X = 0 === tt ? br(r) : 0, tt < C - 1 ? Y.push(O(U((l - H[tt]) / (s[tt].split(" ").length - 1)))) : Y.push(0), e.push([s[tt], X, J]);
      }
    }
    var et = "boolean" == typeof i.R2L ? i.R2L : bt;
    !0 === et && (e = _(e, function (t, e, r) {
      return [t.split("").reverse().join(""), e, r];
    })), o = {
      text: e,
      x: r,
      y: n,
      options: i,
      mutex: {
        pdfEscape: Ce,
        activeFontKey: St,
        fonts: Ft,
        activeFontSize: gt
      }
    }, Tt.publish("postProcessText", o), e = o.text, y = o.mutex.isHex || !1;
    var rt = Ft[St].encoding;
    "WinAnsiEncoding" !== rt && "StandardEncoding" !== rt || (e = _(e, function (t, e, r) {
      return [L(t), e, r];
    })), s = A(e), e = [];
    for (var nt, it, at, ot = 0, st = 1, ct = Array.isArray(s[0]) ? st : ot, ut = "", ht = function (t, e, r) {
        var n = "";
        return r instanceof Vt ? (r = "number" == typeof i.angle ? Gt(r, new Vt(1, 0, 0, 1, t, e)) : Gt(new Vt(1, 0, 0, 1, t, e), r), S === x.ADVANCED && (r = Gt(new Vt(1, 0, 0, -1, 0, 0), r)), n = r.join(" ") + " Tm\n") : n = O(t) + " " + O(e) + " Td\n", n;
      }, ft = 0; ft < s.length; ft++) {
      switch (ut = "", ct) {
        case st:
          at = (y ? "<" : "(") + s[ft][0] + (y ? ">" : ")"), nt = parseFloat(s[ft][1]), it = parseFloat(s[ft][2]);
          break;
        case ot:
          at = (y ? "<" : "(") + s[ft] + (y ? ">" : ")"), nt = br(r), it = yr(n);
      }
      void 0 !== Y && void 0 !== Y[ft] && (ut = Y[ft] + " Tw\n"), 0 === ft ? e.push(ut + ht(nt, it, p) + at) : ct === ot ? e.push(ut + at) : ct === st && e.push(ut + ht(nt, it, p) + at);
    }
    e = ct === ot ? e.join(" Tj\nT* ") : e.join(" Tj\n"), e += " Tj\n";
    var dt = "BT\n/";
    return dt += St + " " + gt + " Tf\n", dt += O(gt * w) + " TL\n", dt += xr + "\n", dt += v, dt += e, lt(dt += "ET"), b[St] = !0, g;
  };
  var $e = y.__private__.clip = y.clip = function (t) {
    return lt("evenodd" === t ? "W*" : "W"), this;
  };
  y.clipEvenOdd = function () {
    return $e("evenodd");
  }, y.__private__.discardPath = y.discardPath = function () {
    return lt("n"), this;
  };
  var Qe = y.__private__.isValidStyle = function (t) {
    var e = !1;
    return -1 !== [void 0, null, "S", "D", "F", "DF", "FD", "f", "f*", "B", "B*", "n"].indexOf(t) && (e = !0), e;
  };
  y.__private__.setDefaultPathOperation = y.setDefaultPathOperation = function (t) {
    return Qe(t) && (g = t), this;
  };
  var tr = y.__private__.getStyle = y.getStyle = function (t) {
      var e = g;
      switch (t) {
        case "D":
        case "S":
          e = "S";
          break;
        case "F":
          e = "f";
          break;
        case "FD":
        case "DF":
          e = "B";
          break;
        case "f":
        case "f*":
        case "B":
        case "B*":
          e = t;
      }
      return e;
    },
    er = y.close = function () {
      return lt("h"), this;
    };
  y.stroke = function () {
    return lt("S"), this;
  }, y.fill = function (t) {
    return rr("f", t), this;
  }, y.fillEvenOdd = function (t) {
    return rr("f*", t), this;
  }, y.fillStroke = function (t) {
    return rr("B", t), this;
  }, y.fillStrokeEvenOdd = function (t) {
    return rr("B*", t), this;
  };
  var rr = function (e, r) {
      "object" === (0, _typeof.default)(r) ? ar(r, e) : lt(e);
    },
    nr = function (t) {
      null === t || S === x.ADVANCED && void 0 === t || (t = tr(t), lt(t));
    };
  function ir(t, e, r, n, i) {
    var a = new M(e || this.boundingBox, r || this.xStep, n || this.yStep, this.gState, i || this.matrix);
    a.stream = this.stream;
    var o = t + "$$" + this.cloneIndex++ + "$$";
    return Jt(o, a), a;
  }
  var ar = function (t, e) {
      var r = Bt[t.key],
        n = Ot[r];
      if (n instanceof B) lt("q"), lt(or(e)), n.gState && y.setGState(n.gState), lt(t.matrix.toString() + " cm"), lt("/" + r + " sh"), lt("Q");else if (n instanceof M) {
        var i = new Vt(1, 0, 0, -1, 0, Rr());
        t.matrix && (i = i.multiply(t.matrix || Yt), r = ir.call(n, t.key, t.boundingBox, t.xStep, t.yStep, i).id), lt("q"), lt("/Pattern cs"), lt("/" + r + " scn"), n.gState && y.setGState(n.gState), lt(e), lt("Q");
      }
    },
    or = function (t) {
      switch (t) {
        case "f":
        case "F":
          return "W n";
        case "f*":
          return "W* n";
        case "B":
          return "W S";
        case "B*":
          return "W* S";
        case "S":
          return "W S";
        case "n":
          return "W n";
      }
    },
    sr = y.moveTo = function (t, e) {
      return lt(O(U(t)) + " " + O(H(e)) + " m"), this;
    },
    cr = y.lineTo = function (t, e) {
      return lt(O(U(t)) + " " + O(H(e)) + " l"), this;
    },
    ur = y.curveTo = function (t, e, r, n, i, a) {
      return lt([O(U(t)), O(H(e)), O(U(r)), O(H(n)), O(U(i)), O(H(a)), "c"].join(" ")), this;
    };
  y.__private__.line = y.line = function (t, e, r, n, i) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i)) throw new Error("Invalid arguments passed to jsPDF.line");
    return S === x.COMPAT ? this.lines([[r - t, n - e]], t, e, [1, 1], i || "S") : this.lines([[r - t, n - e]], t, e, [1, 1]).stroke();
  }, y.__private__.lines = y.lines = function (t, e, r, n, i, a) {
    var o, s, c, u, h, l, f, d, p, g, m, v;
    if ("number" == typeof t && (v = r, r = e, e = t, t = v), n = n || [1, 1], a = a || !1, isNaN(e) || isNaN(r) || !Array.isArray(t) || !Array.isArray(n) || !Qe(i) || "boolean" != typeof a) throw new Error("Invalid arguments passed to jsPDF.lines");
    for (sr(e, r), o = n[0], s = n[1], u = t.length, g = e, m = r, c = 0; c < u; c++) 2 === (h = t[c]).length ? (g = h[0] * o + g, m = h[1] * s + m, cr(g, m)) : (l = h[0] * o + g, f = h[1] * s + m, d = h[2] * o + g, p = h[3] * s + m, g = h[4] * o + g, m = h[5] * s + m, ur(l, f, d, p, g, m));
    return a && er(), nr(i), this;
  }, y.path = function (t) {
    for (var e = 0; e < t.length; e++) {
      var r = t[e],
        n = r.c;
      switch (r.op) {
        case "m":
          sr(n[0], n[1]);
          break;
        case "l":
          cr(n[0], n[1]);
          break;
        case "c":
          ur.apply(this, n);
          break;
        case "h":
          er();
      }
    }
    return this;
  }, y.__private__.rect = y.rect = function (t, e, r, n, i) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i)) throw new Error("Invalid arguments passed to jsPDF.rect");
    return S === x.COMPAT && (n = -n), lt([O(U(t)), O(H(e)), O(U(r)), O(U(n)), "re"].join(" ")), nr(i), this;
  }, y.__private__.triangle = y.triangle = function (t, e, r, n, i, a, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Qe(o)) throw new Error("Invalid arguments passed to jsPDF.triangle");
    return this.lines([[r - t, n - e], [i - r, a - n], [t - i, e - a]], t, e, [1, 1], o, !0), this;
  }, y.__private__.roundedRect = y.roundedRect = function (t, e, r, n, i, a, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(a) || !Qe(o)) throw new Error("Invalid arguments passed to jsPDF.roundedRect");
    var s = 4 / 3 * (Math.SQRT2 - 1);
    return i = Math.min(i, .5 * r), a = Math.min(a, .5 * n), this.lines([[r - 2 * i, 0], [i * s, 0, i, a - a * s, i, a], [0, n - 2 * a], [0, a * s, -i * s, a, -i, a], [2 * i - r, 0], [-i * s, 0, -i, -a * s, -i, -a], [0, 2 * a - n], [0, -a * s, i * s, -a, i, -a]], t + i, e, [1, 1], o, !0), this;
  }, y.__private__.ellipse = y.ellipse = function (t, e, r, n, i) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || !Qe(i)) throw new Error("Invalid arguments passed to jsPDF.ellipse");
    var a = 4 / 3 * (Math.SQRT2 - 1) * r,
      o = 4 / 3 * (Math.SQRT2 - 1) * n;
    return sr(t + r, e), ur(t + r, e - o, t + a, e - n, t, e - n), ur(t - a, e - n, t - r, e - o, t - r, e), ur(t - r, e + o, t - a, e + n, t, e + n), ur(t + a, e + n, t + r, e + o, t + r, e), nr(i), this;
  }, y.__private__.circle = y.circle = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || !Qe(n)) throw new Error("Invalid arguments passed to jsPDF.circle");
    return this.ellipse(t, e, r, r, n);
  }, y.setFont = function (t, e, r) {
    return r && (e = k(e, r)), St = qe(t, e, {
      disableWarning: !1
    }), this;
  };
  var hr = y.__private__.getFont = y.getFont = function () {
    return Ft[qe.apply(y, arguments)];
  };
  y.__private__.getFontList = y.getFontList = function () {
    var t,
      e,
      r = {};
    for (t in Ct) if (Ct.hasOwnProperty(t)) for (e in r[t] = [], Ct[t]) Ct[t].hasOwnProperty(e) && r[t].push(e);
    return r;
  }, y.addFont = function (t, e, r, n, i) {
    var a = ["StandardEncoding", "MacRomanEncoding", "Identity-H", "WinAnsiEncoding"];
    return arguments[3] && -1 !== a.indexOf(arguments[3]) ? i = arguments[3] : arguments[3] && -1 == a.indexOf(arguments[3]) && (r = k(r, n)), i = i || "Identity-H", Pe.call(this, t, e, r, i);
  };
  var lr,
    fr = e.lineWidth || .200025,
    dr = y.__private__.getLineWidth = y.getLineWidth = function () {
      return fr;
    },
    pr = y.__private__.setLineWidth = y.setLineWidth = function (t) {
      return fr = t, lt(O(U(t)) + " w"), this;
    };
  y.__private__.setLineDash = E.API.setLineDash = E.API.setLineDashPattern = function (t, e) {
    if (t = t || [], e = e || 0, isNaN(e) || !Array.isArray(t)) throw new Error("Invalid arguments passed to jsPDF.setLineDash");
    return t = t.map(function (t) {
      return O(U(t));
    }).join(" "), e = O(U(e)), lt("[" + t + "] " + e + " d"), this;
  };
  var gr = y.__private__.getLineHeight = y.getLineHeight = function () {
    return gt * lr;
  };
  y.__private__.getLineHeight = y.getLineHeight = function () {
    return gt * lr;
  };
  var mr = y.__private__.setLineHeightFactor = y.setLineHeightFactor = function (t) {
      return "number" == typeof (t = t || 1.15) && (lr = t), this;
    },
    vr = y.__private__.getLineHeightFactor = y.getLineHeightFactor = function () {
      return lr;
    };
  mr(e.lineHeight);
  var br = y.__private__.getHorizontalCoordinate = function (t) {
      return U(t);
    },
    yr = y.__private__.getVerticalCoordinate = function (t) {
      return S === x.ADVANCED ? t : Rt[$].mediaBox.topRightY - Rt[$].mediaBox.bottomLeftY - U(t);
    },
    wr = y.__private__.getHorizontalCoordinateString = y.getHorizontalCoordinateString = function (t) {
      return O(br(t));
    },
    Nr = y.__private__.getVerticalCoordinateString = y.getVerticalCoordinateString = function (t) {
      return O(yr(t));
    },
    Lr = e.strokeColor || "0 G";
  y.__private__.getStrokeColor = y.getDrawColor = function () {
    return ee(Lr);
  }, y.__private__.setStrokeColor = y.setDrawColor = function (t, e, r, n) {
    return Lr = re({
      ch1: t,
      ch2: e,
      ch3: r,
      ch4: n,
      pdfColorType: "draw",
      precision: 2
    }), lt(Lr), this;
  };
  var Ar = e.fillColor || "0 g";
  y.__private__.getFillColor = y.getFillColor = function () {
    return ee(Ar);
  }, y.__private__.setFillColor = y.setFillColor = function (t, e, r, n) {
    return Ar = re({
      ch1: t,
      ch2: e,
      ch3: r,
      ch4: n,
      pdfColorType: "fill",
      precision: 2
    }), lt(Ar), this;
  };
  var xr = e.textColor || "0 g",
    Sr = y.__private__.getTextColor = y.getTextColor = function () {
      return ee(xr);
    };
  y.__private__.setTextColor = y.setTextColor = function (t, e, r, n) {
    return xr = re({
      ch1: t,
      ch2: e,
      ch3: r,
      ch4: n,
      pdfColorType: "text",
      precision: 3
    }), this;
  };
  var _r = e.charSpace,
    Pr = y.__private__.getCharSpace = y.getCharSpace = function () {
      return parseFloat(_r || 0);
    };
  y.__private__.setCharSpace = y.setCharSpace = function (t) {
    if (isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setCharSpace");
    return _r = t, this;
  };
  var kr = 0;
  y.CapJoinStyles = {
    0: 0,
    butt: 0,
    but: 0,
    miter: 0,
    1: 1,
    round: 1,
    rounded: 1,
    circle: 1,
    2: 2,
    projecting: 2,
    project: 2,
    square: 2,
    bevel: 2
  }, y.__private__.setLineCap = y.setLineCap = function (t) {
    var e = y.CapJoinStyles[t];
    if (void 0 === e) throw new Error("Line cap style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
    return kr = e, lt(e + " J"), this;
  };
  var Ir = 0;
  y.__private__.setLineJoin = y.setLineJoin = function (t) {
    var e = y.CapJoinStyles[t];
    if (void 0 === e) throw new Error("Line join style of '" + t + "' is not recognized. See or extend .CapJoinStyles property for valid styles");
    return Ir = e, lt(e + " j"), this;
  }, y.__private__.setLineMiterLimit = y.__private__.setMiterLimit = y.setLineMiterLimit = y.setMiterLimit = function (t) {
    if (t = t || 0, isNaN(t)) throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");
    return lt(O(U(t)) + " M"), this;
  }, y.GState = j, y.setGState = function (t) {
    (t = "string" == typeof t ? Mt[Et[t]] : Fr(null, t)).equals(qt) || (lt("/" + t.id + " gs"), qt = t);
  };
  var Fr = function (t, e) {
    if (!t || !Et[t]) {
      var r = !1;
      for (var n in Mt) if (Mt.hasOwnProperty(n) && Mt[n].equals(e)) {
        r = !0;
        break;
      }
      if (r) e = Mt[n];else {
        var i = "GS" + (Object.keys(Mt).length + 1).toString(10);
        Mt[i] = e, e.id = i;
      }
      return t && (Et[t] = e.id), Tt.publish("addGState", e), e;
    }
  };
  y.addGState = function (t, e) {
    return Fr(t, e), this;
  }, y.saveGraphicsState = function () {
    return lt("q"), jt.push({
      key: St,
      size: gt,
      color: xr
    }), this;
  }, y.restoreGraphicsState = function () {
    lt("Q");
    var t = jt.pop();
    return St = t.key, gt = t.size, xr = t.color, qt = null, this;
  }, y.setCurrentTransformationMatrix = function (t) {
    return lt(t.toString() + " cm"), this;
  }, y.comment = function (t) {
    return lt("#" + t), this;
  };
  var Cr = function (t, e) {
      var r = t || 0;
      Object.defineProperty(this, "x", {
        enumerable: !0,
        get: function () {
          return r;
        },
        set: function (t) {
          isNaN(t) || (r = parseFloat(t));
        }
      });
      var n = e || 0;
      Object.defineProperty(this, "y", {
        enumerable: !0,
        get: function () {
          return n;
        },
        set: function (t) {
          isNaN(t) || (n = parseFloat(t));
        }
      });
      var i = "pt";
      return Object.defineProperty(this, "type", {
        enumerable: !0,
        get: function () {
          return i;
        },
        set: function (t) {
          i = t.toString();
        }
      }), this;
    },
    jr = function (t, e, r, n) {
      Cr.call(this, t, e), this.type = "rect";
      var i = r || 0;
      Object.defineProperty(this, "w", {
        enumerable: !0,
        get: function () {
          return i;
        },
        set: function (t) {
          isNaN(t) || (i = parseFloat(t));
        }
      });
      var a = n || 0;
      return Object.defineProperty(this, "h", {
        enumerable: !0,
        get: function () {
          return a;
        },
        set: function (t) {
          isNaN(t) || (a = parseFloat(t));
        }
      }), this;
    },
    Or = function () {
      this.page = Dt, this.currentPage = $, this.pages = ot.slice(0), this.pagesContext = Rt.slice(0), this.x = Pt, this.y = kt, this.matrix = It, this.width = qr($), this.height = Rr($), this.outputDestination = ct, this.id = "", this.objectNumber = -1;
    };
  Or.prototype.restore = function () {
    Dt = this.page, $ = this.currentPage, Rt = this.pagesContext, ot = this.pages, Pt = this.x, kt = this.y, It = this.matrix, Dr($, this.width), Tr($, this.height), ct = this.outputDestination;
  };
  var Br = function (t, e, r, n, i) {
      Wt.push(new Or()), Dt = $ = 0, ot = [], Pt = t, kt = e, It = i, je([r, n]);
    },
    Mr = function (t) {
      if (Ht[t]) Wt.pop().restore();else {
        var e = new Or(),
          r = "Xo" + (Object.keys(zt).length + 1).toString(10);
        e.id = r, Ht[t] = r, zt[r] = e, Tt.publish("addFormObject", e), Wt.pop().restore();
      }
    };
  for (var Er in y.beginFormObject = function (t, e, r, n, i) {
    return Br(t, e, r, n, i), this;
  }, y.endFormObject = function (t) {
    return Mr(t), this;
  }, y.doFormObject = function (t, e) {
    var r = zt[Ht[t]];
    return lt("q"), lt(e.toString() + " cm"), lt("/" + r.id + " Do"), lt("Q"), this;
  }, y.getFormObject = function (t) {
    var e = zt[Ht[t]];
    return {
      x: e.x,
      y: e.y,
      width: e.width,
      height: e.height,
      matrix: e.matrix
    };
  }, y.save = function (t, e) {
    return t = t || "generated.pdf", (e = e || {}).returnPromise = e.returnPromise || !1, !1 === e.returnPromise ? (l(We(He()), t), "function" == typeof l.unload && n.setTimeout && setTimeout(l.unload, 911), this) : new Promise(function (e, r) {
      try {
        var i = l(We(He()), t);
        "function" == typeof l.unload && n.setTimeout && setTimeout(l.unload, 911), e(i);
      } catch (t) {
        r(t.message);
      }
    });
  }, E.API) E.API.hasOwnProperty(Er) && ("events" === Er && E.API.events.length ? function (t, e) {
    var r, n, i;
    for (i = e.length - 1; -1 !== i; i--) r = e[i][0], n = e[i][1], t.subscribe.apply(t, [r].concat("function" == typeof n ? [n] : n));
  }(Tt, E.API.events) : y[Er] = E.API[Er]);
  var qr = y.getPageWidth = function (t) {
      return (Rt[t = t || $].mediaBox.topRightX - Rt[t].mediaBox.bottomLeftX) / _t;
    },
    Dr = y.setPageWidth = function (t, e) {
      Rt[t].mediaBox.topRightX = e * _t + Rt[t].mediaBox.bottomLeftX;
    },
    Rr = y.getPageHeight = function (t) {
      return (Rt[t = t || $].mediaBox.topRightY - Rt[t].mediaBox.bottomLeftY) / _t;
    },
    Tr = y.setPageHeight = function (t, e) {
      Rt[t].mediaBox.topRightY = e * _t + Rt[t].mediaBox.bottomLeftY;
    };
  return y.internal = {
    pdfEscape: Ce,
    getStyle: tr,
    getFont: hr,
    getFontSize: vt,
    getCharSpace: Pr,
    getTextColor: Sr,
    getLineHeight: gr,
    getLineHeightFactor: vr,
    getLineWidth: dr,
    write: ft,
    getHorizontalCoordinate: br,
    getVerticalCoordinate: yr,
    getCoordinateString: wr,
    getVerticalCoordinateString: Nr,
    collections: {},
    newObject: Xt,
    newAdditionalObject: $t,
    newObjectDeferred: Kt,
    newObjectDeferredBegin: Zt,
    getFilters: ne,
    putStream: ie,
    events: Tt,
    scaleFactor: _t,
    pageSize: {
      getWidth: function () {
        return qr($);
      },
      setWidth: function (t) {
        Dr($, t);
      },
      getHeight: function () {
        return Rr($);
      },
      setHeight: function (t) {
        Tr($, t);
      }
    },
    encryptionOptions: m,
    encryption: Ye,
    getEncryptor: Je,
    output: Ve,
    getNumberOfPages: Ee,
    pages: ot,
    out: lt,
    f2: R,
    f3: T,
    getPageInfo: Xe,
    getPageInfoByObjId: Ke,
    getCurrentPageInfo: Ze,
    getPDFVersion: N,
    Point: Cr,
    Rectangle: jr,
    Matrix: Vt,
    hasHotfix: Ge
  }, Object.defineProperty(y.internal.pageSize, "width", {
    get: function () {
      return qr($);
    },
    set: function (t) {
      Dr($, t);
    },
    enumerable: !0,
    configurable: !0
  }), Object.defineProperty(y.internal.pageSize, "height", {
    get: function () {
      return Rr($);
    },
    set: function (t) {
      Tr($, t);
    },
    enumerable: !0,
    configurable: !0
  }), ke.call(y, pt), St = "F1", Oe(s, i), Tt.publish("initialized"), y;
}
I.prototype.lsbFirstWord = function (t) {
  return String.fromCharCode(t >> 0 & 255, t >> 8 & 255, t >> 16 & 255, t >> 24 & 255);
}, I.prototype.toHexString = function (t) {
  return t.split("").map(function (t) {
    return ("0" + (255 & t.charCodeAt(0)).toString(16)).slice(-2);
  }).join("");
}, I.prototype.hexToBytes = function (t) {
  for (var e = [], r = 0; r < t.length; r += 2) e.push(String.fromCharCode(parseInt(t.substr(r, 2), 16)));
  return e.join("");
}, I.prototype.processOwnerPassword = function (t, e) {
  return P(x(e).substr(0, 5), t);
}, I.prototype.encryptor = function (t, e) {
  var r = x(this.encryptionKey + String.fromCharCode(255 & t, t >> 8 & 255, t >> 16 & 255, 255 & e, e >> 8 & 255)).substr(0, 10);
  return function (t) {
    return P(r, t);
  };
}, j.prototype.equals = function (e) {
  var r,
    n = "id,objectNumber,equals";
  if (!e || (0, _typeof.default)(e) !== (0, _typeof.default)(this)) return !1;
  var i = 0;
  for (r in this) if (!(n.indexOf(r) >= 0)) {
    if (this.hasOwnProperty(r) && !e.hasOwnProperty(r)) return !1;
    if (this[r] !== e[r]) return !1;
    i++;
  }
  for (r in e) e.hasOwnProperty(r) && n.indexOf(r) < 0 && i--;
  return 0 === i;
}, E.API = {
  events: []
}, E.version = "2.5.1";
var q = E.API,
  D = 1,
  R = function (t) {
    return t.replace(/\\/g, "\\\\").replace(/\(/g, "\\(").replace(/\)/g, "\\)");
  },
  T = function (t) {
    return t.replace(/\\\\/g, "\\").replace(/\\\(/g, "(").replace(/\\\)/g, ")");
  },
  U = function (t) {
    return t.toFixed(2);
  },
  z = function (t) {
    return t.toFixed(5);
  };
q.__acroform__ = {};
var H = function (t, e) {
    t.prototype = Object.create(e.prototype), t.prototype.constructor = t;
  },
  W = function (t) {
    return t * D;
  },
  V = function (t) {
    var e = new ut(),
      r = At.internal.getHeight(t) || 0,
      n = At.internal.getWidth(t) || 0;
    return e.BBox = [0, 0, Number(U(n)), Number(U(r))], e;
  },
  G = q.__acroform__.setBit = function (t, e) {
    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");
    return t |= 1 << e;
  },
  Y = q.__acroform__.clearBit = function (t, e) {
    if (t = t || 0, e = e || 0, isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");
    return t &= ~(1 << e);
  },
  J = q.__acroform__.getBit = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");
    return 0 == (t & 1 << e) ? 0 : 1;
  },
  X = q.__acroform__.getBitForPdf = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");
    return J(t, e - 1);
  },
  K = q.__acroform__.setBitForPdf = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");
    return G(t, e - 1);
  },
  Z = q.__acroform__.clearBitForPdf = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");
    return Y(t, e - 1);
  },
  $ = q.__acroform__.calculateCoordinates = function (t, e) {
    var r = e.internal.getHorizontalCoordinate,
      n = e.internal.getVerticalCoordinate,
      i = t[0],
      a = t[1],
      o = t[2],
      s = t[3],
      c = {};
    return c.lowerLeft_X = r(i) || 0, c.lowerLeft_Y = n(a + s) || 0, c.upperRight_X = r(i + o) || 0, c.upperRight_Y = n(a) || 0, [Number(U(c.lowerLeft_X)), Number(U(c.lowerLeft_Y)), Number(U(c.upperRight_X)), Number(U(c.upperRight_Y))];
  },
  Q = function (t) {
    if (t.appearanceStreamContent) return t.appearanceStreamContent;
    if (t.V || t.DV) {
      var e = [],
        r = t._V || t.DV,
        n = tt(t, r),
        i = t.scope.internal.getFont(t.fontName, t.fontStyle).id;
      e.push("/Tx BMC"), e.push("q"), e.push("BT"), e.push(t.scope.__private__.encodeColorString(t.color)), e.push("/" + i + " " + U(n.fontSize) + " Tf"), e.push("1 0 0 1 0 0 Tm"), e.push(n.text), e.push("ET"), e.push("Q"), e.push("EMC");
      var a = V(t);
      return a.scope = t.scope, a.stream = e.join("\n"), a;
    }
  },
  tt = function (t, e) {
    var r = 0 === t.fontSize ? t.maxFontSize : t.fontSize,
      n = {
        text: "",
        fontSize: ""
      },
      i = (e = ")" == (e = "(" == e.substr(0, 1) ? e.substr(1) : e).substr(e.length - 1) ? e.substr(0, e.length - 1) : e).split(" ");
    i = t.multiline ? i.map(function (t) {
      return t.split("\n");
    }) : i.map(function (t) {
      return [t];
    });
    var a = r,
      o = At.internal.getHeight(t) || 0;
    o = o < 0 ? -o : o;
    var s = At.internal.getWidth(t) || 0;
    s = s < 0 ? -s : s;
    var c = function (e, r, n) {
      if (e + 1 < i.length) {
        var a = r + " " + i[e + 1][0];
        return et(a, t, n).width <= s - 4;
      }
      return !1;
    };
    a++;
    t: for (; a > 0;) {
      e = "", a--;
      var u,
        h,
        l = et("3", t, a).height,
        f = t.multiline ? o - a : (o - l) / 2,
        d = f += 2,
        p = 0,
        g = 0,
        m = 0;
      if (a <= 0) {
        e = "(...) Tj\n", e += "% Width of Text: " + et(e, t, a = 12).width + ", FieldWidth:" + s + "\n";
        break;
      }
      for (var v = "", b = 0, y = 0; y < i.length; y++) if (i.hasOwnProperty(y)) {
        var w = !1;
        if (1 !== i[y].length && m !== i[y].length - 1) {
          if ((l + 2) * (b + 2) + 2 > o) continue t;
          v += i[y][m], w = !0, g = y, y--;
        } else {
          v = " " == (v += i[y][m] + " ").substr(v.length - 1) ? v.substr(0, v.length - 1) : v;
          var N = parseInt(y),
            L = c(N, v, a),
            A = y >= i.length - 1;
          if (L && !A) {
            v += " ", m = 0;
            continue;
          }
          if (L || A) {
            if (A) g = N;else if (t.multiline && (l + 2) * (b + 2) + 2 > o) continue t;
          } else {
            if (!t.multiline) continue t;
            if ((l + 2) * (b + 2) + 2 > o) continue t;
            g = N;
          }
        }
        for (var x = "", S = p; S <= g; S++) {
          var _ = i[S];
          if (t.multiline) {
            if (S === g) {
              x += _[m] + " ", m = (m + 1) % _.length;
              continue;
            }
            if (S === p) {
              x += _[_.length - 1] + " ";
              continue;
            }
          }
          x += _[0] + " ";
        }
        switch (x = " " == x.substr(x.length - 1) ? x.substr(0, x.length - 1) : x, h = et(x, t, a).width, t.textAlign) {
          case "right":
            u = s - h - 2;
            break;
          case "center":
            u = (s - h) / 2;
            break;
          case "left":
          default:
            u = 2;
        }
        e += U(u) + " " + U(d) + " Td\n", e += "(" + R(x) + ") Tj\n", e += -U(u) + " 0 Td\n", d = -(a + 2), h = 0, p = w ? g : g + 1, b++, v = "";
      } else ;
      break;
    }
    return n.text = e, n.fontSize = a, n;
  },
  et = function (t, e, r) {
    var n = e.scope.internal.getFont(e.fontName, e.fontStyle),
      i = e.scope.getStringUnitWidth(t, {
        font: n,
        fontSize: parseFloat(r),
        charSpace: 0
      }) * parseFloat(r);
    return {
      height: e.scope.getStringUnitWidth("3", {
        font: n,
        fontSize: parseFloat(r),
        charSpace: 0
      }) * parseFloat(r) * 1.5,
      width: i
    };
  },
  rt = {
    fields: [],
    xForms: [],
    acroFormDictionaryRoot: null,
    printedOut: !1,
    internal: null,
    isInitialized: !1
  },
  nt = function (t, e) {
    var r = {
      type: "reference",
      object: t
    };
    void 0 === e.internal.getPageInfo(t.page).pageContext.annotations.find(function (t) {
      return t.type === r.type && t.object === r.object;
    }) && e.internal.getPageInfo(t.page).pageContext.annotations.push(r);
  },
  it = function (e, r) {
    for (var n in e) if (e.hasOwnProperty(n)) {
      var i = n,
        a = e[n];
      r.internal.newObjectDeferredBegin(a.objId, !0), "object" === (0, _typeof.default)(a) && "function" == typeof a.putStream && a.putStream(), delete e[i];
    }
  },
  at = function (e, r) {
    if (r.scope = e, void 0 !== e.internal && (void 0 === e.internal.acroformPlugin || !1 === e.internal.acroformPlugin.isInitialized)) {
      if (lt.FieldNum = 0, e.internal.acroformPlugin = JSON.parse(JSON.stringify(rt)), e.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("Exception while creating AcroformDictionary");
      D = e.internal.scaleFactor, e.internal.acroformPlugin.acroFormDictionaryRoot = new ht(), e.internal.acroformPlugin.acroFormDictionaryRoot.scope = e, e.internal.acroformPlugin.acroFormDictionaryRoot._eventID = e.internal.events.subscribe("postPutResources", function () {
        !function (t) {
          t.internal.events.unsubscribe(t.internal.acroformPlugin.acroFormDictionaryRoot._eventID), delete t.internal.acroformPlugin.acroFormDictionaryRoot._eventID, t.internal.acroformPlugin.printedOut = !0;
        }(e);
      }), e.internal.events.subscribe("buildDocument", function () {
        !function (t) {
          t.internal.acroformPlugin.acroFormDictionaryRoot.objId = void 0;
          var e = t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;
          for (var r in e) if (e.hasOwnProperty(r)) {
            var n = e[r];
            n.objId = void 0, n.hasAnnotation && nt(n, t);
          }
        }(e);
      }), e.internal.events.subscribe("putCatalog", function () {
        !function (t) {
          if (void 0 === t.internal.acroformPlugin.acroFormDictionaryRoot) throw new Error("putCatalogCallback: Root missing.");
          t.internal.write("/AcroForm " + t.internal.acroformPlugin.acroFormDictionaryRoot.objId + " 0 R");
        }(e);
      }), e.internal.events.subscribe("postPutPages", function (r) {
        !function (e, r) {
          var n = !e;
          for (var i in e || (r.internal.newObjectDeferredBegin(r.internal.acroformPlugin.acroFormDictionaryRoot.objId, !0), r.internal.acroformPlugin.acroFormDictionaryRoot.putStream()), e = e || r.internal.acroformPlugin.acroFormDictionaryRoot.Kids) if (e.hasOwnProperty(i)) {
            var a = e[i],
              o = [],
              s = a.Rect;
            if (a.Rect && (a.Rect = $(a.Rect, r)), r.internal.newObjectDeferredBegin(a.objId, !0), a.DA = At.createDefaultAppearanceStream(a), "object" === (0, _typeof.default)(a) && "function" == typeof a.getKeyValueListForStream && (o = a.getKeyValueListForStream()), a.Rect = s, a.hasAppearanceStream && !a.appearanceStreamContent) {
              var c = Q(a);
              o.push({
                key: "AP",
                value: "<</N " + c + ">>"
              }), r.internal.acroformPlugin.xForms.push(c);
            }
            if (a.appearanceStreamContent) {
              var u = "";
              for (var h in a.appearanceStreamContent) if (a.appearanceStreamContent.hasOwnProperty(h)) {
                var l = a.appearanceStreamContent[h];
                if (u += "/" + h + " ", u += "<<", Object.keys(l).length >= 1 || Array.isArray(l)) {
                  for (var i in l) if (l.hasOwnProperty(i)) {
                    var f = l[i];
                    "function" == typeof f && (f = f.call(r, a)), u += "/" + i + " " + f + " ", r.internal.acroformPlugin.xForms.indexOf(f) >= 0 || r.internal.acroformPlugin.xForms.push(f);
                  }
                } else "function" == typeof (f = l) && (f = f.call(r, a)), u += "/" + i + " " + f, r.internal.acroformPlugin.xForms.indexOf(f) >= 0 || r.internal.acroformPlugin.xForms.push(f);
                u += ">>";
              }
              o.push({
                key: "AP",
                value: "<<\n" + u + ">>"
              });
            }
            r.internal.putStream({
              additionalKeyValues: o,
              objectId: a.objId
            }), r.internal.out("endobj");
          }
          n && it(r.internal.acroformPlugin.xForms, r);
        }(r, e);
      }), e.internal.acroformPlugin.isInitialized = !0;
    }
  },
  ot = q.__acroform__.arrayToPdfArray = function (e, r, n) {
    var i = function (t) {
      return t;
    };
    if (Array.isArray(e)) {
      for (var a = "[", o = 0; o < e.length; o++) switch (0 !== o && (a += " "), (0, _typeof.default)(e[o])) {
        case "boolean":
        case "number":
        case "object":
          a += e[o].toString();
          break;
        case "string":
          "/" !== e[o].substr(0, 1) ? (void 0 !== r && n && (i = n.internal.getEncryptor(r)), a += "(" + R(i(e[o].toString())) + ")") : a += e[o].toString();
      }
      return a += "]";
    }
    throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray");
  };
var st = function (t, e, r) {
    var n = function (t) {
      return t;
    };
    return void 0 !== e && r && (n = r.internal.getEncryptor(e)), (t = t || "").toString(), t = "(" + R(n(t)) + ")";
  },
  ct = function () {
    this._objId = void 0, this._scope = void 0, Object.defineProperty(this, "objId", {
      get: function () {
        if (void 0 === this._objId) {
          if (void 0 === this.scope) return;
          this._objId = this.scope.internal.newObjectDeferred();
        }
        return this._objId;
      },
      set: function (t) {
        this._objId = t;
      }
    }), Object.defineProperty(this, "scope", {
      value: this._scope,
      writable: !0
    });
  };
ct.prototype.toString = function () {
  return this.objId + " 0 R";
}, ct.prototype.putStream = function () {
  var t = this.getKeyValueListForStream();
  this.scope.internal.putStream({
    data: this.stream,
    additionalKeyValues: t,
    objectId: this.objId
  }), this.scope.internal.out("endobj");
}, ct.prototype.getKeyValueListForStream = function () {
  var t = [],
    e = Object.getOwnPropertyNames(this).filter(function (t) {
      return "content" != t && "appearanceStreamContent" != t && "scope" != t && "objId" != t && "_" != t.substring(0, 1);
    });
  for (var r in e) if (!1 === Object.getOwnPropertyDescriptor(this, e[r]).configurable) {
    var n = e[r],
      i = this[n];
    i && (Array.isArray(i) ? t.push({
      key: n,
      value: ot(i, this.objId, this.scope)
    }) : i instanceof ct ? (i.scope = this.scope, t.push({
      key: n,
      value: i.objId + " 0 R"
    })) : "function" != typeof i && t.push({
      key: n,
      value: i
    }));
  }
  return t;
};
var ut = function () {
  ct.call(this), Object.defineProperty(this, "Type", {
    value: "/XObject",
    configurable: !1,
    writable: !0
  }), Object.defineProperty(this, "Subtype", {
    value: "/Form",
    configurable: !1,
    writable: !0
  }), Object.defineProperty(this, "FormType", {
    value: 1,
    configurable: !1,
    writable: !0
  });
  var t,
    e = [];
  Object.defineProperty(this, "BBox", {
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      e = t;
    }
  }), Object.defineProperty(this, "Resources", {
    value: "2 0 R",
    configurable: !1,
    writable: !0
  }), Object.defineProperty(this, "stream", {
    enumerable: !1,
    configurable: !0,
    set: function (e) {
      t = e.trim();
    },
    get: function () {
      return t || null;
    }
  });
};
H(ut, ct);
var ht = function () {
  ct.call(this);
  var t,
    e = [];
  Object.defineProperty(this, "Kids", {
    enumerable: !1,
    configurable: !0,
    get: function () {
      return e.length > 0 ? e : void 0;
    }
  }), Object.defineProperty(this, "Fields", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    }
  }), Object.defineProperty(this, "DA", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (t) {
        var e = function (t) {
          return t;
        };
        return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), "(" + R(e(t)) + ")";
      }
    },
    set: function (e) {
      t = e;
    }
  });
};
H(ht, ct);
var lt = function t() {
  ct.call(this);
  var e = 4;
  Object.defineProperty(this, "F", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute F supplied.');
      e = t;
    }
  }), Object.defineProperty(this, "showWhenPrinted", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(e, 3));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.F = K(e, 3) : this.F = Z(e, 3);
    }
  });
  var r = 0;
  Object.defineProperty(this, "Ff", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return r;
    },
    set: function (t) {
      if (isNaN(t)) throw new Error('Invalid value "' + t + '" for attribute Ff supplied.');
      r = t;
    }
  });
  var n = [];
  Object.defineProperty(this, "Rect", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (0 !== n.length) return n;
    },
    set: function (t) {
      n = void 0 !== t ? t : [];
    }
  }), Object.defineProperty(this, "x", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !n || isNaN(n[0]) ? 0 : n[0];
    },
    set: function (t) {
      n[0] = t;
    }
  }), Object.defineProperty(this, "y", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !n || isNaN(n[1]) ? 0 : n[1];
    },
    set: function (t) {
      n[1] = t;
    }
  }), Object.defineProperty(this, "width", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !n || isNaN(n[2]) ? 0 : n[2];
    },
    set: function (t) {
      n[2] = t;
    }
  }), Object.defineProperty(this, "height", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return !n || isNaN(n[3]) ? 0 : n[3];
    },
    set: function (t) {
      n[3] = t;
    }
  });
  var i = "";
  Object.defineProperty(this, "FT", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return i;
    },
    set: function (t) {
      switch (t) {
        case "/Btn":
        case "/Tx":
        case "/Ch":
        case "/Sig":
          i = t;
          break;
        default:
          throw new Error('Invalid value "' + t + '" for attribute FT supplied.');
      }
    }
  });
  var a = null;
  Object.defineProperty(this, "T", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      if (!a || a.length < 1) {
        if (this instanceof yt) return;
        a = "FieldObject" + t.FieldNum++;
      }
      var e = function (t) {
        return t;
      };
      return this.scope && (e = this.scope.internal.getEncryptor(this.objId)), "(" + R(e(a)) + ")";
    },
    set: function (t) {
      a = t.toString();
    }
  }), Object.defineProperty(this, "fieldName", {
    configurable: !0,
    enumerable: !0,
    get: function () {
      return a;
    },
    set: function (t) {
      a = t;
    }
  });
  var o = "helvetica";
  Object.defineProperty(this, "fontName", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return o;
    },
    set: function (t) {
      o = t;
    }
  });
  var s = "normal";
  Object.defineProperty(this, "fontStyle", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return s;
    },
    set: function (t) {
      s = t;
    }
  });
  var c = 0;
  Object.defineProperty(this, "fontSize", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return c;
    },
    set: function (t) {
      c = t;
    }
  });
  var u = void 0;
  Object.defineProperty(this, "maxFontSize", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return void 0 === u ? 50 / D : u;
    },
    set: function (t) {
      u = t;
    }
  });
  var h = "black";
  Object.defineProperty(this, "color", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return h;
    },
    set: function (t) {
      h = t;
    }
  });
  var l = "/F1 0 Tf 0 g";
  Object.defineProperty(this, "DA", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      if (!(!l || this instanceof yt || this instanceof Nt)) return st(l, this.objId, this.scope);
    },
    set: function (t) {
      t = t.toString(), l = t;
    }
  });
  var f = null;
  Object.defineProperty(this, "DV", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (f) return this instanceof mt == !1 ? st(f, this.objId, this.scope) : f;
    },
    set: function (t) {
      t = t.toString(), f = this instanceof mt == !1 ? "(" === t.substr(0, 1) ? T(t.substr(1, t.length - 2)) : T(t) : t;
    }
  }), Object.defineProperty(this, "defaultValue", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this instanceof mt == !0 ? T(f.substr(1, f.length - 1)) : f;
    },
    set: function (t) {
      t = t.toString(), f = this instanceof mt == !0 ? "/" + t : t;
    }
  });
  var d = null;
  Object.defineProperty(this, "_V", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (d) return d;
    },
    set: function (t) {
      this.V = t;
    }
  }), Object.defineProperty(this, "V", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      if (d) return this instanceof mt == !1 ? st(d, this.objId, this.scope) : d;
    },
    set: function (t) {
      t = t.toString(), d = this instanceof mt == !1 ? "(" === t.substr(0, 1) ? T(t.substr(1, t.length - 2)) : T(t) : t;
    }
  }), Object.defineProperty(this, "value", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this instanceof mt == !0 ? T(d.substr(1, d.length - 1)) : d;
    },
    set: function (t) {
      t = t.toString(), d = this instanceof mt == !0 ? "/" + t : t;
    }
  }), Object.defineProperty(this, "hasAnnotation", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this.Rect;
    }
  }), Object.defineProperty(this, "Type", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return this.hasAnnotation ? "/Annot" : null;
    }
  }), Object.defineProperty(this, "Subtype", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return this.hasAnnotation ? "/Widget" : null;
    }
  });
  var p,
    g = !1;
  Object.defineProperty(this, "hasAppearanceStream", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return g;
    },
    set: function (t) {
      t = Boolean(t), g = t;
    }
  }), Object.defineProperty(this, "page", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      if (p) return p;
    },
    set: function (t) {
      p = t;
    }
  }), Object.defineProperty(this, "readOnly", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 1));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 1) : this.Ff = Z(this.Ff, 1);
    }
  }), Object.defineProperty(this, "required", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 2));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 2) : this.Ff = Z(this.Ff, 2);
    }
  }), Object.defineProperty(this, "noExport", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 3));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 3) : this.Ff = Z(this.Ff, 3);
    }
  });
  var m = null;
  Object.defineProperty(this, "Q", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      if (null !== m) return m;
    },
    set: function (t) {
      if (-1 === [0, 1, 2].indexOf(t)) throw new Error('Invalid value "' + t + '" for attribute Q supplied.');
      m = t;
    }
  }), Object.defineProperty(this, "textAlign", {
    get: function () {
      var t;
      switch (m) {
        case 0:
        default:
          t = "left";
          break;
        case 1:
          t = "center";
          break;
        case 2:
          t = "right";
      }
      return t;
    },
    configurable: !0,
    enumerable: !0,
    set: function (t) {
      switch (t) {
        case "right":
        case 2:
          m = 2;
          break;
        case "center":
        case 1:
          m = 1;
          break;
        case "left":
        case 0:
        default:
          m = 0;
      }
    }
  });
};
H(lt, ct);
var ft = function () {
  lt.call(this), this.FT = "/Ch", this.V = "()", this.fontName = "zapfdingbats";
  var t = 0;
  Object.defineProperty(this, "TI", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  }), Object.defineProperty(this, "topIndex", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  });
  var e = [];
  Object.defineProperty(this, "Opt", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return ot(e, this.objId, this.scope);
    },
    set: function (t) {
      var r, n;
      n = [], "string" == typeof (r = t) && (n = function (t, e, r) {
        r || (r = 1);
        for (var n, i = []; n = e.exec(t);) i.push(n[r]);
        return i;
      }(r, /\((.*?)\)/g)), e = n;
    }
  }), this.getOptions = function () {
    return e;
  }, this.setOptions = function (t) {
    e = t, this.sort && e.sort();
  }, this.addOption = function (t) {
    t = (t = t || "").toString(), e.push(t), this.sort && e.sort();
  }, this.removeOption = function (t, r) {
    for (r = r || !1, t = (t = t || "").toString(); -1 !== e.indexOf(t) && (e.splice(e.indexOf(t), 1), !1 !== r););
  }, Object.defineProperty(this, "combo", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 18));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 18) : this.Ff = Z(this.Ff, 18);
    }
  }), Object.defineProperty(this, "edit", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 19));
    },
    set: function (t) {
      !0 === this.combo && (!0 === Boolean(t) ? this.Ff = K(this.Ff, 19) : this.Ff = Z(this.Ff, 19));
    }
  }), Object.defineProperty(this, "sort", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 20));
    },
    set: function (t) {
      !0 === Boolean(t) ? (this.Ff = K(this.Ff, 20), e.sort()) : this.Ff = Z(this.Ff, 20);
    }
  }), Object.defineProperty(this, "multiSelect", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 22));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 22) : this.Ff = Z(this.Ff, 22);
    }
  }), Object.defineProperty(this, "doNotSpellCheck", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 23));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 23) : this.Ff = Z(this.Ff, 23);
    }
  }), Object.defineProperty(this, "commitOnSelChange", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 27));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 27) : this.Ff = Z(this.Ff, 27);
    }
  }), this.hasAppearanceStream = !1;
};
exports.AcroFormChoiceField = ft;
H(ft, lt);
var dt = function () {
  ft.call(this), this.fontName = "helvetica", this.combo = !1;
};
exports.AcroFormListBox = dt;
H(dt, ft);
var pt = function () {
  dt.call(this), this.combo = !0;
};
exports.AcroFormComboBox = pt;
H(pt, dt);
var gt = function () {
  pt.call(this), this.edit = !0;
};
exports.AcroFormEditBox = gt;
H(gt, pt);
var mt = function () {
  lt.call(this), this.FT = "/Btn", Object.defineProperty(this, "noToggleToOff", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 15));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 15) : this.Ff = Z(this.Ff, 15);
    }
  }), Object.defineProperty(this, "radio", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 16));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 16) : this.Ff = Z(this.Ff, 16);
    }
  }), Object.defineProperty(this, "pushButton", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 17));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 17) : this.Ff = Z(this.Ff, 17);
    }
  }), Object.defineProperty(this, "radioIsUnison", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 26));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 26) : this.Ff = Z(this.Ff, 26);
    }
  });
  var e,
    r = {};
  Object.defineProperty(this, "MK", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      var t = function (t) {
        return t;
      };
      if (this.scope && (t = this.scope.internal.getEncryptor(this.objId)), 0 !== Object.keys(r).length) {
        var e,
          n = [];
        for (e in n.push("<<"), r) n.push("/" + e + " (" + R(t(r[e])) + ")");
        return n.push(">>"), n.join("\n");
      }
    },
    set: function (e) {
      "object" === (0, _typeof.default)(e) && (r = e);
    }
  }), Object.defineProperty(this, "caption", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return r.CA || "";
    },
    set: function (t) {
      "string" == typeof t && (r.CA = t);
    }
  }), Object.defineProperty(this, "AS", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      e = t;
    }
  }), Object.defineProperty(this, "appearanceState", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return e.substr(1, e.length - 1);
    },
    set: function (t) {
      e = "/" + t;
    }
  });
};
exports.AcroFormButton = mt;
H(mt, lt);
var vt = function () {
  mt.call(this), this.pushButton = !0;
};
exports.AcroFormPushButton = vt;
H(vt, mt);
var bt = function () {
  mt.call(this), this.radio = !0, this.pushButton = !1;
  var t = [];
  Object.defineProperty(this, "Kids", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = void 0 !== e ? e : [];
    }
  });
};
exports.AcroFormRadioButton = bt;
H(bt, mt);
var yt = function () {
  var e, r;
  lt.call(this), Object.defineProperty(this, "Parent", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return e;
    },
    set: function (t) {
      e = t;
    }
  }), Object.defineProperty(this, "optionName", {
    enumerable: !1,
    configurable: !0,
    get: function () {
      return r;
    },
    set: function (t) {
      r = t;
    }
  });
  var n,
    i = {};
  Object.defineProperty(this, "MK", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      var t = function (t) {
        return t;
      };
      this.scope && (t = this.scope.internal.getEncryptor(this.objId));
      var e,
        r = [];
      for (e in r.push("<<"), i) r.push("/" + e + " (" + R(t(i[e])) + ")");
      return r.push(">>"), r.join("\n");
    },
    set: function (e) {
      "object" === (0, _typeof.default)(e) && (i = e);
    }
  }), Object.defineProperty(this, "caption", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return i.CA || "";
    },
    set: function (t) {
      "string" == typeof t && (i.CA = t);
    }
  }), Object.defineProperty(this, "AS", {
    enumerable: !1,
    configurable: !1,
    get: function () {
      return n;
    },
    set: function (t) {
      n = t;
    }
  }), Object.defineProperty(this, "appearanceState", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return n.substr(1, n.length - 1);
    },
    set: function (t) {
      n = "/" + t;
    }
  }), this.caption = "l", this.appearanceState = "Off", this._AppearanceType = At.RadioButton.Circle, this.appearanceStreamContent = this._AppearanceType.createAppearanceStream(this.optionName);
};
H(yt, lt), bt.prototype.setAppearance = function (t) {
  if (!("createAppearanceStream" in t) || !("getCA" in t)) throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");
  for (var e in this.Kids) if (this.Kids.hasOwnProperty(e)) {
    var r = this.Kids[e];
    r.appearanceStreamContent = t.createAppearanceStream(r.optionName), r.caption = t.getCA();
  }
}, bt.prototype.createOption = function (t) {
  var e = new yt();
  return e.Parent = this, e.optionName = t, this.Kids.push(e), xt.call(this.scope, e), e;
};
var wt = function () {
  mt.call(this), this.fontName = "zapfdingbats", this.caption = "3", this.appearanceState = "On", this.value = "On", this.textAlign = "center", this.appearanceStreamContent = At.CheckBox.createAppearanceStream();
};
exports.AcroFormCheckBox = wt;
H(wt, mt);
var Nt = function () {
  lt.call(this), this.FT = "/Tx", Object.defineProperty(this, "multiline", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 13));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 13) : this.Ff = Z(this.Ff, 13);
    }
  }), Object.defineProperty(this, "fileSelect", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 21));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 21) : this.Ff = Z(this.Ff, 21);
    }
  }), Object.defineProperty(this, "doNotSpellCheck", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 23));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 23) : this.Ff = Z(this.Ff, 23);
    }
  }), Object.defineProperty(this, "doNotScroll", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 24));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 24) : this.Ff = Z(this.Ff, 24);
    }
  }), Object.defineProperty(this, "comb", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 25));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 25) : this.Ff = Z(this.Ff, 25);
    }
  }), Object.defineProperty(this, "richText", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 26));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 26) : this.Ff = Z(this.Ff, 26);
    }
  });
  var t = null;
  Object.defineProperty(this, "MaxLen", {
    enumerable: !0,
    configurable: !1,
    get: function () {
      return t;
    },
    set: function (e) {
      t = e;
    }
  }), Object.defineProperty(this, "maxLength", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return t;
    },
    set: function (e) {
      Number.isInteger(e) && (t = e);
    }
  }), Object.defineProperty(this, "hasAppearanceStream", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return this.V || this.DV;
    }
  });
};
exports.AcroFormTextField = Nt;
H(Nt, lt);
var Lt = function () {
  Nt.call(this), Object.defineProperty(this, "password", {
    enumerable: !0,
    configurable: !0,
    get: function () {
      return Boolean(X(this.Ff, 14));
    },
    set: function (t) {
      !0 === Boolean(t) ? this.Ff = K(this.Ff, 14) : this.Ff = Z(this.Ff, 14);
    }
  }), this.password = !0;
};
exports.AcroFormPasswordField = Lt;
H(Lt, Nt);
var At = {
  CheckBox: {
    createAppearanceStream: function () {
      return {
        N: {
          On: At.CheckBox.YesNormal
        },
        D: {
          On: At.CheckBox.YesPushDown,
          Off: At.CheckBox.OffPushDown
        }
      };
    },
    YesPushDown: function (t) {
      var e = V(t);
      e.scope = t.scope;
      var r = [],
        n = t.scope.internal.getFont(t.fontName, t.fontStyle).id,
        i = t.scope.__private__.encodeColorString(t.color),
        a = tt(t, t.caption);
      return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), r.push("BMC"), r.push("q"), r.push("0 0 1 rg"), r.push("/" + n + " " + U(a.fontSize) + " Tf " + i), r.push("BT"), r.push(a.text), r.push("ET"), r.push("Q"), r.push("EMC"), e.stream = r.join("\n"), e;
    },
    YesNormal: function (t) {
      var e = V(t);
      e.scope = t.scope;
      var r = t.scope.internal.getFont(t.fontName, t.fontStyle).id,
        n = t.scope.__private__.encodeColorString(t.color),
        i = [],
        a = At.internal.getHeight(t),
        o = At.internal.getWidth(t),
        s = tt(t, t.caption);
      return i.push("1 g"), i.push("0 0 " + U(o) + " " + U(a) + " re"), i.push("f"), i.push("q"), i.push("0 0 1 rg"), i.push("0 0 " + U(o - 1) + " " + U(a - 1) + " re"), i.push("W"), i.push("n"), i.push("0 g"), i.push("BT"), i.push("/" + r + " " + U(s.fontSize) + " Tf " + n), i.push(s.text), i.push("ET"), i.push("Q"), e.stream = i.join("\n"), e;
    },
    OffPushDown: function (t) {
      var e = V(t);
      e.scope = t.scope;
      var r = [];
      return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
    }
  },
  RadioButton: {
    Circle: {
      createAppearanceStream: function (t) {
        var e = {
          D: {
            Off: At.RadioButton.Circle.OffPushDown
          },
          N: {}
        };
        return e.N[t] = At.RadioButton.Circle.YesNormal, e.D[t] = At.RadioButton.Circle.YesPushDown, e;
      },
      getCA: function () {
        return "l";
      },
      YesNormal: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [],
          n = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
        n = Number((.9 * n).toFixed(5));
        var i = At.internal.Bezier_C,
          a = Number((n * i).toFixed(5));
        return r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(n + " 0 m"), r.push(n + " " + a + " " + a + " " + n + " 0 " + n + " c"), r.push("-" + a + " " + n + " -" + n + " " + a + " -" + n + " 0 c"), r.push("-" + n + " -" + a + " -" + a + " -" + n + " 0 -" + n + " c"), r.push(a + " -" + n + " " + n + " -" + a + " " + n + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
      },
      YesPushDown: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [],
          n = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
        n = Number((.9 * n).toFixed(5));
        var i = Number((2 * n).toFixed(5)),
          a = Number((i * At.internal.Bezier_C).toFixed(5)),
          o = Number((n * At.internal.Bezier_C).toFixed(5));
        return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(i + " 0 m"), r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"), r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"), r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"), r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"), r.push("f"), r.push("Q"), r.push("0 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(n + " 0 m"), r.push(n + " " + o + " " + o + " " + n + " 0 " + n + " c"), r.push("-" + o + " " + n + " -" + n + " " + o + " -" + n + " 0 c"), r.push("-" + n + " -" + o + " -" + o + " -" + n + " 0 -" + n + " c"), r.push(o + " -" + n + " " + n + " -" + o + " " + n + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
      },
      OffPushDown: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [],
          n = At.internal.getWidth(t) <= At.internal.getHeight(t) ? At.internal.getWidth(t) / 4 : At.internal.getHeight(t) / 4;
        n = Number((.9 * n).toFixed(5));
        var i = Number((2 * n).toFixed(5)),
          a = Number((i * At.internal.Bezier_C).toFixed(5));
        return r.push("0.749023 g"), r.push("q"), r.push("1 0 0 1 " + z(At.internal.getWidth(t) / 2) + " " + z(At.internal.getHeight(t) / 2) + " cm"), r.push(i + " 0 m"), r.push(i + " " + a + " " + a + " " + i + " 0 " + i + " c"), r.push("-" + a + " " + i + " -" + i + " " + a + " -" + i + " 0 c"), r.push("-" + i + " -" + a + " -" + a + " -" + i + " 0 -" + i + " c"), r.push(a + " -" + i + " " + i + " -" + a + " " + i + " 0 c"), r.push("f"), r.push("Q"), e.stream = r.join("\n"), e;
      }
    },
    Cross: {
      createAppearanceStream: function (t) {
        var e = {
          D: {
            Off: At.RadioButton.Cross.OffPushDown
          },
          N: {}
        };
        return e.N[t] = At.RadioButton.Cross.YesNormal, e.D[t] = At.RadioButton.Cross.YesPushDown, e;
      },
      getCA: function () {
        return "8";
      },
      YesNormal: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [],
          n = At.internal.calculateCross(t);
        return r.push("q"), r.push("1 1 " + U(At.internal.getWidth(t) - 2) + " " + U(At.internal.getHeight(t) - 2) + " re"), r.push("W"), r.push("n"), r.push(U(n.x1.x) + " " + U(n.x1.y) + " m"), r.push(U(n.x2.x) + " " + U(n.x2.y) + " l"), r.push(U(n.x4.x) + " " + U(n.x4.y) + " m"), r.push(U(n.x3.x) + " " + U(n.x3.y) + " l"), r.push("s"), r.push("Q"), e.stream = r.join("\n"), e;
      },
      YesPushDown: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = At.internal.calculateCross(t),
          n = [];
        return n.push("0.749023 g"), n.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), n.push("f"), n.push("q"), n.push("1 1 " + U(At.internal.getWidth(t) - 2) + " " + U(At.internal.getHeight(t) - 2) + " re"), n.push("W"), n.push("n"), n.push(U(r.x1.x) + " " + U(r.x1.y) + " m"), n.push(U(r.x2.x) + " " + U(r.x2.y) + " l"), n.push(U(r.x4.x) + " " + U(r.x4.y) + " m"), n.push(U(r.x3.x) + " " + U(r.x3.y) + " l"), n.push("s"), n.push("Q"), e.stream = n.join("\n"), e;
      },
      OffPushDown: function (t) {
        var e = V(t);
        e.scope = t.scope;
        var r = [];
        return r.push("0.749023 g"), r.push("0 0 " + U(At.internal.getWidth(t)) + " " + U(At.internal.getHeight(t)) + " re"), r.push("f"), e.stream = r.join("\n"), e;
      }
    }
  },
  createDefaultAppearanceStream: function (t) {
    var e = t.scope.internal.getFont(t.fontName, t.fontStyle).id,
      r = t.scope.__private__.encodeColorString(t.color);
    return "/" + e + " " + t.fontSize + " Tf " + r;
  }
};
exports.AcroFormAppearance = At;
At.internal = {
  Bezier_C: .551915024494,
  calculateCross: function (t) {
    var e = At.internal.getWidth(t),
      r = At.internal.getHeight(t),
      n = Math.min(e, r);
    return {
      x1: {
        x: (e - n) / 2,
        y: (r - n) / 2 + n
      },
      x2: {
        x: (e - n) / 2 + n,
        y: (r - n) / 2
      },
      x3: {
        x: (e - n) / 2,
        y: (r - n) / 2
      },
      x4: {
        x: (e - n) / 2 + n,
        y: (r - n) / 2 + n
      }
    };
  }
}, At.internal.getWidth = function (e) {
  var r = 0;
  return "object" === (0, _typeof.default)(e) && (r = W(e.Rect[2])), r;
}, At.internal.getHeight = function (e) {
  var r = 0;
  return "object" === (0, _typeof.default)(e) && (r = W(e.Rect[3])), r;
};
var xt = q.addField = function (t) {
  if (at(this, t), !(t instanceof lt)) throw new Error("Invalid argument passed to jsPDF.addField.");
  var e;
  return (e = t).scope.internal.acroformPlugin.printedOut && (e.scope.internal.acroformPlugin.printedOut = !1, e.scope.internal.acroformPlugin.acroFormDictionaryRoot = null), e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e), t.page = t.scope.internal.getCurrentPageInfo().pageNumber, this;
};
q.AcroFormChoiceField = ft, q.AcroFormListBox = dt, q.AcroFormComboBox = pt, q.AcroFormEditBox = gt, q.AcroFormButton = mt, q.AcroFormPushButton = vt, q.AcroFormRadioButton = bt, q.AcroFormCheckBox = wt, q.AcroFormTextField = Nt, q.AcroFormPasswordField = Lt, q.AcroFormAppearance = At, q.AcroForm = {
  ChoiceField: ft,
  ListBox: dt,
  ComboBox: pt,
  EditBox: gt,
  Button: mt,
  PushButton: vt,
  RadioButton: bt,
  CheckBox: wt,
  TextField: Nt,
  PasswordField: Lt,
  Appearance: At
}, E.AcroForm = {
  ChoiceField: ft,
  ListBox: dt,
  ComboBox: pt,
  EditBox: gt,
  Button: mt,
  PushButton: vt,
  RadioButton: bt,
  CheckBox: wt,
  TextField: Nt,
  PasswordField: Lt,
  Appearance: At
};
var St = E.AcroForm;
exports.AcroForm = St;
function _t(t) {
  return t.reduce(function (t, e, r) {
    return t[e] = r, t;
  }, {});
}
!function (e) {
  e.__addimage__ = {};
  var r = "UNKNOWN",
    n = {
      PNG: [[137, 80, 78, 71]],
      TIFF: [[77, 77, 0, 42], [73, 73, 42, 0]],
      JPEG: [[255, 216, 255, 224, void 0, void 0, 74, 70, 73, 70, 0], [255, 216, 255, 225, void 0, void 0, 69, 120, 105, 102, 0, 0], [255, 216, 255, 219], [255, 216, 255, 238]],
      JPEG2000: [[0, 0, 0, 12, 106, 80, 32, 32]],
      GIF87a: [[71, 73, 70, 56, 55, 97]],
      GIF89a: [[71, 73, 70, 56, 57, 97]],
      WEBP: [[82, 73, 70, 70, void 0, void 0, void 0, void 0, 87, 69, 66, 80]],
      BMP: [[66, 77], [66, 65], [67, 73], [67, 80], [73, 67], [80, 84]]
    },
    i = e.__addimage__.getImageFileTypeByImageData = function (t, e) {
      var i,
        a,
        o,
        s,
        c,
        u = r;
      if ("RGBA" === (e = e || r) || void 0 !== t.data && t.data instanceof Uint8ClampedArray && "height" in t && "width" in t) return "RGBA";
      if (x(t)) for (c in n) for (o = n[c], i = 0; i < o.length; i += 1) {
        for (s = !0, a = 0; a < o[i].length; a += 1) if (void 0 !== o[i][a] && o[i][a] !== t[a]) {
          s = !1;
          break;
        }
        if (!0 === s) {
          u = c;
          break;
        }
      } else for (c in n) for (o = n[c], i = 0; i < o.length; i += 1) {
        for (s = !0, a = 0; a < o[i].length; a += 1) if (void 0 !== o[i][a] && o[i][a] !== t.charCodeAt(a)) {
          s = !1;
          break;
        }
        if (!0 === s) {
          u = c;
          break;
        }
      }
      return u === r && e !== r && (u = e), u;
    },
    a = function t(e) {
      for (var r = this.internal.write, n = this.internal.putStream, i = (0, this.internal.getFilters)(); -1 !== i.indexOf("FlateEncode");) i.splice(i.indexOf("FlateEncode"), 1);
      e.objectId = this.internal.newObject();
      var a = [];
      if (a.push({
        key: "Type",
        value: "/XObject"
      }), a.push({
        key: "Subtype",
        value: "/Image"
      }), a.push({
        key: "Width",
        value: e.width
      }), a.push({
        key: "Height",
        value: e.height
      }), e.colorSpace === b.INDEXED ? a.push({
        key: "ColorSpace",
        value: "[/Indexed /DeviceRGB " + (e.palette.length / 3 - 1) + " " + ("sMask" in e && void 0 !== e.sMask ? e.objectId + 2 : e.objectId + 1) + " 0 R]"
      }) : (a.push({
        key: "ColorSpace",
        value: "/" + e.colorSpace
      }), e.colorSpace === b.DEVICE_CMYK && a.push({
        key: "Decode",
        value: "[1 0 1 0 1 0 1 0]"
      })), a.push({
        key: "BitsPerComponent",
        value: e.bitsPerComponent
      }), "decodeParameters" in e && void 0 !== e.decodeParameters && a.push({
        key: "DecodeParms",
        value: "<<" + e.decodeParameters + ">>"
      }), "transparency" in e && Array.isArray(e.transparency)) {
        for (var o = "", s = 0, c = e.transparency.length; s < c; s++) o += e.transparency[s] + " " + e.transparency[s] + " ";
        a.push({
          key: "Mask",
          value: "[" + o + "]"
        });
      }
      void 0 !== e.sMask && a.push({
        key: "SMask",
        value: e.objectId + 1 + " 0 R"
      });
      var u = void 0 !== e.filter ? ["/" + e.filter] : void 0;
      if (n({
        data: e.data,
        additionalKeyValues: a,
        alreadyAppliedFilters: u,
        objectId: e.objectId
      }), r("endobj"), "sMask" in e && void 0 !== e.sMask) {
        var h = "/Predictor " + e.predictor + " /Colors 1 /BitsPerComponent " + e.bitsPerComponent + " /Columns " + e.width,
          l = {
            width: e.width,
            height: e.height,
            colorSpace: "DeviceGray",
            bitsPerComponent: e.bitsPerComponent,
            decodeParameters: h,
            data: e.sMask
          };
        "filter" in e && (l.filter = e.filter), t.call(this, l);
      }
      if (e.colorSpace === b.INDEXED) {
        var f = this.internal.newObject();
        n({
          data: _(new Uint8Array(e.palette)),
          objectId: f
        }), r("endobj");
      }
    },
    o = function () {
      var t = this.internal.collections.addImage_images;
      for (var e in t) a.call(this, t[e]);
    },
    s = function () {
      var t,
        e = this.internal.collections.addImage_images,
        r = this.internal.write;
      for (var n in e) r("/I" + (t = e[n]).index, t.objectId, "0", "R");
    },
    c = function () {
      this.internal.collections.addImage_images || (this.internal.collections.addImage_images = {}, this.internal.events.subscribe("putResources", o), this.internal.events.subscribe("putXobjectDict", s));
    },
    h = function () {
      var t = this.internal.collections.addImage_images;
      return c.call(this), t;
    },
    l = function () {
      return Object.keys(this.internal.collections.addImage_images).length;
    },
    f = function (t) {
      return "function" == typeof e["process" + t.toUpperCase()];
    },
    d = function (e) {
      return "object" === (0, _typeof.default)(e) && 1 === e.nodeType;
    },
    p = function (t, r) {
      if ("IMG" === t.nodeName && t.hasAttribute("src")) {
        var n = "" + t.getAttribute("src");
        if (0 === n.indexOf("data:image/")) return u(unescape(n).split("base64,").pop());
        var i = e.loadFile(n, !0);
        if (void 0 !== i) return i;
      }
      if ("CANVAS" === t.nodeName) {
        if (0 === t.width || 0 === t.height) throw new Error("Given canvas must have data. Canvas width: " + t.width + ", height: " + t.height);
        var a;
        switch (r) {
          case "PNG":
            a = "image/png";
            break;
          case "WEBP":
            a = "image/webp";
            break;
          case "JPEG":
          case "JPG":
          default:
            a = "image/jpeg";
        }
        return u(t.toDataURL(a, 1).split("base64,").pop());
      }
    },
    g = function (t) {
      var e = this.internal.collections.addImage_images;
      if (e) for (var r in e) if (t === e[r].alias) return e[r];
    },
    m = function (t, e, r) {
      return t || e || (t = -96, e = -96), t < 0 && (t = -1 * r.width * 72 / t / this.internal.scaleFactor), e < 0 && (e = -1 * r.height * 72 / e / this.internal.scaleFactor), 0 === t && (t = e * r.width / r.height), 0 === e && (e = t * r.height / r.width), [t, e];
    },
    v = function (t, e, r, n, i, a) {
      var o = m.call(this, r, n, i),
        s = this.internal.getCoordinateString,
        c = this.internal.getVerticalCoordinateString,
        u = h.call(this);
      if (r = o[0], n = o[1], u[i.index] = i, a) {
        a *= Math.PI / 180;
        var l = Math.cos(a),
          f = Math.sin(a),
          d = function (t) {
            return t.toFixed(4);
          },
          p = [d(l), d(f), d(-1 * f), d(l), 0, 0, "cm"];
      }
      this.internal.write("q"), a ? (this.internal.write([1, "0", "0", 1, s(t), c(e + n), "cm"].join(" ")), this.internal.write(p.join(" ")), this.internal.write([s(r), "0", "0", s(n), "0", "0", "cm"].join(" "))) : this.internal.write([s(r), "0", "0", s(n), s(t), c(e + n), "cm"].join(" ")), this.isAdvancedAPI() && this.internal.write([1, 0, 0, -1, 0, 0, "cm"].join(" ")), this.internal.write("/I" + i.index + " Do"), this.internal.write("Q");
    },
    b = e.color_spaces = {
      DEVICE_RGB: "DeviceRGB",
      DEVICE_GRAY: "DeviceGray",
      DEVICE_CMYK: "DeviceCMYK",
      CAL_GREY: "CalGray",
      CAL_RGB: "CalRGB",
      LAB: "Lab",
      ICC_BASED: "ICCBased",
      INDEXED: "Indexed",
      PATTERN: "Pattern",
      SEPARATION: "Separation",
      DEVICE_N: "DeviceN"
    };
  e.decode = {
    DCT_DECODE: "DCTDecode",
    FLATE_DECODE: "FlateDecode",
    LZW_DECODE: "LZWDecode",
    JPX_DECODE: "JPXDecode",
    JBIG2_DECODE: "JBIG2Decode",
    ASCII85_DECODE: "ASCII85Decode",
    ASCII_HEX_DECODE: "ASCIIHexDecode",
    RUN_LENGTH_DECODE: "RunLengthDecode",
    CCITT_FAX_DECODE: "CCITTFaxDecode"
  };
  var y = e.image_compression = {
      NONE: "NONE",
      FAST: "FAST",
      MEDIUM: "MEDIUM",
      SLOW: "SLOW"
    },
    w = e.__addimage__.sHashCode = function (t) {
      var e,
        r,
        n = 0;
      if ("string" == typeof t) for (r = t.length, e = 0; e < r; e++) n = (n << 5) - n + t.charCodeAt(e), n |= 0;else if (x(t)) for (r = t.byteLength / 2, e = 0; e < r; e++) n = (n << 5) - n + t[e], n |= 0;
      return n;
    },
    N = e.__addimage__.validateStringAsBase64 = function (t) {
      (t = t || "").toString().trim();
      var e = !0;
      return 0 === t.length && (e = !1), t.length % 4 != 0 && (e = !1), !1 === /^[A-Za-z0-9+/]+$/.test(t.substr(0, t.length - 2)) && (e = !1), !1 === /^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2)) && (e = !1), e;
    },
    L = e.__addimage__.extractImageFromDataUrl = function (t) {
      var e = (t = t || "").split("base64,"),
        r = null;
      if (2 === e.length) {
        var n = /^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e[0]);
        Array.isArray(n) && (r = {
          mimeType: n[1],
          charset: n[2],
          data: e[1]
        });
      }
      return r;
    },
    A = e.__addimage__.supportsArrayBuffer = function () {
      return "undefined" != typeof ArrayBuffer && "undefined" != typeof Uint8Array;
    };
  e.__addimage__.isArrayBuffer = function (t) {
    return A() && t instanceof ArrayBuffer;
  };
  var x = e.__addimage__.isArrayBufferView = function (t) {
      return A() && "undefined" != typeof Uint32Array && (t instanceof Int8Array || t instanceof Uint8Array || "undefined" != typeof Uint8ClampedArray && t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array);
    },
    S = e.__addimage__.binaryStringToUint8Array = function (t) {
      for (var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++) r[n] = t.charCodeAt(n);
      return r;
    },
    _ = e.__addimage__.arrayBufferToBinaryString = function (t) {
      for (var e = "", r = x(t) ? t : new Uint8Array(t), n = 0; n < r.length; n += 8192) e += String.fromCharCode.apply(null, r.subarray(n, n + 8192));
      return e;
    };
  e.addImage = function () {
    var e, n, i, a, o, s, u, h, l;
    if ("number" == typeof arguments[1] ? (n = r, i = arguments[1], a = arguments[2], o = arguments[3], s = arguments[4], u = arguments[5], h = arguments[6], l = arguments[7]) : (n = arguments[1], i = arguments[2], a = arguments[3], o = arguments[4], s = arguments[5], u = arguments[6], h = arguments[7], l = arguments[8]), "object" === (0, _typeof.default)(e = arguments[0]) && !d(e) && "imageData" in e) {
      var f = e;
      e = f.imageData, n = f.format || n || r, i = f.x || i || 0, a = f.y || a || 0, o = f.w || f.width || o, s = f.h || f.height || s, u = f.alias || u, h = f.compression || h, l = f.rotation || f.angle || l;
    }
    var p = this.internal.getFilters();
    if (void 0 === h && -1 !== p.indexOf("FlateEncode") && (h = "SLOW"), isNaN(i) || isNaN(a)) throw new Error("Invalid coordinates passed to jsPDF.addImage");
    c.call(this);
    var g = P.call(this, e, n, u, h);
    return v.call(this, i, a, o, s, g, l), this;
  };
  var P = function (t, n, a, o) {
      var s, c, u;
      if ("string" == typeof t && i(t) === r) {
        t = unescape(t);
        var h = k(t, !1);
        ("" !== h || void 0 !== (h = e.loadFile(t, !0))) && (t = h);
      }
      if (d(t) && (t = p(t, n)), n = i(t, n), !f(n)) throw new Error("addImage does not support files of type '" + n + "', please ensure that a plugin for '" + n + "' support is added.");
      if ((null == (u = a) || 0 === u.length) && (a = function (t) {
        return "string" == typeof t || x(t) ? w(t) : x(t.data) ? w(t.data) : null;
      }(t)), (s = g.call(this, a)) || (A() && (t instanceof Uint8Array || "RGBA" === n || (c = t, t = S(t))), s = this["process" + n.toUpperCase()](t, l.call(this), a, function (t) {
        return t && "string" == typeof t && (t = t.toUpperCase()), t in e.image_compression ? t : y.NONE;
      }(o), c)), !s) throw new Error("An unknown error occurred whilst processing the image.");
      return s;
    },
    k = e.__addimage__.convertBase64ToBinaryString = function (t, e) {
      var r;
      e = "boolean" != typeof e || e;
      var n,
        i = "";
      if ("string" == typeof t) {
        n = null !== (r = L(t)) ? r.data : t;
        try {
          i = u(n);
        } catch (t) {
          if (e) throw N(n) ? new Error("atob-Error in jsPDF.convertBase64ToBinaryString " + t.message) : new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ");
        }
      }
      return i;
    };
  e.getImageProperties = function (t) {
    var n,
      a,
      o = "";
    if (d(t) && (t = p(t)), "string" == typeof t && i(t) === r && ("" === (o = k(t, !1)) && (o = e.loadFile(t) || ""), t = o), a = i(t), !f(a)) throw new Error("addImage does not support files of type '" + a + "', please ensure that a plugin for '" + a + "' support is added.");
    if (!A() || t instanceof Uint8Array || (t = S(t)), !(n = this["process" + a.toUpperCase()](t))) throw new Error("An unknown error occurred whilst processing the image");
    return n.fileType = a, n;
  };
}(E.API),
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function (t) {
    if (void 0 !== t && "" != t) return !0;
  };
  E.API.events.push(["addPage", function (t) {
    this.internal.getPageInfo(t.pageNumber).pageContext.annotations = [];
  }]), t.events.push(["putPage", function (t) {
    for (var r, n, i, a = this.internal.getCoordinateString, o = this.internal.getVerticalCoordinateString, s = this.internal.getPageInfoByObjId(t.objId), c = t.pageContext.annotations, u = !1, h = 0; h < c.length && !u; h++) switch ((r = c[h]).type) {
      case "link":
        (e(r.options.url) || e(r.options.pageNumber)) && (u = !0);
        break;
      case "reference":
      case "text":
      case "freetext":
        u = !0;
    }
    if (0 != u) {
      this.internal.write("/Annots [");
      for (var l = 0; l < c.length; l++) {
        r = c[l];
        var f = this.internal.pdfEscape,
          d = this.internal.getEncryptor(t.objId);
        switch (r.type) {
          case "reference":
            this.internal.write(" " + r.object.objId + " 0 R ");
            break;
          case "text":
            var p = this.internal.newAdditionalObject(),
              g = this.internal.newAdditionalObject(),
              m = this.internal.getEncryptor(p.objId),
              v = r.title || "Note";
            i = "<</Type /Annot /Subtype /Text " + (n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y) + "] ") + "/Contents (" + f(m(r.contents)) + ")", i += " /Popup " + g.objId + " 0 R", i += " /P " + s.objId + " 0 R", i += " /T (" + f(m(v)) + ") >>", p.content = i;
            var b = p.objId + " 0 R";
            i = "<</Type /Annot /Subtype /Popup " + (n = "/Rect [" + a(r.bounds.x + 30) + " " + o(r.bounds.y + r.bounds.h) + " " + a(r.bounds.x + r.bounds.w + 30) + " " + o(r.bounds.y) + "] ") + " /Parent " + b, r.open && (i += " /Open true"), i += " >>", g.content = i, this.internal.write(p.objId, "0 R", g.objId, "0 R");
            break;
          case "freetext":
            n = "/Rect [" + a(r.bounds.x) + " " + o(r.bounds.y) + " " + a(r.bounds.x + r.bounds.w) + " " + o(r.bounds.y + r.bounds.h) + "] ";
            var y = r.color || "#000000";
            i = "<</Type /Annot /Subtype /FreeText " + n + "/Contents (" + f(d(r.contents)) + ")", i += " /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#" + y + ")", i += " /Border [0 0 0]", i += " >>", this.internal.write(i);
            break;
          case "link":
            if (r.options.name) {
              var w = this.annotations._nameMap[r.options.name];
              r.options.pageNumber = w.page, r.options.top = w.y;
            } else r.options.top || (r.options.top = 0);
            if (n = "/Rect [" + r.finalBounds.x + " " + r.finalBounds.y + " " + r.finalBounds.w + " " + r.finalBounds.h + "] ", i = "", r.options.url) i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /A <</S /URI /URI (" + f(d(r.options.url)) + ") >>";else if (r.options.pageNumber) {
              switch (i = "<</Type /Annot /Subtype /Link " + n + "/Border [0 0 0] /Dest [" + this.internal.getPageInfo(r.options.pageNumber).objId + " 0 R", r.options.magFactor = r.options.magFactor || "XYZ", r.options.magFactor) {
                case "Fit":
                  i += " /Fit]";
                  break;
                case "FitH":
                  i += " /FitH " + r.options.top + "]";
                  break;
                case "FitV":
                  r.options.left = r.options.left || 0, i += " /FitV " + r.options.left + "]";
                  break;
                case "XYZ":
                default:
                  var N = o(r.options.top);
                  r.options.left = r.options.left || 0, void 0 === r.options.zoom && (r.options.zoom = 0), i += " /XYZ " + r.options.left + " " + N + " " + r.options.zoom + "]";
              }
            }
            "" != i && (i += " >>", this.internal.write(i));
        }
      }
      this.internal.write("]");
    }
  }]), t.createAnnotation = function (t) {
    var e = this.internal.getCurrentPageInfo();
    switch (t.type) {
      case "link":
        this.link(t.bounds.x, t.bounds.y, t.bounds.w, t.bounds.h, t);
        break;
      case "text":
      case "freetext":
        e.pageContext.annotations.push(t);
    }
  }, t.link = function (t, e, r, n, i) {
    var a = this.internal.getCurrentPageInfo(),
      o = this.internal.getCoordinateString,
      s = this.internal.getVerticalCoordinateString;
    a.pageContext.annotations.push({
      finalBounds: {
        x: o(t),
        y: s(e),
        w: o(t + r),
        h: s(e + n)
      },
      options: i,
      type: "link"
    });
  }, t.textWithLink = function (t, e, r, n) {
    var i,
      a,
      o = this.getTextWidth(t),
      s = this.internal.getLineHeight() / this.internal.scaleFactor;
    if (void 0 !== n.maxWidth) {
      a = n.maxWidth;
      var c = this.splitTextToSize(t, a).length;
      i = Math.ceil(s * c);
    } else a = o, i = s;
    return this.text(t, e, r, n), r += .2 * s, "center" === n.align && (e -= o / 2), "right" === n.align && (e -= o), this.link(e, r - s, a, i, n), o;
  }, t.getTextWidth = function (t) {
    var e = this.internal.getFontSize();
    return this.getStringUnitWidth(t) * e / this.internal.scaleFactor;
  };
}(E.API),
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = {
      1569: [65152],
      1570: [65153, 65154],
      1571: [65155, 65156],
      1572: [65157, 65158],
      1573: [65159, 65160],
      1574: [65161, 65162, 65163, 65164],
      1575: [65165, 65166],
      1576: [65167, 65168, 65169, 65170],
      1577: [65171, 65172],
      1578: [65173, 65174, 65175, 65176],
      1579: [65177, 65178, 65179, 65180],
      1580: [65181, 65182, 65183, 65184],
      1581: [65185, 65186, 65187, 65188],
      1582: [65189, 65190, 65191, 65192],
      1583: [65193, 65194],
      1584: [65195, 65196],
      1585: [65197, 65198],
      1586: [65199, 65200],
      1587: [65201, 65202, 65203, 65204],
      1588: [65205, 65206, 65207, 65208],
      1589: [65209, 65210, 65211, 65212],
      1590: [65213, 65214, 65215, 65216],
      1591: [65217, 65218, 65219, 65220],
      1592: [65221, 65222, 65223, 65224],
      1593: [65225, 65226, 65227, 65228],
      1594: [65229, 65230, 65231, 65232],
      1601: [65233, 65234, 65235, 65236],
      1602: [65237, 65238, 65239, 65240],
      1603: [65241, 65242, 65243, 65244],
      1604: [65245, 65246, 65247, 65248],
      1605: [65249, 65250, 65251, 65252],
      1606: [65253, 65254, 65255, 65256],
      1607: [65257, 65258, 65259, 65260],
      1608: [65261, 65262],
      1609: [65263, 65264, 64488, 64489],
      1610: [65265, 65266, 65267, 65268],
      1649: [64336, 64337],
      1655: [64477],
      1657: [64358, 64359, 64360, 64361],
      1658: [64350, 64351, 64352, 64353],
      1659: [64338, 64339, 64340, 64341],
      1662: [64342, 64343, 64344, 64345],
      1663: [64354, 64355, 64356, 64357],
      1664: [64346, 64347, 64348, 64349],
      1667: [64374, 64375, 64376, 64377],
      1668: [64370, 64371, 64372, 64373],
      1670: [64378, 64379, 64380, 64381],
      1671: [64382, 64383, 64384, 64385],
      1672: [64392, 64393],
      1676: [64388, 64389],
      1677: [64386, 64387],
      1678: [64390, 64391],
      1681: [64396, 64397],
      1688: [64394, 64395],
      1700: [64362, 64363, 64364, 64365],
      1702: [64366, 64367, 64368, 64369],
      1705: [64398, 64399, 64400, 64401],
      1709: [64467, 64468, 64469, 64470],
      1711: [64402, 64403, 64404, 64405],
      1713: [64410, 64411, 64412, 64413],
      1715: [64406, 64407, 64408, 64409],
      1722: [64414, 64415],
      1723: [64416, 64417, 64418, 64419],
      1726: [64426, 64427, 64428, 64429],
      1728: [64420, 64421],
      1729: [64422, 64423, 64424, 64425],
      1733: [64480, 64481],
      1734: [64473, 64474],
      1735: [64471, 64472],
      1736: [64475, 64476],
      1737: [64482, 64483],
      1739: [64478, 64479],
      1740: [64508, 64509, 64510, 64511],
      1744: [64484, 64485, 64486, 64487],
      1746: [64430, 64431],
      1747: [64432, 64433]
    },
    r = {
      65247: {
        65154: 65269,
        65156: 65271,
        65160: 65273,
        65166: 65275
      },
      65248: {
        65154: 65270,
        65156: 65272,
        65160: 65274,
        65166: 65276
      },
      65165: {
        65247: {
          65248: {
            65258: 65010
          }
        }
      },
      1617: {
        1612: 64606,
        1613: 64607,
        1614: 64608,
        1615: 64609,
        1616: 64610
      }
    },
    n = {
      1612: 64606,
      1613: 64607,
      1614: 64608,
      1615: 64609,
      1616: 64610
    },
    i = [1570, 1571, 1573, 1575];
  t.__arabicParser__ = {};
  var a = t.__arabicParser__.isInArabicSubstitutionA = function (t) {
      return void 0 !== e[t.charCodeAt(0)];
    },
    o = t.__arabicParser__.isArabicLetter = function (t) {
      return "string" == typeof t && /^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t);
    },
    s = t.__arabicParser__.isArabicEndLetter = function (t) {
      return o(t) && a(t) && e[t.charCodeAt(0)].length <= 2;
    },
    c = t.__arabicParser__.isArabicAlfLetter = function (t) {
      return o(t) && i.indexOf(t.charCodeAt(0)) >= 0;
    };
  t.__arabicParser__.arabicLetterHasIsolatedForm = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length >= 1;
  };
  var u = t.__arabicParser__.arabicLetterHasFinalForm = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length >= 2;
  };
  t.__arabicParser__.arabicLetterHasInitialForm = function (t) {
    return o(t) && a(t) && e[t.charCodeAt(0)].length >= 3;
  };
  var h = t.__arabicParser__.arabicLetterHasMedialForm = function (t) {
      return o(t) && a(t) && 4 == e[t.charCodeAt(0)].length;
    },
    l = t.__arabicParser__.resolveLigatures = function (t) {
      var e = 0,
        n = r,
        i = "",
        a = 0;
      for (e = 0; e < t.length; e += 1) void 0 !== n[t.charCodeAt(e)] ? (a++, "number" == typeof (n = n[t.charCodeAt(e)]) && (i += String.fromCharCode(n), n = r, a = 0), e === t.length - 1 && (n = r, i += t.charAt(e - (a - 1)), e -= a - 1, a = 0)) : (n = r, i += t.charAt(e - a), e -= a, a = 0);
      return i;
    };
  t.__arabicParser__.isArabicDiacritic = function (t) {
    return void 0 !== t && void 0 !== n[t.charCodeAt(0)];
  };
  var f = t.__arabicParser__.getCorrectForm = function (t, e, r) {
      return o(t) ? !1 === a(t) ? -1 : !u(t) || !o(e) && !o(r) || !o(r) && s(e) || s(t) && !o(e) || s(t) && c(e) || s(t) && s(e) ? 0 : h(t) && o(e) && !s(e) && o(r) && u(r) ? 3 : s(t) || !o(r) ? 1 : 2 : -1;
    },
    d = function (t) {
      var r = 0,
        n = 0,
        i = 0,
        a = "",
        s = "",
        c = "",
        u = (t = t || "").split("\\s+"),
        h = [];
      for (r = 0; r < u.length; r += 1) {
        for (h.push(""), n = 0; n < u[r].length; n += 1) a = u[r][n], s = u[r][n - 1], c = u[r][n + 1], o(a) ? (i = f(a, s, c), h[r] += -1 !== i ? String.fromCharCode(e[a.charCodeAt(0)][i]) : a) : h[r] += a;
        h[r] = l(h[r]);
      }
      return h.join(" ");
    },
    p = t.__arabicParser__.processArabic = t.processArabic = function () {
      var t,
        e = "string" == typeof arguments[0] ? arguments[0] : arguments[0].text,
        r = [];
      if (Array.isArray(e)) {
        var n = 0;
        for (r = [], n = 0; n < e.length; n += 1) Array.isArray(e[n]) ? r.push([d(e[n][0]), e[n][1], e[n][2]]) : r.push([d(e[n])]);
        t = r;
      } else t = d(e);
      return "string" == typeof arguments[0] ? t : (arguments[0].text = t, arguments[0]);
    };
  t.events.push(["preProcessText", p]);
}(E.API), E.API.autoPrint = function (t) {
  var e;
  switch ((t = t || {}).variant = t.variant || "non-conform", t.variant) {
    case "javascript":
      this.addJS("print({});");
      break;
    case "non-conform":
    default:
      this.internal.events.subscribe("postPutResources", function () {
        e = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /Named"), this.internal.out("/Type /Action"), this.internal.out("/N /Print"), this.internal.out(">>"), this.internal.out("endobj");
      }), this.internal.events.subscribe("putCatalog", function () {
        this.internal.out("/OpenAction " + e + " 0 R");
      });
  }
  return this;
},
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function () {
    var t = void 0;
    Object.defineProperty(this, "pdf", {
      get: function () {
        return t;
      },
      set: function (e) {
        t = e;
      }
    });
    var e = 150;
    Object.defineProperty(this, "width", {
      get: function () {
        return e;
      },
      set: function (t) {
        e = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 150 : t, this.getContext("2d").pageWrapXEnabled && (this.getContext("2d").pageWrapX = e + 1);
      }
    });
    var r = 300;
    Object.defineProperty(this, "height", {
      get: function () {
        return r;
      },
      set: function (t) {
        r = isNaN(t) || !1 === Number.isInteger(t) || t < 0 ? 300 : t, this.getContext("2d").pageWrapYEnabled && (this.getContext("2d").pageWrapY = r + 1);
      }
    });
    var n = [];
    Object.defineProperty(this, "childNodes", {
      get: function () {
        return n;
      },
      set: function (t) {
        n = t;
      }
    });
    var i = {};
    Object.defineProperty(this, "style", {
      get: function () {
        return i;
      },
      set: function (t) {
        i = t;
      }
    }), Object.defineProperty(this, "parentNode", {});
  };
  e.prototype.getContext = function (t, e) {
    var r;
    if ("2d" !== (t = t || "2d")) return null;
    for (r in e) this.pdf.context2d.hasOwnProperty(r) && (this.pdf.context2d[r] = e[r]);
    return this.pdf.context2d._canvas = this, this.pdf.context2d;
  }, e.prototype.toDataURL = function () {
    throw new Error("toDataURL is not implemented.");
  }, t.events.push(["initialized", function () {
    this.canvas = new e(), this.canvas.pdf = this;
  }]);
}(E.API), function (e) {
  var r = {
      left: 0,
      top: 0,
      bottom: 0,
      right: 0
    },
    n = !1,
    i = function () {
      void 0 === this.internal.__cell__ && (this.internal.__cell__ = {}, this.internal.__cell__.padding = 3, this.internal.__cell__.headerFunction = void 0, this.internal.__cell__.margins = Object.assign({}, r), this.internal.__cell__.margins.width = this.getPageWidth(), a.call(this));
    },
    a = function () {
      this.internal.__cell__.lastCell = new o(), this.internal.__cell__.pages = 1;
    },
    o = function () {
      var t = arguments[0];
      Object.defineProperty(this, "x", {
        enumerable: !0,
        get: function () {
          return t;
        },
        set: function (e) {
          t = e;
        }
      });
      var e = arguments[1];
      Object.defineProperty(this, "y", {
        enumerable: !0,
        get: function () {
          return e;
        },
        set: function (t) {
          e = t;
        }
      });
      var r = arguments[2];
      Object.defineProperty(this, "width", {
        enumerable: !0,
        get: function () {
          return r;
        },
        set: function (t) {
          r = t;
        }
      });
      var n = arguments[3];
      Object.defineProperty(this, "height", {
        enumerable: !0,
        get: function () {
          return n;
        },
        set: function (t) {
          n = t;
        }
      });
      var i = arguments[4];
      Object.defineProperty(this, "text", {
        enumerable: !0,
        get: function () {
          return i;
        },
        set: function (t) {
          i = t;
        }
      });
      var a = arguments[5];
      Object.defineProperty(this, "lineNumber", {
        enumerable: !0,
        get: function () {
          return a;
        },
        set: function (t) {
          a = t;
        }
      });
      var o = arguments[6];
      return Object.defineProperty(this, "align", {
        enumerable: !0,
        get: function () {
          return o;
        },
        set: function (t) {
          o = t;
        }
      }), this;
    };
  o.prototype.clone = function () {
    return new o(this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align);
  }, o.prototype.toArray = function () {
    return [this.x, this.y, this.width, this.height, this.text, this.lineNumber, this.align];
  }, e.setHeaderFunction = function (t) {
    return i.call(this), this.internal.__cell__.headerFunction = "function" == typeof t ? t : void 0, this;
  }, e.getTextDimensions = function (t, e) {
    i.call(this);
    var r = (e = e || {}).fontSize || this.getFontSize(),
      n = e.font || this.getFont(),
      a = e.scaleFactor || this.internal.scaleFactor,
      o = 0,
      s = 0,
      c = 0,
      u = this;
    if (!Array.isArray(t) && "string" != typeof t) {
      if ("number" != typeof t) throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");
      t = String(t);
    }
    var h = e.maxWidth;
    h > 0 ? "string" == typeof t ? t = this.splitTextToSize(t, h) : "[object Array]" === Object.prototype.toString.call(t) && (t = t.reduce(function (t, e) {
      return t.concat(u.splitTextToSize(e, h));
    }, [])) : t = Array.isArray(t) ? t : [t];
    for (var l = 0; l < t.length; l++) o < (c = this.getStringUnitWidth(t[l], {
      font: n
    }) * r) && (o = c);
    return 0 !== o && (s = t.length), {
      w: o /= a,
      h: Math.max((s * r * this.getLineHeightFactor() - r * (this.getLineHeightFactor() - 1)) / a, 0)
    };
  }, e.cellAddPage = function () {
    i.call(this), this.addPage();
    var t = this.internal.__cell__.margins || r;
    return this.internal.__cell__.lastCell = new o(t.left, t.top, void 0, void 0), this.internal.__cell__.pages += 1, this;
  };
  var s = e.cell = function () {
    var t;
    t = arguments[0] instanceof o ? arguments[0] : new o(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]), i.call(this);
    var e = this.internal.__cell__.lastCell,
      a = this.internal.__cell__.padding,
      s = this.internal.__cell__.margins || r,
      c = this.internal.__cell__.tableHeaderRow,
      u = this.internal.__cell__.printHeaders;
    return void 0 !== e.lineNumber && (e.lineNumber === t.lineNumber ? (t.x = (e.x || 0) + (e.width || 0), t.y = e.y || 0) : e.y + e.height + t.height + s.bottom > this.getPageHeight() ? (this.cellAddPage(), t.y = s.top, u && c && (this.printHeaderRow(t.lineNumber, !0), t.y += c[0].height)) : t.y = e.y + e.height || t.y), void 0 !== t.text[0] && (this.rect(t.x, t.y, t.width, t.height, !0 === n ? "FD" : void 0), "right" === t.align ? this.text(t.text, t.x + t.width - a, t.y + a, {
      align: "right",
      baseline: "top"
    }) : "center" === t.align ? this.text(t.text, t.x + t.width / 2, t.y + a, {
      align: "center",
      baseline: "top",
      maxWidth: t.width - a - a
    }) : this.text(t.text, t.x + a, t.y + a, {
      align: "left",
      baseline: "top",
      maxWidth: t.width - a - a
    })), this.internal.__cell__.lastCell = t, this;
  };
  e.table = function (e, n, u, h, l) {
    if (i.call(this), !u) throw new Error("No data for PDF table.");
    var f,
      d,
      p,
      g,
      m = [],
      v = [],
      b = [],
      y = {},
      w = {},
      N = [],
      L = [],
      A = (l = l || {}).autoSize || !1,
      x = !1 !== l.printHeaders,
      S = l.css && void 0 !== l.css["font-size"] ? 16 * l.css["font-size"] : l.fontSize || 12,
      _ = l.margins || Object.assign({
        width: this.getPageWidth()
      }, r),
      P = "number" == typeof l.padding ? l.padding : 3,
      k = l.headerBackgroundColor || "#c8c8c8",
      I = l.headerTextColor || "#000";
    if (a.call(this), this.internal.__cell__.printHeaders = x, this.internal.__cell__.margins = _, this.internal.__cell__.table_font_size = S, this.internal.__cell__.padding = P, this.internal.__cell__.headerBackgroundColor = k, this.internal.__cell__.headerTextColor = I, this.setFontSize(S), null == h) v = m = Object.keys(u[0]), b = m.map(function () {
      return "left";
    });else if (Array.isArray(h) && "object" === (0, _typeof.default)(h[0])) for (m = h.map(function (t) {
      return t.name;
    }), v = h.map(function (t) {
      return t.prompt || t.name || "";
    }), b = h.map(function (t) {
      return t.align || "left";
    }), f = 0; f < h.length; f += 1) w[h[f].name] = h[f].width * (19.049976 / 25.4);else Array.isArray(h) && "string" == typeof h[0] && (v = m = h, b = m.map(function () {
      return "left";
    }));
    if (A || Array.isArray(h) && "string" == typeof h[0]) for (f = 0; f < m.length; f += 1) {
      for (y[g = m[f]] = u.map(function (t) {
        return t[g];
      }), this.setFont(void 0, "bold"), N.push(this.getTextDimensions(v[f], {
        fontSize: this.internal.__cell__.table_font_size,
        scaleFactor: this.internal.scaleFactor
      }).w), d = y[g], this.setFont(void 0, "normal"), p = 0; p < d.length; p += 1) N.push(this.getTextDimensions(d[p], {
        fontSize: this.internal.__cell__.table_font_size,
        scaleFactor: this.internal.scaleFactor
      }).w);
      w[g] = Math.max.apply(null, N) + P + P, N = [];
    }
    if (x) {
      var F = {};
      for (f = 0; f < m.length; f += 1) F[m[f]] = {}, F[m[f]].text = v[f], F[m[f]].align = b[f];
      var C = c.call(this, F, w);
      L = m.map(function (t) {
        return new o(e, n, w[t], C, F[t].text, void 0, F[t].align);
      }), this.setTableHeaderRow(L), this.printHeaderRow(1, !1);
    }
    var j = h.reduce(function (t, e) {
      return t[e.name] = e.align, t;
    }, {});
    for (f = 0; f < u.length; f += 1) {
      "rowStart" in l && l.rowStart instanceof Function && l.rowStart({
        row: f,
        data: u[f]
      }, this);
      var O = c.call(this, u[f], w);
      for (p = 0; p < m.length; p += 1) {
        var B = u[f][m[p]];
        "cellStart" in l && l.cellStart instanceof Function && l.cellStart({
          row: f,
          col: p,
          data: B
        }, this), s.call(this, new o(e, n, w[m[p]], O, B, f + 2, j[m[p]]));
      }
    }
    return this.internal.__cell__.table_x = e, this.internal.__cell__.table_y = n, this;
  };
  var c = function (t, e) {
    var r = this.internal.__cell__.padding,
      n = this.internal.__cell__.table_font_size,
      i = this.internal.scaleFactor;
    return Object.keys(t).map(function (n) {
      var i = t[n];
      return this.splitTextToSize(i.hasOwnProperty("text") ? i.text : i, e[n] - r - r);
    }, this).map(function (t) {
      return this.getLineHeightFactor() * t.length * n / i + r + r;
    }, this).reduce(function (t, e) {
      return Math.max(t, e);
    }, 0);
  };
  e.setTableHeaderRow = function (t) {
    i.call(this), this.internal.__cell__.tableHeaderRow = t;
  }, e.printHeaderRow = function (t, e) {
    if (i.call(this), !this.internal.__cell__.tableHeaderRow) throw new Error("Property tableHeaderRow does not exist.");
    var r;
    if (n = !0, "function" == typeof this.internal.__cell__.headerFunction) {
      var a = this.internal.__cell__.headerFunction(this, this.internal.__cell__.pages);
      this.internal.__cell__.lastCell = new o(a[0], a[1], a[2], a[3], void 0, -1);
    }
    this.setFont(void 0, "bold");
    for (var c = [], u = 0; u < this.internal.__cell__.tableHeaderRow.length; u += 1) {
      r = this.internal.__cell__.tableHeaderRow[u].clone(), e && (r.y = this.internal.__cell__.margins.top || 0, c.push(r)), r.lineNumber = t;
      var h = this.getTextColor();
      this.setTextColor(this.internal.__cell__.headerTextColor), this.setFillColor(this.internal.__cell__.headerBackgroundColor), s.call(this, r), this.setTextColor(h);
    }
    c.length > 0 && this.setTableHeaderRow(c), this.setFont(void 0, "normal"), n = !1;
  };
}(E.API);
var Pt = {
    italic: ["italic", "oblique", "normal"],
    oblique: ["oblique", "italic", "normal"],
    normal: ["normal", "oblique", "italic"]
  },
  kt = ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded"],
  It = _t(kt),
  Ft = [100, 200, 300, 400, 500, 600, 700, 800, 900],
  Ct = _t(Ft);
function jt(t) {
  var e = t.family.replace(/"|'/g, "").toLowerCase(),
    r = function (t) {
      return Pt[t = t || "normal"] ? t : "normal";
    }(t.style),
    n = function (t) {
      if (!t) return 400;
      if ("number" == typeof t) return t >= 100 && t <= 900 && t % 100 == 0 ? t : 400;
      if (/^\d00$/.test(t)) return parseInt(t);
      switch (t) {
        case "bold":
          return 700;
        case "normal":
        default:
          return 400;
      }
    }(t.weight),
    i = function (t) {
      return "number" == typeof It[t = t || "normal"] ? t : "normal";
    }(t.stretch);
  return {
    family: e,
    style: r,
    weight: n,
    stretch: i,
    src: t.src || [],
    ref: t.ref || {
      name: e,
      style: [i, r, n].join(" ")
    }
  };
}
function Ot(t, e, r, n) {
  var i;
  for (i = r; i >= 0 && i < e.length; i += n) if (t[e[i]]) return t[e[i]];
  for (i = r; i >= 0 && i < e.length; i -= n) if (t[e[i]]) return t[e[i]];
}
var Bt = {
    "sans-serif": "helvetica",
    fixed: "courier",
    monospace: "courier",
    terminal: "courier",
    cursive: "times",
    fantasy: "times",
    serif: "times"
  },
  Mt = {
    caption: "times",
    icon: "times",
    menu: "times",
    "message-box": "times",
    "small-caption": "times",
    "status-bar": "times"
  };
function Et(t) {
  return [t.stretch, t.style, t.weight, t.family].join(" ");
}
function qt(t, e, r) {
  for (var n = (r = r || {}).defaultFontFamily || "times", i = Object.assign({}, Bt, r.genericFontFamilies || {}), a = null, o = null, s = 0; s < e.length; ++s) if (i[(a = jt(e[s])).family] && (a.family = i[a.family]), t.hasOwnProperty(a.family)) {
    o = t[a.family];
    break;
  }
  if (!(o = o || t[n])) throw new Error("Could not find a font-family for the rule '" + Et(a) + "' and default family '" + n + "'.");
  if (o = function (t, e) {
    if (e[t]) return e[t];
    var r = It[t],
      n = r <= It.normal ? -1 : 1,
      i = Ot(e, kt, r, n);
    if (!i) throw new Error("Could not find a matching font-stretch value for " + t);
    return i;
  }(a.stretch, o), o = function (t, e) {
    if (e[t]) return e[t];
    for (var r = Pt[t], n = 0; n < r.length; ++n) if (e[r[n]]) return e[r[n]];
    throw new Error("Could not find a matching font-style for " + t);
  }(a.style, o), !(o = function (t, e) {
    if (e[t]) return e[t];
    if (400 === t && e[500]) return e[500];
    if (500 === t && e[400]) return e[400];
    var r = Ct[t],
      n = Ot(e, Ft, r, t < 400 ? -1 : 1);
    if (!n) throw new Error("Could not find a matching font-weight for value " + t);
    return n;
  }(a.weight, o))) throw new Error("Failed to resolve a font for the rule '" + Et(a) + "'.");
  return o;
}
function Dt(t) {
  return t.trimLeft();
}
function Rt(t, e) {
  for (var r = 0; r < t.length;) {
    if (t.charAt(r) === e) return [t.substring(0, r), t.substring(r + 1)];
    r += 1;
  }
  return null;
}
function Tt(t) {
  var e = t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);
  return null === e ? null : [e[0], t.substring(e[0].length)];
}
var Ut,
  zt,
  Ht,
  Wt = ["times"];
!function (e) {
  var r,
    n,
    i,
    o,
    s,
    c,
    u,
    h,
    l,
    d = function (t) {
      return t = t || {}, this.isStrokeTransparent = t.isStrokeTransparent || !1, this.strokeOpacity = t.strokeOpacity || 1, this.strokeStyle = t.strokeStyle || "#000000", this.fillStyle = t.fillStyle || "#000000", this.isFillTransparent = t.isFillTransparent || !1, this.fillOpacity = t.fillOpacity || 1, this.font = t.font || "10px sans-serif", this.textBaseline = t.textBaseline || "alphabetic", this.textAlign = t.textAlign || "left", this.lineWidth = t.lineWidth || 1, this.lineJoin = t.lineJoin || "miter", this.lineCap = t.lineCap || "butt", this.path = t.path || [], this.transform = void 0 !== t.transform ? t.transform.clone() : new h(), this.globalCompositeOperation = t.globalCompositeOperation || "normal", this.globalAlpha = t.globalAlpha || 1, this.clip_path = t.clip_path || [], this.currentPoint = t.currentPoint || new c(), this.miterLimit = t.miterLimit || 10, this.lastPoint = t.lastPoint || new c(), this.lineDashOffset = t.lineDashOffset || 0, this.lineDash = t.lineDash || [], this.margin = t.margin || [0, 0, 0, 0], this.prevPageLastElemOffset = t.prevPageLastElemOffset || 0, this.ignoreClearRect = "boolean" != typeof t.ignoreClearRect || t.ignoreClearRect, this;
    };
  e.events.push(["initialized", function () {
    this.context2d = new p(this), r = this.internal.f2, n = this.internal.getCoordinateString, i = this.internal.getVerticalCoordinateString, o = this.internal.getHorizontalCoordinate, s = this.internal.getVerticalCoordinate, c = this.internal.Point, u = this.internal.Rectangle, h = this.internal.Matrix, l = new d();
  }]);
  var p = function (t) {
    Object.defineProperty(this, "canvas", {
      get: function () {
        return {
          parentNode: !1,
          style: !1
        };
      }
    });
    var e = t;
    Object.defineProperty(this, "pdf", {
      get: function () {
        return e;
      }
    });
    var r = !1;
    Object.defineProperty(this, "pageWrapXEnabled", {
      get: function () {
        return r;
      },
      set: function (t) {
        r = Boolean(t);
      }
    });
    var n = !1;
    Object.defineProperty(this, "pageWrapYEnabled", {
      get: function () {
        return n;
      },
      set: function (t) {
        n = Boolean(t);
      }
    });
    var i = 0;
    Object.defineProperty(this, "posX", {
      get: function () {
        return i;
      },
      set: function (t) {
        isNaN(t) || (i = t);
      }
    });
    var a = 0;
    Object.defineProperty(this, "posY", {
      get: function () {
        return a;
      },
      set: function (t) {
        isNaN(t) || (a = t);
      }
    }), Object.defineProperty(this, "margin", {
      get: function () {
        return l.margin;
      },
      set: function (t) {
        var e;
        "number" == typeof t ? e = [t, t, t, t] : ((e = new Array(4))[0] = t[0], e[1] = t.length >= 2 ? t[1] : e[0], e[2] = t.length >= 3 ? t[2] : e[0], e[3] = t.length >= 4 ? t[3] : e[1]), l.margin = e;
      }
    });
    var o = !1;
    Object.defineProperty(this, "autoPaging", {
      get: function () {
        return o;
      },
      set: function (t) {
        o = t;
      }
    });
    var s = 0;
    Object.defineProperty(this, "lastBreak", {
      get: function () {
        return s;
      },
      set: function (t) {
        s = t;
      }
    });
    var c = [];
    Object.defineProperty(this, "pageBreaks", {
      get: function () {
        return c;
      },
      set: function (t) {
        c = t;
      }
    }), Object.defineProperty(this, "ctx", {
      get: function () {
        return l;
      },
      set: function (t) {
        t instanceof d && (l = t);
      }
    }), Object.defineProperty(this, "path", {
      get: function () {
        return l.path;
      },
      set: function (t) {
        l.path = t;
      }
    });
    var u = [];
    Object.defineProperty(this, "ctxStack", {
      get: function () {
        return u;
      },
      set: function (t) {
        u = t;
      }
    }), Object.defineProperty(this, "fillStyle", {
      get: function () {
        return this.ctx.fillStyle;
      },
      set: function (t) {
        var e;
        e = g(t), this.ctx.fillStyle = e.style, this.ctx.isFillTransparent = 0 === e.a, this.ctx.fillOpacity = e.a, this.pdf.setFillColor(e.r, e.g, e.b, {
          a: e.a
        }), this.pdf.setTextColor(e.r, e.g, e.b, {
          a: e.a
        });
      }
    }), Object.defineProperty(this, "strokeStyle", {
      get: function () {
        return this.ctx.strokeStyle;
      },
      set: function (t) {
        var e = g(t);
        this.ctx.strokeStyle = e.style, this.ctx.isStrokeTransparent = 0 === e.a, this.ctx.strokeOpacity = e.a, 0 === e.a ? this.pdf.setDrawColor(255, 255, 255) : (e.a, this.pdf.setDrawColor(e.r, e.g, e.b));
      }
    }), Object.defineProperty(this, "lineCap", {
      get: function () {
        return this.ctx.lineCap;
      },
      set: function (t) {
        -1 !== ["butt", "round", "square"].indexOf(t) && (this.ctx.lineCap = t, this.pdf.setLineCap(t));
      }
    }), Object.defineProperty(this, "lineWidth", {
      get: function () {
        return this.ctx.lineWidth;
      },
      set: function (t) {
        isNaN(t) || (this.ctx.lineWidth = t, this.pdf.setLineWidth(t));
      }
    }), Object.defineProperty(this, "lineJoin", {
      get: function () {
        return this.ctx.lineJoin;
      },
      set: function (t) {
        -1 !== ["bevel", "round", "miter"].indexOf(t) && (this.ctx.lineJoin = t, this.pdf.setLineJoin(t));
      }
    }), Object.defineProperty(this, "miterLimit", {
      get: function () {
        return this.ctx.miterLimit;
      },
      set: function (t) {
        isNaN(t) || (this.ctx.miterLimit = t, this.pdf.setMiterLimit(t));
      }
    }), Object.defineProperty(this, "textBaseline", {
      get: function () {
        return this.ctx.textBaseline;
      },
      set: function (t) {
        this.ctx.textBaseline = t;
      }
    }), Object.defineProperty(this, "textAlign", {
      get: function () {
        return this.ctx.textAlign;
      },
      set: function (t) {
        -1 !== ["right", "end", "center", "left", "start"].indexOf(t) && (this.ctx.textAlign = t);
      }
    });
    var h = null;
    function f(t, e) {
      if (null === h) {
        var r = function (t) {
          var e = [];
          return Object.keys(t).forEach(function (r) {
            t[r].forEach(function (t) {
              var n = null;
              switch (t) {
                case "bold":
                  n = {
                    family: r,
                    weight: "bold"
                  };
                  break;
                case "italic":
                  n = {
                    family: r,
                    style: "italic"
                  };
                  break;
                case "bolditalic":
                  n = {
                    family: r,
                    weight: "bold",
                    style: "italic"
                  };
                  break;
                case "":
                case "normal":
                  n = {
                    family: r
                  };
              }
              null !== n && (n.ref = {
                name: r,
                style: t
              }, e.push(n));
            });
          }), e;
        }(t.getFontList());
        h = function (t) {
          for (var e = {}, r = 0; r < t.length; ++r) {
            var n = jt(t[r]),
              i = n.family,
              a = n.stretch,
              o = n.style,
              s = n.weight;
            e[i] = e[i] || {}, e[i][a] = e[i][a] || {}, e[i][a][o] = e[i][a][o] || {}, e[i][a][o][s] = n;
          }
          return e;
        }(r.concat(e));
      }
      return h;
    }
    var p = null;
    Object.defineProperty(this, "fontFaces", {
      get: function () {
        return p;
      },
      set: function (t) {
        h = null, p = t;
      }
    }), Object.defineProperty(this, "font", {
      get: function () {
        return this.ctx.font;
      },
      set: function (t) {
        var e;
        if (this.ctx.font = t, null !== (e = /^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))) {
          var r = e[1],
            n = (e[2], e[3]),
            i = e[4],
            a = (e[5], e[6]),
            o = /^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i)[2];
          i = "px" === o ? Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor) : "em" === o ? Math.floor(parseFloat(i) * this.pdf.getFontSize()) : Math.floor(parseFloat(i) * this.pdf.internal.scaleFactor), this.pdf.setFontSize(i);
          var s = function (t) {
            var e,
              r,
              n = [],
              i = t.trim();
            if ("" === i) return Wt;
            if (i in Mt) return [Mt[i]];
            for (; "" !== i;) {
              switch (r = null, e = (i = Dt(i)).charAt(0)) {
                case '"':
                case "'":
                  r = Rt(i.substring(1), e);
                  break;
                default:
                  r = Tt(i);
              }
              if (null === r) return Wt;
              if (n.push(r[0]), "" !== (i = Dt(r[1])) && "," !== i.charAt(0)) return Wt;
              i = i.replace(/^,/, "");
            }
            return n;
          }(a);
          if (this.fontFaces) {
            var c = qt(f(this.pdf, this.fontFaces), s.map(function (t) {
              return {
                family: t,
                stretch: "normal",
                weight: n,
                style: r
              };
            }));
            this.pdf.setFont(c.ref.name, c.ref.style);
          } else {
            var u = "";
            ("bold" === n || parseInt(n, 10) >= 700 || "bold" === r) && (u = "bold"), "italic" === r && (u += "italic"), 0 === u.length && (u = "normal");
            for (var h = "", l = {
                arial: "Helvetica",
                Arial: "Helvetica",
                verdana: "Helvetica",
                Verdana: "Helvetica",
                helvetica: "Helvetica",
                Helvetica: "Helvetica",
                "sans-serif": "Helvetica",
                fixed: "Courier",
                monospace: "Courier",
                terminal: "Courier",
                cursive: "Times",
                fantasy: "Times",
                serif: "Times"
              }, d = 0; d < s.length; d++) {
              if (void 0 !== this.pdf.internal.getFont(s[d], u, {
                noFallback: !0,
                disableWarning: !0
              })) {
                h = s[d];
                break;
              }
              if ("bolditalic" === u && void 0 !== this.pdf.internal.getFont(s[d], "bold", {
                noFallback: !0,
                disableWarning: !0
              })) h = s[d], u = "bold";else if (void 0 !== this.pdf.internal.getFont(s[d], "normal", {
                noFallback: !0,
                disableWarning: !0
              })) {
                h = s[d], u = "normal";
                break;
              }
            }
            if ("" === h) for (var p = 0; p < s.length; p++) if (l[s[p]]) {
              h = l[s[p]];
              break;
            }
            h = "" === h ? "Times" : h, this.pdf.setFont(h, u);
          }
        }
      }
    }), Object.defineProperty(this, "globalCompositeOperation", {
      get: function () {
        return this.ctx.globalCompositeOperation;
      },
      set: function (t) {
        this.ctx.globalCompositeOperation = t;
      }
    }), Object.defineProperty(this, "globalAlpha", {
      get: function () {
        return this.ctx.globalAlpha;
      },
      set: function (t) {
        this.ctx.globalAlpha = t;
      }
    }), Object.defineProperty(this, "lineDashOffset", {
      get: function () {
        return this.ctx.lineDashOffset;
      },
      set: function (t) {
        this.ctx.lineDashOffset = t, T.call(this);
      }
    }), Object.defineProperty(this, "lineDash", {
      get: function () {
        return this.ctx.lineDash;
      },
      set: function (t) {
        this.ctx.lineDash = t, T.call(this);
      }
    }), Object.defineProperty(this, "ignoreClearRect", {
      get: function () {
        return this.ctx.ignoreClearRect;
      },
      set: function (t) {
        this.ctx.ignoreClearRect = Boolean(t);
      }
    });
  };
  p.prototype.setLineDash = function (t) {
    this.lineDash = t;
  }, p.prototype.getLineDash = function () {
    return this.lineDash.length % 2 ? this.lineDash.concat(this.lineDash) : this.lineDash.slice();
  }, p.prototype.fill = function () {
    A.call(this, "fill", !1);
  }, p.prototype.stroke = function () {
    A.call(this, "stroke", !1);
  }, p.prototype.beginPath = function () {
    this.path = [{
      type: "begin"
    }];
  }, p.prototype.moveTo = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.moveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.moveTo");
    var r = this.ctx.transform.applyToPoint(new c(t, e));
    this.path.push({
      type: "mt",
      x: r.x,
      y: r.y
    }), this.ctx.lastPoint = new c(t, e);
  }, p.prototype.closePath = function () {
    var e = new c(0, 0),
      r = 0;
    for (r = this.path.length - 1; -1 !== r; r--) if ("begin" === this.path[r].type && "object" === (0, _typeof.default)(this.path[r + 1]) && "number" == typeof this.path[r + 1].x) {
      e = new c(this.path[r + 1].x, this.path[r + 1].y);
      break;
    }
    this.path.push({
      type: "close"
    }), this.ctx.lastPoint = new c(e.x, e.y);
  }, p.prototype.lineTo = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.lineTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.lineTo");
    var r = this.ctx.transform.applyToPoint(new c(t, e));
    this.path.push({
      type: "lt",
      x: r.x,
      y: r.y
    }), this.ctx.lastPoint = new c(r.x, r.y);
  }, p.prototype.clip = function () {
    this.ctx.clip_path = JSON.parse(JSON.stringify(this.path)), A.call(this, null, !0);
  }, p.prototype.quadraticCurveTo = function (t, e, r, n) {
    if (isNaN(r) || isNaN(n) || isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");
    var i = this.ctx.transform.applyToPoint(new c(r, n)),
      o = this.ctx.transform.applyToPoint(new c(t, e));
    this.path.push({
      type: "qct",
      x1: o.x,
      y1: o.y,
      x: i.x,
      y: i.y
    }), this.ctx.lastPoint = new c(i.x, i.y);
  }, p.prototype.bezierCurveTo = function (t, e, r, n, i, o) {
    if (isNaN(i) || isNaN(o) || isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.bezierCurveTo: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");
    var s = this.ctx.transform.applyToPoint(new c(i, o)),
      u = this.ctx.transform.applyToPoint(new c(t, e)),
      h = this.ctx.transform.applyToPoint(new c(r, n));
    this.path.push({
      type: "bct",
      x1: u.x,
      y1: u.y,
      x2: h.x,
      y2: h.y,
      x: s.x,
      y: s.y
    }), this.ctx.lastPoint = new c(s.x, s.y);
  }, p.prototype.arc = function (t, e, r, n, i, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i)) throw a.error("jsPDF.context2d.arc: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.arc");
    if (o = Boolean(o), !this.ctx.transform.isIdentity) {
      var s = this.ctx.transform.applyToPoint(new c(t, e));
      t = s.x, e = s.y;
      var u = this.ctx.transform.applyToPoint(new c(0, r)),
        h = this.ctx.transform.applyToPoint(new c(0, 0));
      r = Math.sqrt(Math.pow(u.x - h.x, 2) + Math.pow(u.y - h.y, 2));
    }
    Math.abs(i - n) >= 2 * Math.PI && (n = 0, i = 2 * Math.PI), this.path.push({
      type: "arc",
      x: t,
      y: e,
      radius: r,
      startAngle: n,
      endAngle: i,
      counterclockwise: o
    });
  }, p.prototype.arcTo = function (t, e, r, n, i) {
    throw new Error("arcTo not implemented.");
  }, p.prototype.rect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.rect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rect");
    this.moveTo(t, e), this.lineTo(t + r, e), this.lineTo(t + r, e + n), this.lineTo(t, e + n), this.lineTo(t, e), this.lineTo(t + r, e), this.lineTo(t, e);
  }, p.prototype.fillRect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.fillRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillRect");
    if (!m.call(this)) {
      var i = {};
      "butt" !== this.lineCap && (i.lineCap = this.lineCap, this.lineCap = "butt"), "miter" !== this.lineJoin && (i.lineJoin = this.lineJoin, this.lineJoin = "miter"), this.beginPath(), this.rect(t, e, r, n), this.fill(), i.hasOwnProperty("lineCap") && (this.lineCap = i.lineCap), i.hasOwnProperty("lineJoin") && (this.lineJoin = i.lineJoin);
    }
  }, p.prototype.strokeRect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.strokeRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");
    v.call(this) || (this.beginPath(), this.rect(t, e, r, n), this.stroke());
  }, p.prototype.clearRect = function (t, e, r, n) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n)) throw a.error("jsPDF.context2d.clearRect: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.clearRect");
    this.ignoreClearRect || (this.fillStyle = "#ffffff", this.fillRect(t, e, r, n));
  }, p.prototype.save = function (t) {
    t = "boolean" != typeof t || t;
    for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++) this.pdf.setPage(r + 1), this.pdf.internal.out("q");
    if (this.pdf.setPage(e), t) {
      this.ctx.fontSize = this.pdf.internal.getFontSize();
      var n = new d(this.ctx);
      this.ctxStack.push(this.ctx), this.ctx = n;
    }
  }, p.prototype.restore = function (t) {
    t = "boolean" != typeof t || t;
    for (var e = this.pdf.internal.getCurrentPageInfo().pageNumber, r = 0; r < this.pdf.internal.getNumberOfPages(); r++) this.pdf.setPage(r + 1), this.pdf.internal.out("Q");
    this.pdf.setPage(e), t && 0 !== this.ctxStack.length && (this.ctx = this.ctxStack.pop(), this.fillStyle = this.ctx.fillStyle, this.strokeStyle = this.ctx.strokeStyle, this.font = this.ctx.font, this.lineCap = this.ctx.lineCap, this.lineWidth = this.ctx.lineWidth, this.lineJoin = this.ctx.lineJoin, this.lineDash = this.ctx.lineDash, this.lineDashOffset = this.ctx.lineDashOffset);
  }, p.prototype.toDataURL = function () {
    throw new Error("toDataUrl not implemented.");
  };
  var g = function (t) {
      var e, r, n, i;
      if (!0 === t.isCanvasGradient && (t = t.getColor()), !t) return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        style: t
      };
      if (/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t)) e = 0, r = 0, n = 0, i = 0;else {
        var a = /rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);
        if (null !== a) e = parseInt(a[1]), r = parseInt(a[2]), n = parseInt(a[3]), i = 1;else if (null !== (a = /rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t))) e = parseInt(a[1]), r = parseInt(a[2]), n = parseInt(a[3]), i = parseFloat(a[4]);else {
          if (i = 1, "string" == typeof t && "#" !== t.charAt(0)) {
            var o = new f(t);
            t = o.ok ? o.toHex() : "#000000";
          }
          4 === t.length ? (e = t.substring(1, 2), e += e, r = t.substring(2, 3), r += r, n = t.substring(3, 4), n += n) : (e = t.substring(1, 3), r = t.substring(3, 5), n = t.substring(5, 7)), e = parseInt(e, 16), r = parseInt(r, 16), n = parseInt(n, 16);
        }
      }
      return {
        r: e,
        g: r,
        b: n,
        a: i,
        style: t
      };
    },
    m = function () {
      return this.ctx.isFillTransparent || 0 == this.globalAlpha;
    },
    v = function () {
      return Boolean(this.ctx.isStrokeTransparent || 0 == this.globalAlpha);
    };
  p.prototype.fillText = function (t, e, r, n) {
    if (isNaN(e) || isNaN(r) || "string" != typeof t) throw a.error("jsPDF.context2d.fillText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.fillText");
    if (n = isNaN(n) ? void 0 : n, !m.call(this)) {
      var i = q(this.ctx.transform.rotation),
        o = this.ctx.transform.scaleX;
      C.call(this, {
        text: t,
        x: e,
        y: r,
        scale: o,
        angle: i,
        align: this.textAlign,
        maxWidth: n
      });
    }
  }, p.prototype.strokeText = function (t, e, r, n) {
    if (isNaN(e) || isNaN(r) || "string" != typeof t) throw a.error("jsPDF.context2d.strokeText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.strokeText");
    if (!v.call(this)) {
      n = isNaN(n) ? void 0 : n;
      var i = q(this.ctx.transform.rotation),
        o = this.ctx.transform.scaleX;
      C.call(this, {
        text: t,
        x: e,
        y: r,
        scale: o,
        renderingMode: "stroke",
        angle: i,
        align: this.textAlign,
        maxWidth: n
      });
    }
  }, p.prototype.measureText = function (t) {
    if ("string" != typeof t) throw a.error("jsPDF.context2d.measureText: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.measureText");
    var e = this.pdf,
      r = this.pdf.internal.scaleFactor,
      n = e.internal.getFontSize(),
      i = e.getStringUnitWidth(t) * n / e.internal.scaleFactor,
      o = function (t) {
        var e = (t = t || {}).width || 0;
        return Object.defineProperty(this, "width", {
          get: function () {
            return e;
          }
        }), this;
      };
    return new o({
      width: i *= Math.round(96 * r / 72 * 1e4) / 1e4
    });
  }, p.prototype.scale = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.scale: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.scale");
    var r = new h(t, 0, 0, e, 0, 0);
    this.ctx.transform = this.ctx.transform.multiply(r);
  }, p.prototype.rotate = function (t) {
    if (isNaN(t)) throw a.error("jsPDF.context2d.rotate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.rotate");
    var e = new h(Math.cos(t), Math.sin(t), -Math.sin(t), Math.cos(t), 0, 0);
    this.ctx.transform = this.ctx.transform.multiply(e);
  }, p.prototype.translate = function (t, e) {
    if (isNaN(t) || isNaN(e)) throw a.error("jsPDF.context2d.translate: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.translate");
    var r = new h(1, 0, 0, 1, t, e);
    this.ctx.transform = this.ctx.transform.multiply(r);
  }, p.prototype.transform = function (t, e, r, n, i, o) {
    if (isNaN(t) || isNaN(e) || isNaN(r) || isNaN(n) || isNaN(i) || isNaN(o)) throw a.error("jsPDF.context2d.transform: Invalid arguments", arguments), new Error("Invalid arguments passed to jsPDF.context2d.transform");
    var s = new h(t, e, r, n, i, o);
    this.ctx.transform = this.ctx.transform.multiply(s);
  }, p.prototype.setTransform = function (t, e, r, n, i, a) {
    t = isNaN(t) ? 1 : t, e = isNaN(e) ? 0 : e, r = isNaN(r) ? 0 : r, n = isNaN(n) ? 1 : n, i = isNaN(i) ? 0 : i, a = isNaN(a) ? 0 : a, this.ctx.transform = new h(t, e, r, n, i, a);
  };
  var b = function () {
    return this.margin[0] > 0 || this.margin[1] > 0 || this.margin[2] > 0 || this.margin[3] > 0;
  };
  p.prototype.drawImage = function (t, e, r, n, i, a, o, s, c) {
    var l = this.pdf.getImageProperties(t),
      f = 1,
      d = 1,
      p = 1,
      g = 1;
    void 0 !== n && void 0 !== s && (p = s / n, g = c / i, f = l.width / n * s / n, d = l.height / i * c / i), void 0 === a && (a = e, o = r, e = 0, r = 0), void 0 !== n && void 0 === s && (s = n, c = i), void 0 === n && void 0 === s && (s = l.width, c = l.height);
    for (var m, v = this.ctx.transform.decompose(), w = q(v.rotate.shx), A = new h(), S = (A = (A = (A = A.multiply(v.translate)).multiply(v.skew)).multiply(v.scale)).applyToRectangle(new u(a - e * p, o - r * g, n * f, i * d)), _ = y.call(this, S), P = [], k = 0; k < _.length; k += 1) -1 === P.indexOf(_[k]) && P.push(_[k]);
    if (L(P), this.autoPaging) for (var I = P[0], F = P[P.length - 1], C = I; C < F + 1; C++) {
      this.pdf.setPage(C);
      var j = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1],
        O = 1 === C ? this.posY + this.margin[0] : this.margin[0],
        B = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2],
        M = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2],
        E = 1 === C ? 0 : B + (C - 2) * M;
      if (0 !== this.ctx.clip_path.length) {
        var D = this.path;
        m = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(m, this.posX + this.margin[3], -E + O + this.ctx.prevPageLastElemOffset), x.call(this, "fill", !0), this.path = D;
      }
      var R = JSON.parse(JSON.stringify(S));
      R = N([R], this.posX + this.margin[3], -E + O + this.ctx.prevPageLastElemOffset)[0];
      var T = (C > I || C < F) && b.call(this);
      T && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], j, M, null).clip().discardPath()), this.pdf.addImage(t, "JPEG", R.x, R.y, R.w, R.h, null, null, w), T && this.pdf.restoreGraphicsState();
    } else this.pdf.addImage(t, "JPEG", S.x, S.y, S.w, S.h, null, null, w);
  };
  var y = function (t, e, r) {
      var n = [];
      e = e || this.pdf.internal.pageSize.width, r = r || this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2];
      var i = this.posY + this.ctx.prevPageLastElemOffset;
      switch (t.type) {
        default:
        case "mt":
        case "lt":
          n.push(Math.floor((t.y + i) / r) + 1);
          break;
        case "arc":
          n.push(Math.floor((t.y + i - t.radius) / r) + 1), n.push(Math.floor((t.y + i + t.radius) / r) + 1);
          break;
        case "qct":
          var a = D(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x, t.y);
          n.push(Math.floor((a.y + i) / r) + 1), n.push(Math.floor((a.y + a.h + i) / r) + 1);
          break;
        case "bct":
          var o = R(this.ctx.lastPoint.x, this.ctx.lastPoint.y, t.x1, t.y1, t.x2, t.y2, t.x, t.y);
          n.push(Math.floor((o.y + i) / r) + 1), n.push(Math.floor((o.y + o.h + i) / r) + 1);
          break;
        case "rect":
          n.push(Math.floor((t.y + i) / r) + 1), n.push(Math.floor((t.y + t.h + i) / r) + 1);
      }
      for (var s = 0; s < n.length; s += 1) for (; this.pdf.internal.getNumberOfPages() < n[s];) w.call(this);
      return n;
    },
    w = function () {
      var t = this.fillStyle,
        e = this.strokeStyle,
        r = this.font,
        n = this.lineCap,
        i = this.lineWidth,
        a = this.lineJoin;
      this.pdf.addPage(), this.fillStyle = t, this.strokeStyle = e, this.font = r, this.lineCap = n, this.lineWidth = i, this.lineJoin = a;
    },
    N = function (t, e, r) {
      for (var n = 0; n < t.length; n++) switch (t[n].type) {
        case "bct":
          t[n].x2 += e, t[n].y2 += r;
        case "qct":
          t[n].x1 += e, t[n].y1 += r;
        case "mt":
        case "lt":
        case "arc":
        default:
          t[n].x += e, t[n].y += r;
      }
      return t;
    },
    L = function (t) {
      return t.sort(function (t, e) {
        return t - e;
      });
    },
    A = function (t, e) {
      for (var r, n, i = this.fillStyle, a = this.strokeStyle, o = this.lineCap, s = this.lineWidth, c = Math.abs(s * this.ctx.transform.scaleX), u = this.lineJoin, h = JSON.parse(JSON.stringify(this.path)), l = JSON.parse(JSON.stringify(this.path)), f = [], d = 0; d < l.length; d++) if (void 0 !== l[d].x) for (var p = y.call(this, l[d]), g = 0; g < p.length; g += 1) -1 === f.indexOf(p[g]) && f.push(p[g]);
      for (var m = 0; m < f.length; m++) for (; this.pdf.internal.getNumberOfPages() < f[m];) w.call(this);
      if (L(f), this.autoPaging) for (var v = f[0], A = f[f.length - 1], S = v; S < A + 1; S++) {
        this.pdf.setPage(S), this.fillStyle = i, this.strokeStyle = a, this.lineCap = o, this.lineWidth = c, this.lineJoin = u;
        var _ = this.pdf.internal.pageSize.width - this.margin[3] - this.margin[1],
          P = 1 === S ? this.posY + this.margin[0] : this.margin[0],
          k = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2],
          I = this.pdf.internal.pageSize.height - this.margin[0] - this.margin[2],
          F = 1 === S ? 0 : k + (S - 2) * I;
        if (0 !== this.ctx.clip_path.length) {
          var C = this.path;
          r = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(r, this.posX + this.margin[3], -F + P + this.ctx.prevPageLastElemOffset), x.call(this, t, !0), this.path = C;
        }
        if (n = JSON.parse(JSON.stringify(h)), this.path = N(n, this.posX + this.margin[3], -F + P + this.ctx.prevPageLastElemOffset), !1 === e || 0 === S) {
          var j = (S > v || S < A) && b.call(this);
          j && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], _, I, null).clip().discardPath()), x.call(this, t, e), j && this.pdf.restoreGraphicsState();
        }
        this.lineWidth = s;
      } else this.lineWidth = c, x.call(this, t, e), this.lineWidth = s;
      this.path = h;
    },
    x = function (t, e) {
      if (("stroke" !== t || e || !v.call(this)) && ("stroke" === t || e || !m.call(this))) {
        for (var r, n, i = [], a = this.path, o = 0; o < a.length; o++) {
          var s = a[o];
          switch (s.type) {
            case "begin":
              i.push({
                begin: !0
              });
              break;
            case "close":
              i.push({
                close: !0
              });
              break;
            case "mt":
              i.push({
                start: s,
                deltas: [],
                abs: []
              });
              break;
            case "lt":
              var c = i.length;
              if (a[o - 1] && !isNaN(a[o - 1].x) && (r = [s.x - a[o - 1].x, s.y - a[o - 1].y], c > 0)) for (; c >= 0; c--) if (!0 !== i[c - 1].close && !0 !== i[c - 1].begin) {
                i[c - 1].deltas.push(r), i[c - 1].abs.push(s);
                break;
              }
              break;
            case "bct":
              r = [s.x1 - a[o - 1].x, s.y1 - a[o - 1].y, s.x2 - a[o - 1].x, s.y2 - a[o - 1].y, s.x - a[o - 1].x, s.y - a[o - 1].y], i[i.length - 1].deltas.push(r);
              break;
            case "qct":
              var u = a[o - 1].x + 2 / 3 * (s.x1 - a[o - 1].x),
                h = a[o - 1].y + 2 / 3 * (s.y1 - a[o - 1].y),
                l = s.x + 2 / 3 * (s.x1 - s.x),
                f = s.y + 2 / 3 * (s.y1 - s.y),
                d = s.x,
                p = s.y;
              r = [u - a[o - 1].x, h - a[o - 1].y, l - a[o - 1].x, f - a[o - 1].y, d - a[o - 1].x, p - a[o - 1].y], i[i.length - 1].deltas.push(r);
              break;
            case "arc":
              i.push({
                deltas: [],
                abs: [],
                arc: !0
              }), Array.isArray(i[i.length - 1].abs) && i[i.length - 1].abs.push(s);
          }
        }
        n = e ? null : "stroke" === t ? "stroke" : "fill";
        for (var g = !1, b = 0; b < i.length; b++) if (i[b].arc) for (var y = i[b].abs, w = 0; w < y.length; w++) {
          var N = y[w];
          "arc" === N.type ? P.call(this, N.x, N.y, N.radius, N.startAngle, N.endAngle, N.counterclockwise, void 0, e, !g) : j.call(this, N.x, N.y), g = !0;
        } else if (!0 === i[b].close) this.pdf.internal.out("h"), g = !1;else if (!0 !== i[b].begin) {
          var L = i[b].start.x,
            A = i[b].start.y;
          O.call(this, i[b].deltas, L, A), g = !0;
        }
        n && k.call(this, n), e && I.call(this);
      }
    },
    S = function (t) {
      var e = this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor,
        r = e * (this.pdf.internal.getLineHeightFactor() - 1);
      switch (this.ctx.textBaseline) {
        case "bottom":
          return t - r;
        case "top":
          return t + e - r;
        case "hanging":
          return t + e - 2 * r;
        case "middle":
          return t + e / 2 - r;
        case "ideographic":
          return t;
        case "alphabetic":
        default:
          return t;
      }
    },
    _ = function (t) {
      return t + this.pdf.internal.getFontSize() / this.pdf.internal.scaleFactor * (this.pdf.internal.getLineHeightFactor() - 1);
    };
  p.prototype.createLinearGradient = function () {
    var t = function () {};
    return t.colorStops = [], t.addColorStop = function (t, e) {
      this.colorStops.push([t, e]);
    }, t.getColor = function () {
      return 0 === this.colorStops.length ? "#000000" : this.colorStops[0][1];
    }, t.isCanvasGradient = !0, t;
  }, p.prototype.createPattern = function () {
    return this.createLinearGradient();
  }, p.prototype.createRadialGradient = function () {
    return this.createLinearGradient();
  };
  var P = function (t, e, r, n, i, a, o, s, c) {
      for (var u = M.call(this, r, n, i, a), h = 0; h < u.length; h++) {
        var l = u[h];
        0 === h && (c ? F.call(this, l.x1 + t, l.y1 + e) : j.call(this, l.x1 + t, l.y1 + e)), B.call(this, t, e, l.x2, l.y2, l.x3, l.y3, l.x4, l.y4);
      }
      s ? I.call(this) : k.call(this, o);
    },
    k = function (t) {
      switch (t) {
        case "stroke":
          this.pdf.internal.out("S");
          break;
        case "fill":
          this.pdf.internal.out("f");
      }
    },
    I = function () {
      this.pdf.clip(), this.pdf.discardPath();
    },
    F = function (t, e) {
      this.pdf.internal.out(n(t) + " " + i(e) + " m");
    },
    C = function (t) {
      var e;
      switch (t.align) {
        case "right":
        case "end":
          e = "right";
          break;
        case "center":
          e = "center";
          break;
        case "left":
        case "start":
        default:
          e = "left";
      }
      var r = this.pdf.getTextDimensions(t.text),
        n = S.call(this, t.y),
        i = _.call(this, n) - r.h,
        a = this.ctx.transform.applyToPoint(new c(t.x, n)),
        o = this.ctx.transform.decompose(),
        s = new h();
      s = (s = (s = s.multiply(o.translate)).multiply(o.skew)).multiply(o.scale);
      for (var l, f, d, p = this.ctx.transform.applyToRectangle(new u(t.x, n, r.w, r.h)), g = s.applyToRectangle(new u(t.x, i, r.w, r.h)), m = y.call(this, g), v = [], w = 0; w < m.length; w += 1) -1 === v.indexOf(m[w]) && v.push(m[w]);
      if (L(v), this.autoPaging) for (var A = v[0], P = v[v.length - 1], k = A; k < P + 1; k++) {
        this.pdf.setPage(k);
        var I = 1 === k ? this.posY + this.margin[0] : this.margin[0],
          F = this.pdf.internal.pageSize.height - this.posY - this.margin[0] - this.margin[2],
          C = this.pdf.internal.pageSize.height - this.margin[2],
          j = C - this.margin[0],
          O = this.pdf.internal.pageSize.width - this.margin[1],
          B = O - this.margin[3],
          M = 1 === k ? 0 : F + (k - 2) * j;
        if (0 !== this.ctx.clip_path.length) {
          var E = this.path;
          l = JSON.parse(JSON.stringify(this.ctx.clip_path)), this.path = N(l, this.posX + this.margin[3], -1 * M + I), x.call(this, "fill", !0), this.path = E;
        }
        var q = N([JSON.parse(JSON.stringify(g))], this.posX + this.margin[3], -M + I + this.ctx.prevPageLastElemOffset)[0];
        t.scale >= .01 && (f = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f * t.scale), d = this.lineWidth, this.lineWidth = d * t.scale);
        var D = "text" !== this.autoPaging;
        if (D || q.y + q.h <= C) {
          if (D || q.y >= I && q.x <= O) {
            var R = D ? t.text : this.pdf.splitTextToSize(t.text, t.maxWidth || O - q.x)[0],
              T = N([JSON.parse(JSON.stringify(p))], this.posX + this.margin[3], -M + I + this.ctx.prevPageLastElemOffset)[0],
              U = D && (k > A || k < P) && b.call(this);
            U && (this.pdf.saveGraphicsState(), this.pdf.rect(this.margin[3], this.margin[0], B, j, null).clip().discardPath()), this.pdf.text(R, T.x, T.y, {
              angle: t.angle,
              align: e,
              renderingMode: t.renderingMode
            }), U && this.pdf.restoreGraphicsState();
          }
        } else q.y < C && (this.ctx.prevPageLastElemOffset += C - q.y);
        t.scale >= .01 && (this.pdf.setFontSize(f), this.lineWidth = d);
      } else t.scale >= .01 && (f = this.pdf.internal.getFontSize(), this.pdf.setFontSize(f * t.scale), d = this.lineWidth, this.lineWidth = d * t.scale), this.pdf.text(t.text, a.x + this.posX, a.y + this.posY, {
        angle: t.angle,
        align: e,
        renderingMode: t.renderingMode,
        maxWidth: t.maxWidth
      }), t.scale >= .01 && (this.pdf.setFontSize(f), this.lineWidth = d);
    },
    j = function (t, e, r, a) {
      r = r || 0, a = a || 0, this.pdf.internal.out(n(t + r) + " " + i(e + a) + " l");
    },
    O = function (t, e, r) {
      return this.pdf.lines(t, e, r, null, null);
    },
    B = function (t, e, n, i, a, c, u, h) {
      this.pdf.internal.out([r(o(n + t)), r(s(i + e)), r(o(a + t)), r(s(c + e)), r(o(u + t)), r(s(h + e)), "c"].join(" "));
    },
    M = function (t, e, r, n) {
      for (var i = 2 * Math.PI, a = Math.PI / 2; e > r;) e -= i;
      var o = Math.abs(r - e);
      o < i && n && (o = i - o);
      for (var s = [], c = n ? -1 : 1, u = e; o > 1e-5;) {
        var h = u + c * Math.min(o, a);
        s.push(E.call(this, t, u, h)), o -= Math.abs(h - u), u = h;
      }
      return s;
    },
    E = function (t, e, r) {
      var n = (r - e) / 2,
        i = t * Math.cos(n),
        a = t * Math.sin(n),
        o = i,
        s = -a,
        c = o * o + s * s,
        u = c + o * i + s * a,
        h = 4 / 3 * (Math.sqrt(2 * c * u) - u) / (o * a - s * i),
        l = o - h * s,
        f = s + h * o,
        d = l,
        p = -f,
        g = n + e,
        m = Math.cos(g),
        v = Math.sin(g);
      return {
        x1: t * Math.cos(e),
        y1: t * Math.sin(e),
        x2: l * m - f * v,
        y2: l * v + f * m,
        x3: d * m - p * v,
        y3: d * v + p * m,
        x4: t * Math.cos(r),
        y4: t * Math.sin(r)
      };
    },
    q = function (t) {
      return 180 * t / Math.PI;
    },
    D = function (t, e, r, n, i, a) {
      var o = t + .5 * (r - t),
        s = e + .5 * (n - e),
        c = i + .5 * (r - i),
        h = a + .5 * (n - a),
        l = Math.min(t, i, o, c),
        f = Math.max(t, i, o, c),
        d = Math.min(e, a, s, h),
        p = Math.max(e, a, s, h);
      return new u(l, d, f - l, p - d);
    },
    R = function (t, e, r, n, i, a, o, s) {
      var c,
        h,
        l,
        f,
        d,
        p,
        g,
        m,
        v,
        b,
        y,
        w,
        N,
        L,
        A = r - t,
        x = n - e,
        S = i - r,
        _ = a - n,
        P = o - i,
        k = s - a;
      for (h = 0; h < 41; h++) v = (g = (l = t + (c = h / 40) * A) + c * ((d = r + c * S) - l)) + c * (d + c * (i + c * P - d) - g), b = (m = (f = e + c * x) + c * ((p = n + c * _) - f)) + c * (p + c * (a + c * k - p) - m), 0 == h ? (y = v, w = b, N = v, L = b) : (y = Math.min(y, v), w = Math.min(w, b), N = Math.max(N, v), L = Math.max(L, b));
      return new u(Math.round(y), Math.round(w), Math.round(N - y), Math.round(L - w));
    },
    T = function () {
      if (this.prevLineDash || this.ctx.lineDash.length || this.ctx.lineDashOffset) {
        var t,
          e,
          r = (t = this.ctx.lineDash, e = this.ctx.lineDashOffset, JSON.stringify({
            lineDash: t,
            lineDashOffset: e
          }));
        this.prevLineDash !== r && (this.pdf.setLineDash(this.ctx.lineDash, this.ctx.lineDashOffset), this.prevLineDash = r);
      }
    };
}(E.API),
/**
 * @license
 * jsPDF filters PlugIn
 * Copyright (c) 2014 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var r = function (t) {
      var e, r, n, i, a, o, s, c, u, h;
      for (/[^\x00-\xFF]/.test(t), r = [], n = 0, i = (t += e = "\0\0\0\0".slice(t.length % 4 || 4)).length; i > n; n += 4) 0 !== (a = (t.charCodeAt(n) << 24) + (t.charCodeAt(n + 1) << 16) + (t.charCodeAt(n + 2) << 8) + t.charCodeAt(n + 3)) ? (o = (a = ((a = ((a = ((a = (a - (h = a % 85)) / 85) - (u = a % 85)) / 85) - (c = a % 85)) / 85) - (s = a % 85)) / 85) % 85, r.push(o + 33, s + 33, c + 33, u + 33, h + 33)) : r.push(122);
      return function (t, e) {
        for (var r = e; r > 0; r--) t.pop();
      }(r, e.length), String.fromCharCode.apply(String, r) + "~>";
    },
    n = function (t) {
      var e,
        r,
        n,
        i,
        a,
        o = String,
        s = "length",
        c = 255,
        u = "charCodeAt",
        h = "slice",
        l = "replace";
      for (t[h](-2), t = t[h](0, -2)[l](/\s/g, "")[l]("z", "!!!!!"), n = [], i = 0, a = (t += e = "uuuuu"[h](t[s] % 5 || 5))[s]; a > i; i += 5) r = 52200625 * (t[u](i) - 33) + 614125 * (t[u](i + 1) - 33) + 7225 * (t[u](i + 2) - 33) + 85 * (t[u](i + 3) - 33) + (t[u](i + 4) - 33), n.push(c & r >> 24, c & r >> 16, c & r >> 8, c & r);
      return function (t, e) {
        for (var r = e; r > 0; r--) t.pop();
      }(n, e[s]), o.fromCharCode.apply(o, n);
    },
    i = function (t) {
      var e = new RegExp(/^([0-9A-Fa-f]{2})+$/);
      if (-1 !== (t = t.replace(/\s/g, "")).indexOf(">") && (t = t.substr(0, t.indexOf(">"))), t.length % 2 && (t += "0"), !1 === e.test(t)) return "";
      for (var r = "", n = 0; n < t.length; n += 2) r += String.fromCharCode("0x" + (t[n] + t[n + 1]));
      return r;
    },
    a = function (t) {
      for (var r = new Uint8Array(t.length), n = t.length; n--;) r[n] = t.charCodeAt(n);
      return t = (r = (0, _fflate.zlibSync)(r)).reduce(function (t, e) {
        return t + String.fromCharCode(e);
      }, "");
    };
  t.processDataByFilters = function (t, e) {
    var o = 0,
      s = t || "",
      c = [];
    for ("string" == typeof (e = e || []) && (e = [e]), o = 0; o < e.length; o += 1) switch (e[o]) {
      case "ASCII85Decode":
      case "/ASCII85Decode":
        s = n(s), c.push("/ASCII85Encode");
        break;
      case "ASCII85Encode":
      case "/ASCII85Encode":
        s = r(s), c.push("/ASCII85Decode");
        break;
      case "ASCIIHexDecode":
      case "/ASCIIHexDecode":
        s = i(s), c.push("/ASCIIHexEncode");
        break;
      case "ASCIIHexEncode":
      case "/ASCIIHexEncode":
        s = s.split("").map(function (t) {
          return ("0" + t.charCodeAt().toString(16)).slice(-2);
        }).join("") + ">", c.push("/ASCIIHexDecode");
        break;
      case "FlateEncode":
      case "/FlateEncode":
        s = a(s), c.push("/FlateDecode");
        break;
      default:
        throw new Error('The filter: "' + e[o] + '" is not implemented');
    }
    return {
      data: s,
      reverseChain: c.reverse().join(" ")
    };
  };
}(E.API),
/**
 * @license
 * jsPDF fileloading PlugIn
 * Copyright (c) 2018 Aras Abbasi (aras.abbasi@gmail.com)
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  t.loadFile = function (t, e, r) {
    return function (t, e, r) {
      e = !1 !== e, r = "function" == typeof r ? r : function () {};
      var n = void 0;
      try {
        n = function (t, e, r) {
          var n = new XMLHttpRequest(),
            i = 0,
            a = function (t) {
              var e = t.length,
                r = [],
                n = String.fromCharCode;
              for (i = 0; i < e; i += 1) r.push(n(255 & t.charCodeAt(i)));
              return r.join("");
            };
          if (n.open("GET", t, !e), n.overrideMimeType("text/plain; charset=x-user-defined"), !1 === e && (n.onload = function () {
            200 === n.status ? r(a(this.responseText)) : r(void 0);
          }), n.send(null), e && 200 === n.status) return a(n.responseText);
        }(t, e, r);
      } catch (t) {}
      return n;
    }(t, e, r);
  }, t.loadImageFile = t.loadFile;
}(E.API), function (e) {
  function r() {
    return (n.html2canvas ? Promise.resolve(n.html2canvas) : require("_bundle_loader")(require.resolve("html2canvas"))).catch(function (t) {
      return Promise.reject(new Error("Could not load html2canvas: " + t));
    }).then(function (t) {
      return t.default ? t.default : t;
    });
  }
  function i() {
    return (n.DOMPurify ? Promise.resolve(n.DOMPurify) : require("_bundle_loader")(require.resolve("dompurify"))).catch(function (t) {
      return Promise.reject(new Error("Could not load dompurify: " + t));
    }).then(function (t) {
      return t.default ? t.default : t;
    });
  }
  var a = function (e) {
      var r = (0, _typeof.default)(e);
      return "undefined" === r ? "undefined" : "string" === r || e instanceof String ? "string" : "number" === r || e instanceof Number ? "number" : "function" === r || e instanceof Function ? "function" : e && e.constructor === Array ? "array" : e && 1 === e.nodeType ? "element" : "object" === r ? "object" : "unknown";
    },
    o = function (t, e) {
      var r = document.createElement(t);
      for (var n in e.className && (r.className = e.className), e.innerHTML && e.dompurify && (r.innerHTML = e.dompurify.sanitize(e.innerHTML)), e.style) r.style[n] = e.style[n];
      return r;
    },
    s = function t(e) {
      var r = Object.assign(t.convert(Promise.resolve()), JSON.parse(JSON.stringify(t.template))),
        n = t.convert(Promise.resolve(), r);
      return n = (n = n.setProgress(1, t, 1, [t])).set(e);
    };
  (s.prototype = Object.create(Promise.prototype)).constructor = s, s.convert = function (t, e) {
    return t.__proto__ = e || s.prototype, t;
  }, s.template = {
    prop: {
      src: null,
      container: null,
      overlay: null,
      canvas: null,
      img: null,
      pdf: null,
      pageSize: null,
      callback: function () {}
    },
    progress: {
      val: 0,
      state: null,
      n: 0,
      stack: []
    },
    opt: {
      filename: "file.pdf",
      margin: [0, 0, 0, 0],
      enableLinks: !0,
      x: 0,
      y: 0,
      html2canvas: {},
      jsPDF: {},
      backgroundColor: "transparent"
    }
  }, s.prototype.from = function (t, e) {
    return this.then(function () {
      switch (e = e || function (t) {
        switch (a(t)) {
          case "string":
            return "string";
          case "element":
            return "canvas" === t.nodeName.toLowerCase() ? "canvas" : "element";
          default:
            return "unknown";
        }
      }(t)) {
        case "string":
          return this.then(i).then(function (e) {
            return this.set({
              src: o("div", {
                innerHTML: t,
                dompurify: e
              })
            });
          });
        case "element":
          return this.set({
            src: t
          });
        case "canvas":
          return this.set({
            canvas: t
          });
        case "img":
          return this.set({
            img: t
          });
        default:
          return this.error("Unknown source type.");
      }
    });
  }, s.prototype.to = function (t) {
    switch (t) {
      case "container":
        return this.toContainer();
      case "canvas":
        return this.toCanvas();
      case "img":
        return this.toImg();
      case "pdf":
        return this.toPdf();
      default:
        return this.error("Invalid target.");
    }
  }, s.prototype.toContainer = function () {
    return this.thenList([function () {
      return this.prop.src || this.error("Cannot duplicate - no source HTML.");
    }, function () {
      return this.prop.pageSize || this.setPageSize();
    }]).then(function () {
      var t = {
          position: "relative",
          display: "inline-block",
          width: ("number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? Math.max(this.prop.src.clientWidth, this.prop.src.scrollWidth, this.prop.src.offsetWidth) : this.opt.windowWidth) + "px",
          left: 0,
          right: 0,
          top: 0,
          margin: "auto",
          backgroundColor: this.opt.backgroundColor
        },
        e = function t(e, r) {
          for (var n = 3 === e.nodeType ? document.createTextNode(e.nodeValue) : e.cloneNode(!1), i = e.firstChild; i; i = i.nextSibling) !0 !== r && 1 === i.nodeType && "SCRIPT" === i.nodeName || n.appendChild(t(i, r));
          return 1 === e.nodeType && ("CANVAS" === e.nodeName ? (n.width = e.width, n.height = e.height, n.getContext("2d").drawImage(e, 0, 0)) : "TEXTAREA" !== e.nodeName && "SELECT" !== e.nodeName || (n.value = e.value), n.addEventListener("load", function () {
            n.scrollTop = e.scrollTop, n.scrollLeft = e.scrollLeft;
          }, !0)), n;
        }(this.prop.src, this.opt.html2canvas.javascriptEnabled);
      "BODY" === e.tagName && (t.height = Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) + "px"), this.prop.overlay = o("div", {
        className: "html2pdf__overlay",
        style: {
          position: "fixed",
          overflow: "hidden",
          zIndex: 1e3,
          left: "-100000px",
          right: 0,
          bottom: 0,
          top: 0
        }
      }), this.prop.container = o("div", {
        className: "html2pdf__container",
        style: t
      }), this.prop.container.appendChild(e), this.prop.container.firstChild.appendChild(o("div", {
        style: {
          clear: "both",
          border: "0 none transparent",
          margin: 0,
          padding: 0,
          height: 0
        }
      })), this.prop.container.style.float = "none", this.prop.overlay.appendChild(this.prop.container), document.body.appendChild(this.prop.overlay), this.prop.container.firstChild.style.position = "relative", this.prop.container.height = Math.max(this.prop.container.firstChild.clientHeight, this.prop.container.firstChild.scrollHeight, this.prop.container.firstChild.offsetHeight) + "px";
    });
  }, s.prototype.toCanvas = function () {
    var t = [function () {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t).then(r).then(function (t) {
      var e = Object.assign({}, this.opt.html2canvas);
      return delete e.onrendered, t(this.prop.container, e);
    }).then(function (t) {
      (this.opt.html2canvas.onrendered || function () {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
    });
  }, s.prototype.toContext2d = function () {
    var t = [function () {
      return document.body.contains(this.prop.container) || this.toContainer();
    }];
    return this.thenList(t).then(r).then(function (t) {
      var e = this.opt.jsPDF,
        r = this.opt.fontFaces,
        n = "number" != typeof this.opt.width || isNaN(this.opt.width) || "number" != typeof this.opt.windowWidth || isNaN(this.opt.windowWidth) ? 1 : this.opt.width / this.opt.windowWidth,
        i = Object.assign({
          async: !0,
          allowTaint: !0,
          scale: n,
          scrollX: this.opt.scrollX || 0,
          scrollY: this.opt.scrollY || 0,
          backgroundColor: "#ffffff",
          imageTimeout: 15e3,
          logging: !0,
          proxy: null,
          removeContainer: !0,
          foreignObjectRendering: !1,
          useCORS: !1
        }, this.opt.html2canvas);
      if (delete i.onrendered, e.context2d.autoPaging = void 0 === this.opt.autoPaging || this.opt.autoPaging, e.context2d.posX = this.opt.x, e.context2d.posY = this.opt.y, e.context2d.margin = this.opt.margin, e.context2d.fontFaces = r, r) for (var a = 0; a < r.length; ++a) {
        var o = r[a],
          s = o.src.find(function (t) {
            return "truetype" === t.format;
          });
        s && e.addFont(s.url, o.ref.name, o.ref.style);
      }
      return i.windowHeight = i.windowHeight || 0, i.windowHeight = 0 == i.windowHeight ? Math.max(this.prop.container.clientHeight, this.prop.container.scrollHeight, this.prop.container.offsetHeight) : i.windowHeight, e.context2d.save(!0), t(this.prop.container, i);
    }).then(function (t) {
      this.opt.jsPDF.context2d.restore(!0), (this.opt.html2canvas.onrendered || function () {})(t), this.prop.canvas = t, document.body.removeChild(this.prop.overlay);
    });
  }, s.prototype.toImg = function () {
    return this.thenList([function () {
      return this.prop.canvas || this.toCanvas();
    }]).then(function () {
      var t = this.prop.canvas.toDataURL("image/" + this.opt.image.type, this.opt.image.quality);
      this.prop.img = document.createElement("img"), this.prop.img.src = t;
    });
  }, s.prototype.toPdf = function () {
    return this.thenList([function () {
      return this.toContext2d();
    }]).then(function () {
      this.prop.pdf = this.prop.pdf || this.opt.jsPDF;
    });
  }, s.prototype.output = function (t, e, r) {
    return "img" === (r = r || "pdf").toLowerCase() || "image" === r.toLowerCase() ? this.outputImg(t, e) : this.outputPdf(t, e);
  }, s.prototype.outputPdf = function (t, e) {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).then(function () {
      return this.prop.pdf.output(t, e);
    });
  }, s.prototype.outputImg = function (t) {
    return this.thenList([function () {
      return this.prop.img || this.toImg();
    }]).then(function () {
      switch (t) {
        case void 0:
        case "img":
          return this.prop.img;
        case "datauristring":
        case "dataurlstring":
          return this.prop.img.src;
        case "datauri":
        case "dataurl":
          return document.location.href = this.prop.img.src;
        default:
          throw 'Image output type "' + t + '" is not supported.';
      }
    });
  }, s.prototype.save = function (t) {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).set(t ? {
      filename: t
    } : null).then(function () {
      this.prop.pdf.save(this.opt.filename);
    });
  }, s.prototype.doCallback = function () {
    return this.thenList([function () {
      return this.prop.pdf || this.toPdf();
    }]).then(function () {
      this.prop.callback(this.prop.pdf);
    });
  }, s.prototype.set = function (t) {
    if ("object" !== a(t)) return this;
    var e = Object.keys(t || {}).map(function (e) {
      if (e in s.template.prop) return function () {
        this.prop[e] = t[e];
      };
      switch (e) {
        case "margin":
          return this.setMargin.bind(this, t.margin);
        case "jsPDF":
          return function () {
            return this.opt.jsPDF = t.jsPDF, this.setPageSize();
          };
        case "pageSize":
          return this.setPageSize.bind(this, t.pageSize);
        default:
          return function () {
            this.opt[e] = t[e];
          };
      }
    }, this);
    return this.then(function () {
      return this.thenList(e);
    });
  }, s.prototype.get = function (t, e) {
    return this.then(function () {
      var r = t in s.template.prop ? this.prop[t] : this.opt[t];
      return e ? e(r) : r;
    });
  }, s.prototype.setMargin = function (t) {
    return this.then(function () {
      switch (a(t)) {
        case "number":
          t = [t, t, t, t];
        case "array":
          if (2 === t.length && (t = [t[0], t[1], t[0], t[1]]), 4 === t.length) break;
        default:
          return this.error("Invalid margin array.");
      }
      this.opt.margin = t;
    }).then(this.setPageSize);
  }, s.prototype.setPageSize = function (t) {
    function e(t, e) {
      return Math.floor(t * e / 72 * 96);
    }
    return this.then(function () {
      (t = t || E.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner") || (t.inner = {
        width: t.width - this.opt.margin[1] - this.opt.margin[3],
        height: t.height - this.opt.margin[0] - this.opt.margin[2]
      }, t.inner.px = {
        width: e(t.inner.width, t.k),
        height: e(t.inner.height, t.k)
      }, t.inner.ratio = t.inner.height / t.inner.width), this.prop.pageSize = t;
    });
  }, s.prototype.setProgress = function (t, e, r, n) {
    return null != t && (this.progress.val = t), null != e && (this.progress.state = e), null != r && (this.progress.n = r), null != n && (this.progress.stack = n), this.progress.ratio = this.progress.val / this.progress.state, this;
  }, s.prototype.updateProgress = function (t, e, r, n) {
    return this.setProgress(t ? this.progress.val + t : null, e || null, r ? this.progress.n + r : null, n ? this.progress.stack.concat(n) : null);
  }, s.prototype.then = function (t, e) {
    var r = this;
    return this.thenCore(t, e, function (t, e) {
      return r.updateProgress(null, null, 1, [t]), Promise.prototype.then.call(this, function (e) {
        return r.updateProgress(null, t), e;
      }).then(t, e).then(function (t) {
        return r.updateProgress(1), t;
      });
    });
  }, s.prototype.thenCore = function (t, e, r) {
    r = r || Promise.prototype.then;
    t && (t = t.bind(this)), e && (e = e.bind(this));
    var n = -1 !== Promise.toString().indexOf("[native code]") && "Promise" === Promise.name ? this : s.convert(Object.assign({}, this), Promise.prototype),
      i = r.call(n, t, e);
    return s.convert(i, this.__proto__);
  }, s.prototype.thenExternal = function (t, e) {
    return Promise.prototype.then.call(this, t, e);
  }, s.prototype.thenList = function (t) {
    var e = this;
    return t.forEach(function (t) {
      e = e.thenCore(t);
    }), e;
  }, s.prototype.catch = function (t) {
    t && (t = t.bind(this));
    var e = Promise.prototype.catch.call(this, t);
    return s.convert(e, this);
  }, s.prototype.catchExternal = function (t) {
    return Promise.prototype.catch.call(this, t);
  }, s.prototype.error = function (t) {
    return this.then(function () {
      throw new Error(t);
    });
  }, s.prototype.using = s.prototype.set, s.prototype.saveAs = s.prototype.save, s.prototype.export = s.prototype.output, s.prototype.run = s.prototype.then, E.getPageSize = function (e, r, n) {
    if ("object" === (0, _typeof.default)(e)) {
      var i = e;
      e = i.orientation, r = i.unit || r, n = i.format || n;
    }
    r = r || "mm", n = n || "a4", e = ("" + (e || "P")).toLowerCase();
    var a,
      o = ("" + n).toLowerCase(),
      s = {
        a0: [2383.94, 3370.39],
        a1: [1683.78, 2383.94],
        a2: [1190.55, 1683.78],
        a3: [841.89, 1190.55],
        a4: [595.28, 841.89],
        a5: [419.53, 595.28],
        a6: [297.64, 419.53],
        a7: [209.76, 297.64],
        a8: [147.4, 209.76],
        a9: [104.88, 147.4],
        a10: [73.7, 104.88],
        b0: [2834.65, 4008.19],
        b1: [2004.09, 2834.65],
        b2: [1417.32, 2004.09],
        b3: [1000.63, 1417.32],
        b4: [708.66, 1000.63],
        b5: [498.9, 708.66],
        b6: [354.33, 498.9],
        b7: [249.45, 354.33],
        b8: [175.75, 249.45],
        b9: [124.72, 175.75],
        b10: [87.87, 124.72],
        c0: [2599.37, 3676.54],
        c1: [1836.85, 2599.37],
        c2: [1298.27, 1836.85],
        c3: [918.43, 1298.27],
        c4: [649.13, 918.43],
        c5: [459.21, 649.13],
        c6: [323.15, 459.21],
        c7: [229.61, 323.15],
        c8: [161.57, 229.61],
        c9: [113.39, 161.57],
        c10: [79.37, 113.39],
        dl: [311.81, 623.62],
        letter: [612, 792],
        "government-letter": [576, 756],
        legal: [612, 1008],
        "junior-legal": [576, 360],
        ledger: [1224, 792],
        tabloid: [792, 1224],
        "credit-card": [153, 243]
      };
    switch (r) {
      case "pt":
        a = 1;
        break;
      case "mm":
        a = 72 / 25.4;
        break;
      case "cm":
        a = 72 / 2.54;
        break;
      case "in":
        a = 72;
        break;
      case "px":
        a = .75;
        break;
      case "pc":
      case "em":
        a = 12;
        break;
      case "ex":
        a = 6;
        break;
      default:
        throw "Invalid unit: " + r;
    }
    var c,
      u = 0,
      h = 0;
    if (s.hasOwnProperty(o)) u = s[o][1] / a, h = s[o][0] / a;else try {
      u = n[1], h = n[0];
    } catch (t) {
      throw new Error("Invalid format: " + n);
    }
    if ("p" === e || "portrait" === e) e = "p", h > u && (c = h, h = u, u = c);else {
      if ("l" !== e && "landscape" !== e) throw "Invalid orientation: " + e;
      e = "l", u > h && (c = h, h = u, u = c);
    }
    return {
      width: h,
      height: u,
      unit: r,
      k: a,
      orientation: e
    };
  }, e.html = function (t, e) {
    (e = e || {}).callback = e.callback || function () {}, e.html2canvas = e.html2canvas || {}, e.html2canvas.canvas = e.html2canvas.canvas || this.canvas, e.jsPDF = e.jsPDF || this, e.fontFaces = e.fontFaces ? e.fontFaces.map(jt) : null;
    var r = new s(e);
    return e.worker ? r : r.from(t).doCallback();
  };
}(E.API), E.API.addJS = function (t) {
  return Ht = t, this.internal.events.subscribe("postPutResources", function () {
    Ut = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/Names [(EmbeddedJS) " + (Ut + 1) + " 0 R]"), this.internal.out(">>"), this.internal.out("endobj"), zt = this.internal.newObject(), this.internal.out("<<"), this.internal.out("/S /JavaScript"), this.internal.out("/JS (" + Ht + ")"), this.internal.out(">>"), this.internal.out("endobj");
  }), this.internal.events.subscribe("putCatalog", function () {
    void 0 !== Ut && void 0 !== zt && this.internal.out("/Names <</JavaScript " + Ut + " 0 R>>");
  }), this;
},
/**
 * @license
 * Copyright (c) 2014 Steven Spungin (TwelveTone LLC)  steven@twelvetone.tv
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e;
  t.events.push(["postPutResources", function () {
    var t = this,
      r = /^(\d+) 0 obj$/;
    if (this.outline.root.children.length > 0) for (var n = t.outline.render().split(/\r\n/), i = 0; i < n.length; i++) {
      var a = n[i],
        o = r.exec(a);
      if (null != o) {
        var s = o[1];
        t.internal.newObjectDeferredBegin(s, !1);
      }
      t.internal.write(a);
    }
    if (this.outline.createNamedDestinations) {
      var c = this.internal.pages.length,
        u = [];
      for (i = 0; i < c; i++) {
        var h = t.internal.newObject();
        u.push(h);
        var l = t.internal.getPageInfo(i + 1);
        t.internal.write("<< /D[" + l.objId + " 0 R /XYZ null null null]>> endobj");
      }
      var f = t.internal.newObject();
      t.internal.write("<< /Names [ ");
      for (i = 0; i < u.length; i++) t.internal.write("(page_" + (i + 1) + ")" + u[i] + " 0 R");
      t.internal.write(" ] >>", "endobj"), e = t.internal.newObject(), t.internal.write("<< /Dests " + f + " 0 R"), t.internal.write(">>", "endobj");
    }
  }]), t.events.push(["putCatalog", function () {
    this.outline.root.children.length > 0 && (this.internal.write("/Outlines", this.outline.makeRef(this.outline.root)), this.outline.createNamedDestinations && this.internal.write("/Names " + e + " 0 R"));
  }]), t.events.push(["initialized", function () {
    var t = this;
    t.outline = {
      createNamedDestinations: !1,
      root: {
        children: []
      }
    }, t.outline.add = function (t, e, r) {
      var n = {
        title: e,
        options: r,
        children: []
      };
      return null == t && (t = this.root), t.children.push(n), n;
    }, t.outline.render = function () {
      return this.ctx = {}, this.ctx.val = "", this.ctx.pdf = t, this.genIds_r(this.root), this.renderRoot(this.root), this.renderItems(this.root), this.ctx.val;
    }, t.outline.genIds_r = function (e) {
      e.id = t.internal.newObjectDeferred();
      for (var r = 0; r < e.children.length; r++) this.genIds_r(e.children[r]);
    }, t.outline.renderRoot = function (t) {
      this.objStart(t), this.line("/Type /Outlines"), t.children.length > 0 && (this.line("/First " + this.makeRef(t.children[0])), this.line("/Last " + this.makeRef(t.children[t.children.length - 1]))), this.line("/Count " + this.count_r({
        count: 0
      }, t)), this.objEnd();
    }, t.outline.renderItems = function (e) {
      for (var r = this.ctx.pdf.internal.getVerticalCoordinateString, n = 0; n < e.children.length; n++) {
        var i = e.children[n];
        this.objStart(i), this.line("/Title " + this.makeString(i.title)), this.line("/Parent " + this.makeRef(e)), n > 0 && this.line("/Prev " + this.makeRef(e.children[n - 1])), n < e.children.length - 1 && this.line("/Next " + this.makeRef(e.children[n + 1])), i.children.length > 0 && (this.line("/First " + this.makeRef(i.children[0])), this.line("/Last " + this.makeRef(i.children[i.children.length - 1])));
        var a = this.count = this.count_r({
          count: 0
        }, i);
        if (a > 0 && this.line("/Count " + a), i.options && i.options.pageNumber) {
          var o = t.internal.getPageInfo(i.options.pageNumber);
          this.line("/Dest [" + o.objId + " 0 R /XYZ 0 " + r(0) + " 0]");
        }
        this.objEnd();
      }
      for (var s = 0; s < e.children.length; s++) this.renderItems(e.children[s]);
    }, t.outline.line = function (t) {
      this.ctx.val += t + "\r\n";
    }, t.outline.makeRef = function (t) {
      return t.id + " 0 R";
    }, t.outline.makeString = function (e) {
      return "(" + t.internal.pdfEscape(e) + ")";
    }, t.outline.objStart = function (t) {
      this.ctx.val += "\r\n" + t.id + " 0 obj\r\n<<\r\n";
    }, t.outline.objEnd = function () {
      this.ctx.val += ">> \r\nendobj\r\n";
    }, t.outline.count_r = function (t, e) {
      for (var r = 0; r < e.children.length; r++) t.count++, this.count_r(t, e.children[r]);
      return t.count;
    };
  }]);
}(E.API),
/**
 * @license
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = [192, 193, 194, 195, 196, 197, 198, 199];
  t.processJPEG = function (t, r, n, i, a, o) {
    var s,
      c = this.decode.DCT_DECODE,
      u = null;
    if ("string" == typeof t || this.__addimage__.isArrayBuffer(t) || this.__addimage__.isArrayBufferView(t)) {
      switch (t = a || t, t = this.__addimage__.isArrayBuffer(t) ? new Uint8Array(t) : t, (s = function (t) {
        for (var r, n = 256 * t.charCodeAt(4) + t.charCodeAt(5), i = t.length, a = {
            width: 0,
            height: 0,
            numcomponents: 1
          }, o = 4; o < i; o += 2) {
          if (o += n, -1 !== e.indexOf(t.charCodeAt(o + 1))) {
            r = 256 * t.charCodeAt(o + 5) + t.charCodeAt(o + 6), a = {
              width: 256 * t.charCodeAt(o + 7) + t.charCodeAt(o + 8),
              height: r,
              numcomponents: t.charCodeAt(o + 9)
            };
            break;
          }
          n = 256 * t.charCodeAt(o + 2) + t.charCodeAt(o + 3);
        }
        return a;
      }(t = this.__addimage__.isArrayBufferView(t) ? this.__addimage__.arrayBufferToBinaryString(t) : t)).numcomponents) {
        case 1:
          o = this.color_spaces.DEVICE_GRAY;
          break;
        case 4:
          o = this.color_spaces.DEVICE_CMYK;
          break;
        case 3:
          o = this.color_spaces.DEVICE_RGB;
      }
      u = {
        data: t,
        width: s.width,
        height: s.height,
        colorSpace: o,
        bitsPerComponent: 8,
        filter: c,
        index: r,
        alias: n
      };
    }
    return u;
  };
}(E.API);
var Vt,
  Gt,
  Yt,
  Jt,
  Xt,
  Kt = function () {
    var t, e, i;
    function a(t) {
      var e, r, n, i, a, o, s, c, u, h, l, f, d, p;
      for (this.data = t, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.animation = null, this.text = {}, o = null;;) {
        switch (e = this.readUInt32(), u = function () {
          var t, e;
          for (e = [], t = 0; t < 4; ++t) e.push(String.fromCharCode(this.data[this.pos++]));
          return e;
        }.call(this).join("")) {
          case "IHDR":
            this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
            break;
          case "acTL":
            this.animation = {
              numFrames: this.readUInt32(),
              numPlays: this.readUInt32() || 1 / 0,
              frames: []
            };
            break;
          case "PLTE":
            this.palette = this.read(e);
            break;
          case "fcTL":
            o && this.animation.frames.push(o), this.pos += 4, o = {
              width: this.readUInt32(),
              height: this.readUInt32(),
              xOffset: this.readUInt32(),
              yOffset: this.readUInt32()
            }, a = this.readUInt16(), i = this.readUInt16() || 100, o.delay = 1e3 * a / i, o.disposeOp = this.data[this.pos++], o.blendOp = this.data[this.pos++], o.data = [];
            break;
          case "IDAT":
          case "fdAT":
            for ("fdAT" === u && (this.pos += 4, e -= 4), t = (null != o ? o.data : void 0) || this.imgData, f = 0; 0 <= e ? f < e : f > e; 0 <= e ? ++f : --f) t.push(this.data[this.pos++]);
            break;
          case "tRNS":
            switch (this.transparency = {}, this.colorType) {
              case 3:
                if (n = this.palette.length / 3, this.transparency.indexed = this.read(e), this.transparency.indexed.length > n) throw new Error("More transparent colors than palette size");
                if ((h = n - this.transparency.indexed.length) > 0) for (d = 0; 0 <= h ? d < h : d > h; 0 <= h ? ++d : --d) this.transparency.indexed.push(255);
                break;
              case 0:
                this.transparency.grayscale = this.read(e)[0];
                break;
              case 2:
                this.transparency.rgb = this.read(e);
            }
            break;
          case "tEXt":
            s = (l = this.read(e)).indexOf(0), c = String.fromCharCode.apply(String, l.slice(0, s)), this.text[c] = String.fromCharCode.apply(String, l.slice(s + 1));
            break;
          case "IEND":
            return o && this.animation.frames.push(o), this.colors = function () {
              switch (this.colorType) {
                case 0:
                case 3:
                case 4:
                  return 1;
                case 2:
                case 6:
                  return 3;
              }
            }.call(this), this.hasAlphaChannel = 4 === (p = this.colorType) || 6 === p, r = this.colors + (this.hasAlphaChannel ? 1 : 0), this.pixelBitlength = this.bits * r, this.colorSpace = function () {
              switch (this.colors) {
                case 1:
                  return "DeviceGray";
                case 3:
                  return "DeviceRGB";
              }
            }.call(this), void (this.imgData = new Uint8Array(this.imgData));
          default:
            this.pos += e;
        }
        if (this.pos += 4, this.pos > this.data.length) throw new Error("Incomplete or corrupt PNG file");
      }
    }
    a.prototype.read = function (t) {
      var e, r;
      for (r = [], e = 0; 0 <= t ? e < t : e > t; 0 <= t ? ++e : --e) r.push(this.data[this.pos++]);
      return r;
    }, a.prototype.readUInt32 = function () {
      return this.data[this.pos++] << 24 | this.data[this.pos++] << 16 | this.data[this.pos++] << 8 | this.data[this.pos++];
    }, a.prototype.readUInt16 = function () {
      return this.data[this.pos++] << 8 | this.data[this.pos++];
    }, a.prototype.decodePixels = function (t) {
      var e = this.pixelBitlength / 8,
        n = new Uint8Array(this.width * this.height * e),
        i = 0,
        a = this;
      if (null == t && (t = this.imgData), 0 === t.length) return new Uint8Array(0);
      function o(r, o, s, c) {
        var u,
          h,
          l,
          f,
          d,
          p,
          g,
          m,
          v,
          b,
          y,
          w,
          N,
          L,
          A,
          x,
          S,
          _,
          P,
          k,
          I,
          F = Math.ceil((a.width - r) / s),
          C = Math.ceil((a.height - o) / c),
          j = a.width == F && a.height == C;
        for (L = e * F, w = j ? n : new Uint8Array(L * C), p = t.length, N = 0, h = 0; N < C && i < p;) {
          switch (t[i++]) {
            case 0:
              for (f = S = 0; S < L; f = S += 1) w[h++] = t[i++];
              break;
            case 1:
              for (f = _ = 0; _ < L; f = _ += 1) u = t[i++], d = f < e ? 0 : w[h - e], w[h++] = (u + d) % 256;
              break;
            case 2:
              for (f = P = 0; P < L; f = P += 1) u = t[i++], l = (f - f % e) / e, A = N && w[(N - 1) * L + l * e + f % e], w[h++] = (A + u) % 256;
              break;
            case 3:
              for (f = k = 0; k < L; f = k += 1) u = t[i++], l = (f - f % e) / e, d = f < e ? 0 : w[h - e], A = N && w[(N - 1) * L + l * e + f % e], w[h++] = (u + Math.floor((d + A) / 2)) % 256;
              break;
            case 4:
              for (f = I = 0; I < L; f = I += 1) u = t[i++], l = (f - f % e) / e, d = f < e ? 0 : w[h - e], 0 === N ? A = x = 0 : (A = w[(N - 1) * L + l * e + f % e], x = l && w[(N - 1) * L + (l - 1) * e + f % e]), g = d + A - x, m = Math.abs(g - d), b = Math.abs(g - A), y = Math.abs(g - x), v = m <= b && m <= y ? d : b <= y ? A : x, w[h++] = (u + v) % 256;
              break;
            default:
              throw new Error("Invalid filter algorithm: " + t[i - 1]);
          }
          if (!j) {
            var O = ((o + N * c) * a.width + r) * e,
              B = N * L;
            for (f = 0; f < F; f += 1) {
              for (var M = 0; M < e; M += 1) n[O++] = w[B++];
              O += (s - 1) * e;
            }
          }
          N++;
        }
      }
      return t = (0, _fflate.unzlibSync)(t), 1 == a.interlaceMethod ? (o(0, 0, 8, 8), o(4, 0, 8, 8), o(0, 4, 4, 8), o(2, 0, 4, 4), o(0, 2, 2, 4), o(1, 0, 2, 2), o(0, 1, 1, 2)) : o(0, 0, 1, 1), n;
    }, a.prototype.decodePalette = function () {
      var t, e, r, n, i, a, o, s, c;
      for (r = this.palette, a = this.transparency.indexed || [], i = new Uint8Array((a.length || 0) + r.length), n = 0, t = 0, e = o = 0, s = r.length; o < s; e = o += 3) i[n++] = r[e], i[n++] = r[e + 1], i[n++] = r[e + 2], i[n++] = null != (c = a[t++]) ? c : 255;
      return i;
    }, a.prototype.copyToImageData = function (t, e) {
      var r, n, i, a, o, s, c, u, h, l, f;
      if (n = this.colors, h = null, r = this.hasAlphaChannel, this.palette.length && (h = null != (f = this._decodedPalette) ? f : this._decodedPalette = this.decodePalette(), n = 4, r = !0), u = (i = t.data || t).length, o = h || e, a = s = 0, 1 === n) for (; a < u;) c = h ? 4 * e[a / 4] : s, l = o[c++], i[a++] = l, i[a++] = l, i[a++] = l, i[a++] = r ? o[c++] : 255, s = c;else for (; a < u;) c = h ? 4 * e[a / 4] : s, i[a++] = o[c++], i[a++] = o[c++], i[a++] = o[c++], i[a++] = r ? o[c++] : 255, s = c;
    }, a.prototype.decode = function () {
      var t;
      return t = new Uint8Array(this.width * this.height * 4), this.copyToImageData(t, this.decodePixels()), t;
    };
    var o = function () {
      if ("[object Window]" === Object.prototype.toString.call(n)) {
        try {
          e = n.document.createElement("canvas"), i = e.getContext("2d");
        } catch (t) {
          return !1;
        }
        return !0;
      }
      return !1;
    };
    return o(), t = function (t) {
      var r;
      if (!0 === o()) return i.width = t.width, i.height = t.height, i.clearRect(0, 0, t.width, t.height), i.putImageData(t, 0, 0), (r = new Image()).src = e.toDataURL(), r;
      throw new Error("This method requires a Browser with Canvas-capability.");
    }, a.prototype.decodeFrames = function (e) {
      var r, n, i, a, o, s, c, u;
      if (this.animation) {
        for (u = [], n = o = 0, s = (c = this.animation.frames).length; o < s; n = ++o) r = c[n], i = e.createImageData(r.width, r.height), a = this.decodePixels(new Uint8Array(r.data)), this.copyToImageData(i, a), r.imageData = i, u.push(r.image = t(i));
        return u;
      }
    }, a.prototype.renderFrame = function (t, e) {
      var r, n, i;
      return r = (n = this.animation.frames)[e], i = n[e - 1], 0 === e && t.clearRect(0, 0, this.width, this.height), 1 === (null != i ? i.disposeOp : void 0) ? t.clearRect(i.xOffset, i.yOffset, i.width, i.height) : 2 === (null != i ? i.disposeOp : void 0) && t.putImageData(i.imageData, i.xOffset, i.yOffset), 0 === r.blendOp && t.clearRect(r.xOffset, r.yOffset, r.width, r.height), t.drawImage(r.image, r.xOffset, r.yOffset);
    }, a.prototype.animate = function (t) {
      var e,
        r,
        n,
        i,
        a,
        o,
        s = this;
      return r = 0, o = this.animation, i = o.numFrames, n = o.frames, a = o.numPlays, (e = function () {
        var o, c;
        if (o = r++ % i, c = n[o], s.renderFrame(t, o), i > 1 && r / i < a) return s.animation._timeout = setTimeout(e, c.delay);
      })();
    }, a.prototype.stopAnimation = function () {
      var t;
      return clearTimeout(null != (t = this.animation) ? t._timeout : void 0);
    }, a.prototype.render = function (t) {
      var e, r;
      return t._png && t._png.stopAnimation(), t._png = this, t.width = this.width, t.height = this.height, e = t.getContext("2d"), this.animation ? (this.decodeFrames(e), this.animate(e)) : (r = e.createImageData(this.width, this.height), this.copyToImageData(r, this.decodePixels()), e.putImageData(r, 0, 0));
    }, a;
  }();
/**
 * @license
 *
 * Copyright (c) 2014 James Robb, https://github.com/jamesbrobb
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
/**
 * @license
 * (c) Dean McNamee <dean@gmail.com>, 2013.
 *
 * https://github.com/deanm/omggif
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * omggif is a JavaScript implementation of a GIF 89a encoder and decoder,
 * including animation and compression.  It does not rely on any specific
 * underlying system, so should run in the browser, Node, or Plask.
 */
function Zt(t) {
  var e = 0;
  if (71 !== t[e++] || 73 !== t[e++] || 70 !== t[e++] || 56 !== t[e++] || 56 != (t[e++] + 1 & 253) || 97 !== t[e++]) throw new Error("Invalid GIF 87a/89a header.");
  var r = t[e++] | t[e++] << 8,
    n = t[e++] | t[e++] << 8,
    i = t[e++],
    a = i >> 7,
    o = 1 << (7 & i) + 1;
  t[e++];
  t[e++];
  var s = null,
    c = null;
  a && (s = e, c = o, e += 3 * o);
  var u = !0,
    h = [],
    l = 0,
    f = null,
    d = 0,
    p = null;
  for (this.width = r, this.height = n; u && e < t.length;) switch (t[e++]) {
    case 33:
      switch (t[e++]) {
        case 255:
          if (11 !== t[e] || 78 == t[e + 1] && 69 == t[e + 2] && 84 == t[e + 3] && 83 == t[e + 4] && 67 == t[e + 5] && 65 == t[e + 6] && 80 == t[e + 7] && 69 == t[e + 8] && 50 == t[e + 9] && 46 == t[e + 10] && 48 == t[e + 11] && 3 == t[e + 12] && 1 == t[e + 13] && 0 == t[e + 16]) e += 14, p = t[e++] | t[e++] << 8, e++;else for (e += 12;;) {
            if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
            if (0 === P) break;
            e += P;
          }
          break;
        case 249:
          if (4 !== t[e++] || 0 !== t[e + 4]) throw new Error("Invalid graphics extension block.");
          var g = t[e++];
          l = t[e++] | t[e++] << 8, f = t[e++], 0 == (1 & g) && (f = null), d = g >> 2 & 7, e++;
          break;
        case 254:
          for (;;) {
            if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
            if (0 === P) break;
            e += P;
          }
          break;
        default:
          throw new Error("Unknown graphic control label: 0x" + t[e - 1].toString(16));
      }
      break;
    case 44:
      var m = t[e++] | t[e++] << 8,
        v = t[e++] | t[e++] << 8,
        b = t[e++] | t[e++] << 8,
        y = t[e++] | t[e++] << 8,
        w = t[e++],
        N = w >> 6 & 1,
        L = 1 << (7 & w) + 1,
        A = s,
        x = c,
        S = !1;
      if (w >> 7) {
        S = !0;
        A = e, x = L, e += 3 * L;
      }
      var _ = e;
      for (e++;;) {
        var P;
        if (!((P = t[e++]) >= 0)) throw Error("Invalid block size");
        if (0 === P) break;
        e += P;
      }
      h.push({
        x: m,
        y: v,
        width: b,
        height: y,
        has_local_palette: S,
        palette_offset: A,
        palette_size: x,
        data_offset: _,
        data_length: e - _,
        transparent_index: f,
        interlaced: !!N,
        delay: l,
        disposal: d
      });
      break;
    case 59:
      u = !1;
      break;
    default:
      throw new Error("Unknown gif block: 0x" + t[e - 1].toString(16));
  }
  this.numFrames = function () {
    return h.length;
  }, this.loopCount = function () {
    return p;
  }, this.frameInfo = function (t) {
    if (t < 0 || t >= h.length) throw new Error("Frame index out of range.");
    return h[t];
  }, this.decodeAndBlitFrameBGRA = function (e, n) {
    var i = this.frameInfo(e),
      a = i.width * i.height,
      o = new Uint8Array(a);
    $t(t, i.data_offset, o, a);
    var s = i.palette_offset,
      c = i.transparent_index;
    null === c && (c = 256);
    var u = i.width,
      h = r - u,
      l = u,
      f = 4 * (i.y * r + i.x),
      d = 4 * ((i.y + i.height) * r + i.x),
      p = f,
      g = 4 * h;
    !0 === i.interlaced && (g += 4 * r * 7);
    for (var m = 8, v = 0, b = o.length; v < b; ++v) {
      var y = o[v];
      if (0 === l && (l = u, (p += g) >= d && (g = 4 * h + 4 * r * (m - 1), p = f + (u + h) * (m << 1), m >>= 1)), y === c) p += 4;else {
        var w = t[s + 3 * y],
          N = t[s + 3 * y + 1],
          L = t[s + 3 * y + 2];
        n[p++] = L, n[p++] = N, n[p++] = w, n[p++] = 255;
      }
      --l;
    }
  }, this.decodeAndBlitFrameRGBA = function (e, n) {
    var i = this.frameInfo(e),
      a = i.width * i.height,
      o = new Uint8Array(a);
    $t(t, i.data_offset, o, a);
    var s = i.palette_offset,
      c = i.transparent_index;
    null === c && (c = 256);
    var u = i.width,
      h = r - u,
      l = u,
      f = 4 * (i.y * r + i.x),
      d = 4 * ((i.y + i.height) * r + i.x),
      p = f,
      g = 4 * h;
    !0 === i.interlaced && (g += 4 * r * 7);
    for (var m = 8, v = 0, b = o.length; v < b; ++v) {
      var y = o[v];
      if (0 === l && (l = u, (p += g) >= d && (g = 4 * h + 4 * r * (m - 1), p = f + (u + h) * (m << 1), m >>= 1)), y === c) p += 4;else {
        var w = t[s + 3 * y],
          N = t[s + 3 * y + 1],
          L = t[s + 3 * y + 2];
        n[p++] = w, n[p++] = N, n[p++] = L, n[p++] = 255;
      }
      --l;
    }
  };
}
function $t(t, e, r, n) {
  for (var i = t[e++], o = 1 << i, s = o + 1, c = s + 1, u = i + 1, h = (1 << u) - 1, l = 0, f = 0, d = 0, p = t[e++], g = new Int32Array(4096), m = null;;) {
    for (; l < 16 && 0 !== p;) f |= t[e++] << l, l += 8, 1 === p ? p = t[e++] : --p;
    if (l < u) break;
    var v = f & h;
    if (f >>= u, l -= u, v !== o) {
      if (v === s) break;
      for (var b = v < c ? v : m, y = 0, w = b; w > o;) w = g[w] >> 8, ++y;
      var N = w;
      if (d + y + (b !== v ? 1 : 0) > n) return void a.log("Warning, gif stream longer than expected.");
      r[d++] = N;
      var L = d += y;
      for (b !== v && (r[d++] = N), w = b; y--;) w = g[w], r[--L] = 255 & w, w >>= 8;
      null !== m && c < 4096 && (g[c++] = m << 8 | N, c >= h + 1 && u < 12 && (++u, h = h << 1 | 1)), m = v;
    } else c = s + 1, h = (1 << (u = i + 1)) - 1, m = null;
  }
  return d !== n && a.log("Warning, gif stream shorter than expected."), r;
}
/**
 * @license
  Copyright (c) 2008, Adobe Systems Incorporated
  All rights reserved.

  Redistribution and use in source and binary forms, with or without 
  modification, are permitted provided that the following conditions are
  met:

  * Redistributions of source code must retain the above copyright notice, 
    this list of conditions and the following disclaimer.
  
  * Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the 
    documentation and/or other materials provided with the distribution.
  
  * Neither the name of Adobe Systems Incorporated nor the names of its 
    contributors may be used to endorse or promote products derived from 
    this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
function Qt(t) {
  var e,
    r,
    n,
    i,
    a,
    o = Math.floor,
    s = new Array(64),
    c = new Array(64),
    u = new Array(64),
    h = new Array(64),
    l = new Array(65535),
    f = new Array(65535),
    d = new Array(64),
    p = new Array(64),
    g = [],
    m = 0,
    v = 7,
    b = new Array(64),
    y = new Array(64),
    w = new Array(64),
    N = new Array(256),
    L = new Array(2048),
    A = [0, 1, 5, 6, 14, 15, 27, 28, 2, 4, 7, 13, 16, 26, 29, 42, 3, 8, 12, 17, 25, 30, 41, 43, 9, 11, 18, 24, 31, 40, 44, 53, 10, 19, 23, 32, 39, 45, 52, 54, 20, 22, 33, 38, 46, 51, 55, 60, 21, 34, 37, 47, 50, 56, 59, 61, 35, 36, 48, 49, 57, 58, 62, 63],
    x = [0, 0, 1, 5, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
    S = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    _ = [0, 0, 2, 1, 3, 3, 2, 4, 3, 5, 5, 4, 4, 0, 0, 1, 125],
    P = [1, 2, 3, 0, 4, 17, 5, 18, 33, 49, 65, 6, 19, 81, 97, 7, 34, 113, 20, 50, 129, 145, 161, 8, 35, 66, 177, 193, 21, 82, 209, 240, 36, 51, 98, 114, 130, 9, 10, 22, 23, 24, 25, 26, 37, 38, 39, 40, 41, 42, 52, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250],
    k = [0, 0, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],
    I = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    F = [0, 0, 2, 1, 2, 4, 4, 3, 4, 7, 5, 4, 4, 0, 1, 2, 119],
    C = [0, 1, 2, 3, 17, 4, 5, 33, 49, 6, 18, 65, 81, 7, 97, 113, 19, 34, 50, 129, 8, 20, 66, 145, 161, 177, 193, 9, 35, 51, 82, 240, 21, 98, 114, 209, 10, 22, 36, 52, 225, 37, 241, 23, 24, 25, 26, 38, 39, 40, 41, 42, 53, 54, 55, 56, 57, 58, 67, 68, 69, 70, 71, 72, 73, 74, 83, 84, 85, 86, 87, 88, 89, 90, 99, 100, 101, 102, 103, 104, 105, 106, 115, 116, 117, 118, 119, 120, 121, 122, 130, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 197, 198, 199, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 217, 218, 226, 227, 228, 229, 230, 231, 232, 233, 234, 242, 243, 244, 245, 246, 247, 248, 249, 250];
  function j(t, e) {
    for (var r = 0, n = 0, i = new Array(), a = 1; a <= 16; a++) {
      for (var o = 1; o <= t[a]; o++) i[e[n]] = [], i[e[n]][0] = r, i[e[n]][1] = a, n++, r++;
      r *= 2;
    }
    return i;
  }
  function O(t) {
    for (var e = t[0], r = t[1] - 1; r >= 0;) e & 1 << r && (m |= 1 << v), r--, --v < 0 && (255 == m ? (B(255), B(0)) : B(m), v = 7, m = 0);
  }
  function B(t) {
    g.push(t);
  }
  function M(t) {
    B(t >> 8 & 255), B(255 & t);
  }
  function E(t, e, r, n, i) {
    for (var a, o = i[0], s = i[240], c = function (t, e) {
        var r,
          n,
          i,
          a,
          o,
          s,
          c,
          u,
          h,
          l,
          f = 0;
        for (h = 0; h < 8; ++h) {
          r = t[f], n = t[f + 1], i = t[f + 2], a = t[f + 3], o = t[f + 4], s = t[f + 5], c = t[f + 6];
          var p = r + (u = t[f + 7]),
            g = r - u,
            m = n + c,
            v = n - c,
            b = i + s,
            y = i - s,
            w = a + o,
            N = a - o,
            L = p + w,
            A = p - w,
            x = m + b,
            S = m - b;
          t[f] = L + x, t[f + 4] = L - x;
          var _ = .707106781 * (S + A);
          t[f + 2] = A + _, t[f + 6] = A - _;
          var P = .382683433 * ((L = N + y) - (S = v + g)),
            k = .5411961 * L + P,
            I = 1.306562965 * S + P,
            F = .707106781 * (x = y + v),
            C = g + F,
            j = g - F;
          t[f + 5] = j + k, t[f + 3] = j - k, t[f + 1] = C + I, t[f + 7] = C - I, f += 8;
        }
        for (f = 0, h = 0; h < 8; ++h) {
          r = t[f], n = t[f + 8], i = t[f + 16], a = t[f + 24], o = t[f + 32], s = t[f + 40], c = t[f + 48];
          var O = r + (u = t[f + 56]),
            B = r - u,
            M = n + c,
            E = n - c,
            q = i + s,
            D = i - s,
            R = a + o,
            T = a - o,
            U = O + R,
            z = O - R,
            H = M + q,
            W = M - q;
          t[f] = U + H, t[f + 32] = U - H;
          var V = .707106781 * (W + z);
          t[f + 16] = z + V, t[f + 48] = z - V;
          var G = .382683433 * ((U = T + D) - (W = E + B)),
            Y = .5411961 * U + G,
            J = 1.306562965 * W + G,
            X = .707106781 * (H = D + E),
            K = B + X,
            Z = B - X;
          t[f + 40] = Z + Y, t[f + 24] = Z - Y, t[f + 8] = K + J, t[f + 56] = K - J, f++;
        }
        for (h = 0; h < 64; ++h) l = t[h] * e[h], d[h] = l > 0 ? l + .5 | 0 : l - .5 | 0;
        return d;
      }(t, e), u = 0; u < 64; ++u) p[A[u]] = c[u];
    var h = p[0] - r;
    r = p[0], 0 == h ? O(n[0]) : (O(n[f[a = 32767 + h]]), O(l[a]));
    for (var g = 63; g > 0 && 0 == p[g];) g--;
    if (0 == g) return O(o), r;
    for (var m, v = 1; v <= g;) {
      for (var b = v; 0 == p[v] && v <= g;) ++v;
      var y = v - b;
      if (y >= 16) {
        m = y >> 4;
        for (var w = 1; w <= m; ++w) O(s);
        y &= 15;
      }
      a = 32767 + p[v], O(i[(y << 4) + f[a]]), O(l[a]), v++;
    }
    return 63 != g && O(o), r;
  }
  function q(t) {
    (t = Math.min(Math.max(t, 1), 100), a != t) && (!function (t) {
      for (var e = [16, 11, 10, 16, 24, 40, 51, 61, 12, 12, 14, 19, 26, 58, 60, 55, 14, 13, 16, 24, 40, 57, 69, 56, 14, 17, 22, 29, 51, 87, 80, 62, 18, 22, 37, 56, 68, 109, 103, 77, 24, 35, 55, 64, 81, 104, 113, 92, 49, 64, 78, 87, 103, 121, 120, 101, 72, 92, 95, 98, 112, 100, 103, 99], r = 0; r < 64; r++) {
        var n = o((e[r] * t + 50) / 100);
        n = Math.min(Math.max(n, 1), 255), s[A[r]] = n;
      }
      for (var i = [17, 18, 24, 47, 99, 99, 99, 99, 18, 21, 26, 66, 99, 99, 99, 99, 24, 26, 56, 99, 99, 99, 99, 99, 47, 66, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99], a = 0; a < 64; a++) {
        var l = o((i[a] * t + 50) / 100);
        l = Math.min(Math.max(l, 1), 255), c[A[a]] = l;
      }
      for (var f = [1, 1.387039845, 1.306562965, 1.175875602, 1, .785694958, .5411961, .275899379], d = 0, p = 0; p < 8; p++) for (var g = 0; g < 8; g++) u[d] = 1 / (s[A[d]] * f[p] * f[g] * 8), h[d] = 1 / (c[A[d]] * f[p] * f[g] * 8), d++;
    }(t < 50 ? Math.floor(5e3 / t) : Math.floor(200 - 2 * t)), a = t);
  }
  this.encode = function (t, a) {
    a && q(a), g = new Array(), m = 0, v = 7, M(65496), M(65504), M(16), B(74), B(70), B(73), B(70), B(0), B(1), B(1), B(0), M(1), M(1), B(0), B(0), function () {
      M(65499), M(132), B(0);
      for (var t = 0; t < 64; t++) B(s[t]);
      B(1);
      for (var e = 0; e < 64; e++) B(c[e]);
    }(), function (t, e) {
      M(65472), M(17), B(8), M(e), M(t), B(3), B(1), B(17), B(0), B(2), B(17), B(1), B(3), B(17), B(1);
    }(t.width, t.height), function () {
      M(65476), M(418), B(0);
      for (var t = 0; t < 16; t++) B(x[t + 1]);
      for (var e = 0; e <= 11; e++) B(S[e]);
      B(16);
      for (var r = 0; r < 16; r++) B(_[r + 1]);
      for (var n = 0; n <= 161; n++) B(P[n]);
      B(1);
      for (var i = 0; i < 16; i++) B(k[i + 1]);
      for (var a = 0; a <= 11; a++) B(I[a]);
      B(17);
      for (var o = 0; o < 16; o++) B(F[o + 1]);
      for (var s = 0; s <= 161; s++) B(C[s]);
    }(), M(65498), M(12), B(3), B(1), B(0), B(2), B(17), B(3), B(17), B(0), B(63), B(0);
    var o = 0,
      l = 0,
      f = 0;
    m = 0, v = 7, this.encode.displayName = "_encode_";
    for (var d, p, N, A, j, D, R, T, U, z = t.data, H = t.width, W = t.height, V = 4 * H, G = 0; G < W;) {
      for (d = 0; d < V;) {
        for (j = V * G + d, R = -1, T = 0, U = 0; U < 64; U++) D = j + (T = U >> 3) * V + (R = 4 * (7 & U)), G + T >= W && (D -= V * (G + 1 + T - W)), d + R >= V && (D -= d + R - V + 4), p = z[D++], N = z[D++], A = z[D++], b[U] = (L[p] + L[N + 256 >> 0] + L[A + 512 >> 0] >> 16) - 128, y[U] = (L[p + 768 >> 0] + L[N + 1024 >> 0] + L[A + 1280 >> 0] >> 16) - 128, w[U] = (L[p + 1280 >> 0] + L[N + 1536 >> 0] + L[A + 1792 >> 0] >> 16) - 128;
        o = E(b, u, o, e, n), l = E(y, h, l, r, i), f = E(w, h, f, r, i), d += 32;
      }
      G += 8;
    }
    if (v >= 0) {
      var Y = [];
      Y[1] = v + 1, Y[0] = (1 << v + 1) - 1, O(Y);
    }
    return M(65497), new Uint8Array(g);
  }, t = t || 50, function () {
    for (var t = String.fromCharCode, e = 0; e < 256; e++) N[e] = t(e);
  }(), e = j(x, S), r = j(k, I), n = j(_, P), i = j(F, C), function () {
    for (var t = 1, e = 2, r = 1; r <= 15; r++) {
      for (var n = t; n < e; n++) f[32767 + n] = r, l[32767 + n] = [], l[32767 + n][1] = r, l[32767 + n][0] = n;
      for (var i = -(e - 1); i <= -t; i++) f[32767 + i] = r, l[32767 + i] = [], l[32767 + i][1] = r, l[32767 + i][0] = e - 1 + i;
      t <<= 1, e <<= 1;
    }
  }(), function () {
    for (var t = 0; t < 256; t++) L[t] = 19595 * t, L[t + 256 >> 0] = 38470 * t, L[t + 512 >> 0] = 7471 * t + 32768, L[t + 768 >> 0] = -11059 * t, L[t + 1024 >> 0] = -21709 * t, L[t + 1280 >> 0] = 32768 * t + 8421375, L[t + 1536 >> 0] = -27439 * t, L[t + 1792 >> 0] = -5329 * t;
  }(), q(t);
}
/**
 * @license
 * Copyright (c) 2017 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function te(t, e) {
  if (this.pos = 0, this.buffer = t, this.datav = new DataView(t.buffer), this.is_with_alpha = !!e, this.bottom_up = !0, this.flag = String.fromCharCode(this.buffer[0]) + String.fromCharCode(this.buffer[1]), this.pos += 2, -1 === ["BM", "BA", "CI", "CP", "IC", "PT"].indexOf(this.flag)) throw new Error("Invalid BMP File");
  this.parseHeader(), this.parseBGR();
}
function ee(t) {
  function e(t) {
    if (!t) throw Error("assert :P");
  }
  function r(t, e, r) {
    for (var n = 0; 4 > n; n++) if (t[e + n] != r.charCodeAt(n)) return !0;
    return !1;
  }
  function n(t, e, r, n, i) {
    for (var a = 0; a < i; a++) t[e + a] = r[n + a];
  }
  function i(t, e, r, n) {
    for (var i = 0; i < n; i++) t[e + i] = r;
  }
  function a(t) {
    return new Int32Array(t);
  }
  function o(t, e) {
    for (var r = [], n = 0; n < t; n++) r.push(new e());
    return r;
  }
  function s(t, e) {
    var r = [];
    return function t(r, n, i) {
      for (var a = i[n], o = 0; o < a && (r.push(i.length > n + 1 ? [] : new e()), !(i.length < n + 1)); o++) t(r[o], n + 1, i);
    }(r, 0, t), r;
  }
  var c = function () {
    var t = this;
    function c(t, e) {
      for (var r = 1 << e - 1 >>> 0; t & r;) r >>>= 1;
      return r ? (t & r - 1) + r : t;
    }
    function u(t, r, n, i, a) {
      e(!(i % n));
      do {
        t[r + (i -= n)] = a;
      } while (0 < i);
    }
    function h(t, r, n, i, o) {
      if (e(2328 >= o), 512 >= o) var s = a(512);else if (null == (s = a(o))) return 0;
      return function (t, r, n, i, o, s) {
        var h,
          f,
          d = r,
          p = 1 << n,
          g = a(16),
          m = a(16);
        for (e(0 != o), e(null != i), e(null != t), e(0 < n), f = 0; f < o; ++f) {
          if (15 < i[f]) return 0;
          ++g[i[f]];
        }
        if (g[0] == o) return 0;
        for (m[1] = 0, h = 1; 15 > h; ++h) {
          if (g[h] > 1 << h) return 0;
          m[h + 1] = m[h] + g[h];
        }
        for (f = 0; f < o; ++f) h = i[f], 0 < i[f] && (s[m[h]++] = f);
        if (1 == m[15]) return (i = new l()).g = 0, i.value = s[0], u(t, d, 1, p, i), p;
        var v,
          b = -1,
          y = p - 1,
          w = 0,
          N = 1,
          L = 1,
          A = 1 << n;
        for (f = 0, h = 1, o = 2; h <= n; ++h, o <<= 1) {
          if (N += L <<= 1, 0 > (L -= g[h])) return 0;
          for (; 0 < g[h]; --g[h]) (i = new l()).g = h, i.value = s[f++], u(t, d + w, o, A, i), w = c(w, h);
        }
        for (h = n + 1, o = 2; 15 >= h; ++h, o <<= 1) {
          if (N += L <<= 1, 0 > (L -= g[h])) return 0;
          for (; 0 < g[h]; --g[h]) {
            if (i = new l(), (w & y) != b) {
              for (d += A, v = 1 << (b = h) - n; 15 > b && !(0 >= (v -= g[b]));) ++b, v <<= 1;
              p += A = 1 << (v = b - n), t[r + (b = w & y)].g = v + n, t[r + b].value = d - r - b;
            }
            i.g = h - n, i.value = s[f++], u(t, d + (w >> n), o, A, i), w = c(w, h);
          }
        }
        return N != 2 * m[15] - 1 ? 0 : p;
      }(t, r, n, i, o, s);
    }
    function l() {
      this.value = this.g = 0;
    }
    function f() {
      this.value = this.g = 0;
    }
    function d() {
      this.G = o(5, l), this.H = a(5), this.jc = this.Qb = this.qb = this.nd = 0, this.pd = o(Dr, f);
    }
    function p(t, r, n, i) {
      e(null != t), e(null != r), e(2147483648 > i), t.Ca = 254, t.I = 0, t.b = -8, t.Ka = 0, t.oa = r, t.pa = n, t.Jd = r, t.Yc = n + i, t.Zc = 4 <= i ? n + i - 4 + 1 : n, _(t);
    }
    function g(t, e) {
      for (var r = 0; 0 < e--;) r |= k(t, 128) << e;
      return r;
    }
    function m(t, e) {
      var r = g(t, e);
      return P(t) ? -r : r;
    }
    function v(t, r, n, i) {
      var a,
        o = 0;
      for (e(null != t), e(null != r), e(4294967288 > i), t.Sb = i, t.Ra = 0, t.u = 0, t.h = 0, 4 < i && (i = 4), a = 0; a < i; ++a) o += r[n + a] << 8 * a;
      t.Ra = o, t.bb = i, t.oa = r, t.pa = n;
    }
    function b(t) {
      for (; 8 <= t.u && t.bb < t.Sb;) t.Ra >>>= 8, t.Ra += t.oa[t.pa + t.bb] << Ur - 8 >>> 0, ++t.bb, t.u -= 8;
      A(t) && (t.h = 1, t.u = 0);
    }
    function y(t, r) {
      if (e(0 <= r), !t.h && r <= Tr) {
        var n = L(t) & Rr[r];
        return t.u += r, b(t), n;
      }
      return t.h = 1, t.u = 0;
    }
    function w() {
      this.b = this.Ca = this.I = 0, this.oa = [], this.pa = 0, this.Jd = [], this.Yc = 0, this.Zc = [], this.Ka = 0;
    }
    function N() {
      this.Ra = 0, this.oa = [], this.h = this.u = this.bb = this.Sb = this.pa = 0;
    }
    function L(t) {
      return t.Ra >>> (t.u & Ur - 1) >>> 0;
    }
    function A(t) {
      return e(t.bb <= t.Sb), t.h || t.bb == t.Sb && t.u > Ur;
    }
    function x(t, e) {
      t.u = e, t.h = A(t);
    }
    function S(t) {
      t.u >= zr && (e(t.u >= zr), b(t));
    }
    function _(t) {
      e(null != t && null != t.oa), t.pa < t.Zc ? (t.I = (t.oa[t.pa++] | t.I << 8) >>> 0, t.b += 8) : (e(null != t && null != t.oa), t.pa < t.Yc ? (t.b += 8, t.I = t.oa[t.pa++] | t.I << 8) : t.Ka ? t.b = 0 : (t.I <<= 8, t.b += 8, t.Ka = 1));
    }
    function P(t) {
      return g(t, 1);
    }
    function k(t, e) {
      var r = t.Ca;
      0 > t.b && _(t);
      var n = t.b,
        i = r * e >>> 8,
        a = (t.I >>> n > i) + 0;
      for (a ? (r -= i, t.I -= i + 1 << n >>> 0) : r = i + 1, n = r, i = 0; 256 <= n;) i += 8, n >>= 8;
      return n = 7 ^ i + Hr[n], t.b -= n, t.Ca = (r << n) - 1, a;
    }
    function I(t, e, r) {
      t[e + 0] = r >> 24 & 255, t[e + 1] = r >> 16 & 255, t[e + 2] = r >> 8 & 255, t[e + 3] = r >> 0 & 255;
    }
    function F(t, e) {
      return t[e + 0] << 0 | t[e + 1] << 8;
    }
    function C(t, e) {
      return F(t, e) | t[e + 2] << 16;
    }
    function j(t, e) {
      return F(t, e) | F(t, e + 2) << 16;
    }
    function O(t, r) {
      var n = 1 << r;
      return e(null != t), e(0 < r), t.X = a(n), null == t.X ? 0 : (t.Mb = 32 - r, t.Xa = r, 1);
    }
    function B(t, r) {
      e(null != t), e(null != r), e(t.Xa == r.Xa), n(r.X, 0, t.X, 0, 1 << r.Xa);
    }
    function M() {
      this.X = [], this.Xa = this.Mb = 0;
    }
    function E(t, r, n, i) {
      e(null != n), e(null != i);
      var a = n[0],
        o = i[0];
      return 0 == a && (a = (t * o + r / 2) / r), 0 == o && (o = (r * a + t / 2) / t), 0 >= a || 0 >= o ? 0 : (n[0] = a, i[0] = o, 1);
    }
    function q(t, e) {
      return t + (1 << e) - 1 >>> e;
    }
    function D(t, e) {
      return ((4278255360 & t) + (4278255360 & e) >>> 0 & 4278255360) + ((16711935 & t) + (16711935 & e) >>> 0 & 16711935) >>> 0;
    }
    function R(e, r) {
      t[r] = function (r, n, i, a, o, s, c) {
        var u;
        for (u = 0; u < o; ++u) {
          var h = t[e](s[c + u - 1], i, a + u);
          s[c + u] = D(r[n + u], h);
        }
      };
    }
    function T() {
      this.ud = this.hd = this.jd = 0;
    }
    function U(t, e) {
      return ((4278124286 & (t ^ e)) >>> 1) + (t & e) >>> 0;
    }
    function z(t) {
      return 0 <= t && 256 > t ? t : 0 > t ? 0 : 255 < t ? 255 : void 0;
    }
    function H(t, e) {
      return z(t + (t - e + .5 >> 1));
    }
    function W(t, e, r) {
      return Math.abs(e - r) - Math.abs(t - r);
    }
    function V(t, e, r, n, i, a, o) {
      for (n = a[o - 1], r = 0; r < i; ++r) a[o + r] = n = D(t[e + r], n);
    }
    function G(t, e, r, n, i) {
      var a;
      for (a = 0; a < r; ++a) {
        var o = t[e + a],
          s = o >> 8 & 255,
          c = 16711935 & (c = (c = 16711935 & o) + ((s << 16) + s));
        n[i + a] = (4278255360 & o) + c >>> 0;
      }
    }
    function Y(t, e) {
      e.jd = t >> 0 & 255, e.hd = t >> 8 & 255, e.ud = t >> 16 & 255;
    }
    function J(t, e, r, n, i, a) {
      var o;
      for (o = 0; o < n; ++o) {
        var s = e[r + o],
          c = s >>> 8,
          u = s,
          h = 255 & (h = (h = s >>> 16) + ((t.jd << 24 >> 24) * (c << 24 >> 24) >>> 5));
        u = 255 & (u = (u = u + ((t.hd << 24 >> 24) * (c << 24 >> 24) >>> 5)) + ((t.ud << 24 >> 24) * (h << 24 >> 24) >>> 5));
        i[a + o] = (4278255360 & s) + (h << 16) + u;
      }
    }
    function X(e, r, n, i, a) {
      t[r] = function (t, e, r, n, o, s, c, u, h) {
        for (n = c; n < u; ++n) for (c = 0; c < h; ++c) o[s++] = a(r[i(t[e++])]);
      }, t[e] = function (e, r, o, s, c, u, h) {
        var l = 8 >> e.b,
          f = e.Ea,
          d = e.K[0],
          p = e.w;
        if (8 > l) for (e = (1 << e.b) - 1, p = (1 << l) - 1; r < o; ++r) {
          var g,
            m = 0;
          for (g = 0; g < f; ++g) g & e || (m = i(s[c++])), u[h++] = a(d[m & p]), m >>= l;
        } else t["VP8LMapColor" + n](s, c, d, p, u, h, r, o, f);
      };
    }
    function K(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = t[e++];
        n[i++] = a >> 16 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 0 & 255;
      }
    }
    function Z(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = t[e++];
        n[i++] = a >> 16 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 0 & 255, n[i++] = a >> 24 & 255;
      }
    }
    function $(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = (o = t[e++]) >> 16 & 240 | o >> 12 & 15,
          o = o >> 0 & 240 | o >> 28 & 15;
        n[i++] = a, n[i++] = o;
      }
    }
    function Q(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = (o = t[e++]) >> 16 & 248 | o >> 13 & 7,
          o = o >> 5 & 224 | o >> 3 & 31;
        n[i++] = a, n[i++] = o;
      }
    }
    function tt(t, e, r, n, i) {
      for (r = e + r; e < r;) {
        var a = t[e++];
        n[i++] = a >> 0 & 255, n[i++] = a >> 8 & 255, n[i++] = a >> 16 & 255;
      }
    }
    function et(t, e, r, i, a, o) {
      if (0 == o) for (r = e + r; e < r;) I(i, ((o = t[e++])[0] >> 24 | o[1] >> 8 & 65280 | o[2] << 8 & 16711680 | o[3] << 24) >>> 0), a += 32;else n(i, a, t, e, r);
    }
    function rt(e, r) {
      t[r][0] = t[e + "0"], t[r][1] = t[e + "1"], t[r][2] = t[e + "2"], t[r][3] = t[e + "3"], t[r][4] = t[e + "4"], t[r][5] = t[e + "5"], t[r][6] = t[e + "6"], t[r][7] = t[e + "7"], t[r][8] = t[e + "8"], t[r][9] = t[e + "9"], t[r][10] = t[e + "10"], t[r][11] = t[e + "11"], t[r][12] = t[e + "12"], t[r][13] = t[e + "13"], t[r][14] = t[e + "0"], t[r][15] = t[e + "0"];
    }
    function nt(t) {
      return t == Hn || t == Wn || t == Vn || t == Gn;
    }
    function it() {
      this.eb = [], this.size = this.A = this.fb = 0;
    }
    function at() {
      this.y = [], this.f = [], this.ea = [], this.F = [], this.Tc = this.Ed = this.Cd = this.Fd = this.lb = this.Db = this.Ab = this.fa = this.J = this.W = this.N = this.O = 0;
    }
    function ot() {
      this.Rd = this.height = this.width = this.S = 0, this.f = {}, this.f.RGBA = new it(), this.f.kb = new at(), this.sd = null;
    }
    function st() {
      this.width = [0], this.height = [0], this.Pd = [0], this.Qd = [0], this.format = [0];
    }
    function ct() {
      this.Id = this.fd = this.Md = this.hb = this.ib = this.da = this.bd = this.cd = this.j = this.v = this.Da = this.Sd = this.ob = 0;
    }
    function ut(t) {
      return alert("todo:WebPSamplerProcessPlane"), t.T;
    }
    function ht(t, e) {
      var r = t.T,
        i = e.ba.f.RGBA,
        a = i.eb,
        o = i.fb + t.ka * i.A,
        s = vi[e.ba.S],
        c = t.y,
        u = t.O,
        h = t.f,
        l = t.N,
        f = t.ea,
        d = t.W,
        p = e.cc,
        g = e.dc,
        m = e.Mc,
        v = e.Nc,
        b = t.ka,
        y = t.ka + t.T,
        w = t.U,
        N = w + 1 >> 1;
      for (0 == b ? s(c, u, null, null, h, l, f, d, h, l, f, d, a, o, null, null, w) : (s(e.ec, e.fc, c, u, p, g, m, v, h, l, f, d, a, o - i.A, a, o, w), ++r); b + 2 < y; b += 2) p = h, g = l, m = f, v = d, l += t.Rc, d += t.Rc, o += 2 * i.A, s(c, (u += 2 * t.fa) - t.fa, c, u, p, g, m, v, h, l, f, d, a, o - i.A, a, o, w);
      return u += t.fa, t.j + y < t.o ? (n(e.ec, e.fc, c, u, w), n(e.cc, e.dc, h, l, N), n(e.Mc, e.Nc, f, d, N), r--) : 1 & y || s(c, u, null, null, h, l, f, d, h, l, f, d, a, o + i.A, null, null, w), r;
    }
    function lt(t, r, n) {
      var i = t.F,
        a = [t.J];
      if (null != i) {
        var o = t.U,
          s = r.ba.S,
          c = s == Tn || s == Vn;
        r = r.ba.f.RGBA;
        var u = [0],
          h = t.ka;
        u[0] = t.T, t.Kb && (0 == h ? --u[0] : (--h, a[0] -= t.width), t.j + t.ka + t.T == t.o && (u[0] = t.o - t.j - h));
        var l = r.eb;
        h = r.fb + h * r.A;
        t = Sn(i, a[0], t.width, o, u, l, h + (c ? 0 : 3), r.A), e(n == u), t && nt(s) && An(l, h, c, o, u, r.A);
      }
      return 0;
    }
    function ft(t) {
      var e = t.ma,
        r = e.ba.S,
        n = 11 > r,
        i = r == qn || r == Rn || r == Tn || r == Un || 12 == r || nt(r);
      if (e.memory = null, e.Ib = null, e.Jb = null, e.Nd = null, !Mr(e.Oa, t, i ? 11 : 12)) return 0;
      if (i && nt(r) && br(), t.da) alert("todo:use_scaling");else {
        if (n) {
          if (e.Ib = ut, t.Kb) {
            if (r = t.U + 1 >> 1, e.memory = a(t.U + 2 * r), null == e.memory) return 0;
            e.ec = e.memory, e.fc = 0, e.cc = e.ec, e.dc = e.fc + t.U, e.Mc = e.cc, e.Nc = e.dc + r, e.Ib = ht, br();
          }
        } else alert("todo:EmitYUV");
        i && (e.Jb = lt, n && mr());
      }
      if (n && !Ci) {
        for (t = 0; 256 > t; ++t) ji[t] = 89858 * (t - 128) + _i >> Si, Mi[t] = -22014 * (t - 128) + _i, Bi[t] = -45773 * (t - 128), Oi[t] = 113618 * (t - 128) + _i >> Si;
        for (t = Pi; t < ki; ++t) e = 76283 * (t - 16) + _i >> Si, Ei[t - Pi] = Vt(e, 255), qi[t - Pi] = Vt(e + 8 >> 4, 15);
        Ci = 1;
      }
      return 1;
    }
    function dt(t) {
      var r = t.ma,
        n = t.U,
        i = t.T;
      return e(!(1 & t.ka)), 0 >= n || 0 >= i ? 0 : (n = r.Ib(t, r), null != r.Jb && r.Jb(t, r, n), r.Dc += n, 1);
    }
    function pt(t) {
      t.ma.memory = null;
    }
    function gt(t, e, r, n) {
      return 47 != y(t, 8) ? 0 : (e[0] = y(t, 14) + 1, r[0] = y(t, 14) + 1, n[0] = y(t, 1), 0 != y(t, 3) ? 0 : !t.h);
    }
    function mt(t, e) {
      if (4 > t) return t + 1;
      var r = t - 2 >> 1;
      return (2 + (1 & t) << r) + y(e, r) + 1;
    }
    function vt(t, e) {
      return 120 < e ? e - 120 : 1 <= (r = ((r = $n[e - 1]) >> 4) * t + (8 - (15 & r))) ? r : 1;
      var r;
    }
    function bt(t, e, r) {
      var n = L(r),
        i = t[e += 255 & n].g - 8;
      return 0 < i && (x(r, r.u + 8), n = L(r), e += t[e].value, e += n & (1 << i) - 1), x(r, r.u + t[e].g), t[e].value;
    }
    function yt(t, r, n) {
      return n.g += t.g, n.value += t.value << r >>> 0, e(8 >= n.g), t.g;
    }
    function wt(t, r, n) {
      var i = t.xc;
      return e((r = 0 == i ? 0 : t.vc[t.md * (n >> i) + (r >> i)]) < t.Wb), t.Ya[r];
    }
    function Nt(t, r, i, a) {
      var o = t.ab,
        s = t.c * r,
        c = t.C;
      r = c + r;
      var u = i,
        h = a;
      for (a = t.Ta, i = t.Ua; 0 < o--;) {
        var l = t.gc[o],
          f = c,
          d = r,
          p = u,
          g = h,
          m = (h = a, u = i, l.Ea);
        switch (e(f < d), e(d <= l.nc), l.hc) {
          case 2:
            Gr(p, g, (d - f) * m, h, u);
            break;
          case 0:
            var v = f,
              b = d,
              y = h,
              w = u,
              N = (_ = l).Ea;
            0 == v && (Wr(p, g, null, null, 1, y, w), V(p, g + 1, 0, 0, N - 1, y, w + 1), g += N, w += N, ++v);
            for (var L = 1 << _.b, A = L - 1, x = q(N, _.b), S = _.K, _ = _.w + (v >> _.b) * x; v < b;) {
              var P = S,
                k = _,
                I = 1;
              for (Vr(p, g, y, w - N, 1, y, w); I < N;) {
                var F = (I & ~A) + L;
                F > N && (F = N), (0, Zr[P[k++] >> 8 & 15])(p, g + +I, y, w + I - N, F - I, y, w + I), I = F;
              }
              g += N, w += N, ++v & A || (_ += x);
            }
            d != l.nc && n(h, u - m, h, u + (d - f - 1) * m, m);
            break;
          case 1:
            for (m = p, b = g, N = (p = l.Ea) - (w = p & ~(y = (g = 1 << l.b) - 1)), v = q(p, l.b), L = l.K, l = l.w + (f >> l.b) * v; f < d;) {
              for (A = L, x = l, S = new T(), _ = b + w, P = b + p; b < _;) Y(A[x++], S), $r(S, m, b, g, h, u), b += g, u += g;
              b < P && (Y(A[x++], S), $r(S, m, b, N, h, u), b += N, u += N), ++f & y || (l += v);
            }
            break;
          case 3:
            if (p == h && g == u && 0 < l.b) {
              for (b = h, p = m = u + (d - f) * m - (w = (d - f) * q(l.Ea, l.b)), g = h, y = u, v = [], w = (N = w) - 1; 0 <= w; --w) v[w] = g[y + w];
              for (w = N - 1; 0 <= w; --w) b[p + w] = v[w];
              Yr(l, f, d, h, m, h, u);
            } else Yr(l, f, d, p, g, h, u);
        }
        u = a, h = i;
      }
      h != i && n(a, i, u, h, s);
    }
    function Lt(t, r) {
      var n = t.V,
        i = t.Ba + t.c * t.C,
        a = r - t.C;
      if (e(r <= t.l.o), e(16 >= a), 0 < a) {
        var o = t.l,
          s = t.Ta,
          c = t.Ua,
          u = o.width;
        if (Nt(t, a, n, i), a = c = [c], e((n = t.C) < (i = r)), e(o.v < o.va), i > o.o && (i = o.o), n < o.j) {
          var h = o.j - n;
          n = o.j;
          a[0] += h * u;
        }
        if (n >= i ? n = 0 : (a[0] += 4 * o.v, o.ka = n - o.j, o.U = o.va - o.v, o.T = i - n, n = 1), n) {
          if (c = c[0], 11 > (n = t.ca).S) {
            var l = n.f.RGBA,
              f = (i = n.S, a = o.U, o = o.T, h = l.eb, l.A),
              d = o;
            for (l = l.fb + t.Ma * l.A; 0 < d--;) {
              var p = s,
                g = c,
                m = a,
                v = h,
                b = l;
              switch (i) {
                case En:
                  Qr(p, g, m, v, b);
                  break;
                case qn:
                  tn(p, g, m, v, b);
                  break;
                case Hn:
                  tn(p, g, m, v, b), An(v, b, 0, m, 1, 0);
                  break;
                case Dn:
                  nn(p, g, m, v, b);
                  break;
                case Rn:
                  et(p, g, m, v, b, 1);
                  break;
                case Wn:
                  et(p, g, m, v, b, 1), An(v, b, 0, m, 1, 0);
                  break;
                case Tn:
                  et(p, g, m, v, b, 0);
                  break;
                case Vn:
                  et(p, g, m, v, b, 0), An(v, b, 1, m, 1, 0);
                  break;
                case Un:
                  en(p, g, m, v, b);
                  break;
                case Gn:
                  en(p, g, m, v, b), xn(v, b, m, 1, 0);
                  break;
                case zn:
                  rn(p, g, m, v, b);
                  break;
                default:
                  e(0);
              }
              c += u, l += f;
            }
            t.Ma += o;
          } else alert("todo:EmitRescaledRowsYUVA");
          e(t.Ma <= n.height);
        }
      }
      t.C = r, e(t.C <= t.i);
    }
    function At(t) {
      var e;
      if (0 < t.ua) return 0;
      for (e = 0; e < t.Wb; ++e) {
        var r = t.Ya[e].G,
          n = t.Ya[e].H;
        if (0 < r[1][n[1] + 0].g || 0 < r[2][n[2] + 0].g || 0 < r[3][n[3] + 0].g) return 0;
      }
      return 1;
    }
    function xt(t, r, n, i, a, o) {
      if (0 != t.Z) {
        var s = t.qd,
          c = t.rd;
        for (e(null != mi[t.Z]); r < n; ++r) mi[t.Z](s, c, i, a, i, a, o), s = i, c = a, a += o;
        t.qd = s, t.rd = c;
      }
    }
    function St(t, r) {
      var n = t.l.ma,
        i = 0 == n.Z || 1 == n.Z ? t.l.j : t.C;
      i = t.C < i ? i : t.C;
      if (e(r <= t.l.o), r > i) {
        var a = t.l.width,
          o = n.ca,
          s = n.tb + a * i,
          c = t.V,
          u = t.Ba + t.c * i,
          h = t.gc;
        e(1 == t.ab), e(3 == h[0].hc), Xr(h[0], i, r, c, u, o, s), xt(n, i, r, o, s, a);
      }
      t.C = t.Ma = r;
    }
    function _t(t, r, n, i, a, o, s) {
      var c = t.$ / i,
        u = t.$ % i,
        h = t.m,
        l = t.s,
        f = n + t.$,
        d = f;
      a = n + i * a;
      var p = n + i * o,
        g = 280 + l.ua,
        m = t.Pb ? c : 16777216,
        v = 0 < l.ua ? l.Wa : null,
        b = l.wc,
        y = f < p ? wt(l, u, c) : null;
      e(t.C < o), e(p <= a);
      var w = !1;
      t: for (;;) {
        for (; w || f < p;) {
          var N = 0;
          if (c >= m) {
            var _ = f - n;
            e((m = t).Pb), m.wd = m.m, m.xd = _, 0 < m.s.ua && B(m.s.Wa, m.s.vb), m = c + ti;
          }
          if (u & b || (y = wt(l, u, c)), e(null != y), y.Qb && (r[f] = y.qb, w = !0), !w) if (S(h), y.jc) {
            N = h, _ = r;
            var P = f,
              k = y.pd[L(N) & Dr - 1];
            e(y.jc), 256 > k.g ? (x(N, N.u + k.g), _[P] = k.value, N = 0) : (x(N, N.u + k.g - 256), e(256 <= k.value), N = k.value), 0 == N && (w = !0);
          } else N = bt(y.G[0], y.H[0], h);
          if (h.h) break;
          if (w || 256 > N) {
            if (!w) if (y.nd) r[f] = (y.qb | N << 8) >>> 0;else {
              if (S(h), w = bt(y.G[1], y.H[1], h), S(h), _ = bt(y.G[2], y.H[2], h), P = bt(y.G[3], y.H[3], h), h.h) break;
              r[f] = (P << 24 | w << 16 | N << 8 | _) >>> 0;
            }
            if (w = !1, ++f, ++u >= i && (u = 0, ++c, null != s && c <= o && !(c % 16) && s(t, c), null != v)) for (; d < f;) N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
          } else if (280 > N) {
            if (N = mt(N - 256, h), _ = bt(y.G[4], y.H[4], h), S(h), _ = vt(i, _ = mt(_, h)), h.h) break;
            if (f - n < _ || a - f < N) break t;
            for (P = 0; P < N; ++P) r[f + P] = r[f + P - _];
            for (f += N, u += N; u >= i;) u -= i, ++c, null != s && c <= o && !(c % 16) && s(t, c);
            if (e(f <= a), u & b && (y = wt(l, u, c)), null != v) for (; d < f;) N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
          } else {
            if (!(N < g)) break t;
            for (w = N - 280, e(null != v); d < f;) N = r[d++], v.X[(506832829 * N & 4294967295) >>> v.Mb] = N;
            N = f, e(!(w >>> (_ = v).Xa)), r[N] = _.X[w], w = !0;
          }
          w || e(h.h == A(h));
        }
        if (t.Pb && h.h && f < a) e(t.m.h), t.a = 5, t.m = t.wd, t.$ = t.xd, 0 < t.s.ua && B(t.s.vb, t.s.Wa);else {
          if (h.h) break t;
          null != s && s(t, c > o ? o : c), t.a = 0, t.$ = f - n;
        }
        return 1;
      }
      return t.a = 3, 0;
    }
    function Pt(t) {
      e(null != t), t.vc = null, t.yc = null, t.Ya = null;
      var r = t.Wa;
      null != r && (r.X = null), t.vb = null, e(null != t);
    }
    function kt() {
      var e = new or();
      return null == e ? null : (e.a = 0, e.xb = gi, rt("Predictor", "VP8LPredictors"), rt("Predictor", "VP8LPredictors_C"), rt("PredictorAdd", "VP8LPredictorsAdd"), rt("PredictorAdd", "VP8LPredictorsAdd_C"), Gr = G, $r = J, Qr = K, tn = Z, en = $, rn = Q, nn = tt, t.VP8LMapColor32b = Jr, t.VP8LMapColor8b = Kr, e);
    }
    function It(t, r, n, s, c) {
      var u = 1,
        f = [t],
        p = [r],
        g = s.m,
        m = s.s,
        v = null,
        b = 0;
      t: for (;;) {
        if (n) for (; u && y(g, 1);) {
          var w = f,
            N = p,
            A = s,
            _ = 1,
            P = A.m,
            k = A.gc[A.ab],
            I = y(P, 2);
          if (A.Oc & 1 << I) u = 0;else {
            switch (A.Oc |= 1 << I, k.hc = I, k.Ea = w[0], k.nc = N[0], k.K = [null], ++A.ab, e(4 >= A.ab), I) {
              case 0:
              case 1:
                k.b = y(P, 3) + 2, _ = It(q(k.Ea, k.b), q(k.nc, k.b), 0, A, k.K), k.K = k.K[0];
                break;
              case 3:
                var F,
                  C = y(P, 8) + 1,
                  j = 16 < C ? 0 : 4 < C ? 1 : 2 < C ? 2 : 3;
                if (w[0] = q(k.Ea, j), k.b = j, F = _ = It(C, 1, 0, A, k.K)) {
                  var B,
                    M = C,
                    E = k,
                    R = 1 << (8 >> E.b),
                    T = a(R);
                  if (null == T) F = 0;else {
                    var U = E.K[0],
                      z = E.w;
                    for (T[0] = E.K[0][0], B = 1; B < 1 * M; ++B) T[B] = D(U[z + B], T[B - 1]);
                    for (; B < 4 * R; ++B) T[B] = 0;
                    E.K[0] = null, E.K[0] = T, F = 1;
                  }
                }
                _ = F;
                break;
              case 2:
                break;
              default:
                e(0);
            }
            u = _;
          }
        }
        if (f = f[0], p = p[0], u && y(g, 1) && !(u = 1 <= (b = y(g, 4)) && 11 >= b)) {
          s.a = 3;
          break t;
        }
        var H;
        if (H = u) e: {
          var W,
            V,
            G,
            Y = s,
            J = f,
            X = p,
            K = b,
            Z = n,
            $ = Y.m,
            Q = Y.s,
            tt = [null],
            et = 1,
            rt = 0,
            nt = Qn[K];
          r: for (;;) {
            if (Z && y($, 1)) {
              var it = y($, 3) + 2,
                at = q(J, it),
                ot = q(X, it),
                st = at * ot;
              if (!It(at, ot, 0, Y, tt)) break r;
              for (tt = tt[0], Q.xc = it, W = 0; W < st; ++W) {
                var ct = tt[W] >> 8 & 65535;
                tt[W] = ct, ct >= et && (et = ct + 1);
              }
            }
            if ($.h) break r;
            for (V = 0; 5 > V; ++V) {
              var ut = Xn[V];
              !V && 0 < K && (ut += 1 << K), rt < ut && (rt = ut);
            }
            var ht = o(et * nt, l),
              lt = et,
              ft = o(lt, d);
            if (null == ft) var dt = null;else e(65536 >= lt), dt = ft;
            var pt = a(rt);
            if (null == dt || null == pt || null == ht) {
              Y.a = 1;
              break r;
            }
            var gt = ht;
            for (W = G = 0; W < et; ++W) {
              var mt = dt[W],
                vt = mt.G,
                bt = mt.H,
                wt = 0,
                Nt = 1,
                Lt = 0;
              for (V = 0; 5 > V; ++V) {
                ut = Xn[V], vt[V] = gt, bt[V] = G, !V && 0 < K && (ut += 1 << K);
                n: {
                  var At,
                    xt = ut,
                    St = Y,
                    kt = pt,
                    Ft = gt,
                    Ct = G,
                    jt = 0,
                    Ot = St.m,
                    Bt = y(Ot, 1);
                  if (i(kt, 0, 0, xt), Bt) {
                    var Mt = y(Ot, 1) + 1,
                      Et = y(Ot, 1),
                      qt = y(Ot, 0 == Et ? 1 : 8);
                    kt[qt] = 1, 2 == Mt && (kt[qt = y(Ot, 8)] = 1);
                    var Dt = 1;
                  } else {
                    var Rt = a(19),
                      Tt = y(Ot, 4) + 4;
                    if (19 < Tt) {
                      St.a = 3;
                      var Ut = 0;
                      break n;
                    }
                    for (At = 0; At < Tt; ++At) Rt[Zn[At]] = y(Ot, 3);
                    var zt = void 0,
                      Ht = void 0,
                      Wt = St,
                      Vt = Rt,
                      Gt = xt,
                      Yt = kt,
                      Jt = 0,
                      Xt = Wt.m,
                      Kt = 8,
                      Zt = o(128, l);
                    i: for (; h(Zt, 0, 7, Vt, 19);) {
                      if (y(Xt, 1)) {
                        var $t = 2 + 2 * y(Xt, 3);
                        if ((zt = 2 + y(Xt, $t)) > Gt) break i;
                      } else zt = Gt;
                      for (Ht = 0; Ht < Gt && zt--;) {
                        S(Xt);
                        var Qt = Zt[0 + (127 & L(Xt))];
                        x(Xt, Xt.u + Qt.g);
                        var te = Qt.value;
                        if (16 > te) Yt[Ht++] = te, 0 != te && (Kt = te);else {
                          var ee = 16 == te,
                            re = te - 16,
                            ne = Jn[re],
                            ie = y(Xt, Yn[re]) + ne;
                          if (Ht + ie > Gt) break i;
                          for (var ae = ee ? Kt : 0; 0 < ie--;) Yt[Ht++] = ae;
                        }
                      }
                      Jt = 1;
                      break i;
                    }
                    Jt || (Wt.a = 3), Dt = Jt;
                  }
                  (Dt = Dt && !Ot.h) && (jt = h(Ft, Ct, 8, kt, xt)), Dt && 0 != jt ? Ut = jt : (St.a = 3, Ut = 0);
                }
                if (0 == Ut) break r;
                if (Nt && 1 == Kn[V] && (Nt = 0 == gt[G].g), wt += gt[G].g, G += Ut, 3 >= V) {
                  var oe,
                    se = pt[0];
                  for (oe = 1; oe < ut; ++oe) pt[oe] > se && (se = pt[oe]);
                  Lt += se;
                }
              }
              if (mt.nd = Nt, mt.Qb = 0, Nt && (mt.qb = (vt[3][bt[3] + 0].value << 24 | vt[1][bt[1] + 0].value << 16 | vt[2][bt[2] + 0].value) >>> 0, 0 == wt && 256 > vt[0][bt[0] + 0].value && (mt.Qb = 1, mt.qb += vt[0][bt[0] + 0].value << 8)), mt.jc = !mt.Qb && 6 > Lt, mt.jc) {
                var ce,
                  ue = mt;
                for (ce = 0; ce < Dr; ++ce) {
                  var he = ce,
                    le = ue.pd[he],
                    fe = ue.G[0][ue.H[0] + he];
                  256 <= fe.value ? (le.g = fe.g + 256, le.value = fe.value) : (le.g = 0, le.value = 0, he >>= yt(fe, 8, le), he >>= yt(ue.G[1][ue.H[1] + he], 16, le), he >>= yt(ue.G[2][ue.H[2] + he], 0, le), yt(ue.G[3][ue.H[3] + he], 24, le));
                }
              }
            }
            Q.vc = tt, Q.Wb = et, Q.Ya = dt, Q.yc = ht, H = 1;
            break e;
          }
          H = 0;
        }
        if (!(u = H)) {
          s.a = 3;
          break t;
        }
        if (0 < b) {
          if (m.ua = 1 << b, !O(m.Wa, b)) {
            s.a = 1, u = 0;
            break t;
          }
        } else m.ua = 0;
        var de = s,
          pe = f,
          ge = p,
          me = de.s,
          ve = me.xc;
        if (de.c = pe, de.i = ge, me.md = q(pe, ve), me.wc = 0 == ve ? -1 : (1 << ve) - 1, n) {
          s.xb = pi;
          break t;
        }
        if (null == (v = a(f * p))) {
          s.a = 1, u = 0;
          break t;
        }
        u = (u = _t(s, v, 0, f, p, p, null)) && !g.h;
        break t;
      }
      return u ? (null != c ? c[0] = v : (e(null == v), e(n)), s.$ = 0, n || Pt(m)) : Pt(m), u;
    }
    function Ft(t, r) {
      var n = t.c * t.i,
        i = n + r + 16 * r;
      return e(t.c <= r), t.V = a(i), null == t.V ? (t.Ta = null, t.Ua = 0, t.a = 1, 0) : (t.Ta = t.V, t.Ua = t.Ba + n + r, 1);
    }
    function Ct(t, r) {
      var n = t.C,
        i = r - n,
        a = t.V,
        o = t.Ba + t.c * n;
      for (e(r <= t.l.o); 0 < i;) {
        var s = 16 < i ? 16 : i,
          c = t.l.ma,
          u = t.l.width,
          h = u * s,
          l = c.ca,
          f = c.tb + u * n,
          d = t.Ta,
          p = t.Ua;
        Nt(t, s, a, o), _n(d, p, l, f, h), xt(c, n, n + s, l, f, u), i -= s, a += s * t.c, n += s;
      }
      e(n == r), t.C = t.Ma = r;
    }
    function jt() {
      this.ub = this.yd = this.td = this.Rb = 0;
    }
    function Ot() {
      this.Kd = this.Ld = this.Ud = this.Td = this.i = this.c = 0;
    }
    function Bt() {
      this.Fb = this.Bb = this.Cb = 0, this.Zb = a(4), this.Lb = a(4);
    }
    function Mt() {
      this.Yb = function () {
        var t = [];
        return function t(e, r, n) {
          for (var i = n[r], a = 0; a < i && (e.push(n.length > r + 1 ? [] : 0), !(n.length < r + 1)); a++) t(e[a], r + 1, n);
        }(t, 0, [3, 11]), t;
      }();
    }
    function Et() {
      this.jb = a(3), this.Wc = s([4, 8], Mt), this.Xc = s([4, 17], Mt);
    }
    function qt() {
      this.Pc = this.wb = this.Tb = this.zd = 0, this.vd = new a(4), this.od = new a(4);
    }
    function Dt() {
      this.ld = this.La = this.dd = this.tc = 0;
    }
    function Rt() {
      this.Na = this.la = 0;
    }
    function Tt() {
      this.Sc = [0, 0], this.Eb = [0, 0], this.Qc = [0, 0], this.ia = this.lc = 0;
    }
    function Ut() {
      this.ad = a(384), this.Za = 0, this.Ob = a(16), this.$b = this.Ad = this.ia = this.Gc = this.Hc = this.Dd = 0;
    }
    function zt() {
      this.uc = this.M = this.Nb = 0, this.wa = Array(new Dt()), this.Y = 0, this.ya = Array(new Ut()), this.aa = 0, this.l = new Gt();
    }
    function Ht() {
      this.y = a(16), this.f = a(8), this.ea = a(8);
    }
    function Wt() {
      this.cb = this.a = 0, this.sc = "", this.m = new w(), this.Od = new jt(), this.Kc = new Ot(), this.ed = new qt(), this.Qa = new Bt(), this.Ic = this.$c = this.Aa = 0, this.D = new zt(), this.Xb = this.Va = this.Hb = this.zb = this.yb = this.Ub = this.za = 0, this.Jc = o(8, w), this.ia = 0, this.pb = o(4, Tt), this.Pa = new Et(), this.Bd = this.kc = 0, this.Ac = [], this.Bc = 0, this.zc = [0, 0, 0, 0], this.Gd = Array(new Ht()), this.Hd = 0, this.rb = Array(new Rt()), this.sb = 0, this.wa = Array(new Dt()), this.Y = 0, this.oc = [], this.pc = 0, this.sa = [], this.ta = 0, this.qa = [], this.ra = 0, this.Ha = [], this.B = this.R = this.Ia = 0, this.Ec = [], this.M = this.ja = this.Vb = this.Fc = 0, this.ya = Array(new Ut()), this.L = this.aa = 0, this.gd = s([4, 2], Dt), this.ga = null, this.Fa = [], this.Cc = this.qc = this.P = 0, this.Gb = [], this.Uc = 0, this.mb = [], this.nb = 0, this.rc = [], this.Ga = this.Vc = 0;
    }
    function Vt(t, e) {
      return 0 > t ? 0 : t > e ? e : t;
    }
    function Gt() {
      this.T = this.U = this.ka = this.height = this.width = 0, this.y = [], this.f = [], this.ea = [], this.Rc = this.fa = this.W = this.N = this.O = 0, this.ma = "void", this.put = "VP8IoPutHook", this.ac = "VP8IoSetupHook", this.bc = "VP8IoTeardownHook", this.ha = this.Kb = 0, this.data = [], this.hb = this.ib = this.da = this.o = this.j = this.va = this.v = this.Da = this.ob = this.w = 0, this.F = [], this.J = 0;
    }
    function Yt() {
      var t = new Wt();
      return null != t && (t.a = 0, t.sc = "OK", t.cb = 0, t.Xb = 0, ni || (ni = Zt)), t;
    }
    function Jt(t, e, r) {
      return 0 == t.a && (t.a = e, t.sc = r, t.cb = 0), 0;
    }
    function Xt(t, e, r) {
      return 3 <= r && 157 == t[e + 0] && 1 == t[e + 1] && 42 == t[e + 2];
    }
    function Kt(t, r) {
      if (null == t) return 0;
      if (t.a = 0, t.sc = "OK", null == r) return Jt(t, 2, "null VP8Io passed to VP8GetHeaders()");
      var n = r.data,
        a = r.w,
        o = r.ha;
      if (4 > o) return Jt(t, 7, "Truncated header.");
      var s = n[a + 0] | n[a + 1] << 8 | n[a + 2] << 16,
        c = t.Od;
      if (c.Rb = !(1 & s), c.td = s >> 1 & 7, c.yd = s >> 4 & 1, c.ub = s >> 5, 3 < c.td) return Jt(t, 3, "Incorrect keyframe parameters.");
      if (!c.yd) return Jt(t, 4, "Frame not displayable.");
      a += 3, o -= 3;
      var u = t.Kc;
      if (c.Rb) {
        if (7 > o) return Jt(t, 7, "cannot parse picture header");
        if (!Xt(n, a, o)) return Jt(t, 3, "Bad code word");
        u.c = 16383 & (n[a + 4] << 8 | n[a + 3]), u.Td = n[a + 4] >> 6, u.i = 16383 & (n[a + 6] << 8 | n[a + 5]), u.Ud = n[a + 6] >> 6, a += 7, o -= 7, t.za = u.c + 15 >> 4, t.Ub = u.i + 15 >> 4, r.width = u.c, r.height = u.i, r.Da = 0, r.j = 0, r.v = 0, r.va = r.width, r.o = r.height, r.da = 0, r.ib = r.width, r.hb = r.height, r.U = r.width, r.T = r.height, i((s = t.Pa).jb, 0, 255, s.jb.length), e(null != (s = t.Qa)), s.Cb = 0, s.Bb = 0, s.Fb = 1, i(s.Zb, 0, 0, s.Zb.length), i(s.Lb, 0, 0, s.Lb);
      }
      if (c.ub > o) return Jt(t, 7, "bad partition length");
      p(s = t.m, n, a, c.ub), a += c.ub, o -= c.ub, c.Rb && (u.Ld = P(s), u.Kd = P(s)), u = t.Qa;
      var h,
        l = t.Pa;
      if (e(null != s), e(null != u), u.Cb = P(s), u.Cb) {
        if (u.Bb = P(s), P(s)) {
          for (u.Fb = P(s), h = 0; 4 > h; ++h) u.Zb[h] = P(s) ? m(s, 7) : 0;
          for (h = 0; 4 > h; ++h) u.Lb[h] = P(s) ? m(s, 6) : 0;
        }
        if (u.Bb) for (h = 0; 3 > h; ++h) l.jb[h] = P(s) ? g(s, 8) : 255;
      } else u.Bb = 0;
      if (s.Ka) return Jt(t, 3, "cannot parse segment header");
      if ((u = t.ed).zd = P(s), u.Tb = g(s, 6), u.wb = g(s, 3), u.Pc = P(s), u.Pc && P(s)) {
        for (l = 0; 4 > l; ++l) P(s) && (u.vd[l] = m(s, 6));
        for (l = 0; 4 > l; ++l) P(s) && (u.od[l] = m(s, 6));
      }
      if (t.L = 0 == u.Tb ? 0 : u.zd ? 1 : 2, s.Ka) return Jt(t, 3, "cannot parse filter header");
      var f = o;
      if (o = h = a, a = h + f, u = f, t.Xb = (1 << g(t.m, 2)) - 1, f < 3 * (l = t.Xb)) n = 7;else {
        for (h += 3 * l, u -= 3 * l, f = 0; f < l; ++f) {
          var d = n[o + 0] | n[o + 1] << 8 | n[o + 2] << 16;
          d > u && (d = u), p(t.Jc[+f], n, h, d), h += d, u -= d, o += 3;
        }
        p(t.Jc[+l], n, h, u), n = h < a ? 0 : 5;
      }
      if (0 != n) return Jt(t, n, "cannot parse partitions");
      for (n = g(h = t.m, 7), o = P(h) ? m(h, 4) : 0, a = P(h) ? m(h, 4) : 0, u = P(h) ? m(h, 4) : 0, l = P(h) ? m(h, 4) : 0, h = P(h) ? m(h, 4) : 0, f = t.Qa, d = 0; 4 > d; ++d) {
        if (f.Cb) {
          var v = f.Zb[d];
          f.Fb || (v += n);
        } else {
          if (0 < d) {
            t.pb[d] = t.pb[0];
            continue;
          }
          v = n;
        }
        var b = t.pb[d];
        b.Sc[0] = ei[Vt(v + o, 127)], b.Sc[1] = ri[Vt(v + 0, 127)], b.Eb[0] = 2 * ei[Vt(v + a, 127)], b.Eb[1] = 101581 * ri[Vt(v + u, 127)] >> 16, 8 > b.Eb[1] && (b.Eb[1] = 8), b.Qc[0] = ei[Vt(v + l, 117)], b.Qc[1] = ri[Vt(v + h, 127)], b.lc = v + h;
      }
      if (!c.Rb) return Jt(t, 4, "Not a key frame.");
      for (P(s), c = t.Pa, n = 0; 4 > n; ++n) {
        for (o = 0; 8 > o; ++o) for (a = 0; 3 > a; ++a) for (u = 0; 11 > u; ++u) l = k(s, ui[n][o][a][u]) ? g(s, 8) : si[n][o][a][u], c.Wc[n][o].Yb[a][u] = l;
        for (o = 0; 17 > o; ++o) c.Xc[n][o] = c.Wc[n][hi[o]];
      }
      return t.kc = P(s), t.kc && (t.Bd = g(s, 8)), t.cb = 1;
    }
    function Zt(t, e, r, n, i, a, o) {
      var s = e[i].Yb[r];
      for (r = 0; 16 > i; ++i) {
        if (!k(t, s[r + 0])) return i;
        for (; !k(t, s[r + 1]);) if (s = e[++i].Yb[0], r = 0, 16 == i) return 16;
        var c = e[i + 1].Yb;
        if (k(t, s[r + 2])) {
          var u = t,
            h = 0;
          if (k(u, (f = s)[(l = r) + 3])) {
            if (k(u, f[l + 6])) {
              for (s = 0, l = 2 * (h = k(u, f[l + 8])) + (f = k(u, f[l + 9 + h])), h = 0, f = ii[l]; f[s]; ++s) h += h + k(u, f[s]);
              h += 3 + (8 << l);
            } else k(u, f[l + 7]) ? (h = 7 + 2 * k(u, 165), h += k(u, 145)) : h = 5 + k(u, 159);
          } else h = k(u, f[l + 4]) ? 3 + k(u, f[l + 5]) : 2;
          s = c[2];
        } else h = 1, s = c[1];
        c = o + ai[i], 0 > (u = t).b && _(u);
        var l,
          f = u.b,
          d = (l = u.Ca >> 1) - (u.I >> f) >> 31;
        --u.b, u.Ca += d, u.Ca |= 1, u.I -= (l + 1 & d) << f, a[c] = ((h ^ d) - d) * n[(0 < i) + 0];
      }
      return 16;
    }
    function $t(t) {
      var e = t.rb[t.sb - 1];
      e.la = 0, e.Na = 0, i(t.zc, 0, 0, t.zc.length), t.ja = 0;
    }
    function Qt(t, r) {
      if (null == t) return 0;
      if (null == r) return Jt(t, 2, "NULL VP8Io parameter in VP8Decode().");
      if (!t.cb && !Kt(t, r)) return 0;
      if (e(t.cb), null == r.ac || r.ac(r)) {
        r.ob && (t.L = 0);
        var s = Ri[t.L];
        if (2 == t.L ? (t.yb = 0, t.zb = 0) : (t.yb = r.v - s >> 4, t.zb = r.j - s >> 4, 0 > t.yb && (t.yb = 0), 0 > t.zb && (t.zb = 0)), t.Va = r.o + 15 + s >> 4, t.Hb = r.va + 15 + s >> 4, t.Hb > t.za && (t.Hb = t.za), t.Va > t.Ub && (t.Va = t.Ub), 0 < t.L) {
          var c = t.ed;
          for (s = 0; 4 > s; ++s) {
            var u;
            if (t.Qa.Cb) {
              var h = t.Qa.Lb[s];
              t.Qa.Fb || (h += c.Tb);
            } else h = c.Tb;
            for (u = 0; 1 >= u; ++u) {
              var l = t.gd[s][u],
                f = h;
              if (c.Pc && (f += c.vd[0], u && (f += c.od[0])), 0 < (f = 0 > f ? 0 : 63 < f ? 63 : f)) {
                var d = f;
                0 < c.wb && (d = 4 < c.wb ? d >> 2 : d >> 1) > 9 - c.wb && (d = 9 - c.wb), 1 > d && (d = 1), l.dd = d, l.tc = 2 * f + d, l.ld = 40 <= f ? 2 : 15 <= f ? 1 : 0;
              } else l.tc = 0;
              l.La = u;
            }
          }
        }
        s = 0;
      } else Jt(t, 6, "Frame setup failed"), s = t.a;
      if (s = 0 == s) {
        if (s) {
          t.$c = 0, 0 < t.Aa || (t.Ic = Ui);
          t: {
            s = t.Ic;
            c = 4 * (d = t.za);
            var p = 32 * d,
              g = d + 1,
              m = 0 < t.L ? d * (0 < t.Aa ? 2 : 1) : 0,
              v = (2 == t.Aa ? 2 : 1) * d;
            if ((l = c + 832 + (u = 3 * (16 * s + Ri[t.L]) / 2 * p) + (h = null != t.Fa && 0 < t.Fa.length ? t.Kc.c * t.Kc.i : 0)) != l) s = 0;else {
              if (l > t.Vb) {
                if (t.Vb = 0, t.Ec = a(l), t.Fc = 0, null == t.Ec) {
                  s = Jt(t, 1, "no memory during frame initialization.");
                  break t;
                }
                t.Vb = l;
              }
              l = t.Ec, f = t.Fc, t.Ac = l, t.Bc = f, f += c, t.Gd = o(p, Ht), t.Hd = 0, t.rb = o(g + 1, Rt), t.sb = 1, t.wa = m ? o(m, Dt) : null, t.Y = 0, t.D.Nb = 0, t.D.wa = t.wa, t.D.Y = t.Y, 0 < t.Aa && (t.D.Y += d), e(!0), t.oc = l, t.pc = f, f += 832, t.ya = o(v, Ut), t.aa = 0, t.D.ya = t.ya, t.D.aa = t.aa, 2 == t.Aa && (t.D.aa += d), t.R = 16 * d, t.B = 8 * d, d = (p = Ri[t.L]) * t.R, p = p / 2 * t.B, t.sa = l, t.ta = f + d, t.qa = t.sa, t.ra = t.ta + 16 * s * t.R + p, t.Ha = t.qa, t.Ia = t.ra + 8 * s * t.B + p, t.$c = 0, f += u, t.mb = h ? l : null, t.nb = h ? f : null, e(f + h <= t.Fc + t.Vb), $t(t), i(t.Ac, t.Bc, 0, c), s = 1;
            }
          }
          if (s) {
            if (r.ka = 0, r.y = t.sa, r.O = t.ta, r.f = t.qa, r.N = t.ra, r.ea = t.Ha, r.Vd = t.Ia, r.fa = t.R, r.Rc = t.B, r.F = null, r.J = 0, !Cn) {
              for (s = -255; 255 >= s; ++s) Pn[255 + s] = 0 > s ? -s : s;
              for (s = -1020; 1020 >= s; ++s) kn[1020 + s] = -128 > s ? -128 : 127 < s ? 127 : s;
              for (s = -112; 112 >= s; ++s) In[112 + s] = -16 > s ? -16 : 15 < s ? 15 : s;
              for (s = -255; 510 >= s; ++s) Fn[255 + s] = 0 > s ? 0 : 255 < s ? 255 : s;
              Cn = 1;
            }
            an = ue, on = ae, cn = oe, un = se, hn = ce, sn = ie, ln = Je, fn = Xe, dn = $e, pn = Qe, gn = Ke, mn = Ze, vn = tr, bn = er, yn = ze, wn = He, Nn = We, Ln = Ve, fi[0] = xe, fi[1] = le, fi[2] = Le, fi[3] = Ae, fi[4] = Se, fi[5] = Pe, fi[6] = _e, fi[7] = ke, fi[8] = Fe, fi[9] = Ie, li[0] = ve, li[1] = de, li[2] = pe, li[3] = ge, li[4] = be, li[5] = ye, li[6] = we, di[0] = Be, di[1] = fe, di[2] = Ce, di[3] = je, di[4] = Ee, di[5] = Me, di[6] = qe, s = 1;
          } else s = 0;
        }
        s && (s = function (t, r) {
          for (t.M = 0; t.M < t.Va; ++t.M) {
            var o,
              s = t.Jc[t.M & t.Xb],
              c = t.m,
              u = t;
            for (o = 0; o < u.za; ++o) {
              var h = c,
                l = u,
                f = l.Ac,
                d = l.Bc + 4 * o,
                p = l.zc,
                g = l.ya[l.aa + o];
              if (l.Qa.Bb ? g.$b = k(h, l.Pa.jb[0]) ? 2 + k(h, l.Pa.jb[2]) : k(h, l.Pa.jb[1]) : g.$b = 0, l.kc && (g.Ad = k(h, l.Bd)), g.Za = !k(h, 145) + 0, g.Za) {
                var m = g.Ob,
                  v = 0;
                for (l = 0; 4 > l; ++l) {
                  var b,
                    y = p[0 + l];
                  for (b = 0; 4 > b; ++b) {
                    y = ci[f[d + b]][y];
                    for (var w = oi[k(h, y[0])]; 0 < w;) w = oi[2 * w + k(h, y[w])];
                    y = -w, f[d + b] = y;
                  }
                  n(m, v, f, d, 4), v += 4, p[0 + l] = y;
                }
              } else y = k(h, 156) ? k(h, 128) ? 1 : 3 : k(h, 163) ? 2 : 0, g.Ob[0] = y, i(f, d, y, 4), i(p, 0, y, 4);
              g.Dd = k(h, 142) ? k(h, 114) ? k(h, 183) ? 1 : 3 : 2 : 0;
            }
            if (u.m.Ka) return Jt(t, 7, "Premature end-of-partition0 encountered.");
            for (; t.ja < t.za; ++t.ja) {
              if (u = s, h = (c = t).rb[c.sb - 1], f = c.rb[c.sb + c.ja], o = c.ya[c.aa + c.ja], d = c.kc ? o.Ad : 0) h.la = f.la = 0, o.Za || (h.Na = f.Na = 0), o.Hc = 0, o.Gc = 0, o.ia = 0;else {
                var N, L;
                h = f, f = u, d = c.Pa.Xc, p = c.ya[c.aa + c.ja], g = c.pb[p.$b];
                if (l = p.ad, m = 0, v = c.rb[c.sb - 1], y = b = 0, i(l, m, 0, 384), p.Za) var A = 0,
                  x = d[3];else {
                  w = a(16);
                  var S = h.Na + v.Na;
                  if (S = ni(f, d[1], S, g.Eb, 0, w, 0), h.Na = v.Na = (0 < S) + 0, 1 < S) an(w, 0, l, m);else {
                    var _ = w[0] + 3 >> 3;
                    for (w = 0; 256 > w; w += 16) l[m + w] = _;
                  }
                  A = 1, x = d[0];
                }
                var P = 15 & h.la,
                  I = 15 & v.la;
                for (w = 0; 4 > w; ++w) {
                  var F = 1 & I;
                  for (_ = L = 0; 4 > _; ++_) P = P >> 1 | (F = (S = ni(f, x, S = F + (1 & P), g.Sc, A, l, m)) > A) << 7, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != l[m + 0]), m += 16;
                  P >>= 4, I = I >> 1 | F << 7, b = (b << 8 | L) >>> 0;
                }
                for (x = P, A = I >> 4, N = 0; 4 > N; N += 2) {
                  for (L = 0, P = h.la >> 4 + N, I = v.la >> 4 + N, w = 0; 2 > w; ++w) {
                    for (F = 1 & I, _ = 0; 2 > _; ++_) S = F + (1 & P), P = P >> 1 | (F = 0 < (S = ni(f, d[2], S, g.Qc, 0, l, m))) << 3, L = L << 2 | (3 < S ? 3 : 1 < S ? 2 : 0 != l[m + 0]), m += 16;
                    P >>= 2, I = I >> 1 | F << 5;
                  }
                  y |= L << 4 * N, x |= P << 4 << N, A |= (240 & I) << N;
                }
                h.la = x, v.la = A, p.Hc = b, p.Gc = y, p.ia = 43690 & y ? 0 : g.ia, d = !(b | y);
              }
              if (0 < c.L && (c.wa[c.Y + c.ja] = c.gd[o.$b][o.Za], c.wa[c.Y + c.ja].La |= !d), u.Ka) return Jt(t, 7, "Premature end-of-file encountered.");
            }
            if ($t(t), c = r, u = 1, o = (s = t).D, h = 0 < s.L && s.M >= s.zb && s.M <= s.Va, 0 == s.Aa) t: {
              if (o.M = s.M, o.uc = h, Or(s, o), u = 1, o = (L = s.D).Nb, h = (y = Ri[s.L]) * s.R, f = y / 2 * s.B, w = 16 * o * s.R, _ = 8 * o * s.B, d = s.sa, p = s.ta - h + w, g = s.qa, l = s.ra - f + _, m = s.Ha, v = s.Ia - f + _, I = 0 == (P = L.M), b = P >= s.Va - 1, 2 == s.Aa && Or(s, L), L.uc) for (F = (S = s).D.M, e(S.D.uc), L = S.yb; L < S.Hb; ++L) {
                A = L, x = F;
                var C = (j = (U = S).D).Nb;
                N = U.R;
                var j = j.wa[j.Y + A],
                  O = U.sa,
                  B = U.ta + 16 * C * N + 16 * A,
                  M = j.dd,
                  E = j.tc;
                if (0 != E) if (e(3 <= E), 1 == U.L) 0 < A && wn(O, B, N, E + 4), j.La && Ln(O, B, N, E), 0 < x && yn(O, B, N, E + 4), j.La && Nn(O, B, N, E);else {
                  var q = U.B,
                    D = U.qa,
                    R = U.ra + 8 * C * q + 8 * A,
                    T = U.Ha,
                    U = U.Ia + 8 * C * q + 8 * A;
                  C = j.ld;
                  0 < A && (fn(O, B, N, E + 4, M, C), pn(D, R, T, U, q, E + 4, M, C)), j.La && (mn(O, B, N, E, M, C), bn(D, R, T, U, q, E, M, C)), 0 < x && (ln(O, B, N, E + 4, M, C), dn(D, R, T, U, q, E + 4, M, C)), j.La && (gn(O, B, N, E, M, C), vn(D, R, T, U, q, E, M, C));
                }
              }
              if (s.ia && alert("todo:DitherRow"), null != c.put) {
                if (L = 16 * P, P = 16 * (P + 1), I ? (c.y = s.sa, c.O = s.ta + w, c.f = s.qa, c.N = s.ra + _, c.ea = s.Ha, c.W = s.Ia + _) : (L -= y, c.y = d, c.O = p, c.f = g, c.N = l, c.ea = m, c.W = v), b || (P -= y), P > c.o && (P = c.o), c.F = null, c.J = null, null != s.Fa && 0 < s.Fa.length && L < P && (c.J = lr(s, c, L, P - L), c.F = s.mb, null == c.F && 0 == c.F.length)) {
                  u = Jt(s, 3, "Could not decode alpha data.");
                  break t;
                }
                L < c.j && (y = c.j - L, L = c.j, e(!(1 & y)), c.O += s.R * y, c.N += s.B * (y >> 1), c.W += s.B * (y >> 1), null != c.F && (c.J += c.width * y)), L < P && (c.O += c.v, c.N += c.v >> 1, c.W += c.v >> 1, null != c.F && (c.J += c.v), c.ka = L - c.j, c.U = c.va - c.v, c.T = P - L, u = c.put(c));
              }
              o + 1 != s.Ic || b || (n(s.sa, s.ta - h, d, p + 16 * s.R, h), n(s.qa, s.ra - f, g, l + 8 * s.B, f), n(s.Ha, s.Ia - f, m, v + 8 * s.B, f));
            }
            if (!u) return Jt(t, 6, "Output aborted.");
          }
          return 1;
        }(t, r)), null != r.bc && r.bc(r), s &= 1;
      }
      return s ? (t.cb = 0, s) : 0;
    }
    function te(t, e, r, n, i) {
      i = t[e + r + 32 * n] + (i >> 3), t[e + r + 32 * n] = -256 & i ? 0 > i ? 0 : 255 : i;
    }
    function ee(t, e, r, n, i, a) {
      te(t, e, 0, r, n + i), te(t, e, 1, r, n + a), te(t, e, 2, r, n - a), te(t, e, 3, r, n - i);
    }
    function re(t) {
      return (20091 * t >> 16) + t;
    }
    function ne(t, e, r, n) {
      var i,
        o = 0,
        s = a(16);
      for (i = 0; 4 > i; ++i) {
        var c = t[e + 0] + t[e + 8],
          u = t[e + 0] - t[e + 8],
          h = (35468 * t[e + 4] >> 16) - re(t[e + 12]),
          l = re(t[e + 4]) + (35468 * t[e + 12] >> 16);
        s[o + 0] = c + l, s[o + 1] = u + h, s[o + 2] = u - h, s[o + 3] = c - l, o += 4, e++;
      }
      for (i = o = 0; 4 > i; ++i) c = (t = s[o + 0] + 4) + s[o + 8], u = t - s[o + 8], h = (35468 * s[o + 4] >> 16) - re(s[o + 12]), te(r, n, 0, 0, c + (l = re(s[o + 4]) + (35468 * s[o + 12] >> 16))), te(r, n, 1, 0, u + h), te(r, n, 2, 0, u - h), te(r, n, 3, 0, c - l), o++, n += 32;
    }
    function ie(t, e, r, n) {
      var i = t[e + 0] + 4,
        a = 35468 * t[e + 4] >> 16,
        o = re(t[e + 4]),
        s = 35468 * t[e + 1] >> 16;
      ee(r, n, 0, i + o, t = re(t[e + 1]), s), ee(r, n, 1, i + a, t, s), ee(r, n, 2, i - a, t, s), ee(r, n, 3, i - o, t, s);
    }
    function ae(t, e, r, n, i) {
      ne(t, e, r, n), i && ne(t, e + 16, r, n + 4);
    }
    function oe(t, e, r, n) {
      on(t, e + 0, r, n, 1), on(t, e + 32, r, n + 128, 1);
    }
    function se(t, e, r, n) {
      var i;
      for (t = t[e + 0] + 4, i = 0; 4 > i; ++i) for (e = 0; 4 > e; ++e) te(r, n, e, i, t);
    }
    function ce(t, e, r, n) {
      t[e + 0] && un(t, e + 0, r, n), t[e + 16] && un(t, e + 16, r, n + 4), t[e + 32] && un(t, e + 32, r, n + 128), t[e + 48] && un(t, e + 48, r, n + 128 + 4);
    }
    function ue(t, e, r, n) {
      var i,
        o = a(16);
      for (i = 0; 4 > i; ++i) {
        var s = t[e + 0 + i] + t[e + 12 + i],
          c = t[e + 4 + i] + t[e + 8 + i],
          u = t[e + 4 + i] - t[e + 8 + i],
          h = t[e + 0 + i] - t[e + 12 + i];
        o[0 + i] = s + c, o[8 + i] = s - c, o[4 + i] = h + u, o[12 + i] = h - u;
      }
      for (i = 0; 4 > i; ++i) s = (t = o[0 + 4 * i] + 3) + o[3 + 4 * i], c = o[1 + 4 * i] + o[2 + 4 * i], u = o[1 + 4 * i] - o[2 + 4 * i], h = t - o[3 + 4 * i], r[n + 0] = s + c >> 3, r[n + 16] = h + u >> 3, r[n + 32] = s - c >> 3, r[n + 48] = h - u >> 3, n += 64;
    }
    function he(t, e, r) {
      var n,
        i = e - 32,
        a = Bn,
        o = 255 - t[i - 1];
      for (n = 0; n < r; ++n) {
        var s,
          c = a,
          u = o + t[e - 1];
        for (s = 0; s < r; ++s) t[e + s] = c[u + t[i + s]];
        e += 32;
      }
    }
    function le(t, e) {
      he(t, e, 4);
    }
    function fe(t, e) {
      he(t, e, 8);
    }
    function de(t, e) {
      he(t, e, 16);
    }
    function pe(t, e) {
      var r;
      for (r = 0; 16 > r; ++r) n(t, e + 32 * r, t, e - 32, 16);
    }
    function ge(t, e) {
      var r;
      for (r = 16; 0 < r; --r) i(t, e, t[e - 1], 16), e += 32;
    }
    function me(t, e, r) {
      var n;
      for (n = 0; 16 > n; ++n) i(e, r + 32 * n, t, 16);
    }
    function ve(t, e) {
      var r,
        n = 16;
      for (r = 0; 16 > r; ++r) n += t[e - 1 + 32 * r] + t[e + r - 32];
      me(n >> 5, t, e);
    }
    function be(t, e) {
      var r,
        n = 8;
      for (r = 0; 16 > r; ++r) n += t[e - 1 + 32 * r];
      me(n >> 4, t, e);
    }
    function ye(t, e) {
      var r,
        n = 8;
      for (r = 0; 16 > r; ++r) n += t[e + r - 32];
      me(n >> 4, t, e);
    }
    function we(t, e) {
      me(128, t, e);
    }
    function Ne(t, e, r) {
      return t + 2 * e + r + 2 >> 2;
    }
    function Le(t, e) {
      var r,
        i = e - 32;
      i = new Uint8Array([Ne(t[i - 1], t[i + 0], t[i + 1]), Ne(t[i + 0], t[i + 1], t[i + 2]), Ne(t[i + 1], t[i + 2], t[i + 3]), Ne(t[i + 2], t[i + 3], t[i + 4])]);
      for (r = 0; 4 > r; ++r) n(t, e + 32 * r, i, 0, i.length);
    }
    function Ae(t, e) {
      var r = t[e - 1],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 + 96];
      I(t, e + 0, 16843009 * Ne(t[e - 1 - 32], r, n)), I(t, e + 32, 16843009 * Ne(r, n, i)), I(t, e + 64, 16843009 * Ne(n, i, a)), I(t, e + 96, 16843009 * Ne(i, a, a));
    }
    function xe(t, e) {
      var r,
        n = 4;
      for (r = 0; 4 > r; ++r) n += t[e + r - 32] + t[e - 1 + 32 * r];
      for (n >>= 3, r = 0; 4 > r; ++r) i(t, e + 32 * r, n, 4);
    }
    function Se(t, e) {
      var r = t[e - 1 + 0],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 - 32],
        o = t[e + 0 - 32],
        s = t[e + 1 - 32],
        c = t[e + 2 - 32],
        u = t[e + 3 - 32];
      t[e + 0 + 96] = Ne(n, i, t[e - 1 + 96]), t[e + 1 + 96] = t[e + 0 + 64] = Ne(r, n, i), t[e + 2 + 96] = t[e + 1 + 64] = t[e + 0 + 32] = Ne(a, r, n), t[e + 3 + 96] = t[e + 2 + 64] = t[e + 1 + 32] = t[e + 0 + 0] = Ne(o, a, r), t[e + 3 + 64] = t[e + 2 + 32] = t[e + 1 + 0] = Ne(s, o, a), t[e + 3 + 32] = t[e + 2 + 0] = Ne(c, s, o), t[e + 3 + 0] = Ne(u, c, s);
    }
    function _e(t, e) {
      var r = t[e + 1 - 32],
        n = t[e + 2 - 32],
        i = t[e + 3 - 32],
        a = t[e + 4 - 32],
        o = t[e + 5 - 32],
        s = t[e + 6 - 32],
        c = t[e + 7 - 32];
      t[e + 0 + 0] = Ne(t[e + 0 - 32], r, n), t[e + 1 + 0] = t[e + 0 + 32] = Ne(r, n, i), t[e + 2 + 0] = t[e + 1 + 32] = t[e + 0 + 64] = Ne(n, i, a), t[e + 3 + 0] = t[e + 2 + 32] = t[e + 1 + 64] = t[e + 0 + 96] = Ne(i, a, o), t[e + 3 + 32] = t[e + 2 + 64] = t[e + 1 + 96] = Ne(a, o, s), t[e + 3 + 64] = t[e + 2 + 96] = Ne(o, s, c), t[e + 3 + 96] = Ne(s, c, c);
    }
    function Pe(t, e) {
      var r = t[e - 1 + 0],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 - 32],
        o = t[e + 0 - 32],
        s = t[e + 1 - 32],
        c = t[e + 2 - 32],
        u = t[e + 3 - 32];
      t[e + 0 + 0] = t[e + 1 + 64] = a + o + 1 >> 1, t[e + 1 + 0] = t[e + 2 + 64] = o + s + 1 >> 1, t[e + 2 + 0] = t[e + 3 + 64] = s + c + 1 >> 1, t[e + 3 + 0] = c + u + 1 >> 1, t[e + 0 + 96] = Ne(i, n, r), t[e + 0 + 64] = Ne(n, r, a), t[e + 0 + 32] = t[e + 1 + 96] = Ne(r, a, o), t[e + 1 + 32] = t[e + 2 + 96] = Ne(a, o, s), t[e + 2 + 32] = t[e + 3 + 96] = Ne(o, s, c), t[e + 3 + 32] = Ne(s, c, u);
    }
    function ke(t, e) {
      var r = t[e + 0 - 32],
        n = t[e + 1 - 32],
        i = t[e + 2 - 32],
        a = t[e + 3 - 32],
        o = t[e + 4 - 32],
        s = t[e + 5 - 32],
        c = t[e + 6 - 32],
        u = t[e + 7 - 32];
      t[e + 0 + 0] = r + n + 1 >> 1, t[e + 1 + 0] = t[e + 0 + 64] = n + i + 1 >> 1, t[e + 2 + 0] = t[e + 1 + 64] = i + a + 1 >> 1, t[e + 3 + 0] = t[e + 2 + 64] = a + o + 1 >> 1, t[e + 0 + 32] = Ne(r, n, i), t[e + 1 + 32] = t[e + 0 + 96] = Ne(n, i, a), t[e + 2 + 32] = t[e + 1 + 96] = Ne(i, a, o), t[e + 3 + 32] = t[e + 2 + 96] = Ne(a, o, s), t[e + 3 + 64] = Ne(o, s, c), t[e + 3 + 96] = Ne(s, c, u);
    }
    function Ie(t, e) {
      var r = t[e - 1 + 0],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 + 96];
      t[e + 0 + 0] = r + n + 1 >> 1, t[e + 2 + 0] = t[e + 0 + 32] = n + i + 1 >> 1, t[e + 2 + 32] = t[e + 0 + 64] = i + a + 1 >> 1, t[e + 1 + 0] = Ne(r, n, i), t[e + 3 + 0] = t[e + 1 + 32] = Ne(n, i, a), t[e + 3 + 32] = t[e + 1 + 64] = Ne(i, a, a), t[e + 3 + 64] = t[e + 2 + 64] = t[e + 0 + 96] = t[e + 1 + 96] = t[e + 2 + 96] = t[e + 3 + 96] = a;
    }
    function Fe(t, e) {
      var r = t[e - 1 + 0],
        n = t[e - 1 + 32],
        i = t[e - 1 + 64],
        a = t[e - 1 + 96],
        o = t[e - 1 - 32],
        s = t[e + 0 - 32],
        c = t[e + 1 - 32],
        u = t[e + 2 - 32];
      t[e + 0 + 0] = t[e + 2 + 32] = r + o + 1 >> 1, t[e + 0 + 32] = t[e + 2 + 64] = n + r + 1 >> 1, t[e + 0 + 64] = t[e + 2 + 96] = i + n + 1 >> 1, t[e + 0 + 96] = a + i + 1 >> 1, t[e + 3 + 0] = Ne(s, c, u), t[e + 2 + 0] = Ne(o, s, c), t[e + 1 + 0] = t[e + 3 + 32] = Ne(r, o, s), t[e + 1 + 32] = t[e + 3 + 64] = Ne(n, r, o), t[e + 1 + 64] = t[e + 3 + 96] = Ne(i, n, r), t[e + 1 + 96] = Ne(a, i, n);
    }
    function Ce(t, e) {
      var r;
      for (r = 0; 8 > r; ++r) n(t, e + 32 * r, t, e - 32, 8);
    }
    function je(t, e) {
      var r;
      for (r = 0; 8 > r; ++r) i(t, e, t[e - 1], 8), e += 32;
    }
    function Oe(t, e, r) {
      var n;
      for (n = 0; 8 > n; ++n) i(e, r + 32 * n, t, 8);
    }
    function Be(t, e) {
      var r,
        n = 8;
      for (r = 0; 8 > r; ++r) n += t[e + r - 32] + t[e - 1 + 32 * r];
      Oe(n >> 4, t, e);
    }
    function Me(t, e) {
      var r,
        n = 4;
      for (r = 0; 8 > r; ++r) n += t[e + r - 32];
      Oe(n >> 3, t, e);
    }
    function Ee(t, e) {
      var r,
        n = 4;
      for (r = 0; 8 > r; ++r) n += t[e - 1 + 32 * r];
      Oe(n >> 3, t, e);
    }
    function qe(t, e) {
      Oe(128, t, e);
    }
    function De(t, e, r) {
      var n = t[e - r],
        i = t[e + 0],
        a = 3 * (i - n) + jn[1020 + t[e - 2 * r] - t[e + r]],
        o = On[112 + (a + 4 >> 3)];
      t[e - r] = Bn[255 + n + On[112 + (a + 3 >> 3)]], t[e + 0] = Bn[255 + i - o];
    }
    function Re(t, e, r, n) {
      var i = t[e + 0],
        a = t[e + r];
      return Mn[255 + t[e - 2 * r] - t[e - r]] > n || Mn[255 + a - i] > n;
    }
    function Te(t, e, r, n) {
      return 4 * Mn[255 + t[e - r] - t[e + 0]] + Mn[255 + t[e - 2 * r] - t[e + r]] <= n;
    }
    function Ue(t, e, r, n, i) {
      var a = t[e - 3 * r],
        o = t[e - 2 * r],
        s = t[e - r],
        c = t[e + 0],
        u = t[e + r],
        h = t[e + 2 * r],
        l = t[e + 3 * r];
      return 4 * Mn[255 + s - c] + Mn[255 + o - u] > n ? 0 : Mn[255 + t[e - 4 * r] - a] <= i && Mn[255 + a - o] <= i && Mn[255 + o - s] <= i && Mn[255 + l - h] <= i && Mn[255 + h - u] <= i && Mn[255 + u - c] <= i;
    }
    function ze(t, e, r, n) {
      var i = 2 * n + 1;
      for (n = 0; 16 > n; ++n) Te(t, e + n, r, i) && De(t, e + n, r);
    }
    function He(t, e, r, n) {
      var i = 2 * n + 1;
      for (n = 0; 16 > n; ++n) Te(t, e + n * r, 1, i) && De(t, e + n * r, 1);
    }
    function We(t, e, r, n) {
      var i;
      for (i = 3; 0 < i; --i) ze(t, e += 4 * r, r, n);
    }
    function Ve(t, e, r, n) {
      var i;
      for (i = 3; 0 < i; --i) He(t, e += 4, r, n);
    }
    function Ge(t, e, r, n, i, a, o, s) {
      for (a = 2 * a + 1; 0 < i--;) {
        if (Ue(t, e, r, a, o)) if (Re(t, e, r, s)) De(t, e, r);else {
          var c = t,
            u = e,
            h = r,
            l = c[u - 2 * h],
            f = c[u - h],
            d = c[u + 0],
            p = c[u + h],
            g = c[u + 2 * h],
            m = 27 * (b = jn[1020 + 3 * (d - f) + jn[1020 + l - p]]) + 63 >> 7,
            v = 18 * b + 63 >> 7,
            b = 9 * b + 63 >> 7;
          c[u - 3 * h] = Bn[255 + c[u - 3 * h] + b], c[u - 2 * h] = Bn[255 + l + v], c[u - h] = Bn[255 + f + m], c[u + 0] = Bn[255 + d - m], c[u + h] = Bn[255 + p - v], c[u + 2 * h] = Bn[255 + g - b];
        }
        e += n;
      }
    }
    function Ye(t, e, r, n, i, a, o, s) {
      for (a = 2 * a + 1; 0 < i--;) {
        if (Ue(t, e, r, a, o)) if (Re(t, e, r, s)) De(t, e, r);else {
          var c = t,
            u = e,
            h = r,
            l = c[u - h],
            f = c[u + 0],
            d = c[u + h],
            p = On[112 + ((g = 3 * (f - l)) + 4 >> 3)],
            g = On[112 + (g + 3 >> 3)],
            m = p + 1 >> 1;
          c[u - 2 * h] = Bn[255 + c[u - 2 * h] + m], c[u - h] = Bn[255 + l + g], c[u + 0] = Bn[255 + f - p], c[u + h] = Bn[255 + d - m];
        }
        e += n;
      }
    }
    function Je(t, e, r, n, i, a) {
      Ge(t, e, r, 1, 16, n, i, a);
    }
    function Xe(t, e, r, n, i, a) {
      Ge(t, e, 1, r, 16, n, i, a);
    }
    function Ke(t, e, r, n, i, a) {
      var o;
      for (o = 3; 0 < o; --o) Ye(t, e += 4 * r, r, 1, 16, n, i, a);
    }
    function Ze(t, e, r, n, i, a) {
      var o;
      for (o = 3; 0 < o; --o) Ye(t, e += 4, 1, r, 16, n, i, a);
    }
    function $e(t, e, r, n, i, a, o, s) {
      Ge(t, e, i, 1, 8, a, o, s), Ge(r, n, i, 1, 8, a, o, s);
    }
    function Qe(t, e, r, n, i, a, o, s) {
      Ge(t, e, 1, i, 8, a, o, s), Ge(r, n, 1, i, 8, a, o, s);
    }
    function tr(t, e, r, n, i, a, o, s) {
      Ye(t, e + 4 * i, i, 1, 8, a, o, s), Ye(r, n + 4 * i, i, 1, 8, a, o, s);
    }
    function er(t, e, r, n, i, a, o, s) {
      Ye(t, e + 4, 1, i, 8, a, o, s), Ye(r, n + 4, 1, i, 8, a, o, s);
    }
    function rr() {
      this.ba = new ot(), this.ec = [], this.cc = [], this.Mc = [], this.Dc = this.Nc = this.dc = this.fc = 0, this.Oa = new ct(), this.memory = 0, this.Ib = "OutputFunc", this.Jb = "OutputAlphaFunc", this.Nd = "OutputRowFunc";
    }
    function nr() {
      this.data = [], this.offset = this.kd = this.ha = this.w = 0, this.na = [], this.xa = this.gb = this.Ja = this.Sa = this.P = 0;
    }
    function ir() {
      this.nc = this.Ea = this.b = this.hc = 0, this.K = [], this.w = 0;
    }
    function ar() {
      this.ua = 0, this.Wa = new M(), this.vb = new M(), this.md = this.xc = this.wc = 0, this.vc = [], this.Wb = 0, this.Ya = new d(), this.yc = new l();
    }
    function or() {
      this.xb = this.a = 0, this.l = new Gt(), this.ca = new ot(), this.V = [], this.Ba = 0, this.Ta = [], this.Ua = 0, this.m = new N(), this.Pb = 0, this.wd = new N(), this.Ma = this.$ = this.C = this.i = this.c = this.xd = 0, this.s = new ar(), this.ab = 0, this.gc = o(4, ir), this.Oc = 0;
    }
    function sr() {
      this.Lc = this.Z = this.$a = this.i = this.c = 0, this.l = new Gt(), this.ic = 0, this.ca = [], this.tb = 0, this.qd = null, this.rd = 0;
    }
    function cr(t, e, r, n, i, a, o) {
      for (t = null == t ? 0 : t[e + 0], e = 0; e < o; ++e) i[a + e] = t + r[n + e] & 255, t = i[a + e];
    }
    function ur(t, e, r, n, i, a, o) {
      var s;
      if (null == t) cr(null, null, r, n, i, a, o);else for (s = 0; s < o; ++s) i[a + s] = t[e + s] + r[n + s] & 255;
    }
    function hr(t, e, r, n, i, a, o) {
      if (null == t) cr(null, null, r, n, i, a, o);else {
        var s,
          c = t[e + 0],
          u = c,
          h = c;
        for (s = 0; s < o; ++s) u = h + (c = t[e + s]) - u, h = r[n + s] + (-256 & u ? 0 > u ? 0 : 255 : u) & 255, u = c, i[a + s] = h;
      }
    }
    function lr(t, r, i, o) {
      var s = r.width,
        c = r.o;
      if (e(null != t && null != r), 0 > i || 0 >= o || i + o > c) return null;
      if (!t.Cc) {
        if (null == t.ga) {
          var u;
          if (t.ga = new sr(), (u = null == t.ga) || (u = r.width * r.o, e(0 == t.Gb.length), t.Gb = a(u), t.Uc = 0, null == t.Gb ? u = 0 : (t.mb = t.Gb, t.nb = t.Uc, t.rc = null, u = 1), u = !u), !u) {
            u = t.ga;
            var h = t.Fa,
              l = t.P,
              f = t.qc,
              d = t.mb,
              p = t.nb,
              g = l + 1,
              m = f - 1,
              b = u.l;
            if (e(null != h && null != d && null != r), mi[0] = null, mi[1] = cr, mi[2] = ur, mi[3] = hr, u.ca = d, u.tb = p, u.c = r.width, u.i = r.height, e(0 < u.c && 0 < u.i), 1 >= f) r = 0;else if (u.$a = h[l + 0] >> 0 & 3, u.Z = h[l + 0] >> 2 & 3, u.Lc = h[l + 0] >> 4 & 3, l = h[l + 0] >> 6 & 3, 0 > u.$a || 1 < u.$a || 4 <= u.Z || 1 < u.Lc || l) r = 0;else if (b.put = dt, b.ac = ft, b.bc = pt, b.ma = u, b.width = r.width, b.height = r.height, b.Da = r.Da, b.v = r.v, b.va = r.va, b.j = r.j, b.o = r.o, u.$a) t: {
              e(1 == u.$a), r = kt();
              e: for (;;) {
                if (null == r) {
                  r = 0;
                  break t;
                }
                if (e(null != u), u.mc = r, r.c = u.c, r.i = u.i, r.l = u.l, r.l.ma = u, r.l.width = u.c, r.l.height = u.i, r.a = 0, v(r.m, h, g, m), !It(u.c, u.i, 1, r, null)) break e;
                if (1 == r.ab && 3 == r.gc[0].hc && At(r.s) ? (u.ic = 1, h = r.c * r.i, r.Ta = null, r.Ua = 0, r.V = a(h), r.Ba = 0, null == r.V ? (r.a = 1, r = 0) : r = 1) : (u.ic = 0, r = Ft(r, u.c)), !r) break e;
                r = 1;
                break t;
              }
              u.mc = null, r = 0;
            } else r = m >= u.c * u.i;
            u = !r;
          }
          if (u) return null;
          1 != t.ga.Lc ? t.Ga = 0 : o = c - i;
        }
        e(null != t.ga), e(i + o <= c);
        t: {
          if (r = (h = t.ga).c, c = h.l.o, 0 == h.$a) {
            if (g = t.rc, m = t.Vc, b = t.Fa, l = t.P + 1 + i * r, f = t.mb, d = t.nb + i * r, e(l <= t.P + t.qc), 0 != h.Z) for (e(null != mi[h.Z]), u = 0; u < o; ++u) mi[h.Z](g, m, b, l, f, d, r), g = f, m = d, d += r, l += r;else for (u = 0; u < o; ++u) n(f, d, b, l, r), g = f, m = d, d += r, l += r;
            t.rc = g, t.Vc = m;
          } else {
            if (e(null != h.mc), r = i + o, e(null != (u = h.mc)), e(r <= u.i), u.C >= r) r = 1;else if (h.ic || mr(), h.ic) {
              h = u.V, g = u.Ba, m = u.c;
              var y = u.i,
                w = (b = 1, l = u.$ / m, f = u.$ % m, d = u.m, p = u.s, u.$),
                N = m * y,
                L = m * r,
                x = p.wc,
                _ = w < L ? wt(p, f, l) : null;
              e(w <= N), e(r <= y), e(At(p));
              e: for (;;) {
                for (; !d.h && w < L;) {
                  if (f & x || (_ = wt(p, f, l)), e(null != _), S(d), 256 > (y = bt(_.G[0], _.H[0], d))) h[g + w] = y, ++w, ++f >= m && (f = 0, ++l <= r && !(l % 16) && St(u, l));else {
                    if (!(280 > y)) {
                      b = 0;
                      break e;
                    }
                    y = mt(y - 256, d);
                    var P,
                      k = bt(_.G[4], _.H[4], d);
                    if (S(d), !(w >= (k = vt(m, k = mt(k, d))) && N - w >= y)) {
                      b = 0;
                      break e;
                    }
                    for (P = 0; P < y; ++P) h[g + w + P] = h[g + w + P - k];
                    for (w += y, f += y; f >= m;) f -= m, ++l <= r && !(l % 16) && St(u, l);
                    w < L && f & x && (_ = wt(p, f, l));
                  }
                  e(d.h == A(d));
                }
                St(u, l > r ? r : l);
                break e;
              }
              !b || d.h && w < N ? (b = 0, u.a = d.h ? 5 : 3) : u.$ = w, r = b;
            } else r = _t(u, u.V, u.Ba, u.c, u.i, r, Ct);
            if (!r) {
              o = 0;
              break t;
            }
          }
          i + o >= c && (t.Cc = 1), o = 1;
        }
        if (!o) return null;
        if (t.Cc && (null != (o = t.ga) && (o.mc = null), t.ga = null, 0 < t.Ga)) return alert("todo:WebPDequantizeLevels"), null;
      }
      return t.nb + i * s;
    }
    function fr(t, e, r, n, i, a) {
      for (; 0 < i--;) {
        var o,
          s = t,
          c = e + (r ? 1 : 0),
          u = t,
          h = e + (r ? 0 : 3);
        for (o = 0; o < n; ++o) {
          var l = u[h + 4 * o];
          255 != l && (l *= 32897, s[c + 4 * o + 0] = s[c + 4 * o + 0] * l >> 23, s[c + 4 * o + 1] = s[c + 4 * o + 1] * l >> 23, s[c + 4 * o + 2] = s[c + 4 * o + 2] * l >> 23);
        }
        e += a;
      }
    }
    function dr(t, e, r, n, i) {
      for (; 0 < n--;) {
        var a;
        for (a = 0; a < r; ++a) {
          var o = t[e + 2 * a + 0],
            s = 15 & (u = t[e + 2 * a + 1]),
            c = 4369 * s,
            u = (240 & u | u >> 4) * c >> 16;
          t[e + 2 * a + 0] = (240 & o | o >> 4) * c >> 16 & 240 | (15 & o | o << 4) * c >> 16 >> 4 & 15, t[e + 2 * a + 1] = 240 & u | s;
        }
        e += i;
      }
    }
    function pr(t, e, r, n, i, a, o, s) {
      var c,
        u,
        h = 255;
      for (u = 0; u < i; ++u) {
        for (c = 0; c < n; ++c) {
          var l = t[e + c];
          a[o + 4 * c] = l, h &= l;
        }
        e += r, o += s;
      }
      return 255 != h;
    }
    function gr(t, e, r, n, i) {
      var a;
      for (a = 0; a < i; ++a) r[n + a] = t[e + a] >> 8;
    }
    function mr() {
      An = fr, xn = dr, Sn = pr, _n = gr;
    }
    function vr(r, n, i) {
      t[r] = function (t, r, a, o, s, c, u, h, l, f, d, p, g, m, v, b, y) {
        var w,
          N = y - 1 >> 1,
          L = s[c + 0] | u[h + 0] << 16,
          A = l[f + 0] | d[p + 0] << 16;
        e(null != t);
        var x = 3 * L + A + 131074 >> 2;
        for (n(t[r + 0], 255 & x, x >> 16, g, m), null != a && (x = 3 * A + L + 131074 >> 2, n(a[o + 0], 255 & x, x >> 16, v, b)), w = 1; w <= N; ++w) {
          var S = s[c + w] | u[h + w] << 16,
            _ = l[f + w] | d[p + w] << 16,
            P = L + S + A + _ + 524296,
            k = P + 2 * (S + A) >> 3;
          x = k + L >> 1, L = (P = P + 2 * (L + _) >> 3) + S >> 1, n(t[r + 2 * w - 1], 255 & x, x >> 16, g, m + (2 * w - 1) * i), n(t[r + 2 * w - 0], 255 & L, L >> 16, g, m + (2 * w - 0) * i), null != a && (x = P + A >> 1, L = k + _ >> 1, n(a[o + 2 * w - 1], 255 & x, x >> 16, v, b + (2 * w - 1) * i), n(a[o + 2 * w + 0], 255 & L, L >> 16, v, b + (2 * w + 0) * i)), L = S, A = _;
        }
        1 & y || (x = 3 * L + A + 131074 >> 2, n(t[r + y - 1], 255 & x, x >> 16, g, m + (y - 1) * i), null != a && (x = 3 * A + L + 131074 >> 2, n(a[o + y - 1], 255 & x, x >> 16, v, b + (y - 1) * i)));
      };
    }
    function br() {
      vi[En] = bi, vi[qn] = wi, vi[Dn] = yi, vi[Rn] = Ni, vi[Tn] = Li, vi[Un] = Ai, vi[zn] = xi, vi[Hn] = wi, vi[Wn] = Ni, vi[Vn] = Li, vi[Gn] = Ai;
    }
    function yr(t) {
      return t & ~Fi ? 0 > t ? 0 : 255 : t >> Ii;
    }
    function wr(t, e) {
      return yr((19077 * t >> 8) + (26149 * e >> 8) - 14234);
    }
    function Nr(t, e, r) {
      return yr((19077 * t >> 8) - (6419 * e >> 8) - (13320 * r >> 8) + 8708);
    }
    function Lr(t, e) {
      return yr((19077 * t >> 8) + (33050 * e >> 8) - 17685);
    }
    function Ar(t, e, r, n, i) {
      n[i + 0] = wr(t, r), n[i + 1] = Nr(t, e, r), n[i + 2] = Lr(t, e);
    }
    function xr(t, e, r, n, i) {
      n[i + 0] = Lr(t, e), n[i + 1] = Nr(t, e, r), n[i + 2] = wr(t, r);
    }
    function Sr(t, e, r, n, i) {
      var a = Nr(t, e, r);
      e = a << 3 & 224 | Lr(t, e) >> 3, n[i + 0] = 248 & wr(t, r) | a >> 5, n[i + 1] = e;
    }
    function _r(t, e, r, n, i) {
      var a = 240 & Lr(t, e) | 15;
      n[i + 0] = 240 & wr(t, r) | Nr(t, e, r) >> 4, n[i + 1] = a;
    }
    function Pr(t, e, r, n, i) {
      n[i + 0] = 255, Ar(t, e, r, n, i + 1);
    }
    function kr(t, e, r, n, i) {
      xr(t, e, r, n, i), n[i + 3] = 255;
    }
    function Ir(t, e, r, n, i) {
      Ar(t, e, r, n, i), n[i + 3] = 255;
    }
    function Vt(t, e) {
      return 0 > t ? 0 : t > e ? e : t;
    }
    function Fr(e, r, n) {
      t[e] = function (t, e, i, a, o, s, c, u, h) {
        for (var l = u + (-2 & h) * n; u != l;) r(t[e + 0], i[a + 0], o[s + 0], c, u), r(t[e + 1], i[a + 0], o[s + 0], c, u + n), e += 2, ++a, ++s, u += 2 * n;
        1 & h && r(t[e + 0], i[a + 0], o[s + 0], c, u);
      };
    }
    function Cr(t, e, r) {
      return 0 == r ? 0 == t ? 0 == e ? 6 : 5 : 0 == e ? 4 : 0 : r;
    }
    function jr(t, e, r, n, i) {
      switch (t >>> 30) {
        case 3:
          on(e, r, n, i, 0);
          break;
        case 2:
          sn(e, r, n, i);
          break;
        case 1:
          un(e, r, n, i);
      }
    }
    function Or(t, e) {
      var r,
        a,
        o = e.M,
        s = e.Nb,
        c = t.oc,
        u = t.pc + 40,
        h = t.oc,
        l = t.pc + 584,
        f = t.oc,
        d = t.pc + 600;
      for (r = 0; 16 > r; ++r) c[u + 32 * r - 1] = 129;
      for (r = 0; 8 > r; ++r) h[l + 32 * r - 1] = 129, f[d + 32 * r - 1] = 129;
      for (0 < o ? c[u - 1 - 32] = h[l - 1 - 32] = f[d - 1 - 32] = 129 : (i(c, u - 32 - 1, 127, 21), i(h, l - 32 - 1, 127, 9), i(f, d - 32 - 1, 127, 9)), a = 0; a < t.za; ++a) {
        var p = e.ya[e.aa + a];
        if (0 < a) {
          for (r = -1; 16 > r; ++r) n(c, u + 32 * r - 4, c, u + 32 * r + 12, 4);
          for (r = -1; 8 > r; ++r) n(h, l + 32 * r - 4, h, l + 32 * r + 4, 4), n(f, d + 32 * r - 4, f, d + 32 * r + 4, 4);
        }
        var g = t.Gd,
          m = t.Hd + a,
          v = p.ad,
          b = p.Hc;
        if (0 < o && (n(c, u - 32, g[m].y, 0, 16), n(h, l - 32, g[m].f, 0, 8), n(f, d - 32, g[m].ea, 0, 8)), p.Za) {
          var y = c,
            w = u - 32 + 16;
          for (0 < o && (a >= t.za - 1 ? i(y, w, g[m].y[15], 4) : n(y, w, g[m + 1].y, 0, 4)), r = 0; 4 > r; r++) y[w + 128 + r] = y[w + 256 + r] = y[w + 384 + r] = y[w + 0 + r];
          for (r = 0; 16 > r; ++r, b <<= 2) y = c, w = u + Di[r], fi[p.Ob[r]](y, w), jr(b, v, 16 * +r, y, w);
        } else if (y = Cr(a, o, p.Ob[0]), li[y](c, u), 0 != b) for (r = 0; 16 > r; ++r, b <<= 2) jr(b, v, 16 * +r, c, u + Di[r]);
        for (r = p.Gc, y = Cr(a, o, p.Dd), di[y](h, l), di[y](f, d), b = v, y = h, w = l, 255 & (p = r >> 0) && (170 & p ? cn(b, 256, y, w) : hn(b, 256, y, w)), p = f, b = d, 255 & (r >>= 8) && (170 & r ? cn(v, 320, p, b) : hn(v, 320, p, b)), o < t.Ub - 1 && (n(g[m].y, 0, c, u + 480, 16), n(g[m].f, 0, h, l + 224, 8), n(g[m].ea, 0, f, d + 224, 8)), r = 8 * s * t.B, g = t.sa, m = t.ta + 16 * a + 16 * s * t.R, v = t.qa, p = t.ra + 8 * a + r, b = t.Ha, y = t.Ia + 8 * a + r, r = 0; 16 > r; ++r) n(g, m + r * t.R, c, u + 32 * r, 16);
        for (r = 0; 8 > r; ++r) n(v, p + r * t.B, h, l + 32 * r, 8), n(b, y + r * t.B, f, d + 32 * r, 8);
      }
    }
    function Br(t, n, i, a, o, s, c, u, h) {
      var l = [0],
        f = [0],
        d = 0,
        p = null != h ? h.kd : 0,
        g = null != h ? h : new nr();
      if (null == t || 12 > i) return 7;
      g.data = t, g.w = n, g.ha = i, n = [n], i = [i], g.gb = [g.gb];
      t: {
        var m = n,
          b = i,
          y = g.gb;
        if (e(null != t), e(null != b), e(null != y), y[0] = 0, 12 <= b[0] && !r(t, m[0], "RIFF")) {
          if (r(t, m[0] + 8, "WEBP")) {
            y = 3;
            break t;
          }
          var w = j(t, m[0] + 4);
          if (12 > w || 4294967286 < w) {
            y = 3;
            break t;
          }
          if (p && w > b[0] - 8) {
            y = 7;
            break t;
          }
          y[0] = w, m[0] += 12, b[0] -= 12;
        }
        y = 0;
      }
      if (0 != y) return y;
      for (w = 0 < g.gb[0], i = i[0];;) {
        t: {
          var L = t;
          b = n, y = i;
          var A = l,
            x = f,
            S = m = [0];
          if ((k = d = [d])[0] = 0, 8 > y[0]) y = 7;else {
            if (!r(L, b[0], "VP8X")) {
              if (10 != j(L, b[0] + 4)) {
                y = 3;
                break t;
              }
              if (18 > y[0]) {
                y = 7;
                break t;
              }
              var _ = j(L, b[0] + 8),
                P = 1 + C(L, b[0] + 12);
              if (2147483648 <= P * (L = 1 + C(L, b[0] + 15))) {
                y = 3;
                break t;
              }
              null != S && (S[0] = _), null != A && (A[0] = P), null != x && (x[0] = L), b[0] += 18, y[0] -= 18, k[0] = 1;
            }
            y = 0;
          }
        }
        if (d = d[0], m = m[0], 0 != y) return y;
        if (b = !!(2 & m), !w && d) return 3;
        if (null != s && (s[0] = !!(16 & m)), null != c && (c[0] = b), null != u && (u[0] = 0), c = l[0], m = f[0], d && b && null == h) {
          y = 0;
          break;
        }
        if (4 > i) {
          y = 7;
          break;
        }
        if (w && d || !w && !d && !r(t, n[0], "ALPH")) {
          i = [i], g.na = [g.na], g.P = [g.P], g.Sa = [g.Sa];
          t: {
            _ = t, y = n, w = i;
            var k = g.gb;
            A = g.na, x = g.P, S = g.Sa;
            P = 22, e(null != _), e(null != w), L = y[0];
            var I = w[0];
            for (e(null != A), e(null != S), A[0] = null, x[0] = null, S[0] = 0;;) {
              if (y[0] = L, w[0] = I, 8 > I) {
                y = 7;
                break t;
              }
              var F = j(_, L + 4);
              if (4294967286 < F) {
                y = 3;
                break t;
              }
              var O = 8 + F + 1 & -2;
              if (P += O, 0 < k && P > k) {
                y = 3;
                break t;
              }
              if (!r(_, L, "VP8 ") || !r(_, L, "VP8L")) {
                y = 0;
                break t;
              }
              if (I[0] < O) {
                y = 7;
                break t;
              }
              r(_, L, "ALPH") || (A[0] = _, x[0] = L + 8, S[0] = F), L += O, I -= O;
            }
          }
          if (i = i[0], g.na = g.na[0], g.P = g.P[0], g.Sa = g.Sa[0], 0 != y) break;
        }
        i = [i], g.Ja = [g.Ja], g.xa = [g.xa];
        t: if (k = t, y = n, w = i, A = g.gb[0], x = g.Ja, S = g.xa, _ = y[0], L = !r(k, _, "VP8 "), P = !r(k, _, "VP8L"), e(null != k), e(null != w), e(null != x), e(null != S), 8 > w[0]) y = 7;else {
          if (L || P) {
            if (k = j(k, _ + 4), 12 <= A && k > A - 12) {
              y = 3;
              break t;
            }
            if (p && k > w[0] - 8) {
              y = 7;
              break t;
            }
            x[0] = k, y[0] += 8, w[0] -= 8, S[0] = P;
          } else S[0] = 5 <= w[0] && 47 == k[_ + 0] && !(k[_ + 4] >> 5), x[0] = w[0];
          y = 0;
        }
        if (i = i[0], g.Ja = g.Ja[0], g.xa = g.xa[0], n = n[0], 0 != y) break;
        if (4294967286 < g.Ja) return 3;
        if (null == u || b || (u[0] = g.xa ? 2 : 1), c = [c], m = [m], g.xa) {
          if (5 > i) {
            y = 7;
            break;
          }
          u = c, p = m, b = s, null == t || 5 > i ? t = 0 : 5 <= i && 47 == t[n + 0] && !(t[n + 4] >> 5) ? (w = [0], k = [0], A = [0], v(x = new N(), t, n, i), gt(x, w, k, A) ? (null != u && (u[0] = w[0]), null != p && (p[0] = k[0]), null != b && (b[0] = A[0]), t = 1) : t = 0) : t = 0;
        } else {
          if (10 > i) {
            y = 7;
            break;
          }
          u = m, null == t || 10 > i || !Xt(t, n + 3, i - 3) ? t = 0 : (p = t[n + 0] | t[n + 1] << 8 | t[n + 2] << 16, b = 16383 & (t[n + 7] << 8 | t[n + 6]), t = 16383 & (t[n + 9] << 8 | t[n + 8]), 1 & p || 3 < (p >> 1 & 7) || !(p >> 4 & 1) || p >> 5 >= g.Ja || !b || !t ? t = 0 : (c && (c[0] = b), u && (u[0] = t), t = 1));
        }
        if (!t) return 3;
        if (c = c[0], m = m[0], d && (l[0] != c || f[0] != m)) return 3;
        null != h && (h[0] = g, h.offset = n - h.w, e(4294967286 > n - h.w), e(h.offset == h.ha - i));
        break;
      }
      return 0 == y || 7 == y && d && null == h ? (null != s && (s[0] |= null != g.na && 0 < g.na.length), null != a && (a[0] = c), null != o && (o[0] = m), 0) : y;
    }
    function Mr(t, e, r) {
      var n = e.width,
        i = e.height,
        a = 0,
        o = 0,
        s = n,
        c = i;
      if (e.Da = null != t && 0 < t.Da, e.Da && (s = t.cd, c = t.bd, a = t.v, o = t.j, 11 > r || (a &= -2, o &= -2), 0 > a || 0 > o || 0 >= s || 0 >= c || a + s > n || o + c > i)) return 0;
      if (e.v = a, e.j = o, e.va = a + s, e.o = o + c, e.U = s, e.T = c, e.da = null != t && 0 < t.da, e.da) {
        if (!E(s, c, r = [t.ib], a = [t.hb])) return 0;
        e.ib = r[0], e.hb = a[0];
      }
      return e.ob = null != t && t.ob, e.Kb = null == t || !t.Sd, e.da && (e.ob = e.ib < 3 * n / 4 && e.hb < 3 * i / 4, e.Kb = 0), 1;
    }
    function Er(t) {
      if (null == t) return 2;
      if (11 > t.S) {
        var e = t.f.RGBA;
        e.fb += (t.height - 1) * e.A, e.A = -e.A;
      } else e = t.f.kb, t = t.height, e.O += (t - 1) * e.fa, e.fa = -e.fa, e.N += (t - 1 >> 1) * e.Ab, e.Ab = -e.Ab, e.W += (t - 1 >> 1) * e.Db, e.Db = -e.Db, null != e.F && (e.J += (t - 1) * e.lb, e.lb = -e.lb);
      return 0;
    }
    function qr(t, e, r, n) {
      if (null == n || 0 >= t || 0 >= e) return 2;
      if (null != r) {
        if (r.Da) {
          var i = r.cd,
            o = r.bd,
            s = -2 & r.v,
            c = -2 & r.j;
          if (0 > s || 0 > c || 0 >= i || 0 >= o || s + i > t || c + o > e) return 2;
          t = i, e = o;
        }
        if (r.da) {
          if (!E(t, e, i = [r.ib], o = [r.hb])) return 2;
          t = i[0], e = o[0];
        }
      }
      n.width = t, n.height = e;
      t: {
        var u = n.width,
          h = n.height;
        if (t = n.S, 0 >= u || 0 >= h || !(t >= En && 13 > t)) t = 2;else {
          if (0 >= n.Rd && null == n.sd) {
            s = o = i = e = 0;
            var l = (c = u * zi[t]) * h;
            if (11 > t || (o = (h + 1) / 2 * (e = (u + 1) / 2), 12 == t && (s = (i = u) * h)), null == (h = a(l + 2 * o + s))) {
              t = 1;
              break t;
            }
            n.sd = h, 11 > t ? ((u = n.f.RGBA).eb = h, u.fb = 0, u.A = c, u.size = l) : ((u = n.f.kb).y = h, u.O = 0, u.fa = c, u.Fd = l, u.f = h, u.N = 0 + l, u.Ab = e, u.Cd = o, u.ea = h, u.W = 0 + l + o, u.Db = e, u.Ed = o, 12 == t && (u.F = h, u.J = 0 + l + 2 * o), u.Tc = s, u.lb = i);
          }
          if (e = 1, i = n.S, o = n.width, s = n.height, i >= En && 13 > i) {
            if (11 > i) t = n.f.RGBA, e &= (c = Math.abs(t.A)) * (s - 1) + o <= t.size, e &= c >= o * zi[i], e &= null != t.eb;else {
              t = n.f.kb, c = (o + 1) / 2, l = (s + 1) / 2, u = Math.abs(t.fa);
              h = Math.abs(t.Ab);
              var f = Math.abs(t.Db),
                d = Math.abs(t.lb),
                p = d * (s - 1) + o;
              e &= u * (s - 1) + o <= t.Fd, e &= h * (l - 1) + c <= t.Cd, e = (e &= f * (l - 1) + c <= t.Ed) & u >= o & h >= c & f >= c, e &= null != t.y, e &= null != t.f, e &= null != t.ea, 12 == i && (e &= d >= o, e &= p <= t.Tc, e &= null != t.F);
            }
          } else e = 0;
          t = e ? 0 : 2;
        }
      }
      return 0 != t || null != r && r.fd && (t = Er(n)), t;
    }
    var Dr = 64,
      Rr = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215],
      Tr = 24,
      Ur = 32,
      zr = 8,
      Hr = [0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];
    R("Predictor0", "PredictorAdd0"), t.Predictor0 = function () {
      return 4278190080;
    }, t.Predictor1 = function (t) {
      return t;
    }, t.Predictor2 = function (t, e, r) {
      return e[r + 0];
    }, t.Predictor3 = function (t, e, r) {
      return e[r + 1];
    }, t.Predictor4 = function (t, e, r) {
      return e[r - 1];
    }, t.Predictor5 = function (t, e, r) {
      return U(U(t, e[r + 1]), e[r + 0]);
    }, t.Predictor6 = function (t, e, r) {
      return U(t, e[r - 1]);
    }, t.Predictor7 = function (t, e, r) {
      return U(t, e[r + 0]);
    }, t.Predictor8 = function (t, e, r) {
      return U(e[r - 1], e[r + 0]);
    }, t.Predictor9 = function (t, e, r) {
      return U(e[r + 0], e[r + 1]);
    }, t.Predictor10 = function (t, e, r) {
      return U(U(t, e[r - 1]), U(e[r + 0], e[r + 1]));
    }, t.Predictor11 = function (t, e, r) {
      var n = e[r + 0];
      return 0 >= W(n >> 24 & 255, t >> 24 & 255, (e = e[r - 1]) >> 24 & 255) + W(n >> 16 & 255, t >> 16 & 255, e >> 16 & 255) + W(n >> 8 & 255, t >> 8 & 255, e >> 8 & 255) + W(255 & n, 255 & t, 255 & e) ? n : t;
    }, t.Predictor12 = function (t, e, r) {
      var n = e[r + 0];
      return (z((t >> 24 & 255) + (n >> 24 & 255) - ((e = e[r - 1]) >> 24 & 255)) << 24 | z((t >> 16 & 255) + (n >> 16 & 255) - (e >> 16 & 255)) << 16 | z((t >> 8 & 255) + (n >> 8 & 255) - (e >> 8 & 255)) << 8 | z((255 & t) + (255 & n) - (255 & e))) >>> 0;
    }, t.Predictor13 = function (t, e, r) {
      var n = e[r - 1];
      return (H((t = U(t, e[r + 0])) >> 24 & 255, n >> 24 & 255) << 24 | H(t >> 16 & 255, n >> 16 & 255) << 16 | H(t >> 8 & 255, n >> 8 & 255) << 8 | H(t >> 0 & 255, n >> 0 & 255)) >>> 0;
    };
    var Wr = t.PredictorAdd0;
    t.PredictorAdd1 = V, R("Predictor2", "PredictorAdd2"), R("Predictor3", "PredictorAdd3"), R("Predictor4", "PredictorAdd4"), R("Predictor5", "PredictorAdd5"), R("Predictor6", "PredictorAdd6"), R("Predictor7", "PredictorAdd7"), R("Predictor8", "PredictorAdd8"), R("Predictor9", "PredictorAdd9"), R("Predictor10", "PredictorAdd10"), R("Predictor11", "PredictorAdd11"), R("Predictor12", "PredictorAdd12"), R("Predictor13", "PredictorAdd13");
    var Vr = t.PredictorAdd2;
    X("ColorIndexInverseTransform", "MapARGB", "32b", function (t) {
      return t >> 8 & 255;
    }, function (t) {
      return t;
    }), X("VP8LColorIndexInverseTransformAlpha", "MapAlpha", "8b", function (t) {
      return t;
    }, function (t) {
      return t >> 8 & 255;
    });
    var Gr,
      Yr = t.ColorIndexInverseTransform,
      Jr = t.MapARGB,
      Xr = t.VP8LColorIndexInverseTransformAlpha,
      Kr = t.MapAlpha,
      Zr = t.VP8LPredictorsAdd = [];
    Zr.length = 16, (t.VP8LPredictors = []).length = 16, (t.VP8LPredictorsAdd_C = []).length = 16, (t.VP8LPredictors_C = []).length = 16;
    var $r,
      Qr,
      tn,
      en,
      rn,
      nn,
      an,
      on,
      sn,
      cn,
      un,
      hn,
      ln,
      fn,
      dn,
      pn,
      gn,
      mn,
      vn,
      bn,
      yn,
      wn,
      Nn,
      Ln,
      An,
      xn,
      Sn,
      _n,
      Pn = a(511),
      kn = a(2041),
      In = a(225),
      Fn = a(767),
      Cn = 0,
      jn = kn,
      On = In,
      Bn = Fn,
      Mn = Pn,
      En = 0,
      qn = 1,
      Dn = 2,
      Rn = 3,
      Tn = 4,
      Un = 5,
      zn = 6,
      Hn = 7,
      Wn = 8,
      Vn = 9,
      Gn = 10,
      Yn = [2, 3, 7],
      Jn = [3, 3, 11],
      Xn = [280, 256, 256, 256, 40],
      Kn = [0, 1, 1, 1, 0],
      Zn = [17, 18, 0, 1, 2, 3, 4, 5, 16, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
      $n = [24, 7, 23, 25, 40, 6, 39, 41, 22, 26, 38, 42, 56, 5, 55, 57, 21, 27, 54, 58, 37, 43, 72, 4, 71, 73, 20, 28, 53, 59, 70, 74, 36, 44, 88, 69, 75, 52, 60, 3, 87, 89, 19, 29, 86, 90, 35, 45, 68, 76, 85, 91, 51, 61, 104, 2, 103, 105, 18, 30, 102, 106, 34, 46, 84, 92, 67, 77, 101, 107, 50, 62, 120, 1, 119, 121, 83, 93, 17, 31, 100, 108, 66, 78, 118, 122, 33, 47, 117, 123, 49, 63, 99, 109, 82, 94, 0, 116, 124, 65, 79, 16, 32, 98, 110, 48, 115, 125, 81, 95, 64, 114, 126, 97, 111, 80, 113, 127, 96, 112],
      Qn = [2954, 2956, 2958, 2962, 2970, 2986, 3018, 3082, 3212, 3468, 3980, 5004],
      ti = 8,
      ei = [4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 17, 18, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 108, 110, 112, 114, 116, 118, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 143, 145, 148, 151, 154, 157],
      ri = [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 119, 122, 125, 128, 131, 134, 137, 140, 143, 146, 149, 152, 155, 158, 161, 164, 167, 170, 173, 177, 181, 185, 189, 193, 197, 201, 205, 209, 213, 217, 221, 225, 229, 234, 239, 245, 249, 254, 259, 264, 269, 274, 279, 284],
      ni = null,
      ii = [[173, 148, 140, 0], [176, 155, 140, 135, 0], [180, 157, 141, 134, 130, 0], [254, 254, 243, 230, 196, 177, 153, 140, 133, 130, 129, 0]],
      ai = [0, 1, 4, 8, 5, 2, 3, 6, 9, 12, 13, 10, 7, 11, 14, 15],
      oi = [-0, 1, -1, 2, -2, 3, 4, 6, -3, 5, -4, -5, -6, 7, -7, 8, -8, -9],
      si = [[[[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]], [[253, 136, 254, 255, 228, 219, 128, 128, 128, 128, 128], [189, 129, 242, 255, 227, 213, 255, 219, 128, 128, 128], [106, 126, 227, 252, 214, 209, 255, 255, 128, 128, 128]], [[1, 98, 248, 255, 236, 226, 255, 255, 128, 128, 128], [181, 133, 238, 254, 221, 234, 255, 154, 128, 128, 128], [78, 134, 202, 247, 198, 180, 255, 219, 128, 128, 128]], [[1, 185, 249, 255, 243, 255, 128, 128, 128, 128, 128], [184, 150, 247, 255, 236, 224, 128, 128, 128, 128, 128], [77, 110, 216, 255, 236, 230, 128, 128, 128, 128, 128]], [[1, 101, 251, 255, 241, 255, 128, 128, 128, 128, 128], [170, 139, 241, 252, 236, 209, 255, 255, 128, 128, 128], [37, 116, 196, 243, 228, 255, 255, 255, 128, 128, 128]], [[1, 204, 254, 255, 245, 255, 128, 128, 128, 128, 128], [207, 160, 250, 255, 238, 128, 128, 128, 128, 128, 128], [102, 103, 231, 255, 211, 171, 128, 128, 128, 128, 128]], [[1, 152, 252, 255, 240, 255, 128, 128, 128, 128, 128], [177, 135, 243, 255, 234, 225, 128, 128, 128, 128, 128], [80, 129, 211, 255, 194, 224, 128, 128, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [246, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [255, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[198, 35, 237, 223, 193, 187, 162, 160, 145, 155, 62], [131, 45, 198, 221, 172, 176, 220, 157, 252, 221, 1], [68, 47, 146, 208, 149, 167, 221, 162, 255, 223, 128]], [[1, 149, 241, 255, 221, 224, 255, 255, 128, 128, 128], [184, 141, 234, 253, 222, 220, 255, 199, 128, 128, 128], [81, 99, 181, 242, 176, 190, 249, 202, 255, 255, 128]], [[1, 129, 232, 253, 214, 197, 242, 196, 255, 255, 128], [99, 121, 210, 250, 201, 198, 255, 202, 128, 128, 128], [23, 91, 163, 242, 170, 187, 247, 210, 255, 255, 128]], [[1, 200, 246, 255, 234, 255, 128, 128, 128, 128, 128], [109, 178, 241, 255, 231, 245, 255, 255, 128, 128, 128], [44, 130, 201, 253, 205, 192, 255, 255, 128, 128, 128]], [[1, 132, 239, 251, 219, 209, 255, 165, 128, 128, 128], [94, 136, 225, 251, 218, 190, 255, 255, 128, 128, 128], [22, 100, 174, 245, 186, 161, 255, 199, 128, 128, 128]], [[1, 182, 249, 255, 232, 235, 128, 128, 128, 128, 128], [124, 143, 241, 255, 227, 234, 128, 128, 128, 128, 128], [35, 77, 181, 251, 193, 211, 255, 205, 128, 128, 128]], [[1, 157, 247, 255, 236, 231, 255, 255, 128, 128, 128], [121, 141, 235, 255, 225, 227, 255, 255, 128, 128, 128], [45, 99, 188, 251, 195, 217, 255, 224, 128, 128, 128]], [[1, 1, 251, 255, 213, 255, 128, 128, 128, 128, 128], [203, 1, 248, 255, 255, 128, 128, 128, 128, 128, 128], [137, 1, 177, 255, 224, 255, 128, 128, 128, 128, 128]]], [[[253, 9, 248, 251, 207, 208, 255, 192, 128, 128, 128], [175, 13, 224, 243, 193, 185, 249, 198, 255, 255, 128], [73, 17, 171, 221, 161, 179, 236, 167, 255, 234, 128]], [[1, 95, 247, 253, 212, 183, 255, 255, 128, 128, 128], [239, 90, 244, 250, 211, 209, 255, 255, 128, 128, 128], [155, 77, 195, 248, 188, 195, 255, 255, 128, 128, 128]], [[1, 24, 239, 251, 218, 219, 255, 205, 128, 128, 128], [201, 51, 219, 255, 196, 186, 128, 128, 128, 128, 128], [69, 46, 190, 239, 201, 218, 255, 228, 128, 128, 128]], [[1, 191, 251, 255, 255, 128, 128, 128, 128, 128, 128], [223, 165, 249, 255, 213, 255, 128, 128, 128, 128, 128], [141, 124, 248, 255, 255, 128, 128, 128, 128, 128, 128]], [[1, 16, 248, 255, 255, 128, 128, 128, 128, 128, 128], [190, 36, 230, 255, 236, 255, 128, 128, 128, 128, 128], [149, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 226, 255, 128, 128, 128, 128, 128, 128, 128, 128], [247, 192, 255, 128, 128, 128, 128, 128, 128, 128, 128], [240, 128, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[1, 134, 252, 255, 255, 128, 128, 128, 128, 128, 128], [213, 62, 250, 255, 255, 128, 128, 128, 128, 128, 128], [55, 93, 255, 128, 128, 128, 128, 128, 128, 128, 128]], [[128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128], [128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128]]], [[[202, 24, 213, 235, 186, 191, 220, 160, 240, 175, 255], [126, 38, 182, 232, 169, 184, 228, 174, 255, 187, 128], [61, 46, 138, 219, 151, 178, 240, 170, 255, 216, 128]], [[1, 112, 230, 250, 199, 191, 247, 159, 255, 255, 128], [166, 109, 228, 252, 211, 215, 255, 174, 128, 128, 128], [39, 77, 162, 232, 172, 180, 245, 178, 255, 255, 128]], [[1, 52, 220, 246, 198, 199, 249, 220, 255, 255, 128], [124, 74, 191, 243, 183, 193, 250, 221, 255, 255, 128], [24, 71, 130, 219, 154, 170, 243, 182, 255, 255, 128]], [[1, 182, 225, 249, 219, 240, 255, 224, 128, 128, 128], [149, 150, 226, 252, 216, 205, 255, 171, 128, 128, 128], [28, 108, 170, 242, 183, 194, 254, 223, 255, 255, 128]], [[1, 81, 230, 252, 204, 203, 255, 192, 128, 128, 128], [123, 102, 209, 247, 188, 196, 255, 233, 128, 128, 128], [20, 95, 153, 243, 164, 173, 255, 203, 128, 128, 128]], [[1, 222, 248, 255, 216, 213, 128, 128, 128, 128, 128], [168, 175, 246, 252, 235, 205, 255, 255, 128, 128, 128], [47, 116, 215, 255, 211, 212, 255, 255, 128, 128, 128]], [[1, 121, 236, 253, 212, 214, 255, 255, 128, 128, 128], [141, 84, 213, 252, 201, 202, 255, 219, 128, 128, 128], [42, 80, 160, 240, 162, 185, 255, 205, 128, 128, 128]], [[1, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [244, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128], [238, 1, 255, 128, 128, 128, 128, 128, 128, 128, 128]]]],
      ci = [[[231, 120, 48, 89, 115, 113, 120, 152, 112], [152, 179, 64, 126, 170, 118, 46, 70, 95], [175, 69, 143, 80, 85, 82, 72, 155, 103], [56, 58, 10, 171, 218, 189, 17, 13, 152], [114, 26, 17, 163, 44, 195, 21, 10, 173], [121, 24, 80, 195, 26, 62, 44, 64, 85], [144, 71, 10, 38, 171, 213, 144, 34, 26], [170, 46, 55, 19, 136, 160, 33, 206, 71], [63, 20, 8, 114, 114, 208, 12, 9, 226], [81, 40, 11, 96, 182, 84, 29, 16, 36]], [[134, 183, 89, 137, 98, 101, 106, 165, 148], [72, 187, 100, 130, 157, 111, 32, 75, 80], [66, 102, 167, 99, 74, 62, 40, 234, 128], [41, 53, 9, 178, 241, 141, 26, 8, 107], [74, 43, 26, 146, 73, 166, 49, 23, 157], [65, 38, 105, 160, 51, 52, 31, 115, 128], [104, 79, 12, 27, 217, 255, 87, 17, 7], [87, 68, 71, 44, 114, 51, 15, 186, 23], [47, 41, 14, 110, 182, 183, 21, 17, 194], [66, 45, 25, 102, 197, 189, 23, 18, 22]], [[88, 88, 147, 150, 42, 46, 45, 196, 205], [43, 97, 183, 117, 85, 38, 35, 179, 61], [39, 53, 200, 87, 26, 21, 43, 232, 171], [56, 34, 51, 104, 114, 102, 29, 93, 77], [39, 28, 85, 171, 58, 165, 90, 98, 64], [34, 22, 116, 206, 23, 34, 43, 166, 73], [107, 54, 32, 26, 51, 1, 81, 43, 31], [68, 25, 106, 22, 64, 171, 36, 225, 114], [34, 19, 21, 102, 132, 188, 16, 76, 124], [62, 18, 78, 95, 85, 57, 50, 48, 51]], [[193, 101, 35, 159, 215, 111, 89, 46, 111], [60, 148, 31, 172, 219, 228, 21, 18, 111], [112, 113, 77, 85, 179, 255, 38, 120, 114], [40, 42, 1, 196, 245, 209, 10, 25, 109], [88, 43, 29, 140, 166, 213, 37, 43, 154], [61, 63, 30, 155, 67, 45, 68, 1, 209], [100, 80, 8, 43, 154, 1, 51, 26, 71], [142, 78, 78, 16, 255, 128, 34, 197, 171], [41, 40, 5, 102, 211, 183, 4, 1, 221], [51, 50, 17, 168, 209, 192, 23, 25, 82]], [[138, 31, 36, 171, 27, 166, 38, 44, 229], [67, 87, 58, 169, 82, 115, 26, 59, 179], [63, 59, 90, 180, 59, 166, 93, 73, 154], [40, 40, 21, 116, 143, 209, 34, 39, 175], [47, 15, 16, 183, 34, 223, 49, 45, 183], [46, 17, 33, 183, 6, 98, 15, 32, 183], [57, 46, 22, 24, 128, 1, 54, 17, 37], [65, 32, 73, 115, 28, 128, 23, 128, 205], [40, 3, 9, 115, 51, 192, 18, 6, 223], [87, 37, 9, 115, 59, 77, 64, 21, 47]], [[104, 55, 44, 218, 9, 54, 53, 130, 226], [64, 90, 70, 205, 40, 41, 23, 26, 57], [54, 57, 112, 184, 5, 41, 38, 166, 213], [30, 34, 26, 133, 152, 116, 10, 32, 134], [39, 19, 53, 221, 26, 114, 32, 73, 255], [31, 9, 65, 234, 2, 15, 1, 118, 73], [75, 32, 12, 51, 192, 255, 160, 43, 51], [88, 31, 35, 67, 102, 85, 55, 186, 85], [56, 21, 23, 111, 59, 205, 45, 37, 192], [55, 38, 70, 124, 73, 102, 1, 34, 98]], [[125, 98, 42, 88, 104, 85, 117, 175, 82], [95, 84, 53, 89, 128, 100, 113, 101, 45], [75, 79, 123, 47, 51, 128, 81, 171, 1], [57, 17, 5, 71, 102, 57, 53, 41, 49], [38, 33, 13, 121, 57, 73, 26, 1, 85], [41, 10, 67, 138, 77, 110, 90, 47, 114], [115, 21, 2, 10, 102, 255, 166, 23, 6], [101, 29, 16, 10, 85, 128, 101, 196, 26], [57, 18, 10, 102, 102, 213, 34, 20, 43], [117, 20, 15, 36, 163, 128, 68, 1, 26]], [[102, 61, 71, 37, 34, 53, 31, 243, 192], [69, 60, 71, 38, 73, 119, 28, 222, 37], [68, 45, 128, 34, 1, 47, 11, 245, 171], [62, 17, 19, 70, 146, 85, 55, 62, 70], [37, 43, 37, 154, 100, 163, 85, 160, 1], [63, 9, 92, 136, 28, 64, 32, 201, 85], [75, 15, 9, 9, 64, 255, 184, 119, 16], [86, 6, 28, 5, 64, 255, 25, 248, 1], [56, 8, 17, 132, 137, 255, 55, 116, 128], [58, 15, 20, 82, 135, 57, 26, 121, 40]], [[164, 50, 31, 137, 154, 133, 25, 35, 218], [51, 103, 44, 131, 131, 123, 31, 6, 158], [86, 40, 64, 135, 148, 224, 45, 183, 128], [22, 26, 17, 131, 240, 154, 14, 1, 209], [45, 16, 21, 91, 64, 222, 7, 1, 197], [56, 21, 39, 155, 60, 138, 23, 102, 213], [83, 12, 13, 54, 192, 255, 68, 47, 28], [85, 26, 85, 85, 128, 128, 32, 146, 171], [18, 11, 7, 63, 144, 171, 4, 4, 246], [35, 27, 10, 146, 174, 171, 12, 26, 128]], [[190, 80, 35, 99, 180, 80, 126, 54, 45], [85, 126, 47, 87, 176, 51, 41, 20, 32], [101, 75, 128, 139, 118, 146, 116, 128, 85], [56, 41, 15, 176, 236, 85, 37, 9, 62], [71, 30, 17, 119, 118, 255, 17, 18, 138], [101, 38, 60, 138, 55, 70, 43, 26, 142], [146, 36, 19, 30, 171, 255, 97, 27, 20], [138, 45, 61, 62, 219, 1, 81, 188, 64], [32, 41, 20, 117, 151, 142, 20, 21, 163], [112, 19, 12, 61, 195, 128, 48, 4, 24]]],
      ui = [[[[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[176, 246, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 241, 252, 255, 255, 255, 255, 255, 255, 255, 255], [249, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 244, 252, 255, 255, 255, 255, 255, 255, 255, 255], [234, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 246, 254, 255, 255, 255, 255, 255, 255, 255, 255], [239, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 254, 255, 255, 255, 255, 255, 255], [250, 255, 254, 255, 254, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[217, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [225, 252, 241, 253, 255, 255, 254, 255, 255, 255, 255], [234, 250, 241, 250, 253, 255, 253, 254, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [223, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [238, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 248, 254, 255, 255, 255, 255, 255, 255, 255, 255], [249, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 255, 255, 255, 255, 255, 255, 255, 255, 255], [247, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [252, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[186, 251, 250, 255, 255, 255, 255, 255, 255, 255, 255], [234, 251, 244, 254, 255, 255, 255, 255, 255, 255, 255], [251, 251, 243, 253, 254, 255, 254, 255, 255, 255, 255]], [[255, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [236, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [251, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]], [[[248, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [250, 254, 252, 254, 255, 255, 255, 255, 255, 255, 255], [248, 254, 249, 253, 255, 255, 255, 255, 255, 255, 255]], [[255, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [246, 253, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 254, 251, 254, 254, 255, 255, 255, 255, 255, 255]], [[255, 254, 252, 255, 255, 255, 255, 255, 255, 255, 255], [248, 254, 253, 255, 255, 255, 255, 255, 255, 255, 255], [253, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [245, 251, 254, 255, 255, 255, 255, 255, 255, 255, 255], [253, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 251, 253, 255, 255, 255, 255, 255, 255, 255, 255], [252, 253, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 252, 255, 255, 255, 255, 255, 255, 255, 255, 255], [249, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 254, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 253, 255, 255, 255, 255, 255, 255, 255, 255], [250, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]], [[255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255], [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255]]]],
      hi = [0, 1, 2, 3, 6, 4, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 0],
      li = [],
      fi = [],
      di = [],
      pi = 1,
      gi = 2,
      mi = [],
      vi = [];
    vr("UpsampleRgbLinePair", Ar, 3), vr("UpsampleBgrLinePair", xr, 3), vr("UpsampleRgbaLinePair", Ir, 4), vr("UpsampleBgraLinePair", kr, 4), vr("UpsampleArgbLinePair", Pr, 4), vr("UpsampleRgba4444LinePair", _r, 2), vr("UpsampleRgb565LinePair", Sr, 2);
    var bi = t.UpsampleRgbLinePair,
      yi = t.UpsampleBgrLinePair,
      wi = t.UpsampleRgbaLinePair,
      Ni = t.UpsampleBgraLinePair,
      Li = t.UpsampleArgbLinePair,
      Ai = t.UpsampleRgba4444LinePair,
      xi = t.UpsampleRgb565LinePair,
      Si = 16,
      _i = 1 << Si - 1,
      Pi = -227,
      ki = 482,
      Ii = 6,
      Fi = (256 << Ii) - 1,
      Ci = 0,
      ji = a(256),
      Oi = a(256),
      Bi = a(256),
      Mi = a(256),
      Ei = a(ki - Pi),
      qi = a(ki - Pi);
    Fr("YuvToRgbRow", Ar, 3), Fr("YuvToBgrRow", xr, 3), Fr("YuvToRgbaRow", Ir, 4), Fr("YuvToBgraRow", kr, 4), Fr("YuvToArgbRow", Pr, 4), Fr("YuvToRgba4444Row", _r, 2), Fr("YuvToRgb565Row", Sr, 2);
    var Di = [0, 4, 8, 12, 128, 132, 136, 140, 256, 260, 264, 268, 384, 388, 392, 396],
      Ri = [0, 2, 8],
      Ti = [8, 7, 6, 4, 4, 2, 2, 2, 1, 1, 1, 1],
      Ui = 1;
    this.WebPDecodeRGBA = function (t, r, n, i, a) {
      var o = qn,
        s = new rr(),
        c = new ot();
      s.ba = c, c.S = o, c.width = [c.width], c.height = [c.height];
      var u = c.width,
        h = c.height,
        l = new st();
      if (null == l || null == t) var f = 2;else e(null != l), f = Br(t, r, n, l.width, l.height, l.Pd, l.Qd, l.format, null);
      if (0 != f ? u = 0 : (null != u && (u[0] = l.width[0]), null != h && (h[0] = l.height[0]), u = 1), u) {
        c.width = c.width[0], c.height = c.height[0], null != i && (i[0] = c.width), null != a && (a[0] = c.height);
        t: {
          if (i = new Gt(), (a = new nr()).data = t, a.w = r, a.ha = n, a.kd = 1, r = [0], e(null != a), (0 == (t = Br(a.data, a.w, a.ha, null, null, null, r, null, a)) || 7 == t) && r[0] && (t = 4), 0 == (r = t)) {
            if (e(null != s), i.data = a.data, i.w = a.w + a.offset, i.ha = a.ha - a.offset, i.put = dt, i.ac = ft, i.bc = pt, i.ma = s, a.xa) {
              if (null == (t = kt())) {
                s = 1;
                break t;
              }
              if (function (t, r) {
                var n = [0],
                  i = [0],
                  a = [0];
                e: for (;;) {
                  if (null == t) return 0;
                  if (null == r) return t.a = 2, 0;
                  if (t.l = r, t.a = 0, v(t.m, r.data, r.w, r.ha), !gt(t.m, n, i, a)) {
                    t.a = 3;
                    break e;
                  }
                  if (t.xb = gi, r.width = n[0], r.height = i[0], !It(n[0], i[0], 1, t, null)) break e;
                  return 1;
                }
                return e(0 != t.a), 0;
              }(t, i)) {
                if (i = 0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                  e: {
                    i = t;
                    r: for (;;) {
                      if (null == i) {
                        i = 0;
                        break e;
                      }
                      if (e(null != i.s.yc), e(null != i.s.Ya), e(0 < i.s.Wb), e(null != (n = i.l)), e(null != (a = n.ma)), 0 != i.xb) {
                        if (i.ca = a.ba, i.tb = a.tb, e(null != i.ca), !Mr(a.Oa, n, Rn)) {
                          i.a = 2;
                          break r;
                        }
                        if (!Ft(i, n.width)) break r;
                        if (n.da) break r;
                        if ((n.da || nt(i.ca.S)) && mr(), 11 > i.ca.S || (alert("todo:WebPInitConvertARGBToYUV"), null != i.ca.f.kb.F && mr()), i.Pb && 0 < i.s.ua && null == i.s.vb.X && !O(i.s.vb, i.s.Wa.Xa)) {
                          i.a = 1;
                          break r;
                        }
                        i.xb = 0;
                      }
                      if (!_t(i, i.V, i.Ba, i.c, i.i, n.o, Lt)) break r;
                      a.Dc = i.Ma, i = 1;
                      break e;
                    }
                    e(0 != i.a), i = 0;
                  }
                  i = !i;
                }
                i && (r = t.a);
              } else r = t.a;
            } else {
              if (null == (t = new Yt())) {
                s = 1;
                break t;
              }
              if (t.Fa = a.na, t.P = a.P, t.qc = a.Sa, Kt(t, i)) {
                if (0 == (r = qr(i.width, i.height, s.Oa, s.ba))) {
                  if (t.Aa = 0, n = s.Oa, e(null != (a = t)), null != n) {
                    if (0 < (u = 0 > (u = n.Md) ? 0 : 100 < u ? 255 : 255 * u / 100)) {
                      for (h = l = 0; 4 > h; ++h) 12 > (f = a.pb[h]).lc && (f.ia = u * Ti[0 > f.lc ? 0 : f.lc] >> 3), l |= f.ia;
                      l && (alert("todo:VP8InitRandom"), a.ia = 1);
                    }
                    a.Ga = n.Id, 100 < a.Ga ? a.Ga = 100 : 0 > a.Ga && (a.Ga = 0);
                  }
                  Qt(t, i) || (r = t.a);
                }
              } else r = t.a;
            }
            0 == r && null != s.Oa && s.Oa.fd && (r = Er(s.ba));
          }
          s = r;
        }
        o = 0 != s ? null : 11 > o ? c.f.RGBA.eb : c.f.kb.y;
      } else o = null;
      return o;
    };
    var zi = [3, 4, 3, 4, 4, 2, 2, 4, 4, 4, 2, 1, 1];
  };
  function u(t, e) {
    for (var r = "", n = 0; n < 4; n++) r += String.fromCharCode(t[e++]);
    return r;
  }
  function h(t, e) {
    return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16) >>> 0;
  }
  function l(t, e) {
    return (t[e + 0] << 0 | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24) >>> 0;
  }
  new c();
  var f = [0],
    d = [0],
    p = [],
    g = new c(),
    m = t,
    v = function (t, e) {
      var r = {},
        n = 0,
        i = !1,
        a = 0,
        o = 0;
      if (r.frames = [], !
      /** @license
         * Copyright (c) 2017 Dominik Homberger
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
        https://webpjs.appspot.com
        WebPRiffParser dominikhlbg@gmail.com
        */
      function (t, e, r, n) {
        for (var i = 0; i < n; i++) if (t[e + i] != r.charCodeAt(i)) return !0;
        return !1;
      }(t, e, "RIFF", 4)) {
        var s, c;
        l(t, e += 4);
        for (e += 8; e < t.length;) {
          var f = u(t, e),
            d = l(t, e += 4);
          e += 4;
          var p = d + (1 & d);
          switch (f) {
            case "VP8 ":
            case "VP8L":
              void 0 === r.frames[n] && (r.frames[n] = {});
              (v = r.frames[n]).src_off = i ? o : e - 8, v.src_size = a + d + 8, n++, i && (i = !1, a = 0, o = 0);
              break;
            case "VP8X":
              (v = r.header = {}).feature_flags = t[e];
              var g = e + 4;
              v.canvas_width = 1 + h(t, g);
              g += 3;
              v.canvas_height = 1 + h(t, g);
              g += 3;
              break;
            case "ALPH":
              i = !0, a = p + 8, o = e - 8;
              break;
            case "ANIM":
              (v = r.header).bgcolor = l(t, e);
              g = e + 4;
              v.loop_count = (s = t)[(c = g) + 0] << 0 | s[c + 1] << 8;
              g += 2;
              break;
            case "ANMF":
              var m, v;
              (v = r.frames[n] = {}).offset_x = 2 * h(t, e), e += 3, v.offset_y = 2 * h(t, e), e += 3, v.width = 1 + h(t, e), e += 3, v.height = 1 + h(t, e), e += 3, v.duration = h(t, e), e += 3, m = t[e++], v.dispose = 1 & m, v.blend = m >> 1 & 1;
          }
          "ANMF" != f && (e += p);
        }
        return r;
      }
    }(m, 0);
  v.response = m, v.rgbaoutput = !0, v.dataurl = !1;
  var b = v.header ? v.header : null,
    y = v.frames ? v.frames : null;
  if (b) {
    b.loop_counter = b.loop_count, f = [b.canvas_height], d = [b.canvas_width];
    for (var w = 0; w < y.length && 0 != y[w].blend; w++);
  }
  var N = y[0],
    L = g.WebPDecodeRGBA(m, N.src_off, N.src_size, d, f);
  N.rgba = L, N.imgwidth = d[0], N.imgheight = f[0];
  for (var A = 0; A < d[0] * f[0] * 4; A++) p[A] = L[A];
  return this.width = d, this.height = f, this.data = p, this;
}
!function (t) {
  var r = function () {
      return "function" == typeof _fflate.zlibSync;
    },
    n = function (r, n, a, h) {
      var l = 4,
        f = s;
      switch (h) {
        case t.image_compression.FAST:
          l = 1, f = o;
          break;
        case t.image_compression.MEDIUM:
          l = 6, f = c;
          break;
        case t.image_compression.SLOW:
          l = 9, f = u;
      }
      r = i(r, n, a, f);
      var d = (0, _fflate.zlibSync)(r, {
        level: l
      });
      return t.__addimage__.arrayBufferToBinaryString(d);
    },
    i = function (t, e, r, n) {
      for (var i, a, o, s = t.length / e, c = new Uint8Array(t.length + s), u = l(), h = 0; h < s; h += 1) {
        if (o = h * e, i = t.subarray(o, o + e), n) c.set(n(i, r, a), o + h);else {
          for (var d, p = u.length, g = []; d < p; d += 1) g[d] = u[d](i, r, a);
          var m = f(g.concat());
          c.set(g[m], o + h);
        }
        a = i;
      }
      return c;
    },
    a = function (t) {
      var e = Array.apply([], t);
      return e.unshift(0), e;
    },
    o = function (t, e) {
      var r,
        n = [],
        i = t.length;
      n[0] = 1;
      for (var a = 0; a < i; a += 1) r = t[a - e] || 0, n[a + 1] = t[a] - r + 256 & 255;
      return n;
    },
    s = function (t, e, r) {
      var n,
        i = [],
        a = t.length;
      i[0] = 2;
      for (var o = 0; o < a; o += 1) n = r && r[o] || 0, i[o + 1] = t[o] - n + 256 & 255;
      return i;
    },
    c = function (t, e, r) {
      var n,
        i,
        a = [],
        o = t.length;
      a[0] = 3;
      for (var s = 0; s < o; s += 1) n = t[s - e] || 0, i = r && r[s] || 0, a[s + 1] = t[s] + 256 - (n + i >>> 1) & 255;
      return a;
    },
    u = function (t, e, r) {
      var n,
        i,
        a,
        o,
        s = [],
        c = t.length;
      s[0] = 4;
      for (var u = 0; u < c; u += 1) n = t[u - e] || 0, i = r && r[u] || 0, a = r && r[u - e] || 0, o = h(n, i, a), s[u + 1] = t[u] - o + 256 & 255;
      return s;
    },
    h = function (t, e, r) {
      if (t === e && e === r) return t;
      var n = Math.abs(e - r),
        i = Math.abs(t - r),
        a = Math.abs(t + e - r - r);
      return n <= i && n <= a ? t : i <= a ? e : r;
    },
    l = function () {
      return [a, o, s, c, u];
    },
    f = function (t) {
      var e = t.map(function (t) {
        return t.reduce(function (t, e) {
          return t + Math.abs(e);
        }, 0);
      });
      return e.indexOf(Math.min.apply(null, e));
    };
  t.processPNG = function (e, i, a, o) {
    var s,
      c,
      u,
      h,
      l,
      f,
      d,
      p,
      g,
      m,
      v,
      b,
      y,
      w,
      N,
      L = this.decode.FLATE_DECODE,
      A = "";
    if (this.__addimage__.isArrayBuffer(e) && (e = new Uint8Array(e)), this.__addimage__.isArrayBufferView(e)) {
      if (e = (u = new Kt(e)).imgData, c = u.bits, s = u.colorSpace, l = u.colors, -1 !== [4, 6].indexOf(u.colorType)) {
        if (8 === u.bits) {
          g = (p = 32 == u.pixelBitlength ? new Uint32Array(u.decodePixels().buffer) : 16 == u.pixelBitlength ? new Uint16Array(u.decodePixels().buffer) : new Uint8Array(u.decodePixels().buffer)).length, v = new Uint8Array(g * u.colors), m = new Uint8Array(g);
          var x,
            S = u.pixelBitlength - u.bits;
          for (w = 0, N = 0; w < g; w++) {
            for (y = p[w], x = 0; x < S;) v[N++] = y >>> x & 255, x += u.bits;
            m[w] = y >>> x & 255;
          }
        }
        if (16 === u.bits) {
          g = (p = new Uint32Array(u.decodePixels().buffer)).length, v = new Uint8Array(g * (32 / u.pixelBitlength) * u.colors), m = new Uint8Array(g * (32 / u.pixelBitlength)), b = u.colors > 1, w = 0, N = 0;
          for (var _ = 0; w < g;) y = p[w++], v[N++] = y >>> 0 & 255, b && (v[N++] = y >>> 16 & 255, y = p[w++], v[N++] = y >>> 0 & 255), m[_++] = y >>> 16 & 255;
          c = 8;
        }
        o !== t.image_compression.NONE && r() ? (e = n(v, u.width * u.colors, u.colors, o), d = n(m, u.width, 1, o)) : (e = v, d = m, L = void 0);
      }
      if (3 === u.colorType && (s = this.color_spaces.INDEXED, f = u.palette, u.transparency.indexed)) {
        var P = u.transparency.indexed,
          k = 0;
        for (w = 0, g = P.length; w < g; ++w) k += P[w];
        if ((k /= 255) === g - 1 && -1 !== P.indexOf(0)) h = [P.indexOf(0)];else if (k !== g) {
          for (p = u.decodePixels(), m = new Uint8Array(p.length), w = 0, g = p.length; w < g; w++) m[w] = P[p[w]];
          d = n(m, u.width, 1);
        }
      }
      var I = function (e) {
        var r;
        switch (e) {
          case t.image_compression.FAST:
            r = 11;
            break;
          case t.image_compression.MEDIUM:
            r = 13;
            break;
          case t.image_compression.SLOW:
            r = 14;
            break;
          default:
            r = 12;
        }
        return r;
      }(o);
      return L === this.decode.FLATE_DECODE && (A = "/Predictor " + I + " "), A += "/Colors " + l + " /BitsPerComponent " + c + " /Columns " + u.width, (this.__addimage__.isArrayBuffer(e) || this.__addimage__.isArrayBufferView(e)) && (e = this.__addimage__.arrayBufferToBinaryString(e)), (d && this.__addimage__.isArrayBuffer(d) || this.__addimage__.isArrayBufferView(d)) && (d = this.__addimage__.arrayBufferToBinaryString(d)), {
        alias: a,
        data: e,
        index: i,
        filter: L,
        decodeParameters: A,
        transparency: h,
        palette: f,
        sMask: d,
        predictor: I,
        width: u.width,
        height: u.height,
        bitsPerComponent: c,
        colorSpace: s
      };
    }
  };
}(E.API), function (t) {
  t.processGIF89A = function (e, r, n, i) {
    var a = new Zt(e),
      o = a.width,
      s = a.height,
      c = [];
    a.decodeAndBlitFrameRGBA(0, c);
    var u = {
        data: c,
        width: o,
        height: s
      },
      h = new Qt(100).encode(u, 100);
    return t.processJPEG.call(this, h, r, n, i);
  }, t.processGIF87A = t.processGIF89A;
}(E.API), te.prototype.parseHeader = function () {
  if (this.fileSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.reserved = this.datav.getUint32(this.pos, !0), this.pos += 4, this.offset = this.datav.getUint32(this.pos, !0), this.pos += 4, this.headerSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.width = this.datav.getUint32(this.pos, !0), this.pos += 4, this.height = this.datav.getInt32(this.pos, !0), this.pos += 4, this.planes = this.datav.getUint16(this.pos, !0), this.pos += 2, this.bitPP = this.datav.getUint16(this.pos, !0), this.pos += 2, this.compress = this.datav.getUint32(this.pos, !0), this.pos += 4, this.rawSize = this.datav.getUint32(this.pos, !0), this.pos += 4, this.hr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.vr = this.datav.getUint32(this.pos, !0), this.pos += 4, this.colors = this.datav.getUint32(this.pos, !0), this.pos += 4, this.importantColors = this.datav.getUint32(this.pos, !0), this.pos += 4, 16 === this.bitPP && this.is_with_alpha && (this.bitPP = 15), this.bitPP < 15) {
    var t = 0 === this.colors ? 1 << this.bitPP : this.colors;
    this.palette = new Array(t);
    for (var e = 0; e < t; e++) {
      var r = this.datav.getUint8(this.pos++, !0),
        n = this.datav.getUint8(this.pos++, !0),
        i = this.datav.getUint8(this.pos++, !0),
        a = this.datav.getUint8(this.pos++, !0);
      this.palette[e] = {
        red: i,
        green: n,
        blue: r,
        quad: a
      };
    }
  }
  this.height < 0 && (this.height *= -1, this.bottom_up = !1);
}, te.prototype.parseBGR = function () {
  this.pos = this.offset;
  try {
    var t = "bit" + this.bitPP,
      e = this.width * this.height * 4;
    this.data = new Uint8Array(e), this[t]();
  } catch (t) {
    a.log("bit decode error:" + t);
  }
}, te.prototype.bit1 = function () {
  var t,
    e = Math.ceil(this.width / 8),
    r = e % 4;
  for (t = this.height - 1; t >= 0; t--) {
    for (var n = this.bottom_up ? t : this.height - 1 - t, i = 0; i < e; i++) for (var a = this.datav.getUint8(this.pos++, !0), o = n * this.width * 4 + 8 * i * 4, s = 0; s < 8 && 8 * i + s < this.width; s++) {
      var c = this.palette[a >> 7 - s & 1];
      this.data[o + 4 * s] = c.blue, this.data[o + 4 * s + 1] = c.green, this.data[o + 4 * s + 2] = c.red, this.data[o + 4 * s + 3] = 255;
    }
    0 !== r && (this.pos += 4 - r);
  }
}, te.prototype.bit4 = function () {
  for (var t = Math.ceil(this.width / 2), e = t % 4, r = this.height - 1; r >= 0; r--) {
    for (var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < t; i++) {
      var a = this.datav.getUint8(this.pos++, !0),
        o = n * this.width * 4 + 2 * i * 4,
        s = a >> 4,
        c = 15 & a,
        u = this.palette[s];
      if (this.data[o] = u.blue, this.data[o + 1] = u.green, this.data[o + 2] = u.red, this.data[o + 3] = 255, 2 * i + 1 >= this.width) break;
      u = this.palette[c], this.data[o + 4] = u.blue, this.data[o + 4 + 1] = u.green, this.data[o + 4 + 2] = u.red, this.data[o + 4 + 3] = 255;
    }
    0 !== e && (this.pos += 4 - e);
  }
}, te.prototype.bit8 = function () {
  for (var t = this.width % 4, e = this.height - 1; e >= 0; e--) {
    for (var r = this.bottom_up ? e : this.height - 1 - e, n = 0; n < this.width; n++) {
      var i = this.datav.getUint8(this.pos++, !0),
        a = r * this.width * 4 + 4 * n;
      if (i < this.palette.length) {
        var o = this.palette[i];
        this.data[a] = o.red, this.data[a + 1] = o.green, this.data[a + 2] = o.blue, this.data[a + 3] = 255;
      } else this.data[a] = 255, this.data[a + 1] = 255, this.data[a + 2] = 255, this.data[a + 3] = 255;
    }
    0 !== t && (this.pos += 4 - t);
  }
}, te.prototype.bit15 = function () {
  for (var t = this.width % 3, e = parseInt("11111", 2), r = this.height - 1; r >= 0; r--) {
    for (var n = this.bottom_up ? r : this.height - 1 - r, i = 0; i < this.width; i++) {
      var a = this.datav.getUint16(this.pos, !0);
      this.pos += 2;
      var o = (a & e) / e * 255 | 0,
        s = (a >> 5 & e) / e * 255 | 0,
        c = (a >> 10 & e) / e * 255 | 0,
        u = a >> 15 ? 255 : 0,
        h = n * this.width * 4 + 4 * i;
      this.data[h] = c, this.data[h + 1] = s, this.data[h + 2] = o, this.data[h + 3] = u;
    }
    this.pos += t;
  }
}, te.prototype.bit16 = function () {
  for (var t = this.width % 3, e = parseInt("11111", 2), r = parseInt("111111", 2), n = this.height - 1; n >= 0; n--) {
    for (var i = this.bottom_up ? n : this.height - 1 - n, a = 0; a < this.width; a++) {
      var o = this.datav.getUint16(this.pos, !0);
      this.pos += 2;
      var s = (o & e) / e * 255 | 0,
        c = (o >> 5 & r) / r * 255 | 0,
        u = (o >> 11) / e * 255 | 0,
        h = i * this.width * 4 + 4 * a;
      this.data[h] = u, this.data[h + 1] = c, this.data[h + 2] = s, this.data[h + 3] = 255;
    }
    this.pos += t;
  }
}, te.prototype.bit24 = function () {
  for (var t = this.height - 1; t >= 0; t--) {
    for (var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++) {
      var n = this.datav.getUint8(this.pos++, !0),
        i = this.datav.getUint8(this.pos++, !0),
        a = this.datav.getUint8(this.pos++, !0),
        o = e * this.width * 4 + 4 * r;
      this.data[o] = a, this.data[o + 1] = i, this.data[o + 2] = n, this.data[o + 3] = 255;
    }
    this.pos += this.width % 4;
  }
}, te.prototype.bit32 = function () {
  for (var t = this.height - 1; t >= 0; t--) for (var e = this.bottom_up ? t : this.height - 1 - t, r = 0; r < this.width; r++) {
    var n = this.datav.getUint8(this.pos++, !0),
      i = this.datav.getUint8(this.pos++, !0),
      a = this.datav.getUint8(this.pos++, !0),
      o = this.datav.getUint8(this.pos++, !0),
      s = e * this.width * 4 + 4 * r;
    this.data[s] = a, this.data[s + 1] = i, this.data[s + 2] = n, this.data[s + 3] = o;
  }
}, te.prototype.getData = function () {
  return this.data;
},
/**
 * @license
 * Copyright (c) 2018 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  t.processBMP = function (e, r, n, i) {
    var a = new te(e, !1),
      o = a.width,
      s = a.height,
      c = {
        data: a.getData(),
        width: o,
        height: s
      },
      u = new Qt(100).encode(c, 100);
    return t.processJPEG.call(this, u, r, n, i);
  };
}(E.API), ee.prototype.getData = function () {
  return this.data;
},
/**
 * @license
 * Copyright (c) 2019 Aras Abbasi
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  t.processWEBP = function (e, r, n, i) {
    var a = new ee(e, !1),
      o = a.width,
      s = a.height,
      c = {
        data: a.getData(),
        width: o,
        height: s
      },
      u = new Qt(100).encode(c, 100);
    return t.processJPEG.call(this, u, r, n, i);
  };
}(E.API), E.API.processRGBA = function (t, e, r) {
  for (var n = t.data, i = n.length, a = new Uint8Array(i / 4 * 3), o = new Uint8Array(i / 4), s = 0, c = 0, u = 0; u < i; u += 4) {
    var h = n[u],
      l = n[u + 1],
      f = n[u + 2],
      d = n[u + 3];
    a[s++] = h, a[s++] = l, a[s++] = f, o[c++] = d;
  }
  var p = this.__addimage__.arrayBufferToBinaryString(a);
  return {
    alpha: this.__addimage__.arrayBufferToBinaryString(o),
    data: p,
    index: e,
    alias: r,
    colorSpace: "DeviceRGB",
    bitsPerComponent: 8,
    width: t.width,
    height: t.height
  };
}, E.API.setLanguage = function (t) {
  return void 0 === this.internal.languageSettings && (this.internal.languageSettings = {}, this.internal.languageSettings.isSubscribed = !1), void 0 !== {
    af: "Afrikaans",
    sq: "Albanian",
    ar: "Arabic (Standard)",
    "ar-DZ": "Arabic (Algeria)",
    "ar-BH": "Arabic (Bahrain)",
    "ar-EG": "Arabic (Egypt)",
    "ar-IQ": "Arabic (Iraq)",
    "ar-JO": "Arabic (Jordan)",
    "ar-KW": "Arabic (Kuwait)",
    "ar-LB": "Arabic (Lebanon)",
    "ar-LY": "Arabic (Libya)",
    "ar-MA": "Arabic (Morocco)",
    "ar-OM": "Arabic (Oman)",
    "ar-QA": "Arabic (Qatar)",
    "ar-SA": "Arabic (Saudi Arabia)",
    "ar-SY": "Arabic (Syria)",
    "ar-TN": "Arabic (Tunisia)",
    "ar-AE": "Arabic (U.A.E.)",
    "ar-YE": "Arabic (Yemen)",
    an: "Aragonese",
    hy: "Armenian",
    as: "Assamese",
    ast: "Asturian",
    az: "Azerbaijani",
    eu: "Basque",
    be: "Belarusian",
    bn: "Bengali",
    bs: "Bosnian",
    br: "Breton",
    bg: "Bulgarian",
    my: "Burmese",
    ca: "Catalan",
    ch: "Chamorro",
    ce: "Chechen",
    zh: "Chinese",
    "zh-HK": "Chinese (Hong Kong)",
    "zh-CN": "Chinese (PRC)",
    "zh-SG": "Chinese (Singapore)",
    "zh-TW": "Chinese (Taiwan)",
    cv: "Chuvash",
    co: "Corsican",
    cr: "Cree",
    hr: "Croatian",
    cs: "Czech",
    da: "Danish",
    nl: "Dutch (Standard)",
    "nl-BE": "Dutch (Belgian)",
    en: "English",
    "en-AU": "English (Australia)",
    "en-BZ": "English (Belize)",
    "en-CA": "English (Canada)",
    "en-IE": "English (Ireland)",
    "en-JM": "English (Jamaica)",
    "en-NZ": "English (New Zealand)",
    "en-PH": "English (Philippines)",
    "en-ZA": "English (South Africa)",
    "en-TT": "English (Trinidad & Tobago)",
    "en-GB": "English (United Kingdom)",
    "en-US": "English (United States)",
    "en-ZW": "English (Zimbabwe)",
    eo: "Esperanto",
    et: "Estonian",
    fo: "Faeroese",
    fj: "Fijian",
    fi: "Finnish",
    fr: "French (Standard)",
    "fr-BE": "French (Belgium)",
    "fr-CA": "French (Canada)",
    "fr-FR": "French (France)",
    "fr-LU": "French (Luxembourg)",
    "fr-MC": "French (Monaco)",
    "fr-CH": "French (Switzerland)",
    fy: "Frisian",
    fur: "Friulian",
    gd: "Gaelic (Scots)",
    "gd-IE": "Gaelic (Irish)",
    gl: "Galacian",
    ka: "Georgian",
    de: "German (Standard)",
    "de-AT": "German (Austria)",
    "de-DE": "German (Germany)",
    "de-LI": "German (Liechtenstein)",
    "de-LU": "German (Luxembourg)",
    "de-CH": "German (Switzerland)",
    el: "Greek",
    gu: "Gujurati",
    ht: "Haitian",
    he: "Hebrew",
    hi: "Hindi",
    hu: "Hungarian",
    is: "Icelandic",
    id: "Indonesian",
    iu: "Inuktitut",
    ga: "Irish",
    it: "Italian (Standard)",
    "it-CH": "Italian (Switzerland)",
    ja: "Japanese",
    kn: "Kannada",
    ks: "Kashmiri",
    kk: "Kazakh",
    km: "Khmer",
    ky: "Kirghiz",
    tlh: "Klingon",
    ko: "Korean",
    "ko-KP": "Korean (North Korea)",
    "ko-KR": "Korean (South Korea)",
    la: "Latin",
    lv: "Latvian",
    lt: "Lithuanian",
    lb: "Luxembourgish",
    mk: "North Macedonia",
    ms: "Malay",
    ml: "Malayalam",
    mt: "Maltese",
    mi: "Maori",
    mr: "Marathi",
    mo: "Moldavian",
    nv: "Navajo",
    ng: "Ndonga",
    ne: "Nepali",
    no: "Norwegian",
    nb: "Norwegian (Bokmal)",
    nn: "Norwegian (Nynorsk)",
    oc: "Occitan",
    or: "Oriya",
    om: "Oromo",
    fa: "Persian",
    "fa-IR": "Persian/Iran",
    pl: "Polish",
    pt: "Portuguese",
    "pt-BR": "Portuguese (Brazil)",
    pa: "Punjabi",
    "pa-IN": "Punjabi (India)",
    "pa-PK": "Punjabi (Pakistan)",
    qu: "Quechua",
    rm: "Rhaeto-Romanic",
    ro: "Romanian",
    "ro-MO": "Romanian (Moldavia)",
    ru: "Russian",
    "ru-MO": "Russian (Moldavia)",
    sz: "Sami (Lappish)",
    sg: "Sango",
    sa: "Sanskrit",
    sc: "Sardinian",
    sd: "Sindhi",
    si: "Singhalese",
    sr: "Serbian",
    sk: "Slovak",
    sl: "Slovenian",
    so: "Somani",
    sb: "Sorbian",
    es: "Spanish",
    "es-AR": "Spanish (Argentina)",
    "es-BO": "Spanish (Bolivia)",
    "es-CL": "Spanish (Chile)",
    "es-CO": "Spanish (Colombia)",
    "es-CR": "Spanish (Costa Rica)",
    "es-DO": "Spanish (Dominican Republic)",
    "es-EC": "Spanish (Ecuador)",
    "es-SV": "Spanish (El Salvador)",
    "es-GT": "Spanish (Guatemala)",
    "es-HN": "Spanish (Honduras)",
    "es-MX": "Spanish (Mexico)",
    "es-NI": "Spanish (Nicaragua)",
    "es-PA": "Spanish (Panama)",
    "es-PY": "Spanish (Paraguay)",
    "es-PE": "Spanish (Peru)",
    "es-PR": "Spanish (Puerto Rico)",
    "es-ES": "Spanish (Spain)",
    "es-UY": "Spanish (Uruguay)",
    "es-VE": "Spanish (Venezuela)",
    sx: "Sutu",
    sw: "Swahili",
    sv: "Swedish",
    "sv-FI": "Swedish (Finland)",
    "sv-SV": "Swedish (Sweden)",
    ta: "Tamil",
    tt: "Tatar",
    te: "Teluga",
    th: "Thai",
    tig: "Tigre",
    ts: "Tsonga",
    tn: "Tswana",
    tr: "Turkish",
    tk: "Turkmen",
    uk: "Ukrainian",
    hsb: "Upper Sorbian",
    ur: "Urdu",
    ve: "Venda",
    vi: "Vietnamese",
    vo: "Volapuk",
    wa: "Walloon",
    cy: "Welsh",
    xh: "Xhosa",
    ji: "Yiddish",
    zu: "Zulu"
  }[t] && (this.internal.languageSettings.languageCode = t, !1 === this.internal.languageSettings.isSubscribed && (this.internal.events.subscribe("putCatalog", function () {
    this.internal.write("/Lang (" + this.internal.languageSettings.languageCode + ")");
  }), this.internal.languageSettings.isSubscribed = !0)), this;
}, Vt = E.API, Gt = Vt.getCharWidthsArray = function (e, r) {
  var n,
    i,
    a = (r = r || {}).font || this.internal.getFont(),
    o = r.fontSize || this.internal.getFontSize(),
    s = r.charSpace || this.internal.getCharSpace(),
    c = r.widths ? r.widths : a.metadata.Unicode.widths,
    u = c.fof ? c.fof : 1,
    h = r.kerning ? r.kerning : a.metadata.Unicode.kerning,
    l = h.fof ? h.fof : 1,
    f = !1 !== r.doKerning,
    d = 0,
    p = e.length,
    g = 0,
    m = c[0] || u,
    v = [];
  for (n = 0; n < p; n++) i = e.charCodeAt(n), "function" == typeof a.metadata.widthOfString ? v.push((a.metadata.widthOfGlyph(a.metadata.characterToGlyph(i)) + s * (1e3 / o) || 0) / 1e3) : (d = f && "object" === (0, _typeof.default)(h[i]) && !isNaN(parseInt(h[i][g], 10)) ? h[i][g] / l : 0, v.push((c[i] || m) / u + d)), g = i;
  return v;
}, Yt = Vt.getStringUnitWidth = function (t, e) {
  var r = (e = e || {}).fontSize || this.internal.getFontSize(),
    n = e.font || this.internal.getFont(),
    i = e.charSpace || this.internal.getCharSpace();
  return Vt.processArabic && (t = Vt.processArabic(t)), "function" == typeof n.metadata.widthOfString ? n.metadata.widthOfString(t, r, i) / r : Gt.apply(this, arguments).reduce(function (t, e) {
    return t + e;
  }, 0);
}, Jt = function (t, e, r, n) {
  for (var i = [], a = 0, o = t.length, s = 0; a !== o && s + e[a] < r;) s += e[a], a++;
  i.push(t.slice(0, a));
  var c = a;
  for (s = 0; a !== o;) s + e[a] > n && (i.push(t.slice(c, a)), s = 0, c = a), s += e[a], a++;
  return c !== a && i.push(t.slice(c, a)), i;
}, Xt = function (t, e, r) {
  r || (r = {});
  var n,
    i,
    a,
    o,
    s,
    c,
    u,
    h = [],
    l = [h],
    f = r.textIndent || 0,
    d = 0,
    p = 0,
    g = t.split(" "),
    m = Gt.apply(this, [" ", r])[0];
  if (c = -1 === r.lineIndent ? g[0].length + 2 : r.lineIndent || 0) {
    var v = Array(c).join(" "),
      b = [];
    g.map(function (t) {
      (t = t.split(/\s*\n/)).length > 1 ? b = b.concat(t.map(function (t, e) {
        return (e && t.length ? "\n" : "") + t;
      })) : b.push(t[0]);
    }), g = b, c = Yt.apply(this, [v, r]);
  }
  for (a = 0, o = g.length; a < o; a++) {
    var y = 0;
    if (n = g[a], c && "\n" == n[0] && (n = n.substr(1), y = 1), f + d + (p = (i = Gt.apply(this, [n, r])).reduce(function (t, e) {
      return t + e;
    }, 0)) > e || y) {
      if (p > e) {
        for (s = Jt.apply(this, [n, i, e - (f + d), e]), h.push(s.shift()), h = [s.pop()]; s.length;) l.push([s.shift()]);
        p = i.slice(n.length - (h[0] ? h[0].length : 0)).reduce(function (t, e) {
          return t + e;
        }, 0);
      } else h = [n];
      l.push(h), f = p + c, d = m;
    } else h.push(n), f += d + p, d = m;
  }
  return u = c ? function (t, e) {
    return (e ? v : "") + t.join(" ");
  } : function (t) {
    return t.join(" ");
  }, l.map(u);
}, Vt.splitTextToSize = function (t, e, r) {
  var n,
    i = (r = r || {}).fontSize || this.internal.getFontSize(),
    a = function (t) {
      if (t.widths && t.kerning) return {
        widths: t.widths,
        kerning: t.kerning
      };
      var e = this.internal.getFont(t.fontName, t.fontStyle);
      return e.metadata.Unicode ? {
        widths: e.metadata.Unicode.widths || {
          0: 1
        },
        kerning: e.metadata.Unicode.kerning || {}
      } : {
        font: e.metadata,
        fontSize: this.internal.getFontSize(),
        charSpace: this.internal.getCharSpace()
      };
    }.call(this, r);
  n = Array.isArray(t) ? t : String(t).split(/\r?\n/);
  var o = 1 * this.internal.scaleFactor * e / i;
  a.textIndent = r.textIndent ? 1 * r.textIndent * this.internal.scaleFactor / i : 0, a.lineIndent = r.lineIndent;
  var s,
    c,
    u = [];
  for (s = 0, c = n.length; s < c; s++) u = u.concat(Xt.apply(this, [n[s], o, a]));
  return u;
}, function (e) {
  e.__fontmetrics__ = e.__fontmetrics__ || {};
  for (var r = "klmnopqrstuvwxyz", n = {}, i = {}, a = 0; a < r.length; a++) n[r[a]] = "0123456789abcdef"[a], i["0123456789abcdef"[a]] = r[a];
  var o = function (t) {
      return "0x" + parseInt(t, 10).toString(16);
    },
    s = e.__fontmetrics__.compress = function (e) {
      var r,
        n,
        a,
        c,
        u = ["{"];
      for (var h in e) {
        if (r = e[h], isNaN(parseInt(h, 10)) ? n = "'" + h + "'" : (h = parseInt(h, 10), n = (n = o(h).slice(2)).slice(0, -1) + i[n.slice(-1)]), "number" == typeof r) r < 0 ? (a = o(r).slice(3), c = "-") : (a = o(r).slice(2), c = ""), a = c + a.slice(0, -1) + i[a.slice(-1)];else {
          if ("object" !== (0, _typeof.default)(r)) throw new Error("Don't know what to do with value type " + (0, _typeof.default)(r) + ".");
          a = s(r);
        }
        u.push(n + a);
      }
      return u.push("}"), u.join("");
    },
    c = e.__fontmetrics__.uncompress = function (t) {
      if ("string" != typeof t) throw new Error("Invalid argument passed to uncompress.");
      for (var e, r, i, a, o = {}, s = 1, c = o, u = [], h = "", l = "", f = t.length - 1, d = 1; d < f; d += 1) "'" == (a = t[d]) ? e ? (i = e.join(""), e = void 0) : e = [] : e ? e.push(a) : "{" == a ? (u.push([c, i]), c = {}, i = void 0) : "}" == a ? ((r = u.pop())[0][r[1]] = c, i = void 0, c = r[0]) : "-" == a ? s = -1 : void 0 === i ? n.hasOwnProperty(a) ? (h += n[a], i = parseInt(h, 16) * s, s = 1, h = "") : h += a : n.hasOwnProperty(a) ? (l += n[a], c[i] = parseInt(l, 16) * s, s = 1, i = void 0, l = "") : l += a;
      return o;
    },
    u = {
      codePages: ["WinAnsiEncoding"],
      WinAnsiEncoding: c("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")
    },
    h = {
      Unicode: {
        Courier: u,
        "Courier-Bold": u,
        "Courier-BoldOblique": u,
        "Courier-Oblique": u,
        Helvetica: u,
        "Helvetica-Bold": u,
        "Helvetica-BoldOblique": u,
        "Helvetica-Oblique": u,
        "Times-Roman": u,
        "Times-Bold": u,
        "Times-BoldItalic": u,
        "Times-Italic": u
      }
    },
    l = {
      Unicode: {
        "Courier-Oblique": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
        "Times-BoldItalic": c("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),
        "Helvetica-Bold": c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
        Courier: c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
        "Courier-BoldOblique": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
        "Times-Bold": c("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),
        Symbol: c("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),
        Helvetica: c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),
        "Helvetica-BoldOblique": c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),
        ZapfDingbats: c("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),
        "Courier-Bold": c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),
        "Times-Italic": c("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),
        "Times-Roman": c("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),
        "Helvetica-Oblique": c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")
      }
    };
  e.events.push(["addFont", function (t) {
    var e = t.font,
      r = l.Unicode[e.postScriptName];
    r && (e.metadata.Unicode = {}, e.metadata.Unicode.widths = r.widths, e.metadata.Unicode.kerning = r.kerning);
    var n = h.Unicode[e.postScriptName];
    n && (e.metadata.Unicode.encoding = n, e.encoding = n.codePages[0]);
  }]);
}(E.API),
/**
 * @license
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function (t) {
    for (var e = t.length, r = new Uint8Array(e), n = 0; n < e; n++) r[n] = t.charCodeAt(n);
    return r;
  };
  t.API.events.push(["addFont", function (r) {
    var n = void 0,
      i = r.font,
      a = r.instance;
    if (!i.isStandardFont) {
      if (void 0 === a) throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
      if ("string" != typeof (n = !1 === a.existsFileInVFS(i.postScriptName) ? a.loadFile(i.postScriptName) : a.getFileFromVFS(i.postScriptName))) throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('" + i.postScriptName + "').");
      !function (r, n) {
        n = /^\x00\x01\x00\x00/.test(n) ? e(n) : e(u(n)), r.metadata = t.API.TTFFont.open(n), r.metadata.Unicode = r.metadata.Unicode || {
          encoding: {},
          kerning: {},
          widths: []
        }, r.metadata.glyIdsUsed = [0];
      }(i, n);
    }
  }]);
}(E),
/** @license
 * Copyright (c) 2012 Willow Systems Corporation, https://github.com/willowsystems
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function (t) {
  function e() {
    return (n.canvg ? Promise.resolve(n.canvg) : require("_bundle_loader")(require.resolve("canvg"))).catch(function (t) {
      return Promise.reject(new Error("Could not load canvg: " + t));
    }).then(function (t) {
      return t.default ? t.default : t;
    });
  }
  E.API.addSvgAsImage = function (t, r, n, i, o, s, c, u) {
    if (isNaN(r) || isNaN(n)) throw a.error("jsPDF.addSvgAsImage: Invalid coordinates", arguments), new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");
    if (isNaN(i) || isNaN(o)) throw a.error("jsPDF.addSvgAsImage: Invalid measurements", arguments), new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");
    var h = document.createElement("canvas");
    h.width = i, h.height = o;
    var l = h.getContext("2d");
    l.fillStyle = "#fff", l.fillRect(0, 0, h.width, h.height);
    var f = {
        ignoreMouse: !0,
        ignoreAnimation: !0,
        ignoreDimensions: !0
      },
      d = this;
    return e().then(function (e) {
      return e.fromString(l, t, f);
    }, function () {
      return Promise.reject(new Error("Could not load canvg."));
    }).then(function (t) {
      return t.render(f);
    }).then(function () {
      d.addImage(h.toDataURL("image/jpeg", 1), r, n, i, o, c, u);
    });
  };
}(), E.API.putTotalPages = function (t) {
  var e,
    r = 0;
  parseInt(this.internal.getFont().id.substr(1), 10) < 15 ? (e = new RegExp(t, "g"), r = this.internal.getNumberOfPages()) : (e = new RegExp(this.pdfEscape16(t, this.internal.getFont()), "g"), r = this.pdfEscape16(this.internal.getNumberOfPages() + "", this.internal.getFont()));
  for (var n = 1; n <= this.internal.getNumberOfPages(); n++) for (var i = 0; i < this.internal.pages[n].length; i++) this.internal.pages[n][i] = this.internal.pages[n][i].replace(e, r);
  return this;
}, E.API.viewerPreferences = function (e, r) {
  var n;
  e = e || {}, r = r || !1;
  var i,
    a,
    o,
    s = {
      HideToolbar: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      HideMenubar: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      HideWindowUI: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      FitWindow: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      CenterWindow: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.3
      },
      DisplayDocTitle: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.4
      },
      NonFullScreenPageMode: {
        defaultValue: "UseNone",
        value: "UseNone",
        type: "name",
        explicitSet: !1,
        valueSet: ["UseNone", "UseOutlines", "UseThumbs", "UseOC"],
        pdfVersion: 1.3
      },
      Direction: {
        defaultValue: "L2R",
        value: "L2R",
        type: "name",
        explicitSet: !1,
        valueSet: ["L2R", "R2L"],
        pdfVersion: 1.3
      },
      ViewArea: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      ViewClip: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      PrintArea: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      PrintClip: {
        defaultValue: "CropBox",
        value: "CropBox",
        type: "name",
        explicitSet: !1,
        valueSet: ["MediaBox", "CropBox", "TrimBox", "BleedBox", "ArtBox"],
        pdfVersion: 1.4
      },
      PrintScaling: {
        defaultValue: "AppDefault",
        value: "AppDefault",
        type: "name",
        explicitSet: !1,
        valueSet: ["AppDefault", "None"],
        pdfVersion: 1.6
      },
      Duplex: {
        defaultValue: "",
        value: "none",
        type: "name",
        explicitSet: !1,
        valueSet: ["Simplex", "DuplexFlipShortEdge", "DuplexFlipLongEdge", "none"],
        pdfVersion: 1.7
      },
      PickTrayByPDFSize: {
        defaultValue: !1,
        value: !1,
        type: "boolean",
        explicitSet: !1,
        valueSet: [!0, !1],
        pdfVersion: 1.7
      },
      PrintPageRange: {
        defaultValue: "",
        value: "",
        type: "array",
        explicitSet: !1,
        valueSet: null,
        pdfVersion: 1.7
      },
      NumCopies: {
        defaultValue: 1,
        value: 1,
        type: "integer",
        explicitSet: !1,
        valueSet: null,
        pdfVersion: 1.7
      }
    },
    c = Object.keys(s),
    u = [],
    h = 0,
    l = 0,
    f = 0;
  function d(t, e) {
    var r,
      n = !1;
    for (r = 0; r < t.length; r += 1) t[r] === e && (n = !0);
    return n;
  }
  if (void 0 === this.internal.viewerpreferences && (this.internal.viewerpreferences = {}, this.internal.viewerpreferences.configuration = JSON.parse(JSON.stringify(s)), this.internal.viewerpreferences.isSubscribed = !1), n = this.internal.viewerpreferences.configuration, "reset" === e || !0 === r) {
    var p = c.length;
    for (f = 0; f < p; f += 1) n[c[f]].value = n[c[f]].defaultValue, n[c[f]].explicitSet = !1;
  }
  if ("object" === (0, _typeof.default)(e)) for (a in e) if (o = e[a], d(c, a) && void 0 !== o) {
    if ("boolean" === n[a].type && "boolean" == typeof o) n[a].value = o;else if ("name" === n[a].type && d(n[a].valueSet, o)) n[a].value = o;else if ("integer" === n[a].type && Number.isInteger(o)) n[a].value = o;else if ("array" === n[a].type) {
      for (h = 0; h < o.length; h += 1) if (i = !0, 1 === o[h].length && "number" == typeof o[h][0]) u.push(String(o[h] - 1));else if (o[h].length > 1) {
        for (l = 0; l < o[h].length; l += 1) "number" != typeof o[h][l] && (i = !1);
        !0 === i && u.push([o[h][0] - 1, o[h][1] - 1].join(" "));
      }
      n[a].value = "[" + u.join(" ") + "]";
    } else n[a].value = n[a].defaultValue;
    n[a].explicitSet = !0;
  }
  return !1 === this.internal.viewerpreferences.isSubscribed && (this.internal.events.subscribe("putCatalog", function () {
    var t,
      e = [];
    for (t in n) !0 === n[t].explicitSet && ("name" === n[t].type ? e.push("/" + t + " /" + n[t].value) : e.push("/" + t + " " + n[t].value));
    0 !== e.length && this.internal.write("/ViewerPreferences\n<<\n" + e.join("\n") + "\n>>");
  }), this.internal.viewerpreferences.isSubscribed = !0), this.internal.viewerpreferences.configuration = n, this;
},
/** ====================================================================
 * @license
 * jsPDF XMP metadata plugin
 * Copyright (c) 2016 Jussi Utunen, u-jussi@suomi24.fi
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * ====================================================================
 */
function (t) {
  var e = function () {
      var t = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="' + this.internal.__metadata__.namespaceuri + '"><jspdf:metadata>',
        e = unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')),
        r = unescape(encodeURIComponent(t)),
        n = unescape(encodeURIComponent(this.internal.__metadata__.metadata)),
        i = unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")),
        a = unescape(encodeURIComponent("</x:xmpmeta>")),
        o = r.length + n.length + i.length + e.length + a.length;
      this.internal.__metadata__.metadata_object_number = this.internal.newObject(), this.internal.write("<< /Type /Metadata /Subtype /XML /Length " + o + " >>"), this.internal.write("stream"), this.internal.write(e + r + n + i + a), this.internal.write("endstream"), this.internal.write("endobj");
    },
    r = function () {
      this.internal.__metadata__.metadata_object_number && this.internal.write("/Metadata " + this.internal.__metadata__.metadata_object_number + " 0 R");
    };
  t.addMetadata = function (t, n) {
    return void 0 === this.internal.__metadata__ && (this.internal.__metadata__ = {
      metadata: t,
      namespaceuri: n || "http://jspdf.default.namespaceuri/"
    }, this.internal.events.subscribe("putCatalog", r), this.internal.events.subscribe("postPutResources", e)), this;
  };
}(E.API), function (t) {
  var e = t.API,
    r = e.pdfEscape16 = function (t, e) {
      for (var r, n = e.metadata.Unicode.widths, i = ["", "0", "00", "000", "0000"], a = [""], o = 0, s = t.length; o < s; ++o) {
        if (r = e.metadata.characterToGlyph(t.charCodeAt(o)), e.metadata.glyIdsUsed.push(r), e.metadata.toUnicode[r] = t.charCodeAt(o), -1 == n.indexOf(r) && (n.push(r), n.push([parseInt(e.metadata.widthOfGlyph(r), 10)])), "0" == r) return a.join("");
        r = r.toString(16), a.push(i[4 - r.length], r);
      }
      return a.join("");
    },
    n = function (t) {
      var e, r, n, i, a, o, s;
      for (a = "/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange", n = [], o = 0, s = (r = Object.keys(t).sort(function (t, e) {
        return t - e;
      })).length; o < s; o++) e = r[o], n.length >= 100 && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar", n = []), void 0 !== t[e] && null !== t[e] && "function" == typeof t[e].toString && (i = ("0000" + t[e].toString(16)).slice(-4), e = ("0000" + (+e).toString(16)).slice(-4), n.push("<" + e + "><" + i + ">"));
      return n.length && (a += "\n" + n.length + " beginbfchar\n" + n.join("\n") + "\nendbfchar\n"), a += "endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend";
    };
  e.events.push(["putFont", function (e) {
    !function (e) {
      var r = e.font,
        i = e.out,
        a = e.newObject,
        o = e.putStream;
      if (r.metadata instanceof t.API.TTFFont && "Identity-H" === r.encoding) {
        for (var s = r.metadata.Unicode.widths, c = r.metadata.subset.encode(r.metadata.glyIdsUsed, 1), u = "", h = 0; h < c.length; h++) u += String.fromCharCode(c[h]);
        var l = a();
        o({
          data: u,
          addLength1: !0,
          objectId: l
        }), i("endobj");
        var f = a();
        o({
          data: n(r.metadata.toUnicode),
          addLength1: !0,
          objectId: f
        }), i("endobj");
        var d = a();
        i("<<"), i("/Type /FontDescriptor"), i("/FontName /" + F(r.fontName)), i("/FontFile2 " + l + " 0 R"), i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)), i("/Flags " + r.metadata.flags), i("/StemV " + r.metadata.stemV), i("/ItalicAngle " + r.metadata.italicAngle), i("/Ascent " + r.metadata.ascender), i("/Descent " + r.metadata.decender), i("/CapHeight " + r.metadata.capHeight), i(">>"), i("endobj");
        var p = a();
        i("<<"), i("/Type /Font"), i("/BaseFont /" + F(r.fontName)), i("/FontDescriptor " + d + " 0 R"), i("/W " + t.API.PDFObject.convert(s)), i("/CIDToGIDMap /Identity"), i("/DW 1000"), i("/Subtype /CIDFontType2"), i("/CIDSystemInfo"), i("<<"), i("/Supplement 0"), i("/Registry (Adobe)"), i("/Ordering (" + r.encoding + ")"), i(">>"), i(">>"), i("endobj"), r.objectNumber = a(), i("<<"), i("/Type /Font"), i("/Subtype /Type0"), i("/ToUnicode " + f + " 0 R"), i("/BaseFont /" + F(r.fontName)), i("/Encoding /" + r.encoding), i("/DescendantFonts [" + p + " 0 R]"), i(">>"), i("endobj"), r.isAlreadyPutted = !0;
      }
    }(e);
  }]);
  e.events.push(["putFont", function (e) {
    !function (e) {
      var r = e.font,
        i = e.out,
        a = e.newObject,
        o = e.putStream;
      if (r.metadata instanceof t.API.TTFFont && "WinAnsiEncoding" === r.encoding) {
        for (var s = r.metadata.rawData, c = "", u = 0; u < s.length; u++) c += String.fromCharCode(s[u]);
        var h = a();
        o({
          data: c,
          addLength1: !0,
          objectId: h
        }), i("endobj");
        var l = a();
        o({
          data: n(r.metadata.toUnicode),
          addLength1: !0,
          objectId: l
        }), i("endobj");
        var f = a();
        i("<<"), i("/Descent " + r.metadata.decender), i("/CapHeight " + r.metadata.capHeight), i("/StemV " + r.metadata.stemV), i("/Type /FontDescriptor"), i("/FontFile2 " + h + " 0 R"), i("/Flags 96"), i("/FontBBox " + t.API.PDFObject.convert(r.metadata.bbox)), i("/FontName /" + F(r.fontName)), i("/ItalicAngle " + r.metadata.italicAngle), i("/Ascent " + r.metadata.ascender), i(">>"), i("endobj"), r.objectNumber = a();
        for (var d = 0; d < r.metadata.hmtx.widths.length; d++) r.metadata.hmtx.widths[d] = parseInt(r.metadata.hmtx.widths[d] * (1e3 / r.metadata.head.unitsPerEm));
        i("<</Subtype/TrueType/Type/Font/ToUnicode " + l + " 0 R/BaseFont/" + F(r.fontName) + "/FontDescriptor " + f + " 0 R/Encoding/" + r.encoding + " /FirstChar 29 /LastChar 255 /Widths " + t.API.PDFObject.convert(r.metadata.hmtx.widths) + ">>"), i("endobj"), r.isAlreadyPutted = !0;
      }
    }(e);
  }]);
  var i = function (t) {
    var e,
      n = t.text || "",
      i = t.x,
      a = t.y,
      o = t.options || {},
      s = t.mutex || {},
      c = s.pdfEscape,
      u = s.activeFontKey,
      h = s.fonts,
      l = u,
      f = "",
      d = 0,
      p = "",
      g = h[l].encoding;
    if ("Identity-H" !== h[l].encoding) return {
      text: n,
      x: i,
      y: a,
      options: o,
      mutex: s
    };
    for (p = n, l = u, Array.isArray(n) && (p = n[0]), d = 0; d < p.length; d += 1) h[l].metadata.hasOwnProperty("cmap") && (e = h[l].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]), e || p[d].charCodeAt(0) < 256 && h[l].metadata.hasOwnProperty("Unicode") ? f += p[d] : f += "";
    var m = "";
    return parseInt(l.slice(1)) < 14 || "WinAnsiEncoding" === g ? m = c(f, l).split("").map(function (t) {
      return t.charCodeAt(0).toString(16);
    }).join("") : "Identity-H" === g && (m = r(f, h[l])), s.isHex = !0, {
      text: m,
      x: i,
      y: a,
      options: o,
      mutex: s
    };
  };
  e.events.push(["postProcessText", function (t) {
    var e = t.text || "",
      r = [],
      n = {
        text: e,
        x: t.x,
        y: t.y,
        options: t.options,
        mutex: t.mutex
      };
    if (Array.isArray(e)) {
      var a = 0;
      for (a = 0; a < e.length; a += 1) Array.isArray(e[a]) && 3 === e[a].length ? r.push([i(Object.assign({}, n, {
        text: e[a][0]
      })).text, e[a][1], e[a][2]]) : r.push(i(Object.assign({}, n, {
        text: e[a]
      })).text);
      t.text = r;
    } else t.text = i(Object.assign({}, n, {
      text: e
    })).text;
  }]);
}(E),
/**
 * @license
 * jsPDF virtual FileSystem functionality
 *
 * Licensed under the MIT License.
 * http://opensource.org/licenses/mit-license
 */
function (t) {
  var e = function () {
    return void 0 === this.internal.vFS && (this.internal.vFS = {}), !0;
  };
  t.existsFileInVFS = function (t) {
    return e.call(this), void 0 !== this.internal.vFS[t];
  }, t.addFileToVFS = function (t, r) {
    return e.call(this), this.internal.vFS[t] = r, this;
  }, t.getFileFromVFS = function (t) {
    return e.call(this), void 0 !== this.internal.vFS[t] ? this.internal.vFS[t] : null;
  };
}(E.API),
/**
 * @license
 * Unicode Bidi Engine based on the work of Alex Shensis (@asthensis)
 * MIT License
 */
function (t) {
  t.__bidiEngine__ = t.prototype.__bidiEngine__ = function (t) {
    var r,
      n,
      i,
      a,
      o,
      s,
      c,
      u = e,
      h = [[0, 3, 0, 1, 0, 0, 0], [0, 3, 0, 1, 2, 2, 0], [0, 3, 0, 17, 2, 0, 1], [0, 3, 5, 5, 4, 1, 0], [0, 3, 21, 21, 4, 0, 1], [0, 3, 5, 5, 4, 2, 0]],
      l = [[2, 0, 1, 1, 0, 1, 0], [2, 0, 1, 1, 0, 2, 0], [2, 0, 2, 1, 3, 2, 0], [2, 0, 2, 33, 3, 1, 1]],
      f = {
        L: 0,
        R: 1,
        EN: 2,
        AN: 3,
        N: 4,
        B: 5,
        S: 6
      },
      d = {
        0: 0,
        5: 1,
        6: 2,
        7: 3,
        32: 4,
        251: 5,
        254: 6,
        255: 7
      },
      p = ["(", ")", "(", "<", ">", "<", "[", "]", "[", "{", "}", "{", "«", "»", "«", "‹", "›", "‹", "⁅", "⁆", "⁅", "⁽", "⁾", "⁽", "₍", "₎", "₍", "≤", "≥", "≤", "〈", "〉", "〈", "﹙", "﹚", "﹙", "﹛", "﹜", "﹛", "﹝", "﹞", "﹝", "﹤", "﹥", "﹤"],
      g = new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/),
      m = !1,
      v = 0;
    this.__bidiEngine__ = {};
    var b = function (t) {
        var e = t.charCodeAt(),
          r = e >> 8,
          n = d[r];
        return void 0 !== n ? u[256 * n + (255 & e)] : 252 === r || 253 === r ? "AL" : g.test(r) ? "L" : 8 === r ? "R" : "N";
      },
      y = function (t) {
        for (var e, r = 0; r < t.length; r++) {
          if ("L" === (e = b(t.charAt(r)))) return !1;
          if ("R" === e) return !0;
        }
        return !1;
      },
      w = function (t, e, o, s) {
        var c,
          u,
          h,
          l,
          f = e[s];
        switch (f) {
          case "L":
          case "R":
            m = !1;
            break;
          case "N":
          case "AN":
            break;
          case "EN":
            m && (f = "AN");
            break;
          case "AL":
            m = !0, f = "R";
            break;
          case "WS":
            f = "N";
            break;
          case "CS":
            s < 1 || s + 1 >= e.length || "EN" !== (c = o[s - 1]) && "AN" !== c || "EN" !== (u = e[s + 1]) && "AN" !== u ? f = "N" : m && (u = "AN"), f = u === c ? u : "N";
            break;
          case "ES":
            f = "EN" === (c = s > 0 ? o[s - 1] : "B") && s + 1 < e.length && "EN" === e[s + 1] ? "EN" : "N";
            break;
          case "ET":
            if (s > 0 && "EN" === o[s - 1]) {
              f = "EN";
              break;
            }
            if (m) {
              f = "N";
              break;
            }
            for (h = s + 1, l = e.length; h < l && "ET" === e[h];) h++;
            f = h < l && "EN" === e[h] ? "EN" : "N";
            break;
          case "NSM":
            if (i && !a) {
              for (l = e.length, h = s + 1; h < l && "NSM" === e[h];) h++;
              if (h < l) {
                var d = t[s],
                  p = d >= 1425 && d <= 2303 || 64286 === d;
                if (c = e[h], p && ("R" === c || "AL" === c)) {
                  f = "R";
                  break;
                }
              }
            }
            f = s < 1 || "B" === (c = e[s - 1]) ? "N" : o[s - 1];
            break;
          case "B":
            m = !1, r = !0, f = v;
            break;
          case "S":
            n = !0, f = "N";
            break;
          case "LRE":
          case "RLE":
          case "LRO":
          case "RLO":
          case "PDF":
            m = !1;
            break;
          case "BN":
            f = "N";
        }
        return f;
      },
      N = function (t, e, r) {
        var n = t.split("");
        return r && L(n, r, {
          hiLevel: v
        }), n.reverse(), e && e.reverse(), n.join("");
      },
      L = function (t, e, i) {
        var a,
          o,
          s,
          c,
          u,
          d = -1,
          p = t.length,
          g = 0,
          y = [],
          N = v ? l : h,
          L = [];
        for (m = !1, r = !1, n = !1, o = 0; o < p; o++) L[o] = b(t[o]);
        for (s = 0; s < p; s++) {
          if (u = g, y[s] = w(t, L, y, s), a = 240 & (g = N[u][f[y[s]]]), g &= 15, e[s] = c = N[g][5], a > 0) if (16 === a) {
            for (o = d; o < s; o++) e[o] = 1;
            d = -1;
          } else d = -1;
          if (N[g][6]) -1 === d && (d = s);else if (d > -1) {
            for (o = d; o < s; o++) e[o] = c;
            d = -1;
          }
          "B" === L[s] && (e[s] = 0), i.hiLevel |= c;
        }
        n && function (t, e, r) {
          for (var n = 0; n < r; n++) if ("S" === t[n]) {
            e[n] = v;
            for (var i = n - 1; i >= 0 && "WS" === t[i]; i--) e[i] = v;
          }
        }(L, e, p);
      },
      A = function (t, e, n, i, a) {
        if (!(a.hiLevel < t)) {
          if (1 === t && 1 === v && !r) return e.reverse(), void (n && n.reverse());
          for (var o, s, c, u, h = e.length, l = 0; l < h;) {
            if (i[l] >= t) {
              for (c = l + 1; c < h && i[c] >= t;) c++;
              for (u = l, s = c - 1; u < s; u++, s--) o = e[u], e[u] = e[s], e[s] = o, n && (o = n[u], n[u] = n[s], n[s] = o);
              l = c;
            }
            l++;
          }
        }
      },
      x = function (t, e, r) {
        var n = t.split(""),
          i = {
            hiLevel: v
          };
        return r || (r = []), L(n, r, i), function (t, e, r) {
          if (0 !== r.hiLevel && c) for (var n, i = 0; i < t.length; i++) 1 === e[i] && (n = p.indexOf(t[i])) >= 0 && (t[i] = p[n + 1]);
        }(n, r, i), A(2, n, e, r, i), A(1, n, e, r, i), n.join("");
      };
    return this.__bidiEngine__.doBidiReorder = function (t, e, r) {
      if (function (t, e) {
        if (e) for (var r = 0; r < t.length; r++) e[r] = r;
        void 0 === a && (a = y(t)), void 0 === s && (s = y(t));
      }(t, e), i || !o || s) {
        if (i && o && a ^ s) v = a ? 1 : 0, t = N(t, e, r);else if (!i && o && s) v = a ? 1 : 0, t = x(t, e, r), t = N(t, e);else if (!i || a || o || s) {
          if (i && !o && a ^ s) t = N(t, e), a ? (v = 0, t = x(t, e, r)) : (v = 1, t = x(t, e, r), t = N(t, e));else if (i && a && !o && s) v = 1, t = x(t, e, r), t = N(t, e);else if (!i && !o && a ^ s) {
            var n = c;
            a ? (v = 1, t = x(t, e, r), v = 0, c = !1, t = x(t, e, r), c = n) : (v = 0, t = x(t, e, r), t = N(t, e), v = 1, c = !1, t = x(t, e, r), c = n, t = N(t, e));
          }
        } else v = 0, t = x(t, e, r);
      } else v = a ? 1 : 0, t = x(t, e, r);
      return t;
    }, this.__bidiEngine__.setOptions = function (t) {
      t && (i = t.isInputVisual, o = t.isOutputVisual, a = t.isInputRtl, s = t.isOutputRtl, c = t.isSymmetricSwapping);
    }, this.__bidiEngine__.setOptions(t), this.__bidiEngine__;
  };
  var e = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "N", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "L", "N", "N", "BN", "N", "N", "ET", "ET", "EN", "EN", "N", "L", "N", "N", "N", "EN", "L", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "L", "N", "N", "N", "N", "N", "ET", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "NSM", "R", "NSM", "NSM", "R", "NSM", "NSM", "R", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AN", "AN", "AN", "AN", "AN", "AN", "N", "N", "AL", "ET", "ET", "AL", "CS", "AL", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "AN", "ET", "AN", "AN", "AL", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AN", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "NSM", "NSM", "N", "NSM", "NSM", "NSM", "NSM", "AL", "AL", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "NSM", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "R", "R", "N", "N", "N", "N", "R", "N", "N", "N", "N", "N", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "WS", "BN", "BN", "BN", "L", "R", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "B", "LRE", "RLE", "PDF", "LRO", "RLO", "CS", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "WS", "BN", "BN", "BN", "BN", "BN", "N", "LRI", "RLI", "FSI", "PDI", "BN", "BN", "BN", "BN", "BN", "BN", "EN", "L", "N", "N", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "L", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ES", "ES", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "R", "NSM", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "ES", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "N", "R", "R", "R", "R", "R", "N", "R", "N", "R", "R", "N", "R", "R", "N", "R", "R", "R", "R", "R", "R", "R", "R", "R", "R", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "NSM", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "CS", "N", "CS", "N", "N", "CS", "N", "N", "N", "N", "N", "N", "N", "N", "N", "ET", "N", "N", "ES", "ES", "N", "N", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "AL", "AL", "AL", "AL", "AL", "N", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "AL", "N", "N", "BN", "N", "N", "N", "ET", "ET", "ET", "N", "N", "N", "N", "N", "ES", "CS", "ES", "CS", "CS", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "CS", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "N", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "L", "L", "L", "N", "N", "L", "L", "L", "N", "N", "N", "ET", "ET", "N", "N", "N", "ET", "ET", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N", "N"],
    r = new t.__bidiEngine__({
      isInputVisual: !0
    });
  t.API.events.push(["postProcessText", function (t) {
    var e = t.text,
      n = (t.x, t.y, t.options || {}),
      i = (t.mutex, n.lang, []);
    if (n.isInputVisual = "boolean" != typeof n.isInputVisual || n.isInputVisual, r.setOptions(n), "[object Array]" === Object.prototype.toString.call(e)) {
      var a = 0;
      for (i = [], a = 0; a < e.length; a += 1) "[object Array]" === Object.prototype.toString.call(e[a]) ? i.push([r.doBidiReorder(e[a][0]), e[a][1], e[a][2]]) : i.push([r.doBidiReorder(e[a])]);
      t.text = i;
    } else t.text = r.doBidiReorder(e);
    r.setOptions({
      isInputVisual: !0
    });
  }]);
}(E), E.API.TTFFont = function () {
  function t(t) {
    var e;
    if (this.rawData = t, e = this.contents = new ne(t), this.contents.pos = 4, "ttcf" === e.readString(4)) throw new Error("TTCF not supported.");
    e.pos = 0, this.parse(), this.subset = new Le(this), this.registerTTF();
  }
  return t.open = function (e) {
    return new t(e);
  }, t.prototype.parse = function () {
    return this.directory = new ie(this.contents), this.head = new se(this), this.name = new pe(this), this.cmap = new ue(this), this.toUnicode = {}, this.hhea = new he(this), this.maxp = new ge(this), this.hmtx = new me(this), this.post = new fe(this), this.os2 = new le(this), this.loca = new Ne(this), this.glyf = new be(this), this.ascender = this.os2.exists && this.os2.ascender || this.hhea.ascender, this.decender = this.os2.exists && this.os2.decender || this.hhea.decender, this.lineGap = this.os2.exists && this.os2.lineGap || this.hhea.lineGap, this.bbox = [this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax];
  }, t.prototype.registerTTF = function () {
    var t, e, r, n, i;
    if (this.scaleFactor = 1e3 / this.head.unitsPerEm, this.bbox = function () {
      var e, r, n, i;
      for (i = [], e = 0, r = (n = this.bbox).length; e < r; e++) t = n[e], i.push(Math.round(t * this.scaleFactor));
      return i;
    }.call(this), this.stemV = 0, this.post.exists ? (r = 255 & (n = this.post.italic_angle), 0 != (32768 & (e = n >> 16)) && (e = -(1 + (65535 ^ e))), this.italicAngle = +(e + "." + r)) : this.italicAngle = 0, this.ascender = Math.round(this.ascender * this.scaleFactor), this.decender = Math.round(this.decender * this.scaleFactor), this.lineGap = Math.round(this.lineGap * this.scaleFactor), this.capHeight = this.os2.exists && this.os2.capHeight || this.ascender, this.xHeight = this.os2.exists && this.os2.xHeight || 0, this.familyClass = (this.os2.exists && this.os2.familyClass || 0) >> 8, this.isSerif = 1 === (i = this.familyClass) || 2 === i || 3 === i || 4 === i || 5 === i || 7 === i, this.isScript = 10 === this.familyClass, this.flags = 0, this.post.isFixedPitch && (this.flags |= 1), this.isSerif && (this.flags |= 2), this.isScript && (this.flags |= 8), 0 !== this.italicAngle && (this.flags |= 64), this.flags |= 32, !this.cmap.unicode) throw new Error("No unicode cmap for font");
  }, t.prototype.characterToGlyph = function (t) {
    var e;
    return (null != (e = this.cmap.unicode) ? e.codeMap[t] : void 0) || 0;
  }, t.prototype.widthOfGlyph = function (t) {
    var e;
    return e = 1e3 / this.head.unitsPerEm, this.hmtx.forGlyph(t).advance * e;
  }, t.prototype.widthOfString = function (t, e, r) {
    var n, i, a, o;
    for (a = 0, i = 0, o = (t = "" + t).length; 0 <= o ? i < o : i > o; i = 0 <= o ? ++i : --i) n = t.charCodeAt(i), a += this.widthOfGlyph(this.characterToGlyph(n)) + r * (1e3 / e) || 0;
    return a * (e / 1e3);
  }, t.prototype.lineHeight = function (t, e) {
    var r;
    return null == e && (e = !1), r = e ? this.lineGap : 0, (this.ascender + r - this.decender) / 1e3 * t;
  }, t;
}();
var re,
  ne = function () {
    function t(t) {
      this.data = null != t ? t : [], this.pos = 0, this.length = this.data.length;
    }
    return t.prototype.readByte = function () {
      return this.data[this.pos++];
    }, t.prototype.writeByte = function (t) {
      return this.data[this.pos++] = t;
    }, t.prototype.readUInt32 = function () {
      return 16777216 * this.readByte() + (this.readByte() << 16) + (this.readByte() << 8) + this.readByte();
    }, t.prototype.writeUInt32 = function (t) {
      return this.writeByte(t >>> 24 & 255), this.writeByte(t >> 16 & 255), this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
    }, t.prototype.readInt32 = function () {
      var t;
      return (t = this.readUInt32()) >= 2147483648 ? t - 4294967296 : t;
    }, t.prototype.writeInt32 = function (t) {
      return t < 0 && (t += 4294967296), this.writeUInt32(t);
    }, t.prototype.readUInt16 = function () {
      return this.readByte() << 8 | this.readByte();
    }, t.prototype.writeUInt16 = function (t) {
      return this.writeByte(t >> 8 & 255), this.writeByte(255 & t);
    }, t.prototype.readInt16 = function () {
      var t;
      return (t = this.readUInt16()) >= 32768 ? t - 65536 : t;
    }, t.prototype.writeInt16 = function (t) {
      return t < 0 && (t += 65536), this.writeUInt16(t);
    }, t.prototype.readString = function (t) {
      var e, r;
      for (r = [], e = 0; 0 <= t ? e < t : e > t; e = 0 <= t ? ++e : --e) r[e] = String.fromCharCode(this.readByte());
      return r.join("");
    }, t.prototype.writeString = function (t) {
      var e, r, n;
      for (n = [], e = 0, r = t.length; 0 <= r ? e < r : e > r; e = 0 <= r ? ++e : --e) n.push(this.writeByte(t.charCodeAt(e)));
      return n;
    }, t.prototype.readShort = function () {
      return this.readInt16();
    }, t.prototype.writeShort = function (t) {
      return this.writeInt16(t);
    }, t.prototype.readLongLong = function () {
      var t, e, r, n, i, a, o, s;
      return t = this.readByte(), e = this.readByte(), r = this.readByte(), n = this.readByte(), i = this.readByte(), a = this.readByte(), o = this.readByte(), s = this.readByte(), 128 & t ? -1 * (72057594037927940 * (255 ^ t) + 281474976710656 * (255 ^ e) + 1099511627776 * (255 ^ r) + 4294967296 * (255 ^ n) + 16777216 * (255 ^ i) + 65536 * (255 ^ a) + 256 * (255 ^ o) + (255 ^ s) + 1) : 72057594037927940 * t + 281474976710656 * e + 1099511627776 * r + 4294967296 * n + 16777216 * i + 65536 * a + 256 * o + s;
    }, t.prototype.writeLongLong = function (t) {
      var e, r;
      return e = Math.floor(t / 4294967296), r = 4294967295 & t, this.writeByte(e >> 24 & 255), this.writeByte(e >> 16 & 255), this.writeByte(e >> 8 & 255), this.writeByte(255 & e), this.writeByte(r >> 24 & 255), this.writeByte(r >> 16 & 255), this.writeByte(r >> 8 & 255), this.writeByte(255 & r);
    }, t.prototype.readInt = function () {
      return this.readInt32();
    }, t.prototype.writeInt = function (t) {
      return this.writeInt32(t);
    }, t.prototype.read = function (t) {
      var e, r;
      for (e = [], r = 0; 0 <= t ? r < t : r > t; r = 0 <= t ? ++r : --r) e.push(this.readByte());
      return e;
    }, t.prototype.write = function (t) {
      var e, r, n, i;
      for (i = [], r = 0, n = t.length; r < n; r++) e = t[r], i.push(this.writeByte(e));
      return i;
    }, t;
  }(),
  ie = function () {
    var t;
    function e(t) {
      var e, r, n;
      for (this.scalarType = t.readInt(), this.tableCount = t.readShort(), this.searchRange = t.readShort(), this.entrySelector = t.readShort(), this.rangeShift = t.readShort(), this.tables = {}, r = 0, n = this.tableCount; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r) e = {
        tag: t.readString(4),
        checksum: t.readInt(),
        offset: t.readInt(),
        length: t.readInt()
      }, this.tables[e.tag] = e;
    }
    return e.prototype.encode = function (e) {
      var r, n, i, a, o, s, c, u, h, l, f, d, p;
      for (p in f = Object.keys(e).length, s = Math.log(2), h = 16 * Math.floor(Math.log(f) / s), a = Math.floor(h / s), u = 16 * f - h, (n = new ne()).writeInt(this.scalarType), n.writeShort(f), n.writeShort(h), n.writeShort(a), n.writeShort(u), i = 16 * f, c = n.pos + i, o = null, d = [], e) for (l = e[p], n.writeString(p), n.writeInt(t(l)), n.writeInt(c), n.writeInt(l.length), d = d.concat(l), "head" === p && (o = c), c += l.length; c % 4;) d.push(0), c++;
      return n.write(d), r = 2981146554 - t(n.data), n.pos = o + 8, n.writeUInt32(r), n.data;
    }, t = function (t) {
      var e, r, n, i;
      for (t = ve.call(t); t.length % 4;) t.push(0);
      for (n = new ne(t), r = 0, e = 0, i = t.length; e < i; e = e += 4) r += n.readUInt32();
      return 4294967295 & r;
    }, e;
  }(),
  ae = {}.hasOwnProperty,
  oe = function (t, e) {
    for (var r in e) ae.call(e, r) && (t[r] = e[r]);
    function n() {
      this.constructor = t;
    }
    return n.prototype = e.prototype, t.prototype = new n(), t.__super__ = e.prototype, t;
  };
re = function () {
  function t(t) {
    var e;
    this.file = t, e = this.file.directory.tables[this.tag], this.exists = !!e, e && (this.offset = e.offset, this.length = e.length, this.parse(this.file.contents));
  }
  return t.prototype.parse = function () {}, t.prototype.encode = function () {}, t.prototype.raw = function () {
    return this.exists ? (this.file.contents.pos = this.offset, this.file.contents.read(this.length)) : null;
  }, t;
}();
var se = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "head", e.prototype.parse = function (t) {
      return t.pos = this.offset, this.version = t.readInt(), this.revision = t.readInt(), this.checkSumAdjustment = t.readInt(), this.magicNumber = t.readInt(), this.flags = t.readShort(), this.unitsPerEm = t.readShort(), this.created = t.readLongLong(), this.modified = t.readLongLong(), this.xMin = t.readShort(), this.yMin = t.readShort(), this.xMax = t.readShort(), this.yMax = t.readShort(), this.macStyle = t.readShort(), this.lowestRecPPEM = t.readShort(), this.fontDirectionHint = t.readShort(), this.indexToLocFormat = t.readShort(), this.glyphDataFormat = t.readShort();
    }, e.prototype.encode = function (t) {
      var e;
      return (e = new ne()).writeInt(this.version), e.writeInt(this.revision), e.writeInt(this.checkSumAdjustment), e.writeInt(this.magicNumber), e.writeShort(this.flags), e.writeShort(this.unitsPerEm), e.writeLongLong(this.created), e.writeLongLong(this.modified), e.writeShort(this.xMin), e.writeShort(this.yMin), e.writeShort(this.xMax), e.writeShort(this.yMax), e.writeShort(this.macStyle), e.writeShort(this.lowestRecPPEM), e.writeShort(this.fontDirectionHint), e.writeShort(t), e.writeShort(this.glyphDataFormat), e.data;
    }, e;
  }(),
  ce = function () {
    function t(t, e) {
      var r, n, i, a, o, s, c, u, h, l, f, d, p, g, m, v, b;
      switch (this.platformID = t.readUInt16(), this.encodingID = t.readShort(), this.offset = e + t.readInt(), h = t.pos, t.pos = this.offset, this.format = t.readUInt16(), this.length = t.readUInt16(), this.language = t.readUInt16(), this.isUnicode = 3 === this.platformID && 1 === this.encodingID && 4 === this.format || 0 === this.platformID && 4 === this.format, this.codeMap = {}, this.format) {
        case 0:
          for (s = 0; s < 256; ++s) this.codeMap[s] = t.readByte();
          break;
        case 4:
          for (f = t.readUInt16(), l = f / 2, t.pos += 6, i = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), t.pos += 2, p = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), c = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), u = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= l ? e < l : e > l; s = 0 <= l ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), n = (this.length - t.pos + this.offset) / 2, o = function () {
            var e, r;
            for (r = [], s = e = 0; 0 <= n ? e < n : e > n; s = 0 <= n ? ++e : --e) r.push(t.readUInt16());
            return r;
          }(), s = m = 0, b = i.length; m < b; s = ++m) for (g = i[s], r = v = d = p[s]; d <= g ? v <= g : v >= g; r = d <= g ? ++v : --v) 0 === u[s] ? a = r + c[s] : 0 !== (a = o[u[s] / 2 + (r - d) - (l - s)] || 0) && (a += c[s]), this.codeMap[r] = 65535 & a;
      }
      t.pos = h;
    }
    return t.encode = function (t, e) {
      var r, n, i, a, o, s, c, u, h, l, f, d, p, g, m, v, b, y, w, N, L, A, x, S, _, P, k, I, F, C, j, O, B, M, E, q, D, R, T, U, z, H, W, V, G, Y;
      switch (I = new ne(), a = Object.keys(t).sort(function (t, e) {
        return t - e;
      }), e) {
        case "macroman":
          for (p = 0, g = function () {
            var t = [];
            for (d = 0; d < 256; ++d) t.push(0);
            return t;
          }(), v = {
            0: 0
          }, i = {}, F = 0, B = a.length; F < B; F++) null == v[W = t[n = a[F]]] && (v[W] = ++p), i[n] = {
            old: t[n],
            new: v[t[n]]
          }, g[n] = v[t[n]];
          return I.writeUInt16(1), I.writeUInt16(0), I.writeUInt32(12), I.writeUInt16(0), I.writeUInt16(262), I.writeUInt16(0), I.write(g), {
            charMap: i,
            subtable: I.data,
            maxGlyphID: p + 1
          };
        case "unicode":
          for (P = [], h = [], b = 0, v = {}, r = {}, m = c = null, C = 0, M = a.length; C < M; C++) null == v[w = t[n = a[C]]] && (v[w] = ++b), r[n] = {
            old: w,
            new: v[w]
          }, o = v[w] - n, null != m && o === c || (m && h.push(m), P.push(n), c = o), m = n;
          for (m && h.push(m), h.push(65535), P.push(65535), S = 2 * (x = P.length), A = 2 * Math.pow(Math.log(x) / Math.LN2, 2), l = Math.log(A / 2) / Math.LN2, L = 2 * x - A, s = [], N = [], f = [], d = j = 0, E = P.length; j < E; d = ++j) {
            if (_ = P[d], u = h[d], 65535 === _) {
              s.push(0), N.push(0);
              break;
            }
            if (_ - (k = r[_].new) >= 32768) for (s.push(0), N.push(2 * (f.length + x - d)), n = O = _; _ <= u ? O <= u : O >= u; n = _ <= u ? ++O : --O) f.push(r[n].new);else s.push(k - _), N.push(0);
          }
          for (I.writeUInt16(3), I.writeUInt16(1), I.writeUInt32(12), I.writeUInt16(4), I.writeUInt16(16 + 8 * x + 2 * f.length), I.writeUInt16(0), I.writeUInt16(S), I.writeUInt16(A), I.writeUInt16(l), I.writeUInt16(L), z = 0, q = h.length; z < q; z++) n = h[z], I.writeUInt16(n);
          for (I.writeUInt16(0), H = 0, D = P.length; H < D; H++) n = P[H], I.writeUInt16(n);
          for (V = 0, R = s.length; V < R; V++) o = s[V], I.writeUInt16(o);
          for (G = 0, T = N.length; G < T; G++) y = N[G], I.writeUInt16(y);
          for (Y = 0, U = f.length; Y < U; Y++) p = f[Y], I.writeUInt16(p);
          return {
            charMap: r,
            subtable: I.data,
            maxGlyphID: b + 1
          };
      }
    }, t;
  }(),
  ue = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "cmap", e.prototype.parse = function (t) {
      var e, r, n;
      for (t.pos = this.offset, this.version = t.readUInt16(), n = t.readUInt16(), this.tables = [], this.unicode = null, r = 0; 0 <= n ? r < n : r > n; r = 0 <= n ? ++r : --r) e = new ce(t, this.offset), this.tables.push(e), e.isUnicode && null == this.unicode && (this.unicode = e);
      return !0;
    }, e.encode = function (t, e) {
      var r, n;
      return null == e && (e = "macroman"), r = ce.encode(t, e), (n = new ne()).writeUInt16(0), n.writeUInt16(1), r.table = n.data.concat(r.subtable), r;
    }, e;
  }(),
  he = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "hhea", e.prototype.parse = function (t) {
      return t.pos = this.offset, this.version = t.readInt(), this.ascender = t.readShort(), this.decender = t.readShort(), this.lineGap = t.readShort(), this.advanceWidthMax = t.readShort(), this.minLeftSideBearing = t.readShort(), this.minRightSideBearing = t.readShort(), this.xMaxExtent = t.readShort(), this.caretSlopeRise = t.readShort(), this.caretSlopeRun = t.readShort(), this.caretOffset = t.readShort(), t.pos += 8, this.metricDataFormat = t.readShort(), this.numberOfMetrics = t.readUInt16();
    }, e;
  }(),
  le = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "OS/2", e.prototype.parse = function (t) {
      if (t.pos = this.offset, this.version = t.readUInt16(), this.averageCharWidth = t.readShort(), this.weightClass = t.readUInt16(), this.widthClass = t.readUInt16(), this.type = t.readShort(), this.ySubscriptXSize = t.readShort(), this.ySubscriptYSize = t.readShort(), this.ySubscriptXOffset = t.readShort(), this.ySubscriptYOffset = t.readShort(), this.ySuperscriptXSize = t.readShort(), this.ySuperscriptYSize = t.readShort(), this.ySuperscriptXOffset = t.readShort(), this.ySuperscriptYOffset = t.readShort(), this.yStrikeoutSize = t.readShort(), this.yStrikeoutPosition = t.readShort(), this.familyClass = t.readShort(), this.panose = function () {
        var e, r;
        for (r = [], e = 0; e < 10; ++e) r.push(t.readByte());
        return r;
      }(), this.charRange = function () {
        var e, r;
        for (r = [], e = 0; e < 4; ++e) r.push(t.readInt());
        return r;
      }(), this.vendorID = t.readString(4), this.selection = t.readShort(), this.firstCharIndex = t.readShort(), this.lastCharIndex = t.readShort(), this.version > 0 && (this.ascent = t.readShort(), this.descent = t.readShort(), this.lineGap = t.readShort(), this.winAscent = t.readShort(), this.winDescent = t.readShort(), this.codePageRange = function () {
        var e, r;
        for (r = [], e = 0; e < 2; e = ++e) r.push(t.readInt());
        return r;
      }(), this.version > 1)) return this.xHeight = t.readShort(), this.capHeight = t.readShort(), this.defaultChar = t.readShort(), this.breakChar = t.readShort(), this.maxContext = t.readShort();
    }, e;
  }(),
  fe = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "post", e.prototype.parse = function (t) {
      var e, r, n;
      switch (t.pos = this.offset, this.format = t.readInt(), this.italicAngle = t.readInt(), this.underlinePosition = t.readShort(), this.underlineThickness = t.readShort(), this.isFixedPitch = t.readInt(), this.minMemType42 = t.readInt(), this.maxMemType42 = t.readInt(), this.minMemType1 = t.readInt(), this.maxMemType1 = t.readInt(), this.format) {
        case 65536:
          break;
        case 131072:
          var i;
          for (r = t.readUInt16(), this.glyphNameIndex = [], i = 0; 0 <= r ? i < r : i > r; i = 0 <= r ? ++i : --i) this.glyphNameIndex.push(t.readUInt16());
          for (this.names = [], n = []; t.pos < this.offset + this.length;) e = t.readByte(), n.push(this.names.push(t.readString(e)));
          return n;
        case 151552:
          return r = t.readUInt16(), this.offsets = t.read(r);
        case 196608:
          break;
        case 262144:
          return this.map = function () {
            var e, r, n;
            for (n = [], i = e = 0, r = this.file.maxp.numGlyphs; 0 <= r ? e < r : e > r; i = 0 <= r ? ++e : --e) n.push(t.readUInt32());
            return n;
          }.call(this);
      }
    }, e;
  }(),
  de = function (t, e) {
    this.raw = t, this.length = t.length, this.platformID = e.platformID, this.encodingID = e.encodingID, this.languageID = e.languageID;
  },
  pe = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "name", e.prototype.parse = function (t) {
      var e, r, n, i, a, o, s, c, u, h, l;
      for (t.pos = this.offset, t.readShort(), e = t.readShort(), o = t.readShort(), r = [], i = 0; 0 <= e ? i < e : i > e; i = 0 <= e ? ++i : --i) r.push({
        platformID: t.readShort(),
        encodingID: t.readShort(),
        languageID: t.readShort(),
        nameID: t.readShort(),
        length: t.readShort(),
        offset: this.offset + o + t.readShort()
      });
      for (s = {}, i = u = 0, h = r.length; u < h; i = ++u) n = r[i], t.pos = n.offset, c = t.readString(n.length), a = new de(c, n), null == s[l = n.nameID] && (s[l] = []), s[n.nameID].push(a);
      this.strings = s, this.copyright = s[0], this.fontFamily = s[1], this.fontSubfamily = s[2], this.uniqueSubfamily = s[3], this.fontName = s[4], this.version = s[5];
      try {
        this.postscriptName = s[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
      } catch (t) {
        this.postscriptName = s[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g, "");
      }
      return this.trademark = s[7], this.manufacturer = s[8], this.designer = s[9], this.description = s[10], this.vendorUrl = s[11], this.designerUrl = s[12], this.license = s[13], this.licenseUrl = s[14], this.preferredFamily = s[15], this.preferredSubfamily = s[17], this.compatibleFull = s[18], this.sampleText = s[19];
    }, e;
  }(),
  ge = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "maxp", e.prototype.parse = function (t) {
      return t.pos = this.offset, this.version = t.readInt(), this.numGlyphs = t.readUInt16(), this.maxPoints = t.readUInt16(), this.maxContours = t.readUInt16(), this.maxCompositePoints = t.readUInt16(), this.maxComponentContours = t.readUInt16(), this.maxZones = t.readUInt16(), this.maxTwilightPoints = t.readUInt16(), this.maxStorage = t.readUInt16(), this.maxFunctionDefs = t.readUInt16(), this.maxInstructionDefs = t.readUInt16(), this.maxStackElements = t.readUInt16(), this.maxSizeOfInstructions = t.readUInt16(), this.maxComponentElements = t.readUInt16(), this.maxComponentDepth = t.readUInt16();
    }, e;
  }(),
  me = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "hmtx", e.prototype.parse = function (t) {
      var e, r, n, i, a, o, s;
      for (t.pos = this.offset, this.metrics = [], e = 0, o = this.file.hhea.numberOfMetrics; 0 <= o ? e < o : e > o; e = 0 <= o ? ++e : --e) this.metrics.push({
        advance: t.readUInt16(),
        lsb: t.readInt16()
      });
      for (n = this.file.maxp.numGlyphs - this.file.hhea.numberOfMetrics, this.leftSideBearings = function () {
        var r, i;
        for (i = [], e = r = 0; 0 <= n ? r < n : r > n; e = 0 <= n ? ++r : --r) i.push(t.readInt16());
        return i;
      }(), this.widths = function () {
        var t, e, r, n;
        for (n = [], t = 0, e = (r = this.metrics).length; t < e; t++) i = r[t], n.push(i.advance);
        return n;
      }.call(this), r = this.widths[this.widths.length - 1], s = [], e = a = 0; 0 <= n ? a < n : a > n; e = 0 <= n ? ++a : --a) s.push(this.widths.push(r));
      return s;
    }, e.prototype.forGlyph = function (t) {
      return t in this.metrics ? this.metrics[t] : {
        advance: this.metrics[this.metrics.length - 1].advance,
        lsb: this.leftSideBearings[t - this.metrics.length]
      };
    }, e;
  }(),
  ve = [].slice,
  be = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "glyf", e.prototype.parse = function () {
      return this.cache = {};
    }, e.prototype.glyphFor = function (t) {
      var e, r, n, i, a, o, s, c, u, h;
      return t in this.cache ? this.cache[t] : (i = this.file.loca, e = this.file.contents, r = i.indexOf(t), 0 === (n = i.lengthOf(t)) ? this.cache[t] = null : (e.pos = this.offset + r, a = (o = new ne(e.read(n))).readShort(), c = o.readShort(), h = o.readShort(), s = o.readShort(), u = o.readShort(), this.cache[t] = -1 === a ? new we(o, c, h, s, u) : new ye(o, a, c, h, s, u), this.cache[t]));
    }, e.prototype.encode = function (t, e, r) {
      var n, i, a, o, s;
      for (a = [], i = [], o = 0, s = e.length; o < s; o++) n = t[e[o]], i.push(a.length), n && (a = a.concat(n.encode(r)));
      return i.push(a.length), {
        table: a,
        offsets: i
      };
    }, e;
  }(),
  ye = function () {
    function t(t, e, r, n, i, a) {
      this.raw = t, this.numberOfContours = e, this.xMin = r, this.yMin = n, this.xMax = i, this.yMax = a, this.compound = !1;
    }
    return t.prototype.encode = function () {
      return this.raw.data;
    }, t;
  }(),
  we = function () {
    function t(t, e, r, n, i) {
      var a, o;
      for (this.raw = t, this.xMin = e, this.yMin = r, this.xMax = n, this.yMax = i, this.compound = !0, this.glyphIDs = [], this.glyphOffsets = [], a = this.raw; o = a.readShort(), this.glyphOffsets.push(a.pos), this.glyphIDs.push(a.readUInt16()), 32 & o;) a.pos += 1 & o ? 4 : 2, 128 & o ? a.pos += 8 : 64 & o ? a.pos += 4 : 8 & o && (a.pos += 2);
    }
    return 1, 8, 32, 64, 128, t.prototype.encode = function () {
      var t, e, r;
      for (e = new ne(ve.call(this.raw.data)), t = 0, r = this.glyphIDs.length; t < r; ++t) e.pos = this.glyphOffsets[t];
      return e.data;
    }, t;
  }(),
  Ne = function (t) {
    function e() {
      return e.__super__.constructor.apply(this, arguments);
    }
    return oe(e, re), e.prototype.tag = "loca", e.prototype.parse = function (t) {
      var e, r;
      return t.pos = this.offset, e = this.file.head.indexToLocFormat, this.offsets = 0 === e ? function () {
        var e, n;
        for (n = [], r = 0, e = this.length; r < e; r += 2) n.push(2 * t.readUInt16());
        return n;
      }.call(this) : function () {
        var e, n;
        for (n = [], r = 0, e = this.length; r < e; r += 4) n.push(t.readUInt32());
        return n;
      }.call(this);
    }, e.prototype.indexOf = function (t) {
      return this.offsets[t];
    }, e.prototype.lengthOf = function (t) {
      return this.offsets[t + 1] - this.offsets[t];
    }, e.prototype.encode = function (t, e) {
      for (var r = new Uint32Array(this.offsets.length), n = 0, i = 0, a = 0; a < r.length; ++a) if (r[a] = n, i < e.length && e[i] == a) {
        ++i, r[a] = n;
        var o = this.offsets[a],
          s = this.offsets[a + 1] - o;
        s > 0 && (n += s);
      }
      for (var c = new Array(4 * r.length), u = 0; u < r.length; ++u) c[4 * u + 3] = 255 & r[u], c[4 * u + 2] = (65280 & r[u]) >> 8, c[4 * u + 1] = (16711680 & r[u]) >> 16, c[4 * u] = (4278190080 & r[u]) >> 24;
      return c;
    }, e;
  }(),
  Le = function () {
    function t(t) {
      this.font = t, this.subset = {}, this.unicodes = {}, this.next = 33;
    }
    return t.prototype.generateCmap = function () {
      var t, e, r, n, i;
      for (e in n = this.font.cmap.tables[0].codeMap, t = {}, i = this.subset) r = i[e], t[e] = n[r];
      return t;
    }, t.prototype.glyphsFor = function (t) {
      var e, r, n, i, a, o, s;
      for (n = {}, a = 0, o = t.length; a < o; a++) n[i = t[a]] = this.font.glyf.glyphFor(i);
      for (i in e = [], n) (null != (r = n[i]) ? r.compound : void 0) && e.push.apply(e, r.glyphIDs);
      if (e.length > 0) for (i in s = this.glyphsFor(e)) r = s[i], n[i] = r;
      return n;
    }, t.prototype.encode = function (t, e) {
      var r, n, i, a, o, s, c, u, h, l, f, d, p, g, m;
      for (n in r = ue.encode(this.generateCmap(), "unicode"), a = this.glyphsFor(t), f = {
        0: 0
      }, m = r.charMap) f[(s = m[n]).old] = s.new;
      for (d in l = r.maxGlyphID, a) d in f || (f[d] = l++);
      return u = function (t) {
        var e, r;
        for (e in r = {}, t) r[t[e]] = e;
        return r;
      }(f), h = Object.keys(u).sort(function (t, e) {
        return t - e;
      }), p = function () {
        var t, e, r;
        for (r = [], t = 0, e = h.length; t < e; t++) o = h[t], r.push(u[o]);
        return r;
      }(), i = this.font.glyf.encode(a, p, f), c = this.font.loca.encode(i.offsets, p), g = {
        cmap: this.font.cmap.raw(),
        glyf: i.table,
        loca: c,
        hmtx: this.font.hmtx.raw(),
        hhea: this.font.hhea.raw(),
        maxp: this.font.maxp.raw(),
        post: this.font.post.raw(),
        name: this.font.name.raw(),
        head: this.font.head.encode(e)
      }, this.font.os2.exists && (g["OS/2"] = this.font.os2.raw()), this.font.directory.encode(g);
    }, t;
  }();
E.API.PDFObject = function () {
  var t;
  function e() {}
  return t = function (t, e) {
    return (Array(e + 1).join("0") + t).slice(-e);
  }, e.convert = function (r) {
    var n, i, a, o;
    if (Array.isArray(r)) return "[" + function () {
      var t, i, a;
      for (a = [], t = 0, i = r.length; t < i; t++) n = r[t], a.push(e.convert(n));
      return a;
    }().join(" ") + "]";
    if ("string" == typeof r) return "/" + r;
    if (null != r ? r.isString : void 0) return "(" + r + ")";
    if (r instanceof Date) return "(D:" + t(r.getUTCFullYear(), 4) + t(r.getUTCMonth(), 2) + t(r.getUTCDate(), 2) + t(r.getUTCHours(), 2) + t(r.getUTCMinutes(), 2) + t(r.getUTCSeconds(), 2) + "Z)";
    if ("[object Object]" === {}.toString.call(r)) {
      for (i in a = ["<<"], r) o = r[i], a.push("/" + i + " " + e.convert(o));
      return a.push(">>"), a.join("\n");
    }
    return "" + r;
  }, e;
}();
var _default = E;
exports.default = _default;
},{"@babel/runtime/helpers/typeof":"../node_modules/@babel/runtime/helpers/typeof.js","fflate":"../node_modules/fflate/esm/browser.js","_bundle_loader":"../node_modules/parcel-bundler/src/builtins/bundle-loader.js","html2canvas":[["html2canvas.f0b08142.js","../node_modules/html2canvas/dist/html2canvas.js"],"html2canvas.f0b08142.js.map","../node_modules/html2canvas/dist/html2canvas.js"],"dompurify":[["purify.76297b50.js","../node_modules/dompurify/dist/purify.js"],"purify.76297b50.js.map","../node_modules/dompurify/dist/purify.js"],"canvg":[["index.es.f2fba6b6.js","../node_modules/canvg/lib/index.es.js"],"index.es.f2fba6b6.js.map","../node_modules/canvg/lib/index.es.js"]}],"index.ts":[function(require,module,exports) {
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var fabric_1 = require("fabric");
var pdfjsLib = __importStar(require("pdfjs-dist"));
// // One of the following themes
// import "@simonwep/pickr/dist/themes/classic.min.css"; // 'classic' theme
// import "@simonwep/pickr/dist/themes/monolith.min.css"; // 'monolith' theme
// import "@simonwep/pickr/dist/themes/nano.min.css"; // 'nano' theme
var jspdf_1 = require("jspdf");
if (!pdfjsLib.GlobalWorkerOptions.workerSrc) {
  var WORKER_URL = "//cdnjs.cloudflare.com/ajax/libs/pdf.js/".concat(pdfjsLib.version, "/pdf.worker.min.js");
  pdfjsLib.GlobalWorkerOptions.workerSrc = WORKER_URL;
}
// // Modern or es5 bundle (pay attention to the note below!)
// import Pickr from "@simonwep/pickr";
// // Simple example, see optional options for more configuration.
// const pickr = Pickr.create({
//   el: ".color-picker",
//   theme: "classic", // or 'monolith', or 'nano'
//   swatches: [
//     "rgba(244, 67, 54, 1)",
//     "rgba(233, 30, 99, 0.95)",
//     "rgba(156, 39, 176, 0.9)",
//     "rgba(103, 58, 183, 0.85)",
//     "rgba(63, 81, 181, 0.8)",
//     "rgba(33, 150, 243, 0.75)",
//     "rgba(3, 169, 244, 0.7)",
//     "rgba(0, 188, 212, 0.7)",
//     "rgba(0, 150, 136, 0.75)",
//     "rgba(76, 175, 80, 0.8)",
//     "rgba(139, 195, 74, 0.85)",
//     "rgba(205, 220, 57, 0.9)",
//     "rgba(255, 235, 59, 0.95)",
//     "rgba(255, 193, 7, 1)",
//   ],
//   components: {
//     // Main components
//     preview: true,
//     opacity: true,
//     hue: true,
//     // Input / output Options
//     interaction: {
//       hex: true,
//       rgba: true,
//       hsla: true,
//       hsva: true,
//       cmyk: true,
//       input: true,
//       clear: true,
//       save: true,
//     },
//   },
// });
// if (!pdfjsLib.GlobalWorkerOptions.workerSrc) {
//   const WORKER_URL = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjsLib.version}/pdf.worker.min.js`;
//   pdfjsLib.GlobalWorkerOptions.workerSrc = WORKER_URL;
// }
// import { jsPDF } from "jspdf";
function toggleEditor(show) {
  var textControls = document.getElementById("wysiwyg-editor-container");
  textControls.style.display = show ? "block" : "none";
}
var isEditing = false;
//     // Render the page on the canvas
//     var renderTask = page.render({
//       canvasContext: context,
//       viewport: viewport,
//     });
//     renderTask.promise.then(function () {
//       // Save the canvas as an image
//       var canvasImg = canvas.toDataURL();
//       // Pass the canvas to Fabric.js
//       var fabricCanvas = new fabric.Canvas("pdf-canvas", {
//         isDrawingMode: false,
//       });
//       // Load the image back into the fabric canvas
//       fabric.Image.fromURL(canvasImg, function (img) {
//         img.selectable = false;
//         // Add the image back to the canvas
//         fabricCanvas.add(img);
//       });
//
//       // Add an event handler for the button click
//       document
//         .getElementById("save-pdf")
//         .addEventListener("click", function () {
//           // Create a new jsPDF instance
//           var doc = new jsPDF();
//           // Get the content of the canvas as an image
//           var imgData = fabricCanvas.toDataURL({ format: "png" });
//           // Add the image to the PDF
//           doc.addImage(imgData, 0, 0, 0, 0);
//           // Save the PDF
//           doc.save("download.pdf");
//         });
//       document
//         .getElementById("add-text")
//         .addEventListener("click", function () {
//           // Add a text object
//           var text = new fabric.IText("Hello, world!", {
//             left: 100,
//             top: 100,
//           });
//           fabricCanvas.add(text);
//         });
//       document
//         .getElementById("font-size")
//         .addEventListener("change", function () {
//           console.log("asdasd");
//           updateStyles();
//         });
//       document
//         .getElementById("font-family")
//         .addEventListener("change", function () {
//           updateStyles();
//         });
//       fabricCanvas.on("selection:created", function (options) {
//         const activeObject = fabricCanvas.getActiveObject();
//         console.log(activeObject, options);
//         var textControls = document.getElementById("wysiwyg-editor-container");
//         toggleEditor(true);
//         updateStyles();
//       });
//       fabricCanvas.on("selection:cleared", function () {
//         console.log("selection:cleared");
//         toggleEditor(false);
//       });
//       let color: string = "black";
//       const updateStyles = (items?: {
//         bold?: boolean;
//         italic?: boolean;
//         underline?: boolean;
//       }) => {
//         var activeObject = fabricCanvas.getActiveObject();
//         console.log(items?.underline);
//         // If there is a selected object and it's a text object, update its styles
//         if (activeObject) {
//           activeObject.set({
//             // @ts-ignore
//             fontSize: parseInt(document.getElementById("font-size").value),
//             fill: color,
//             // @ts-ignore
//             fontFamily: document.getElementById("font-family").value,
//             fontWeight: items?.bold ? "bold" : "normal",
//             fontStyle: items?.italic ? "italic" : "normal",
//             textDecoration: items?.underline ? "underline" : "",
//           });
//           fabricCanvas.renderAll();
//         }
//       };
//       document
//         .getElementById("boldButton")
//         .addEventListener("click", function () {
//           updateStyles({
//             bold: true,
//           });
//         });
//       document
//         .getElementById("italicButton")
//         .addEventListener("click", function () {
//           updateStyles({
//             italic: true,
//           });
//         });
//       document
//         .getElementById("underlineButton")
//         .addEventListener("click", function () {
//           updateStyles({
//             underline: true,
//           });
//         });
//       pickr.on("change", (e: any) => {
//         console.log(e);
//         color = e.toRGBA().toString();
//         updateStyles();
//       });
//       document
//         .getElementById("loadImage")
//         .addEventListener("click", function () {
//           var imageUrl = document.getElementById("imageUrl").value;
//           fabric.Image.fromURL(imageUrl, function (img) {
//             // Scale the image to 50% of its original size
//             var oImg = img.set({ left: 0, top: 0, angle: 0 }).scale(0.5);
//             fabricCanvas.add(oImg).renderAll();
//           });
//         });
//       document
//         .getElementById("imageUpload")
//         .addEventListener("change", function (e: any) {
//           var file = e.target.files[0];
//           var reader = new FileReader();
//           reader.onload = function (f) {
//             var data: any = f.target.result;
//             fabric.Image.fromURL(data, function (img: any) {
//               var oImg = img.set({ left: 0, top: 0 }).scale(1);
//               fabricCanvas.add(oImg).renderAll();
//               var a = fabricCanvas.setActiveObject(oImg);
//             });
//           };
//           reader.readAsDataURL(file);
//         });
//     });
//   });
// });
var url = "https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/web/compressed.tracemonkey-pldi-09.pdf";
var scale = 1.5;
var fabricCanvases = [];
// let selectedCanvas; // This variable will hold the currently selected Fabric.js canvas
// // Function to select a Fabric.js canvas
// function selectCanvas(canvas) {
//   selectedCanvas = canvas;
// }
// const selectAllCanvasesInDom = () => {
//   // Call the selectCanvas function when a canvas is selected
//   // For example, when a canvas element is clicked
//   let canvases = document.querySelectorAll('[id^="canvas-id-"]');
//   canvases.forEach((canvasElement) => {
//     canvasElement.addEventListener("click", () => {
//       // Assume that fabricCanvases is the array holding all Fabric.js canvas instances
//       let fabricCanvas = fabricCanvases.find(
//         (canvas) => canvas.lowerCanvasEl === canvasElement
//       );
//       selectCanvas(fabricCanvas);
//     });
//   });
// };
// Function to add new text to the selected Fabric.js canvas
function addTextToSelectedCanvas(text) {
  console.log(fabricCanvases);
  // let fabricCanvas = fabricCanvases.find(
  //   (canvas) => canvas.lowerCanvasEl === canvasElement
  // );
  // if (selectedCanvas) {
  //   let text = new fabric.Text(text, { left: 10, top: 10 });
  //   selectedCanvas.add(text);
  //   selectedCanvas.renderAll();
  // } else {
  //   console.log("No canvas is currently selected");
  // }
}
// Call the addTextToSelectedCanvas function to add new text to the selected canvas
// For example, when a button is clicked
document.getElementById("add-text").addEventListener("click", function () {
  addTextToSelectedCanvas("New text");
});
function getPageAsImage(pdf, pageNumber) {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
    var page, viewport, canvasId, canvas, ctx, renderTask;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return pdf.getPage(pageNumber);
        case 2:
          page = _context.sent;
          viewport = page.getViewport({
            scale: scale
          });
          canvasId = "canvas-id-".concat(pageNumber); // Create a new canvas for each page
          canvas = document.createElement("canvas");
          canvas.id = canvasId;
          canvas.style.marginBottom = "20px";
          document.getElementById("pdf-container").appendChild(canvas);
          ctx = canvas.getContext("2d");
          canvas.height = viewport.height;
          canvas.width = viewport.width;
          // Render the page on the canvas
          renderTask = page.render({
            canvasContext: ctx,
            viewport: viewport
          });
          renderTask.promise.then(function () {
            // Save the canvas as an image
            var canvasImg = canvas.toDataURL();
            // Pass the canvas to Fabric.js
            var fabricCanvas = new fabric_1.fabric.Canvas(canvasId, {
              isDrawingMode: false
            });
            // Load the image back into the fabric canvas
            fabric_1.fabric.Image.fromURL(canvasImg, function (img) {
              // Add the image back to the canvas
              // img.selectable = false;
              fabricCanvas.add(img);
            });
            fabricCanvases.push(fabricCanvas);
            //  when the delete key is pressed, remove the currently active object
            window.addEventListener("keydown", function (e) {
              // key code 46 is the delete key
              // key code 8 is the backspace key
              if ((e.keyCode === 46 || e.keyCode === 8) && !isEditing) {
                var activeObject = fabricCanvas.getActiveObject();
                if (activeObject) {
                  fabricCanvas.remove(activeObject);
                }
              }
            });
            document.getElementById("add-text").addEventListener("click", function () {
              // Add a text object
              var text = new fabric_1.fabric.IText("Hello, world!", {
                left: 100,
                top: 100
              });
              fabricCanvas.add(text);
            });
            fabricCanvas.on("text:editing:entered", function (options) {
              isEditing = true; // Set the flag to true when editing starts
              toggleEditor(true);
            });
            fabricCanvas.on("text:editing:exited", function () {
              isEditing = false; // Set the flag to false when editing ends
              toggleEditor(false);
            });
          });
          // return canvas.toDataURL();
        case 14:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
}
document.getElementById("generate-pdf").addEventListener("click", function () {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
    var pdf, pages, i;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return pdfjsLib.getDocument(url).promise;
        case 2:
          pdf = _context2.sent;
          pages = [];
          for (i = 1; i <= pdf.numPages; i++) {
            pages.push(getPageAsImage(pdf, i));
          }
        case 5:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
});
document.getElementById("add-page-pdf").addEventListener("click", function () {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
    var canvasId, canvas, canvasImg, fabricCanvas;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          canvasId = "canvas-id-".concat(16); // Create a new canvas for each page
          canvas = document.createElement("canvas");
          canvas.id = canvasId;
          document.body.appendChild(canvas);
          canvas.height = 1188;
          canvas.width = 918;
          // Save the canvas as an image
          canvasImg = canvas.toDataURL(); // Pass the canvas to Fabric.js
          fabricCanvas = new fabric_1.fabric.Canvas(canvasId, {
            isDrawingMode: false
          });
          fabricCanvas.backgroundColor = "white";
          fabricCanvas.renderAll();
          // Load the image back into the fabric canvas
          fabric_1.fabric.Image.fromURL(canvasImg, function (img) {
            // Add the image back to the canvas
            fabricCanvas.add(img);
          });
          fabricCanvases.push(fabricCanvas);
        case 12:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
});
document.getElementById("save-pdf").addEventListener("click", function () {
  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
    var canvases, pdf, i, canvas, imageUrl, aspectRatio, newWidth, newHeight;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          canvases = document.querySelectorAll('[id^="canvas-id-"]'); // Initialize a new jsPDF document
          pdf = new jspdf_1.jsPDF(); // Loop over the range of page numbers
          for (i = 0; i < canvases.length; i++) {
            // Generate the id for the canvas
            // Get the canvas with the generated id
            canvas = canvases[i];
            imageUrl = canvas.toDataURL("image/jpeg", 0.8);
            aspectRatio = canvas.width / canvas.height;
            newWidth = 180; // or whatever width you choose
            newHeight = newWidth / aspectRatio; // Add the image to the PDF document
            // Note: adjust the position and dimensions as needed
            pdf.addImage(imageUrl, "JPEG", 15, 40, 180, 160);
            // If this is not the last page, add a new page to the PDF document
            if (i < canvases.length - 1) {
              pdf.addPage();
            }
          }
          // Save the PDF document
          pdf.save("output.pdf");
        case 4:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
});
},{"fabric":"../node_modules/fabric/dist/fabric.js","pdfjs-dist":"../node_modules/pdfjs-dist/build/pdf.js","jspdf":"../node_modules/jspdf/dist/jspdf.es.min.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}
module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "57756" + '/');
  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);
    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);
          if (didAccept) {
            handled = true;
          }
        }
      });

      // Enable HMR for CSS by default.
      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });
      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }
    if (data.type === 'reload') {
      ws.close();
      ws.onclose = function () {
        location.reload();
      };
    }
    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }
    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}
function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);
  if (overlay) {
    overlay.remove();
  }
}
function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID;

  // html encode message and stack trace
  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}
function getParents(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return [];
  }
  var parents = [];
  var k, d, dep;
  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];
      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }
  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }
  return parents;
}
function hmrApply(bundle, asset) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}
function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;
  if (!modules) {
    return;
  }
  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }
  if (checkedAssets[id]) {
    return;
  }
  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }
  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}
function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};
  if (cached) {
    cached.hot.data = bundle.hotData;
  }
  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }
  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];
  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });
    return true;
  }
}
},{}],"../node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js":[function(require,module,exports) {
module.exports = function loadJSBundle(bundle) {
  return new Promise(function (resolve, reject) {
    var script = document.createElement('script');
    script.async = true;
    script.type = 'text/javascript';
    script.charset = 'utf-8';
    script.src = bundle;
    script.onerror = function (e) {
      script.onerror = script.onload = null;
      reject(e);
    };
    script.onload = function () {
      script.onerror = script.onload = null;
      resolve();
    };
    document.getElementsByTagName('head')[0].appendChild(script);
  });
};
},{}],0:[function(require,module,exports) {
var b=require("../node_modules/parcel-bundler/src/builtins/bundle-loader.js");b.register("js",require("../node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js"));
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js",0,"index.ts"], null)
//# sourceMappingURL=/src.77de5100.js.map